/* Generated by Cython 3.0.9 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [],
        "language": "c++",
        "name": "graph",
        "sources": [
            "D:\\OneDrive\\0101 Python Module Dev\\SNAPy\\SNAPy\\SGACy\\graph.pyx"
        ]
    },
    "module_name": "graph"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#if defined(CYTHON_LIMITED_API) && CYTHON_LIMITED_API
#define __PYX_EXTRA_ABI_MODULE_NAME "limited"
#else
#define __PYX_EXTRA_ABI_MODULE_NAME ""
#endif
#define CYTHON_ABI "3_0_9" __PYX_EXTRA_ABI_MODULE_NAME
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x030009F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#define __PYX_LIMITED_VERSION_HEX PY_VERSION_HEX
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(CYTHON_LIMITED_API)
  #ifdef Py_LIMITED_API
    #undef __PYX_LIMITED_VERSION_HEX
    #define __PYX_LIMITED_VERSION_HEX Py_LIMITED_API
  #endif
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 1
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(Py_GIL_DISABLED) || defined(Py_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000 && PY_VERSION_HEX < 0x030C00A6)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #if PY_VERSION_HEX < 0x030400a1
    #undef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #elif !defined(CYTHON_USE_TP_FINALIZE)
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #if PY_VERSION_HEX < 0x030600B1
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #if PY_VERSION_HEX < 0x030700A3
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(maybe_unused)
        #define CYTHON_UNUSED [[maybe_unused]]
      #endif
    #endif
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_USE_CPP_STD_MOVE
  #if defined(__cplusplus) && (\
    __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600))
    #define CYTHON_USE_CPP_STD_MOVE 1
  #else
    #define CYTHON_USE_CPP_STD_MOVE 0
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(fallthrough)
        #define CYTHON_FALLTHROUGH [[fallthrough]]
      #endif
    #endif
    #ifndef CYTHON_FALLTHROUGH
      #if __has_cpp_attribute(clang::fallthrough)
        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
      #elif __has_cpp_attribute(gnu::fallthrough)
        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
      #endif
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif
#ifdef __cplusplus
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)
#else
  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)
#endif
#if CYTHON_COMPILING_IN_PYPY == 1
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)
#else
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)
#endif
#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(const U& other) const { return *ptr == other; }
    template<typename U> bool operator !=(const U& other) const { return *ptr != other; }
    template<typename U> bool operator==(const __Pyx_FakeReference<U>& other) const { return *ptr == *other.ptr; }
    template<typename U> bool operator!=(const __Pyx_FakeReference<U>& other) const { return *ptr != *other.ptr; }
  private:
    T *ptr;
};

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if CYTHON_COMPILING_IN_LIMITED_API
    static CYTHON_INLINE PyObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *exception_table = NULL;
        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;
        #if __PYX_LIMITED_VERSION_HEX < 0x030B0000
        PyObject *version_info;
        PyObject *py_minor_version = NULL;
        #endif
        long minor_version = 0;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        #if __PYX_LIMITED_VERSION_HEX >= 0x030B0000
        minor_version = 11;
        #else
        if (!(version_info = PySys_GetObject("version_info"))) goto end;
        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;
        minor_version = PyLong_AsLong(py_minor_version);
        Py_DECREF(py_minor_version);
        if (minor_version == -1 && PyErr_Occurred()) goto end;
        #endif
        if (!(types_module = PyImport_ImportModule("types"))) goto end;
        if (!(code_type = PyObject_GetAttrString(types_module, "CodeType"))) goto end;
        if (minor_version <= 7) {
            (void)p;
            result = PyObject_CallFunction(code_type, "iiiiiOOOOOOiOO", a, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else if (minor_version <= 10) {
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else {
            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);
        }
    end:
        Py_XDECREF(code_type);
        Py_XDECREF(exception_table);
        Py_XDECREF(types_module);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return result;
    }
    #ifndef CO_OPTIMIZED
    #define CO_OPTIMIZED 0x0001
    #endif
    #ifndef CO_NEWLOCALS
    #define CO_NEWLOCALS 0x0002
    #endif
    #ifndef CO_VARARGS
    #define CO_VARARGS 0x0004
    #endif
    #ifndef CO_VARKEYWORDS
    #define CO_VARKEYWORDS 0x0008
    #endif
    #ifndef CO_ASYNC_GENERATOR
    #define CO_ASYNC_GENERATOR 0x0200
    #endif
    #ifndef CO_GENERATOR
    #define CO_GENERATOR 0x0020
    #endif
    #ifndef CO_COROUTINE
    #define CO_COROUTINE 0x0080
    #endif
#elif PY_VERSION_HEX >= 0x030B0000
  static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
    PyCodeObject *result;
    PyObject *empty_bytes = PyBytes_FromStringAndSize("", 0);
    if (!empty_bytes) return NULL;
    result =
      #if PY_VERSION_HEX >= 0x030C0000
        PyUnstable_Code_NewWithPosOnlyArgs
      #else
        PyCode_NewWithPosOnlyArgs
      #endif
        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, empty_bytes);
    Py_DECREF(empty_bytes);
    return result;
  }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef CO_COROUTINE
  #define CO_COROUTINE 0x80
#endif
#ifndef CO_ASYNC_GENERATOR
  #define CO_ASYNC_GENERATOR 0x200
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef Py_TPFLAGS_SEQUENCE
  #define Py_TPFLAGS_SEQUENCE 0
#endif
#ifndef Py_TPFLAGS_MAPPING
  #define Py_TPFLAGS_MAPPING 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #if PY_VERSION_HEX >= 0x030d00A4
  #  define __Pyx_PyCFunctionFast PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords PyCFunctionFastWithKeywords
  #else
  #  define __Pyx_PyCFunctionFast _PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
  #endif
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_MAJOR_VERSION >= 0x030900B1
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_CheckExact(func)
#else
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_Check(func)
#endif
#define __Pyx_CyOrPyCFunction_Check(func)  PyCFunction_Check(func)
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  (((PyCFunctionObject*)(func))->m_ml->ml_meth)
#elif !CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  PyCFunction_GET_FUNCTION(func)
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FLAGS(func)  (((PyCFunctionObject*)(func))->m_ml->ml_flags)
static CYTHON_INLINE PyObject* __Pyx_CyOrPyCFunction_GET_SELF(PyObject *func) {
    return (__Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_STATIC) ? NULL : ((PyCFunctionObject*)func)->m_self;
}
#endif
static CYTHON_INLINE int __Pyx__IsSameCFunction(PyObject *func, void *cfunc) {
#if CYTHON_COMPILING_IN_LIMITED_API
    return PyCFunction_Check(func) && PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
#else
    return PyCFunction_Check(func) && PyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
#endif
}
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCFunction(func, cfunc)
#if __PYX_LIMITED_VERSION_HEX < 0x030900B1
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyThreadState_Current PyThreadState_GetUnchecked()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE(obj), name, func_ctype)
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if PY_MAJOR_VERSION < 3
    #if CYTHON_COMPILING_IN_PYPY
        #if PYPY_VERSION_NUM < 0x07030600
            #if defined(__cplusplus) && __cplusplus >= 201402L
                [[deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")]]
            #elif defined(__GNUC__) || defined(__clang__)
                __attribute__ ((__deprecated__("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")))
            #elif defined(_MSC_VER)
                __declspec(deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6"))
            #endif
            static CYTHON_INLINE int PyGILState_Check(void) {
                return 0;
            }
        #else  // PYPY_VERSION_NUM < 0x07030600
        #endif  // PYPY_VERSION_NUM < 0x07030600
    #else
        static CYTHON_INLINE int PyGILState_Check(void) {
            PyThreadState * tstate = _PyThreadState_Current;
            return tstate && (tstate == PyGILState_GetThisThreadState());
        }
    #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000 || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && PY_VERSION_HEX < 0x030d0000 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyObject_GenericSetAttr((PyObject*)tp, k, v)
#else
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyDict_SetItem(tp->tp_dict, k, v)
#endif
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE((PyObject*)obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535U : 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = (Py_UNICODE) ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_ITEM(o, i) PySequence_ITEM(o, i)
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) (PyTuple_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyList_SET_ITEM(o, i, v) (PyList_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_GET_SIZE(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_GET_SIZE(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_GET_SIZE(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_GET_SIZE(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_GET_SIZE(o)
#else
  #define __Pyx_PySequence_ITEM(o, i) PySequence_GetItem(o, i)
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) PyTuple_SetItem(o, i, v)
  #define __Pyx_PyList_SET_ITEM(o, i, v) PyList_SetItem(o, i, v)
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_Size(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_Size(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_Size(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_Size(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_Size(o)
#endif
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyImport_AddModuleRef(name) PyImport_AddModuleRef(name)
#else
  static CYTHON_INLINE PyObject *__Pyx_PyImport_AddModuleRef(const char *name) {
      PyObject *module = PyImport_AddModule(name);
      Py_XINCREF(module);
      return module;
  }
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define __Pyx_Py3Int_Check(op)       PyLong_Check(op)
  #define __Pyx_Py3Int_CheckExact(op)  PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#else
  #define __Pyx_Py3Int_Check(op)       (PyLong_Check(op) || PyInt_Check(op))
  #define __Pyx_Py3Int_CheckExact(op)  (PyLong_CheckExact(op) || PyInt_CheckExact(op))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__;  (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#define __PYX_HAVE__graph
#define __PYX_HAVE_API__graph
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <queue>
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <algorithm>
#include <vector>
#include <string.h>
#include <string>
#include <math.h>
#include <stdlib.h>
#include <stdint.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s);
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char*);
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_VERSION_HEX >= 0x030C00A7
  #ifndef _PyLong_SIGN_MASK
    #define _PyLong_SIGN_MASK 3
  #endif
  #ifndef _PyLong_NON_SIZE_BITS
    #define _PyLong_NON_SIZE_BITS 3
  #endif
  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)
  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))
  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)
  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))
  #define __Pyx_PyLong_SignedDigitCount(x)\
        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))
  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)
    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)
    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)
  #else
    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))
    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])
  #endif
  typedef Py_ssize_t  __Pyx_compact_pylong;
  typedef size_t  __Pyx_compact_upylong;
  #else
  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)
  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)
  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))
  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)
  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)
  #define __Pyx_PyLong_CompactValue(x)\
        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))
  typedef sdigit  __Pyx_compact_pylong;
  typedef digit  __Pyx_compact_upylong;
  #endif
  #if PY_VERSION_HEX >= 0x030C00A5
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)
  #else
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)
  #endif
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
#include <string.h>
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = (char) c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#include <string.h>
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "graph.pyx",
  "<stringsource>",
};
/* #### Code section: utility_code_proto_before_types ### */
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* #### Code section: numeric_typedefs ### */
/* #### Code section: complex_type_declarations ### */
/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_5graph_PriorityQueue_NR;
struct __pyx_obj_5graph_GraphCy;
struct __pyx_obj_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple;
struct __pyx_obj_5graph___pyx_scope_struct_1_genexpr;
struct __pyx_obj_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple;
struct __pyx_obj_5graph___pyx_scope_struct_3_genexpr;
struct __pyx_obj_5graph___pyx_scope_struct_4___reduce_ex__;
struct __pyx_obj_5graph___pyx_scope_struct_5_genexpr;
struct __pyx_obj_5graph___pyx_scope_struct_6_genexpr;
struct __pyx_obj_5graph___pyx_scope_struct_7_get_NodeVisited;
struct __pyx_obj_5graph___pyx_scope_struct_8_genexpr;
struct __pyx_obj_5graph___pyx_scope_struct_9_PathReach;
struct __pyx_obj_5graph___pyx_scope_struct_10_genexpr;
struct __pyx_obj_5graph___pyx_scope_struct_11_genexpr;
struct __pyx_t_5graph_Point3d;
struct __pyx_opt_args_5graph_MakePoint3d;
struct __pyx_t_5graph_Line3d;
struct __pyx_t_5graph_Node;
struct __pyx_t_5graph_Edge;
struct __pyx_t_5graph_NodeReach;
struct __pyx_ctuple_float__and_float__and_float;
typedef struct __pyx_ctuple_float__and_float__and_float __pyx_ctuple_float__and_float__and_float;
struct __pyx_opt_args_5graph_checkclosePt;
struct __pyx_opt_args_5graph_arrCountVals;
struct __pyx_opt_args_5graph_7GraphCy_C_Reset_NodeVisited;
struct __pyx_opt_args_5graph_7GraphCy_C_addNode;
struct __pyx_ctuple_float__and_float;
typedef struct __pyx_ctuple_float__and_float __pyx_ctuple_float__and_float;
struct __pyx_ctuple_double__and_double;
typedef struct __pyx_ctuple_double__and_double __pyx_ctuple_double__and_double;
struct __pyx_opt_args_5graph_7GraphCy_C_NodeMap_AStar;
struct __pyx_opt_args_5graph_7GraphCy_C_NodeMap_AStar_VirtuEntry;
struct __pyx_opt_args_5graph_7GraphCy_C_NodeMap_VirtuEntry;

/* "graph.pyx":22
 * # Main graph class, functions somewhat similar to NetworkX's graph, but some changes/specifics are made to adjust for spatial-oriented functionality.
 * 
 * cdef struct Point3d:             # <<<<<<<<<<<<<<
 *     float x
 *     float y
 */
struct __pyx_t_5graph_Point3d {
  float x;
  float y;
  float z;
};

/* "graph.pyx":29
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef Point3d MakePoint3d(float& x, float& y, float z= 0.0) nogil:             # <<<<<<<<<<<<<<
 *     cdef Point3d pt
 *     pt.x = x
 */
struct __pyx_opt_args_5graph_MakePoint3d {
  int __pyx_n;
  float z;
};

/* "graph.pyx":36
 *     return pt
 * 
 * cdef struct Line3d:             # <<<<<<<<<<<<<<
 *     int nPts
 *     Point3d* Pts
 */
struct __pyx_t_5graph_Line3d {
  int nPts;
  struct __pyx_t_5graph_Point3d *Pts;
};

/* "graph.pyx":76
 *     return tuple((input_arr[n] for n in range(size)))
 * 
 * cdef struct Node:             # <<<<<<<<<<<<<<
 *     int idx     # index number
 *     float[3] pt    # coordinate
 */
struct __pyx_t_5graph_Node {
  int idx;
  float pt[3];
  float w;
  float c;
  int Eid[10];
};

/* "graph.pyx":108
 *     return tup
 * 
 * cdef struct Edge:             # <<<<<<<<<<<<<<
 *     int idx        # index number
 *     int NidO       # origin Node ID
 */
struct __pyx_t_5graph_Edge {
  int idx;
  int NidO;
  int NidD;
  float len;
  float lenR;
  float w;
};

/* "graph.pyx":142
 *     return tup
 * 
 * cdef struct NodeReach:             # <<<<<<<<<<<<<<
 *     int Nid # node id
 *     float Dist # minimum distance found
 */
struct __pyx_t_5graph_NodeReach {
  int Nid;
  float Dist;
  int Eid;
  int NidO;
  float Weight;
  int pathindex;
};

/* "graph.pyx":310
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cpdef float dist3d_Py(tuple[float, float, float]& p1, tuple[float, float, float]& p2):             # <<<<<<<<<<<<<<
 *     """
 *     Node distance on 3d
 */
struct __pyx_ctuple_float__and_float__and_float {
  float f0;
  float f1;
  float f2;
};

/* "graph.pyx":335
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline int checkclosePt(Point3d& pt, vector[Point3d]& ptLt, float tol=1e-3) nogil:             # <<<<<<<<<<<<<<
 *     cdef int n
 *     for n in range(ptLt.size()):
 */
struct __pyx_opt_args_5graph_checkclosePt {
  int __pyx_n;
  float tol;
};

/* "graph.pyx":402
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline int arrCountVals(int* ary, int arysize, int val=-1):             # <<<<<<<<<<<<<<
 *     cdef int count
 *     cdef int n
 */
struct __pyx_opt_args_5graph_arrCountVals {
  int __pyx_n;
  int val;
};

/* "graph.pyx":596
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     cdef inline void C_Reset_NodeVisited(self, int val = -1):             # <<<<<<<<<<<<<<
 *         for n in range(self.Nnodes):
 *             self.nodeVisited[n].Nid = val
 */
struct __pyx_opt_args_5graph_7GraphCy_C_Reset_NodeVisited {
  int __pyx_n;
  int val;
};

/* "graph.pyx":608
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     cdef void C_addNode(self, int& idx, float& cX, float& cY, float cZ=0.0, float w=1.0, float c=0.0):             # <<<<<<<<<<<<<<
 *         # create Node instance
 *         cdef Node node
 */
struct __pyx_opt_args_5graph_7GraphCy_C_addNode {
  int __pyx_n;
  float cZ;
  float w;
  float c;
};

/* "graph.pyx":1286
 * 
 *     def PathFind_AStar_VirtuEntry(self,
 *             const int& EidO, tuple[float, float, float] PtO, const tuple[float, float] DstO,             # <<<<<<<<<<<<<<
 *             const int& EidD, tuple[float, float, float] PtD, const tuple[float, float] DstD,
 *             float LimDist = 10_000.0, int LimCycle = 10_000, float DistMul = 2.0) -> tuple[float, tuple[int]]:
 */
struct __pyx_ctuple_float__and_float {
  float f0;
  float f1;
};

/* "graph.pyx":1692
 *             float LimDist = 10_000.0,
 *             int LimCycle = 10_000,
 *             float DistMul = 2.0) -> tuple[float, float]:             # <<<<<<<<<<<<<<
 *         """
 *         Find smallest distance between two nodes in the graph. Using Astar principle from 3d location information.
 */
struct __pyx_ctuple_double__and_double {
  double f0;
  double f1;
};

/* "graph.pyx":2032
 *         return outtup
 * 
 *     cdef void C_NodeMap_AStar(             # <<<<<<<<<<<<<<
 *                 self,
 *                 const int& NidO, const int& NidD,
 */
struct __pyx_opt_args_5graph_7GraphCy_C_NodeMap_AStar {
  int __pyx_n;
  float DistMin;
  float DistMulLim;
  int ReverseEdge;
  float LimDist;
  int LimCycle;
  float DistMul;
  float EdgeCmin;
};

/* "graph.pyx":2171
 *         return
 * 
 *     cdef void C_NodeMap_AStar_VirtuEntry(             # <<<<<<<<<<<<<<
 *                 self,
 *                 const int& EidO, const float[3]& PtO, const float[2]& DstO,
 */
struct __pyx_opt_args_5graph_7GraphCy_C_NodeMap_AStar_VirtuEntry {
  int __pyx_n;
  float DistMin;
  float DistMulLim;
  int ReverseEdge;
  float LimDist;
  int LimCycle;
  float DistMul;
  float EdgeCmin;
};

/* "graph.pyx":2320
 *         return
 * 
 *     cdef NodeReach* C_NodeMap_VirtuEntry(             # <<<<<<<<<<<<<<
 *                 self,
 *                 const int& EidO, const float[3]& PtO, const float[2]& DstO,
 */
struct __pyx_opt_args_5graph_7GraphCy_C_NodeMap_VirtuEntry {
  int __pyx_n;
  int ReverseEdge;
  float LimDist;
  int LimCycle;
};

/* "graph.pyx":156
 *     return a.Weight <= b.Weight
 * 
 * cdef class PriorityQueue_NR:             # <<<<<<<<<<<<<<
 *     # during writing, I haven't figured out how to put priority_queue on cython.
 *     # this is temporary class specifically for NodeQueue priority queue
 */
struct __pyx_obj_5graph_PriorityQueue_NR {
  PyObject_HEAD
  struct __pyx_vtabstruct_5graph_PriorityQueue_NR *__pyx_vtab;
  std::vector<struct __pyx_t_5graph_NodeReach>  NodeQueue;
};


/* "graph.pyx":411
 *     return count
 * 
 * cdef class GraphCy:             # <<<<<<<<<<<<<<
 * 
 *     cdef Node* nodes
 */
struct __pyx_obj_5graph_GraphCy {
  PyObject_HEAD
  struct __pyx_vtabstruct_5graph_GraphCy *__pyx_vtab;
  struct __pyx_t_5graph_Node *nodes;
  struct __pyx_t_5graph_Edge *edges;
  int *_nodesIds;
  int *_edgesIds;
  int Nnodes;
  int Nedges;
  int EidN;
  struct __pyx_t_5graph_NodeReach *nodeVisited;
};


/* "graph.pyx":54
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline tuple Int_array_tuple(int* input_arr, int size):             # <<<<<<<<<<<<<<
 *     cdef int n
 *     return tuple((input_arr[n] for n in range(size)))
 */
struct __pyx_obj_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple {
  PyObject_HEAD
  int *__pyx_v_input_arr;
};


/* "graph.pyx":56
 * cdef inline tuple Int_array_tuple(int* input_arr, int size):
 *     cdef int n
 *     return tuple((input_arr[n] for n in range(size)))             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
struct __pyx_obj_5graph___pyx_scope_struct_1_genexpr {
  PyObject_HEAD
  struct __pyx_obj_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple *__pyx_outer_scope;
  int __pyx_genexpr_arg_0;
  int __pyx_v_n;
  int __pyx_t_0;
  int __pyx_t_1;
  int __pyx_t_2;
};


/* "graph.pyx":72
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline tuple Float_array_tuple(float* input_arr, int size):             # <<<<<<<<<<<<<<
 *     cdef int n
 *     return tuple((input_arr[n] for n in range(size)))
 */
struct __pyx_obj_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple {
  PyObject_HEAD
  float *__pyx_v_input_arr;
};


/* "graph.pyx":74
 * cdef inline tuple Float_array_tuple(float* input_arr, int size):
 *     cdef int n
 *     return tuple((input_arr[n] for n in range(size)))             # <<<<<<<<<<<<<<
 * 
 * cdef struct Node:
 */
struct __pyx_obj_5graph___pyx_scope_struct_3_genexpr {
  PyObject_HEAD
  struct __pyx_obj_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple *__pyx_outer_scope;
  int __pyx_genexpr_arg_0;
  int __pyx_v_n;
  int __pyx_t_0;
  int __pyx_t_1;
  int __pyx_t_2;
};


/* "graph.pyx":472
 *         free(self.nodeVisited)
 * 
 *     def __reduce_ex__(self, protocol):             # <<<<<<<<<<<<<<
 *         cdef int n
 *         cdef tuple nodes = tuple((Node_tuple(self.nodes[n]) for n in range(self.Nnodes)))
 */
struct __pyx_obj_5graph___pyx_scope_struct_4___reduce_ex__ {
  PyObject_HEAD
  struct __pyx_obj_5graph_GraphCy *__pyx_v_self;
};


/* "graph.pyx":474
 *     def __reduce_ex__(self, protocol):
 *         cdef int n
 *         cdef tuple nodes = tuple((Node_tuple(self.nodes[n]) for n in range(self.Nnodes)))             # <<<<<<<<<<<<<<
 *         cdef tuple edges = tuple((Edge_tuple(self.edges[n]) for n in range(self.Nedges)))
 *         cdef tuple nodeids = Int_array_tuple(self._nodesIds, self.Nnodes)
 */
struct __pyx_obj_5graph___pyx_scope_struct_5_genexpr {
  PyObject_HEAD
  struct __pyx_obj_5graph___pyx_scope_struct_4___reduce_ex__ *__pyx_outer_scope;
  int __pyx_genexpr_arg_0;
  int __pyx_v_n;
  int __pyx_t_0;
  int __pyx_t_1;
  int __pyx_t_2;
};


/* "graph.pyx":475
 *         cdef int n
 *         cdef tuple nodes = tuple((Node_tuple(self.nodes[n]) for n in range(self.Nnodes)))
 *         cdef tuple edges = tuple((Edge_tuple(self.edges[n]) for n in range(self.Nedges)))             # <<<<<<<<<<<<<<
 *         cdef tuple nodeids = Int_array_tuple(self._nodesIds, self.Nnodes)
 *         cdef tuple edgeids = Int_array_tuple(self._edgesIds, self.Nedges)
 */
struct __pyx_obj_5graph___pyx_scope_struct_6_genexpr {
  PyObject_HEAD
  struct __pyx_obj_5graph___pyx_scope_struct_4___reduce_ex__ *__pyx_outer_scope;
  int __pyx_genexpr_arg_0;
  int __pyx_v_n;
  int __pyx_t_0;
  int __pyx_t_1;
  int __pyx_t_2;
};


/* "graph.pyx":601
 * 
 * 
 *     def get_NodeVisited(self):             # <<<<<<<<<<<<<<
 *         outtup = tuple((self.nodeVisited[n].Nid for n in range(self.Nnodes)))
 *         return outtup
 */
struct __pyx_obj_5graph___pyx_scope_struct_7_get_NodeVisited {
  PyObject_HEAD
  struct __pyx_obj_5graph_GraphCy *__pyx_v_self;
};


/* "graph.pyx":602
 * 
 *     def get_NodeVisited(self):
 *         outtup = tuple((self.nodeVisited[n].Nid for n in range(self.Nnodes)))             # <<<<<<<<<<<<<<
 *         return outtup
 * 
 */
struct __pyx_obj_5graph___pyx_scope_struct_8_genexpr {
  PyObject_HEAD
  struct __pyx_obj_5graph___pyx_scope_struct_7_get_NodeVisited *__pyx_outer_scope;
  int __pyx_genexpr_arg_0;
  int __pyx_v_n;
  int __pyx_t_0;
  int __pyx_t_1;
  int __pyx_t_2;
};


/* "graph.pyx":1823
 *         return (-1.0, -1.0)
 * 
 *     def PathReach(self, int NidO, float LimDist = 1_000.0, int LimCycle = 10_000) -> tuple[tuple[int, float]]:             # <<<<<<<<<<<<<<
 *         """
 *         Finds Edges within reach
 */
struct __pyx_obj_5graph___pyx_scope_struct_9_PathReach {
  PyObject_HEAD
  std::vector<std::pair<int,float> >  __pyx_v_EdgesReach;
};


/* "graph.pyx":2024
 *             EdgesReachSize += 1
 *             EdgesReach.push_back(pair[int, float](NodeReach_T.Eid, edgeVector))
 *         outtup = tuple(EdgesReach[n] for n in range(EdgesReach.size()))             # <<<<<<<<<<<<<<
 * 
 *         EdgesReach.insert(EdgesReach.end(), EdgesFringe.begin(), EdgesFringe.end())
 */
struct __pyx_obj_5graph___pyx_scope_struct_10_genexpr {
  PyObject_HEAD
  struct __pyx_obj_5graph___pyx_scope_struct_9_PathReach *__pyx_outer_scope;
  std::vector<std::pair<int,float> > ::size_type __pyx_genexpr_arg_0;
  std::vector<std::pair<int,float> > ::size_type __pyx_v_n;
  std::vector<std::pair<int,float> > ::size_type __pyx_t_0;
  std::vector<std::pair<int,float> > ::size_type __pyx_t_1;
  std::vector<std::pair<int,float> > ::size_type __pyx_t_2;
};


/* "graph.pyx":2028
 *         EdgesReach.insert(EdgesReach.end(), EdgesFringe.begin(), EdgesFringe.end())
 * 
 *         outtup = tuple((v.first, v.second) for v in EdgesReach)             # <<<<<<<<<<<<<<
 *         EdgesReach.clear()
 *         return outtup
 */
struct __pyx_obj_5graph___pyx_scope_struct_11_genexpr {
  PyObject_HEAD
  std::vector<std::pair<int,float> >  __pyx_genexpr_arg_0;
  std::pair<int,float>  __pyx_v_v;
  std::vector<std::pair<int,float> > ::iterator __pyx_t_0;
};



/* "graph.pyx":156
 *     return a.Weight <= b.Weight
 * 
 * cdef class PriorityQueue_NR:             # <<<<<<<<<<<<<<
 *     # during writing, I haven't figured out how to put priority_queue on cython.
 *     # this is temporary class specifically for NodeQueue priority queue
 */

struct __pyx_vtabstruct_5graph_PriorityQueue_NR {
  void (*push)(struct __pyx_obj_5graph_PriorityQueue_NR *, struct __pyx_t_5graph_NodeReach const &);
  struct __pyx_t_5graph_NodeReach (*top)(struct __pyx_obj_5graph_PriorityQueue_NR *);
  struct __pyx_t_5graph_NodeReach (*bot)(struct __pyx_obj_5graph_PriorityQueue_NR *);
  struct __pyx_t_5graph_NodeReach (*pop_top)(struct __pyx_obj_5graph_PriorityQueue_NR *);
  struct __pyx_t_5graph_NodeReach (*pop_bot)(struct __pyx_obj_5graph_PriorityQueue_NR *);
  int (*empty)(struct __pyx_obj_5graph_PriorityQueue_NR *);
  size_t (*size)(struct __pyx_obj_5graph_PriorityQueue_NR *);
  void (*clear)(struct __pyx_obj_5graph_PriorityQueue_NR *);
};
static struct __pyx_vtabstruct_5graph_PriorityQueue_NR *__pyx_vtabptr_5graph_PriorityQueue_NR;


/* "graph.pyx":411
 *     return count
 * 
 * cdef class GraphCy:             # <<<<<<<<<<<<<<
 * 
 *     cdef Node* nodes
 */

struct __pyx_vtabstruct_5graph_GraphCy {
  void (*reinstateGraph)(struct __pyx_obj_5graph_GraphCy *, PyObject *, PyObject *, PyObject *, PyObject *);
  PyObject *(*C_reallocNodes)(struct __pyx_obj_5graph_GraphCy *, int &);
  void (*C_reallocEdges)(struct __pyx_obj_5graph_GraphCy *, int &);
  void (*C_Reset_NodeVisited)(struct __pyx_obj_5graph_GraphCy *, struct __pyx_opt_args_5graph_7GraphCy_C_Reset_NodeVisited *__pyx_optional_args);
  void (*C_addNode)(struct __pyx_obj_5graph_GraphCy *, int &, float &, float &, struct __pyx_opt_args_5graph_7GraphCy_C_addNode *__pyx_optional_args);
  void (*C_removeEdge)(struct __pyx_obj_5graph_GraphCy *, int &);
  void (*C_removeNode)(struct __pyx_obj_5graph_GraphCy *, int &);
  void (*C_addEdge)(struct __pyx_obj_5graph_GraphCy *, int &, int &, int &, float &, float &, float &);
  void (*C_NodeMap_AStar)(struct __pyx_obj_5graph_GraphCy *, int const &, int const &, struct __pyx_opt_args_5graph_7GraphCy_C_NodeMap_AStar *__pyx_optional_args);
  void (*C_NodeMap_AStar_VirtuEntry)(struct __pyx_obj_5graph_GraphCy *, int const &, float *, float *, int const &, float *, float *, struct __pyx_opt_args_5graph_7GraphCy_C_NodeMap_AStar_VirtuEntry *__pyx_optional_args);
  struct __pyx_t_5graph_NodeReach *(*C_NodeMap_VirtuEntry)(struct __pyx_obj_5graph_GraphCy *, int const &, float *, float *, struct __pyx_opt_args_5graph_7GraphCy_C_NodeMap_VirtuEntry *__pyx_optional_args);
};
static struct __pyx_vtabstruct_5graph_GraphCy *__pyx_vtabptr_5graph_GraphCy;
static CYTHON_INLINE void __pyx_f_5graph_7GraphCy_C_Reset_NodeVisited(struct __pyx_obj_5graph_GraphCy *, struct __pyx_opt_args_5graph_7GraphCy_C_Reset_NodeVisited *__pyx_optional_args);
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#if PY_VERSION_HEX >= 0x030C00A6
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)
#else
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)
#endif
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* pep479.proto */
static void __Pyx_Generator_Replace_StopIteration(int in_async_gen);

/* RaiseUnexpectedTypeError.proto */
static int __Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj);

/* IncludeStringH.proto */
#include <string.h>

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_VARARGS(args, i) PySequence_GetItem(args, i)
#elif CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#else
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GetItem(args, i)
#endif
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_NewRef_VARARGS(arg) __Pyx_NewRef(arg)
    #define __Pyx_Arg_XDECREF_VARARGS(arg) Py_XDECREF(arg)
#else
    #define __Pyx_Arg_NewRef_VARARGS(arg) arg
    #define __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) ((args) + (nargs))
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
    CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues);
  #else
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
  #endif
    #define __Pyx_Arg_NewRef_FASTCALL(arg) arg  /* no-op, __Pyx_Arg_FASTCALL is direct and this needs
                                                   to have the same reference counting */
    #define __Pyx_Arg_XDECREF_FASTCALL(arg)
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
    #define __Pyx_Arg_NewRef_FASTCALL(arg) __Pyx_Arg_NewRef_VARARGS(arg)
    #define __Pyx_Arg_XDECREF_FASTCALL(arg) __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kw, const char* function_name, int kw_allowed);

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_repr(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_repr(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* MoveIfSupported.proto */
#if CYTHON_USE_CPP_STD_MOVE
  #include <utility>
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) std::move(x)
#else
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) x
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* ErrOccurredWithGIL.proto */
static CYTHON_INLINE int __Pyx_ErrOccurredWithGIL(void);

/* pyfrozenset_new.proto */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it);

/* PySetContains.proto */
static CYTHON_INLINE int __Pyx_PySet_ContainsTF(PyObject* key, PyObject* set, int eq);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely(__Pyx_IS_TYPE(obj, type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03080000
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()
  #define __Pyx_PyFrame_GetLocalsplus(frame)  ((frame)->f_localsplus)
#else
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif
#endif
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectFormat.proto */
#if CYTHON_USE_UNICODE_WRITER
static PyObject* __Pyx_PyObject_Format(PyObject* s, PyObject* f);
#else
#define __Pyx_PyObject_Format(s, f) PyObject_Format(s, f)
#endif

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* RaiseClosureNameError.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* PySequenceMultiply.proto */
#define __Pyx_PySequence_Multiply_Left(mul, seq)  __Pyx_PySequence_Multiply(seq, mul)
static CYTHON_INLINE PyObject* __Pyx_PySequence_Multiply(PyObject *seq, Py_ssize_t mul);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* PyObjectCallNoArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);

/* IncludeStructmemberH.proto */
#include <structmember.h>

/* FixUpExtensionType.proto */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* ValidateBasesTuple.proto */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases);
#endif

/* PyType_Ready.proto */
CYTHON_UNUSED static int __Pyx_PyType_Ready(PyTypeObject *t);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyTypeObject* typeptr , void* vtable);

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyTypeObject *type);

/* MergeVTables.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_MergeVtables(PyTypeObject *type);
#endif

/* SetupReduce.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce(PyObject* type_obj);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportDottedModule.proto */
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple);
#endif

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* FetchSharedCythonModule.proto */
static PyObject *__Pyx_FetchSharedCythonABIModule(void);

/* FetchCommonType.proto */
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
#else
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases);
#endif

/* PyMethodNew.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    PyObject *typesModule=NULL, *methodType=NULL, *result=NULL;
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    typesModule = PyImport_ImportModule("types");
    if (!typesModule) return NULL;
    methodType = PyObject_GetAttrString(typesModule, "MethodType");
    Py_DECREF(typesModule);
    if (!methodType) return NULL;
    result = PyObject_CallFunctionObjArgs(methodType, func, self, NULL);
    Py_DECREF(methodType);
    return result;
}
#elif PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#else
    #define __Pyx_PyMethod_New PyMethod_New
#endif

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_CyFunction_GetClassObj(f)\
      (((__pyx_CyFunctionObject *) (f))->func_classobj)
#else
  #define __Pyx_CyFunction_GetClassObj(f)\
      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)
#endif
#define __Pyx_CyFunction_SetClassObj(f, classobj)\
    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject_HEAD
    PyObject *func;
#elif PY_VERSION_HEX < 0x030900B1
    PyCFunctionObject func;
#else
    PyCMethodObject func;
#endif
#if CYTHON_BACKPORT_VECTORCALL
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_classobj;
#endif
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#undef __Pyx_CyOrPyCFunction_Check
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_CyFunctionType)
#define __Pyx_CyOrPyCFunction_Check(obj)  __Pyx_TypeCheck2(obj, __pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_CyFunctionType)
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc);
#undef __Pyx_IsSameCFunction
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCyOrCFunction(func, cfunc)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* FromPyCTupleUtility.proto */
static CYTHON_INLINE __pyx_ctuple_float__and_float__and_float __pyx_convert__from_py___pyx_ctuple_float__and_float__and_float(PyObject *);

/* GCCDiagnostics.proto */
#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* FromPyCTupleUtility.proto */
static CYTHON_INLINE __pyx_ctuple_float__and_float __pyx_convert__from_py___pyx_ctuple_float__and_float(PyObject *);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* ToPyCTupleUtility.proto */
static PyObject* __pyx_convert__to_py___pyx_ctuple_float__and_float__and_float(__pyx_ctuple_float__and_float__and_float);

/* ToPyCTupleUtility.proto */
static PyObject* __pyx_convert__to_py___pyx_ctuple_float__and_float(__pyx_ctuple_float__and_float);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectCall2Args.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
struct __pyx_CoroutineObject;
typedef PyObject *(*__pyx_coroutine_body_t)(struct __pyx_CoroutineObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct __pyx_CoroutineObject {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    PyObject *gi_frame;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
#define __Pyx_Generator_CheckExact(obj) __Pyx_IS_TYPE(obj, __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(PyObject *module);

/* CheckBinaryVersion.proto */
static unsigned long __Pyx_get_runtime_version(void);
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

/* #### Code section: module_declarations ### */
static void __pyx_f_5graph_16PriorityQueue_NR_push(struct __pyx_obj_5graph_PriorityQueue_NR *__pyx_v_self, struct __pyx_t_5graph_NodeReach const &__pyx_v_item); /* proto*/
static struct __pyx_t_5graph_NodeReach __pyx_f_5graph_16PriorityQueue_NR_top(struct __pyx_obj_5graph_PriorityQueue_NR *__pyx_v_self); /* proto*/
static struct __pyx_t_5graph_NodeReach __pyx_f_5graph_16PriorityQueue_NR_bot(struct __pyx_obj_5graph_PriorityQueue_NR *__pyx_v_self); /* proto*/
static struct __pyx_t_5graph_NodeReach __pyx_f_5graph_16PriorityQueue_NR_pop_top(struct __pyx_obj_5graph_PriorityQueue_NR *__pyx_v_self); /* proto*/
static struct __pyx_t_5graph_NodeReach __pyx_f_5graph_16PriorityQueue_NR_pop_bot(struct __pyx_obj_5graph_PriorityQueue_NR *__pyx_v_self); /* proto*/
static int __pyx_f_5graph_16PriorityQueue_NR_empty(struct __pyx_obj_5graph_PriorityQueue_NR *__pyx_v_self); /* proto*/
static size_t __pyx_f_5graph_16PriorityQueue_NR_size(struct __pyx_obj_5graph_PriorityQueue_NR *__pyx_v_self); /* proto*/
static void __pyx_f_5graph_16PriorityQueue_NR_clear(struct __pyx_obj_5graph_PriorityQueue_NR *__pyx_v_self); /* proto*/
static void __pyx_f_5graph_7GraphCy_reinstateGraph(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, PyObject *__pyx_v_nodes, PyObject *__pyx_v_edges, PyObject *__pyx_v_nodeids, PyObject *__pyx_v_edgeids); /* proto*/
static PyObject *__pyx_f_5graph_7GraphCy_C_reallocNodes(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, int &__pyx_v_size); /* proto*/
static void __pyx_f_5graph_7GraphCy_C_reallocEdges(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, int &__pyx_v_size); /* proto*/
static CYTHON_INLINE void __pyx_f_5graph_7GraphCy_C_Reset_NodeVisited(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, struct __pyx_opt_args_5graph_7GraphCy_C_Reset_NodeVisited *__pyx_optional_args); /* proto*/
static void __pyx_f_5graph_7GraphCy_C_addNode(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, int &__pyx_v_idx, float &__pyx_v_cX, float &__pyx_v_cY, struct __pyx_opt_args_5graph_7GraphCy_C_addNode *__pyx_optional_args); /* proto*/
static void __pyx_f_5graph_7GraphCy_C_removeEdge(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, int &__pyx_v_idx); /* proto*/
static void __pyx_f_5graph_7GraphCy_C_removeNode(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, int &__pyx_v_idx); /* proto*/
static void __pyx_f_5graph_7GraphCy_C_addEdge(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, int &__pyx_v_idx, int &__pyx_v_NidO, int &__pyx_v_NidD, float &__pyx_v_len, float &__pyx_v_lenR, float &__pyx_v_w); /* proto*/
static void __pyx_f_5graph_7GraphCy_C_NodeMap_AStar(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, int const &__pyx_v_NidO, int const &__pyx_v_NidD, struct __pyx_opt_args_5graph_7GraphCy_C_NodeMap_AStar *__pyx_optional_args); /* proto*/
static void __pyx_f_5graph_7GraphCy_C_NodeMap_AStar_VirtuEntry(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, int const &__pyx_v_EidO, float *__pyx_v_PtO, float *__pyx_v_DstO, int const &__pyx_v_EidD, float *__pyx_v_PtD, float *__pyx_v_DstD, struct __pyx_opt_args_5graph_7GraphCy_C_NodeMap_AStar_VirtuEntry *__pyx_optional_args); /* proto*/
static struct __pyx_t_5graph_NodeReach *__pyx_f_5graph_7GraphCy_C_NodeMap_VirtuEntry(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, int const &__pyx_v_EidO, CYTHON_UNUSED float *__pyx_v_PtO, float *__pyx_v_DstO, struct __pyx_opt_args_5graph_7GraphCy_C_NodeMap_VirtuEntry *__pyx_optional_args); /* proto*/

/* Module declarations from "cython" */

/* Module declarations from "libcpp.queue" */

/* Module declarations from "libcpp" */

/* Module declarations from "libcpp.utility" */

/* Module declarations from "libcpp.algorithm" */

/* Module declarations from "libcpp.vector" */

/* Module declarations from "libc.string" */

/* Module declarations from "libcpp.string" */

/* Module declarations from "libc.math" */

/* Module declarations from "libc.stdlib" */

/* Module declarations from "libc.stdint" */

/* Module declarations from "graph" */
static struct __pyx_t_5graph_Point3d __pyx_f_5graph_MakePoint3d(float &, float &, struct __pyx_opt_args_5graph_MakePoint3d *__pyx_optional_args); /*proto*/
static CYTHON_INLINE int *__pyx_f_5graph_Int_tuple_array(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5graph_Int_array_tuple(int *, int); /*proto*/
static CYTHON_INLINE float *__pyx_f_5graph_Float_tuple_array(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_5graph_Float_array_tuple(float *, int); /*proto*/
static struct __pyx_t_5graph_Node __pyx_f_5graph_Node_make(PyObject *); /*proto*/
static PyObject *__pyx_f_5graph_Node_tuple(struct __pyx_t_5graph_Node); /*proto*/
static struct __pyx_t_5graph_Edge __pyx_f_5graph_Edge_make(PyObject *); /*proto*/
static PyObject *__pyx_f_5graph_Edge_tuple(struct __pyx_t_5graph_Edge); /*proto*/
static std::vector<int>  __pyx_f_5graph_EdgesReach_Eididx(std::vector<std::pair<int,float> >  const &, int const &); /*proto*/
static CYTHON_INLINE int __pyx_f_5graph_Find_IntVector(std::vector<int>  &, int const ); /*proto*/
static CYTHON_INLINE float __pyx_f_5graph_dist3d(struct __pyx_t_5graph_Node const &, struct __pyx_t_5graph_Node const &); /*proto*/
static CYTHON_INLINE float __pyx_f_5graph_dist3d_pt(struct __pyx_t_5graph_Point3d const &, struct __pyx_t_5graph_Point3d const &); /*proto*/
static CYTHON_INLINE float __pyx_f_5graph_dist3d_ar(float *, float *); /*proto*/
static float __pyx_f_5graph_dist3d_Py(__pyx_ctuple_float__and_float__and_float &, __pyx_ctuple_float__and_float__and_float &, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE int __pyx_f_5graph_SamePoint3d(struct __pyx_t_5graph_Point3d &, struct __pyx_t_5graph_Point3d &); /*proto*/
static CYTHON_INLINE int __pyx_f_5graph_checkclosePt(struct __pyx_t_5graph_Point3d &, std::vector<struct __pyx_t_5graph_Point3d>  &, struct __pyx_opt_args_5graph_checkclosePt *__pyx_optional_args); /*proto*/
static int __pyx_f_5graph_pySmallestMissing(PyObject *, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE void __pyx_f_5graph_arrAppendInt(int *, int, int); /*proto*/
static CYTHON_INLINE void __pyx_f_5graph_arrPopInt(int *, int, int); /*proto*/
static CYTHON_INLINE int __pyx_f_5graph_arrCountVals(int *, int, struct __pyx_opt_args_5graph_arrCountVals *__pyx_optional_args); /*proto*/
static int __Pyx_carray_from_py_float(PyObject *, float *, Py_ssize_t); /*proto*/
static PyObject *__pyx_convert_vector_to_py_int(std::vector<int>  const &); /*proto*/
static PyObject *__pyx_convert_pair_to_py_int____float(std::pair<int,float>  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_float(std::vector<float>  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(std::vector<std::vector<int> >  const &); /*proto*/
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "graph"
extern int __pyx_module_is_main_graph;
int __pyx_module_is_main_graph = 0;

/* Implementation of "graph" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_staticmethod;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_OverflowError;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_MemoryError;
/* #### Code section: string_decls ### */
static const char __pyx_k_i[] = "i";
static const char __pyx_k_m[] = "m";
static const char __pyx_k_n[] = "n";
static const char __pyx_k_v[] = "v";
static const char __pyx_k__5[] = ",";
static const char __pyx_k_gc[] = "gc";
static const char __pyx_k_p1[] = "p1";
static const char __pyx_k_p2[] = "p2";
static const char __pyx_k_pt[] = "pt";
static const char __pyx_k_Eid[] = "Eid";
static const char __pyx_k_LnW[] = "LnW";
static const char __pyx_k_Oid[] = "Oid";
static const char __pyx_k_PtD[] = "PtD";
static const char __pyx_k_PtO[] = "PtO";
static const char __pyx_k__22[] = "*";
static const char __pyx_k__23[] = ".";
static const char __pyx_k__92[] = "?";
static const char __pyx_k_gcy[] = "gcy";
static const char __pyx_k_gpd[] = "gpd";
static const char __pyx_k_ids[] = "ids";
static const char __pyx_k_idx[] = "idx";
static const char __pyx_k_int[] = "int";
static const char __pyx_k_len[] = "len";
static const char __pyx_k_pth[] = "pth";
static const char __pyx_k_row[] = "row";
static const char __pyx_k_DstD[] = "DstD";
static const char __pyx_k_DstO[] = "DstO";
static const char __pyx_k_EidD[] = "EidD";
static const char __pyx_k_EidN[] = "EidN";
static const char __pyx_k_EidO[] = "EidO";
static const char __pyx_k_List[] = "List";
static const char __pyx_k_NidD[] = "NidD";
static const char __pyx_k_NidF[] = "NidF";
static const char __pyx_k_NidO[] = "NidO";
static const char __pyx_k_None[] = "None";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_ckEd[] = "ckEd";
static const char __pyx_k_ckSt[] = "ckSt";
static const char __pyx_k_dest[] = "dest";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_idEd[] = "idEd";
static const char __pyx_k_idSt[] = "idSt";
static const char __pyx_k_lenE[] = "lenE";
static const char __pyx_k_lnEd[] = "lnEd";
static const char __pyx_k_lnSt[] = "lnSt";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_spec[] = "__spec__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_A_LnW[] = "A_LnW";
static const char __pyx_k_DistD[] = "DistD";
static const char __pyx_k_DistO[] = "DistO";
static const char __pyx_k_EdgeC[] = "EdgeC";
static const char __pyx_k_Edges[] = " Edges";
static const char __pyx_k_Nodes[] = " Nodes,  ";
static const char __pyx_k_PtedC[] = "PtedC";
static const char __pyx_k_PtedW[] = "PtedW";
static const char __pyx_k_PtstC[] = "PtstC";
static const char __pyx_k_PtstW[] = "PtstW";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_coord[] = "coord";
static const char __pyx_k_edges[] = "edges";
static const char __pyx_k_elook[] = "elook";
static const char __pyx_k_float[] = "float";
static const char __pyx_k_flook[] = "flook";
static const char __pyx_k_graph[] = "graph";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_nlook[] = "nlook";
static const char __pyx_k_nodes[] = "nodes";
static const char __pyx_k_pathN[] = "pathN";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_ptDid[] = "ptDid";
static const char __pyx_k_ptOid[] = "ptOid";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_tempC[] = "tempC";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_tuple[] = "tuple";
static const char __pyx_k_Eididx[] = "Eididx";
static const char __pyx_k_Nedges[] = "Nedges";
static const char __pyx_k_Nnodes[] = "Nnodes";
static const char __pyx_k_PointD[] = "PointD";
static const char __pyx_k_PointO[] = "PointO";
static const char __pyx_k_coords[] = "coords";
static const char __pyx_k_cycles[] = "cycles";
static const char __pyx_k_dfKeys[] = "dfKeys";
static const char __pyx_k_dfSize[] = "dfSize";
static const char __pyx_k_enable[] = "enable";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_length[] = "length";
static const char __pyx_k_lninfo[] = "lninfo";
static const char __pyx_k_outtup[] = "outtup";
static const char __pyx_k_ptinfo[] = "ptinfo";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_return[] = "return";
static const char __pyx_k_threeD[] = "threeD";
static const char __pyx_k_typing[] = "typing";
static const char __pyx_k_A_PtedC[] = "A_PtedC";
static const char __pyx_k_A_PtedW[] = "A_PtedW";
static const char __pyx_k_A_PtstC[] = "A_PtstC";
static const char __pyx_k_A_PtstW[] = "A_PtstW";
static const char __pyx_k_DestTup[] = "DestTup";
static const char __pyx_k_DistMul[] = "DistMul";
static const char __pyx_k_GraphCy[] = "GraphCy";
static const char __pyx_k_LimDist[] = "LimDist";
static const char __pyx_k_PathLim[] = "PathLim";
static const char __pyx_k_addEdge[] = "addEdge";
static const char __pyx_k_addNode[] = "addNode";
static const char __pyx_k_columns[] = "columns";
static const char __pyx_k_disable[] = "disable";
static const char __pyx_k_edgeids[] = "edgeids";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_nodeids[] = "nodeids";
static const char __pyx_k_numbers[] = "numbers";
static const char __pyx_k_ptDinfo[] = "ptDinfo";
static const char __pyx_k_ptOinfo[] = "ptOinfo";
static const char __pyx_k_ptsinfo[] = "ptsinfo";
static const char __pyx_k_BaseDist[] = "BaseDist";
static const char __pyx_k_EdgeCmin[] = "EdgeCmin";
static const char __pyx_k_ForceDst[] = "ForceDst";
static const char __pyx_k_ForceOri[] = "ForceOri";
static const char __pyx_k_LimCycle[] = "LimCycle";
static const char __pyx_k_Lnlength[] = "Lnlength";
static const char __pyx_k_State_3d[] = "State_3d";
static const char __pyx_k_addNodes[] = "addNodes";
static const char __pyx_k_edgesize[] = "edgesize";
static const char __pyx_k_geometry[] = "geometry";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_int_None[] = "int | None";
static const char __pyx_k_iterrows[] = "iterrows";
static const char __pyx_k_nodesize[] = "nodesize";
static const char __pyx_k_protocol[] = "protocol";
static const char __pyx_k_ptDcoord[] = "ptDcoord";
static const char __pyx_k_ptOcoord[] = "ptOcoord";
static const char __pyx_k_regEdges[] = "regEdges";
static const char __pyx_k_regNodes[] = "regNodes";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_sizeInfo[] = "sizeInfo";
static const char __pyx_k_str_None[] = "str | None";
static const char __pyx_k_LnlengthR[] = "LnlengthR";
static const char __pyx_k_NodeCheck[] = "NodeCheck";
static const char __pyx_k_OpenNodes[] = "OpenNodes";
static const char __pyx_k_PathReach[] = "PathReach";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_dfNetwork[] = "dfNetwork";
static const char __pyx_k_dist3d_Py[] = "dist3d_Py";
static const char __pyx_k_edgeidCnt[] = "edgeidCnt";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_geopandas[] = "geopandas";
static const char __pyx_k_graph_pyx[] = "graph.pyx";
static const char __pyx_k_isenabled[] = "isenabled";
static const char __pyx_k_keepGoing[] = "keepGoing";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_startNode[] = "startNode";
static const char __pyx_k_A_Lnlength[] = "A_Lnlength";
static const char __pyx_k_DistMulLim[] = "DistMulLim";
static const char __pyx_k_EdgesReach[] = "EdgesReach";
static const char __pyx_k_FoundPaths[] = "FoundPaths";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_NodeTarget[] = "NodeTarget";
static const char __pyx_k_PathLength[] = "PathLength";
static const char __pyx_k_RemainDist[] = "RemainDist";
static const char __pyx_k_changeNode[] = "changeNode";
static const char __pyx_k_edgeVector[] = "edgeVector";
static const char __pyx_k_nodeMapped[] = "nodeMapped";
static const char __pyx_k_pathlength[] = "pathlength";
static const char __pyx_k_pointidCnt[] = "pointidCnt";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_removeEdge[] = "removeEdge";
static const char __pyx_k_removeNode[] = "removeNode";
static const char __pyx_k_A_LnlengthR[] = "A_LnlengthR";
static const char __pyx_k_EdgesFringe[] = "EdgesFringe";
static const char __pyx_k_MappedPaths[] = "MappedPaths";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_NodeReach_T[] = "NodeReach_T";
static const char __pyx_k_pointCoords[] = "pointCoords";
static const char __pyx_k_reconstruct[] = "_reconstruct";
static const char __pyx_k_removeEdges[] = "removeEdges";
static const char __pyx_k_FoundWeights[] = "FoundWeights";
static const char __pyx_k_MappedPath_T[] = "MappedPath_T";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_reallocEdges[] = "reallocEdges";
static const char __pyx_k_reallocNodes[] = "reallocNodes";
static const char __pyx_k_staticmethod[] = "staticmethod";
static const char __pyx_k_stringsource[] = "<stringsource>";
static const char __pyx_k_FoundDistance[] = "FoundDistance";
static const char __pyx_k_LimitDistance[] = "LimitDistance";
static const char __pyx_k_MappedPath_T2[] = "MappedPath_T2";
static const char __pyx_k_OverflowError[] = "OverflowError";
static const char __pyx_k_arraySizeInfo[] = "arraySizeInfo";
static const char __pyx_k_class_getitem[] = "__class_getitem__";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_remainingDist[] = "remainingDist";
static const char __pyx_k_tuple_int_int[] = "tuple[int, int]";
static const char __pyx_k_EdgesReachSize[] = "EdgesReachSize";
static const char __pyx_k_PathDist_AStar[] = "PathDist_AStar";
static const char __pyx_k_PathFind_AStar[] = "PathFind_AStar";
static const char __pyx_k_PathFind_Multi[] = "PathFind_Multi";
static const char __pyx_k_GraphCy_addEdge[] = "GraphCy.addEdge";
static const char __pyx_k_GraphCy_addNode[] = "GraphCy.addNode";
static const char __pyx_k_MinimumDistance[] = "MinimumDistance";
static const char __pyx_k_get_NodeVisited[] = "get_NodeVisited";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_GraphCy_addNodes[] = "GraphCy.addNodes";
static const char __pyx_k_GraphCy_sizeInfo[] = "GraphCy.sizeInfo";
static const char __pyx_k_PriorityQueue_NR[] = "PriorityQueue_NR";
static const char __pyx_k_addEdgefromNodes[] = "addEdgefromNodes";
static const char __pyx_k_gpd_GeoDataFrame[] = "gpd.GeoDataFrame";
static const char __pyx_k_EdgesReach_EidVec[] = "EdgesReach_EidVec";
static const char __pyx_k_GraphCy_PathReach[] = "GraphCy.PathReach";
static const char __pyx_k_GraphCy_object_of[] = "GraphCy object of ";
static const char __pyx_k_PathDist_Dijkstra[] = "PathDist_Dijkstra";
static const char __pyx_k_PathFind_Dijkstra[] = "PathFind_Dijkstra";
static const char __pyx_k_pySmallestMissing[] = "pySmallestMissing";
static const char __pyx_k_tuple_float_float[] = "tuple[float, float]";
static const char __pyx_k_GraphCy_PathLength[] = "GraphCy.PathLength";
static const char __pyx_k_GraphCy_changeNode[] = "GraphCy.changeNode";
static const char __pyx_k_GraphCy_removeEdge[] = "GraphCy.removeEdge";
static const char __pyx_k_GraphCy_removeNode[] = "GraphCy.removeNode";
static const char __pyx_k_Index_out_of_range[] = "Index out of range";
static const char __pyx_k_PriorityQueue_Size[] = "PriorityQueue Size ";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_GraphCy___reduce_ex[] = "GraphCy.__reduce_ex__";
static const char __pyx_k_GraphCy_removeEdges[] = "GraphCy.removeEdges";
static const char __pyx_k_fromGeopandas_Edges[] = "fromGeopandas_Edges";
static const char __pyx_k_GraphCy__reconstruct[] = "GraphCy._reconstruct";
static const char __pyx_k_GraphCy_reallocEdges[] = "GraphCy.reallocEdges";
static const char __pyx_k_GraphCy_reallocNodes[] = "GraphCy.reallocNodes";
static const char __pyx_k_GraphCy_arraySizeInfo[] = "GraphCy.arraySizeInfo";
static const char __pyx_k_tuple_float_tuple_int[] = "tuple[float, tuple[int]]";
static const char __pyx_k_tuple_tuple_int_float[] = "tuple[tuple[int, float]]";
static const char __pyx_k_GraphCy_PathDist_AStar[] = "GraphCy.PathDist_AStar";
static const char __pyx_k_GraphCy_PathFind_AStar[] = "GraphCy.PathFind_AStar";
static const char __pyx_k_GraphCy_PathFind_Multi[] = "GraphCy.PathFind_Multi";
static const char __pyx_k_GraphCy_get_NodeVisited[] = "GraphCy.get_NodeVisited";
static const char __pyx_k_GraphCy_addEdgefromNodes[] = "GraphCy.addEdgefromNodes";
static const char __pyx_k_PathReach_locals_genexpr[] = "PathReach.<locals>.genexpr";
static const char __pyx_k_GraphCy_PathDist_Dijkstra[] = "GraphCy.PathDist_Dijkstra";
static const char __pyx_k_GraphCy_PathFind_Dijkstra[] = "GraphCy.PathFind_Dijkstra";
static const char __pyx_k_PathDist_AStar_VirtuEntry[] = "PathDist_AStar_VirtuEntry";
static const char __pyx_k_PathFind_AStar_VirtuEntry[] = "PathFind_AStar_VirtuEntry";
static const char __pyx_k_PathFind_Multi_VirtuEntry[] = "PathFind_Multi_VirtuEntry";
static const char __pyx_k_reduce_ex___locals_genexpr[] = "__reduce_ex__.<locals>.genexpr";
static const char __pyx_k_GraphCy_fromGeopandas_Edges[] = "GraphCy.fromGeopandas_Edges";
static const char __pyx_k_PathDistComp_AStar_VirtuEntry[] = "PathDistComp_AStar_VirtuEntry";
static const char __pyx_k_Int_array_tuple_locals_genexpr[] = "Int_array_tuple.<locals>.genexpr";
static const char __pyx_k_get_NodeVisited_locals_genexpr[] = "get_NodeVisited.<locals>.genexpr";
static const char __pyx_k_Edge_point_end_weight_attribute[] = "Edge point end weight attribute not found, defaulting to 1.0";
static const char __pyx_k_Edge_point_start_cost_attribute[] = "Edge point start cost attribute not found, defaulting to 0.0";
static const char __pyx_k_Atribute_for_line_length_not_fou[] = "Atribute for line length not found, using geometric weight";
static const char __pyx_k_Atribute_for_line_length_reverse[] = "Atribute for line length reverse not found, using same length as lnlength";
static const char __pyx_k_Attribute_for_line_weight_not_fo[] = "Attribute for line weight not found, defaulting to 1.0";
static const char __pyx_k_Edge_point_end_cost_attribute_no[] = "Edge point end cost attribute not found, defaulting to 0.0";
static const char __pyx_k_Edge_point_start_weight_attribut[] = "Edge point start weight attribute not found, defaulting to 1.0";
static const char __pyx_k_Float_array_tuple_locals_genexpr[] = "Float_array_tuple.<locals>.genexpr";
static const char __pyx_k_GraphCy_PathDistComp_AStar_Virtu[] = "GraphCy.PathDistComp_AStar_VirtuEntry";
static const char __pyx_k_GraphCy_PathDist_AStar_VirtuEntr[] = "GraphCy.PathDist_AStar_VirtuEntry";
static const char __pyx_k_GraphCy_PathFind_AStar_VirtuEntr[] = "GraphCy.PathFind_AStar_VirtuEntry";
static const char __pyx_k_GraphCy_PathFind_Multi_MultiDest[] = "GraphCy.PathFind_Multi_MultiDest_VirtuEntry";
static const char __pyx_k_GraphCy_PathFind_Multi_VirtuEntr[] = "GraphCy.PathFind_Multi_VirtuEntry";
static const char __pyx_k_PathFind_Multi_MultiDest_VirtuEn[] = "PathFind_Multi_MultiDest_VirtuEntry";
static const char __pyx_k_PriorityQueue_NR___reduce_cython[] = "PriorityQueue_NR.__reduce_cython__";
static const char __pyx_k_PriorityQueue_NR___setstate_cyth[] = "PriorityQueue_NR.__setstate_cython__";
static const char __pyx_k_Warning_resizing_nodes_array_sma[] = "Warning, resizing nodes array smaller than ammount of nodes";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_tuple_tuple_float_tuple_int_None[] = "tuple[tuple[float, tuple[int]]] | None";
/* #### Code section: decls ### */
static PyObject *__pyx_pf_5graph_15Int_array_tuple_genexpr(PyObject *__pyx_self, int __pyx_genexpr_arg_0); /* proto */
static PyObject *__pyx_pf_5graph_17Float_array_tuple_genexpr(PyObject *__pyx_self, int __pyx_genexpr_arg_0); /* proto */
static int __pyx_pf_5graph_16PriorityQueue_NR___cinit__(CYTHON_UNUSED struct __pyx_obj_5graph_PriorityQueue_NR *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5graph_16PriorityQueue_NR_2__str__(struct __pyx_obj_5graph_PriorityQueue_NR *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5graph_16PriorityQueue_NR_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5graph_PriorityQueue_NR *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5graph_16PriorityQueue_NR_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5graph_PriorityQueue_NR *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5graph_dist3d_Py(CYTHON_UNUSED PyObject *__pyx_self, __pyx_ctuple_float__and_float__and_float __pyx_v_p1, __pyx_ctuple_float__and_float__and_float __pyx_v_p2); /* proto */
static PyObject *__pyx_pf_5graph_2pySmallestMissing(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_numbers); /* proto */
static int __pyx_pf_5graph_7GraphCy___cinit__(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, PyObject *__pyx_v_nodesize, PyObject *__pyx_v_edgesize, PyObject *__pyx_v_EidN); /* proto */
static PyObject *__pyx_pf_5graph_7GraphCy_2__repr__(struct __pyx_obj_5graph_GraphCy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5graph_7GraphCy_4__getitem__(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static void __pyx_pf_5graph_7GraphCy_6__dealloc__(struct __pyx_obj_5graph_GraphCy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5graph_7GraphCy_13__reduce_ex___genexpr(PyObject *__pyx_self, int __pyx_genexpr_arg_0); /* proto */
static PyObject *__pyx_pf_5graph_7GraphCy_13__reduce_ex___3genexpr(PyObject *__pyx_self, int __pyx_genexpr_arg_0); /* proto */
static PyObject *__pyx_pf_5graph_7GraphCy_8__reduce_ex__(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_protocol); /* proto */
static PyObject *__pyx_pf_5graph_7GraphCy_10_reconstruct(PyObject *__pyx_v_nodes, PyObject *__pyx_v_edges, PyObject *__pyx_v_nodeids, PyObject *__pyx_v_edgeids, PyObject *__pyx_v_Nnodes, PyObject *__pyx_v_Nedges, PyObject *__pyx_v_EidN); /* proto */
static PyObject *__pyx_pf_5graph_7GraphCy_12sizeInfo(struct __pyx_obj_5graph_GraphCy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5graph_7GraphCy_14arraySizeInfo(struct __pyx_obj_5graph_GraphCy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5graph_7GraphCy_16reallocNodes(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, PyObject *__pyx_v_size); /* proto */
static PyObject *__pyx_pf_5graph_7GraphCy_18reallocEdges(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, PyObject *__pyx_v_size); /* proto */
static PyObject *__pyx_pf_5graph_7GraphCy_15get_NodeVisited_genexpr(PyObject *__pyx_self, int __pyx_genexpr_arg_0); /* proto */
static PyObject *__pyx_pf_5graph_7GraphCy_20get_NodeVisited(struct __pyx_obj_5graph_GraphCy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5graph_7GraphCy_22addEdge(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, PyObject *__pyx_v_ptOinfo, PyObject *__pyx_v_ptDinfo, PyObject *__pyx_v_lninfo); /* proto */
static PyObject *__pyx_pf_5graph_7GraphCy_24addNode(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, PyObject *__pyx_v_ptinfo); /* proto */
static PyObject *__pyx_pf_5graph_7GraphCy_26changeNode(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, PyObject *__pyx_v_ptinfo); /* proto */
static PyObject *__pyx_pf_5graph_7GraphCy_28addEdgefromNodes(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, PyObject *__pyx_v_ptOid, PyObject *__pyx_v_ptDid, PyObject *__pyx_v_lninfo); /* proto */
static PyObject *__pyx_pf_5graph_7GraphCy_30addNodes(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, PyObject *__pyx_v_ptsinfo); /* proto */
static PyObject *__pyx_pf_5graph_7GraphCy_32fromGeopandas_Edges(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, PyObject *__pyx_v_dfNetwork, PyObject *__pyx_v_A_Lnlength, PyObject *__pyx_v_A_LnlengthR, PyObject *__pyx_v_A_LnW, PyObject *__pyx_v_A_PtstW, PyObject *__pyx_v_A_PtstC, PyObject *__pyx_v_A_PtedW, PyObject *__pyx_v_A_PtedC); /* proto */
static PyObject *__pyx_pf_5graph_7GraphCy_34removeEdge(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, PyObject *__pyx_v_idx); /* proto */
static PyObject *__pyx_pf_5graph_7GraphCy_36removeEdges(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, PyObject *__pyx_v_ids); /* proto */
static PyObject *__pyx_pf_5graph_7GraphCy_38removeNode(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, PyObject *__pyx_v_idx); /* proto */
static PyObject *__pyx_pf_5graph_7GraphCy_40PathLength(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, PyObject *__pyx_v_edges); /* proto */
static PyObject *__pyx_pf_5graph_7GraphCy_42PathFind_Dijkstra(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, int __pyx_v_NidO, int __pyx_v_NidD, float __pyx_v_LimDist, int __pyx_v_LimCycle); /* proto */
static PyObject *__pyx_pf_5graph_7GraphCy_44PathDist_Dijkstra(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, int __pyx_v_NidO, int __pyx_v_NidD, float __pyx_v_LimDist, int __pyx_v_LimCycle); /* proto */
static PyObject *__pyx_pf_5graph_7GraphCy_46PathFind_AStar(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, int __pyx_v_NidO, int __pyx_v_NidD, float __pyx_v_LimDist, int __pyx_v_LimCycle, float __pyx_v_DistMul); /* proto */
static PyObject *__pyx_pf_5graph_7GraphCy_48PathFind_AStar_VirtuEntry(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, int __pyx_v_EidO, __pyx_ctuple_float__and_float__and_float __pyx_v_PtO, __pyx_ctuple_float__and_float __pyx_v_DstO, int __pyx_v_EidD, __pyx_ctuple_float__and_float__and_float __pyx_v_PtD, __pyx_ctuple_float__and_float __pyx_v_DstD, float __pyx_v_LimDist, int __pyx_v_LimCycle, float __pyx_v_DistMul); /* proto */
static PyObject *__pyx_pf_5graph_7GraphCy_50PathDist_AStar(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, int __pyx_v_NidO, int __pyx_v_NidD, float __pyx_v_LimDist, int __pyx_v_LimCycle, float __pyx_v_DistMul); /* proto */
static PyObject *__pyx_pf_5graph_7GraphCy_52PathDist_AStar_VirtuEntry(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, int __pyx_v_EidO, __pyx_ctuple_float__and_float__and_float __pyx_v_PtO, __pyx_ctuple_float__and_float __pyx_v_DstO, int __pyx_v_EidD, __pyx_ctuple_float__and_float__and_float __pyx_v_PtD, __pyx_ctuple_float__and_float __pyx_v_DstD, float __pyx_v_LimDist, int __pyx_v_LimCycle, float __pyx_v_DistMul); /* proto */
static PyObject *__pyx_pf_5graph_7GraphCy_54PathDistComp_AStar_VirtuEntry(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, int __pyx_v_EidO, __pyx_ctuple_float__and_float__and_float __pyx_v_PtO, __pyx_ctuple_float__and_float __pyx_v_DstO, int __pyx_v_EidD, __pyx_ctuple_float__and_float__and_float __pyx_v_PtD, __pyx_ctuple_float__and_float __pyx_v_DstD, float __pyx_v_LimDist, int __pyx_v_LimCycle, float __pyx_v_DistMul); /* proto */
static PyObject *__pyx_pf_5graph_7GraphCy_9PathReach_genexpr(PyObject *__pyx_self, std::vector<std::pair<int,float> > ::size_type __pyx_genexpr_arg_0); /* proto */
static PyObject *__pyx_pf_5graph_7GraphCy_9PathReach_3genexpr(CYTHON_UNUSED PyObject *__pyx_self, std::vector<std::pair<int,float> >  __pyx_genexpr_arg_0); /* proto */
static PyObject *__pyx_pf_5graph_7GraphCy_56PathReach(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, int __pyx_v_NidO, float __pyx_v_LimDist, int __pyx_v_LimCycle); /* proto */
static PyObject *__pyx_pf_5graph_7GraphCy_58PathFind_Multi(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, int __pyx_v_NidO, int __pyx_v_NidD, float __pyx_v_DistMulLim, float __pyx_v_LimDist, int __pyx_v_LimCycle, float __pyx_v_DistMul, float __pyx_v_EdgeCmin, int __pyx_v_ForceOri, int __pyx_v_ForceDst, int __pyx_v_PathLim); /* proto */
static PyObject *__pyx_pf_5graph_7GraphCy_60PathFind_Multi_VirtuEntry(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, int __pyx_v_EidO, __pyx_ctuple_float__and_float__and_float __pyx_v_PtO, __pyx_ctuple_float__and_float __pyx_v_DstO, int __pyx_v_EidD, __pyx_ctuple_float__and_float__and_float __pyx_v_PtD, __pyx_ctuple_float__and_float __pyx_v_DstD, float __pyx_v_DistMulLim, float __pyx_v_LimDist, int __pyx_v_LimCycle, float __pyx_v_DistMul, float __pyx_v_EdgeCmin, int __pyx_v_PathLim); /* proto */
static PyObject *__pyx_pf_5graph_7GraphCy_62PathFind_Multi_MultiDest_VirtuEntry(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, int __pyx_v_EidO, __pyx_ctuple_float__and_float__and_float __pyx_v_PtO, __pyx_ctuple_float__and_float __pyx_v_DstO, int __pyx_v_Oid, PyObject *__pyx_v_DestTup, float __pyx_v_DistMulLim, float __pyx_v_LimDist, int __pyx_v_LimCycle, float __pyx_v_DistMul, int __pyx_v_PathLim); /* proto */
static PyObject *__pyx_tp_new_5graph_PriorityQueue_NR(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5graph_GraphCy(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5graph___pyx_scope_struct_1_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5graph___pyx_scope_struct_3_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5graph___pyx_scope_struct_4___reduce_ex__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5graph___pyx_scope_struct_5_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5graph___pyx_scope_struct_6_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5graph___pyx_scope_struct_7_get_NodeVisited(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5graph___pyx_scope_struct_8_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5graph___pyx_scope_struct_9_PathReach(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5graph___pyx_scope_struct_10_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5graph___pyx_scope_struct_11_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  #ifdef __Pyx_Generator_USED
  PyTypeObject *__pyx_GeneratorType;
  #endif
  #ifdef __Pyx_IterableCoroutine_USED
  PyTypeObject *__pyx_IterableCoroutineType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineAwaitType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineType;
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  PyObject *__pyx_type_5graph_PriorityQueue_NR;
  PyObject *__pyx_type_5graph_GraphCy;
  PyObject *__pyx_type_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple;
  PyObject *__pyx_type_5graph___pyx_scope_struct_1_genexpr;
  PyObject *__pyx_type_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple;
  PyObject *__pyx_type_5graph___pyx_scope_struct_3_genexpr;
  PyObject *__pyx_type_5graph___pyx_scope_struct_4___reduce_ex__;
  PyObject *__pyx_type_5graph___pyx_scope_struct_5_genexpr;
  PyObject *__pyx_type_5graph___pyx_scope_struct_6_genexpr;
  PyObject *__pyx_type_5graph___pyx_scope_struct_7_get_NodeVisited;
  PyObject *__pyx_type_5graph___pyx_scope_struct_8_genexpr;
  PyObject *__pyx_type_5graph___pyx_scope_struct_9_PathReach;
  PyObject *__pyx_type_5graph___pyx_scope_struct_10_genexpr;
  PyObject *__pyx_type_5graph___pyx_scope_struct_11_genexpr;
  #endif
  PyTypeObject *__pyx_ptype_5graph_PriorityQueue_NR;
  PyTypeObject *__pyx_ptype_5graph_GraphCy;
  PyTypeObject *__pyx_ptype_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple;
  PyTypeObject *__pyx_ptype_5graph___pyx_scope_struct_1_genexpr;
  PyTypeObject *__pyx_ptype_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple;
  PyTypeObject *__pyx_ptype_5graph___pyx_scope_struct_3_genexpr;
  PyTypeObject *__pyx_ptype_5graph___pyx_scope_struct_4___reduce_ex__;
  PyTypeObject *__pyx_ptype_5graph___pyx_scope_struct_5_genexpr;
  PyTypeObject *__pyx_ptype_5graph___pyx_scope_struct_6_genexpr;
  PyTypeObject *__pyx_ptype_5graph___pyx_scope_struct_7_get_NodeVisited;
  PyTypeObject *__pyx_ptype_5graph___pyx_scope_struct_8_genexpr;
  PyTypeObject *__pyx_ptype_5graph___pyx_scope_struct_9_PathReach;
  PyTypeObject *__pyx_ptype_5graph___pyx_scope_struct_10_genexpr;
  PyTypeObject *__pyx_ptype_5graph___pyx_scope_struct_11_genexpr;
  PyObject *__pyx_n_s_A_LnW;
  PyObject *__pyx_n_s_A_Lnlength;
  PyObject *__pyx_n_s_A_LnlengthR;
  PyObject *__pyx_n_s_A_PtedC;
  PyObject *__pyx_n_s_A_PtedW;
  PyObject *__pyx_n_s_A_PtstC;
  PyObject *__pyx_n_s_A_PtstW;
  PyObject *__pyx_kp_s_Atribute_for_line_length_not_fou;
  PyObject *__pyx_kp_s_Atribute_for_line_length_reverse;
  PyObject *__pyx_kp_s_Attribute_for_line_weight_not_fo;
  PyObject *__pyx_n_s_BaseDist;
  PyObject *__pyx_n_s_DestTup;
  PyObject *__pyx_n_s_DistD;
  PyObject *__pyx_n_s_DistMul;
  PyObject *__pyx_n_s_DistMulLim;
  PyObject *__pyx_n_s_DistO;
  PyObject *__pyx_n_s_DstD;
  PyObject *__pyx_n_s_DstO;
  PyObject *__pyx_n_s_EdgeC;
  PyObject *__pyx_n_s_EdgeCmin;
  PyObject *__pyx_kp_s_Edge_point_end_cost_attribute_no;
  PyObject *__pyx_kp_s_Edge_point_end_weight_attribute;
  PyObject *__pyx_kp_s_Edge_point_start_cost_attribute;
  PyObject *__pyx_kp_s_Edge_point_start_weight_attribut;
  PyObject *__pyx_kp_u_Edges;
  PyObject *__pyx_n_s_EdgesFringe;
  PyObject *__pyx_n_s_EdgesReach;
  PyObject *__pyx_n_s_EdgesReachSize;
  PyObject *__pyx_n_s_EdgesReach_EidVec;
  PyObject *__pyx_n_s_Eid;
  PyObject *__pyx_n_s_EidD;
  PyObject *__pyx_n_s_EidN;
  PyObject *__pyx_n_s_EidO;
  PyObject *__pyx_n_s_Eididx;
  PyObject *__pyx_n_s_Float_array_tuple_locals_genexpr;
  PyObject *__pyx_n_s_ForceDst;
  PyObject *__pyx_n_s_ForceOri;
  PyObject *__pyx_n_s_FoundDistance;
  PyObject *__pyx_n_s_FoundPaths;
  PyObject *__pyx_n_s_FoundWeights;
  PyObject *__pyx_n_s_GraphCy;
  PyObject *__pyx_n_s_GraphCy_PathDistComp_AStar_Virtu;
  PyObject *__pyx_n_s_GraphCy_PathDist_AStar;
  PyObject *__pyx_n_s_GraphCy_PathDist_AStar_VirtuEntr;
  PyObject *__pyx_n_s_GraphCy_PathDist_Dijkstra;
  PyObject *__pyx_n_s_GraphCy_PathFind_AStar;
  PyObject *__pyx_n_s_GraphCy_PathFind_AStar_VirtuEntr;
  PyObject *__pyx_n_s_GraphCy_PathFind_Dijkstra;
  PyObject *__pyx_n_s_GraphCy_PathFind_Multi;
  PyObject *__pyx_n_s_GraphCy_PathFind_Multi_MultiDest;
  PyObject *__pyx_n_s_GraphCy_PathFind_Multi_VirtuEntr;
  PyObject *__pyx_n_s_GraphCy_PathLength;
  PyObject *__pyx_n_s_GraphCy_PathReach;
  PyObject *__pyx_n_s_GraphCy___reduce_ex;
  PyObject *__pyx_n_s_GraphCy__reconstruct;
  PyObject *__pyx_n_s_GraphCy_addEdge;
  PyObject *__pyx_n_s_GraphCy_addEdgefromNodes;
  PyObject *__pyx_n_s_GraphCy_addNode;
  PyObject *__pyx_n_s_GraphCy_addNodes;
  PyObject *__pyx_n_s_GraphCy_arraySizeInfo;
  PyObject *__pyx_n_s_GraphCy_changeNode;
  PyObject *__pyx_n_s_GraphCy_fromGeopandas_Edges;
  PyObject *__pyx_n_s_GraphCy_get_NodeVisited;
  PyObject *__pyx_kp_u_GraphCy_object_of;
  PyObject *__pyx_n_s_GraphCy_reallocEdges;
  PyObject *__pyx_n_s_GraphCy_reallocNodes;
  PyObject *__pyx_n_s_GraphCy_removeEdge;
  PyObject *__pyx_n_s_GraphCy_removeEdges;
  PyObject *__pyx_n_s_GraphCy_removeNode;
  PyObject *__pyx_n_s_GraphCy_sizeInfo;
  PyObject *__pyx_n_s_IndexError;
  PyObject *__pyx_kp_s_Index_out_of_range;
  PyObject *__pyx_n_s_Int_array_tuple_locals_genexpr;
  PyObject *__pyx_n_s_LimCycle;
  PyObject *__pyx_n_s_LimDist;
  PyObject *__pyx_n_s_LimitDistance;
  PyObject *__pyx_n_s_List;
  PyObject *__pyx_n_s_LnW;
  PyObject *__pyx_n_s_Lnlength;
  PyObject *__pyx_n_s_LnlengthR;
  PyObject *__pyx_n_s_MappedPath_T;
  PyObject *__pyx_n_s_MappedPath_T2;
  PyObject *__pyx_n_s_MappedPaths;
  PyObject *__pyx_n_s_MemoryError;
  PyObject *__pyx_n_s_MinimumDistance;
  PyObject *__pyx_n_s_Nedges;
  PyObject *__pyx_n_s_NidD;
  PyObject *__pyx_n_s_NidF;
  PyObject *__pyx_n_s_NidO;
  PyObject *__pyx_n_s_Nnodes;
  PyObject *__pyx_n_s_NodeCheck;
  PyObject *__pyx_n_s_NodeReach_T;
  PyObject *__pyx_n_s_NodeTarget;
  PyObject *__pyx_kp_u_Nodes;
  PyObject *__pyx_n_s_None;
  PyObject *__pyx_n_s_Oid;
  PyObject *__pyx_n_s_OpenNodes;
  PyObject *__pyx_n_s_OverflowError;
  PyObject *__pyx_n_s_PathDistComp_AStar_VirtuEntry;
  PyObject *__pyx_n_s_PathDist_AStar;
  PyObject *__pyx_n_s_PathDist_AStar_VirtuEntry;
  PyObject *__pyx_n_s_PathDist_Dijkstra;
  PyObject *__pyx_n_s_PathFind_AStar;
  PyObject *__pyx_n_s_PathFind_AStar_VirtuEntry;
  PyObject *__pyx_n_s_PathFind_Dijkstra;
  PyObject *__pyx_n_s_PathFind_Multi;
  PyObject *__pyx_n_s_PathFind_Multi_MultiDest_VirtuEn;
  PyObject *__pyx_n_s_PathFind_Multi_VirtuEntry;
  PyObject *__pyx_n_s_PathLength;
  PyObject *__pyx_n_s_PathLim;
  PyObject *__pyx_n_s_PathReach;
  PyObject *__pyx_n_s_PathReach_locals_genexpr;
  PyObject *__pyx_n_s_PointD;
  PyObject *__pyx_n_s_PointO;
  PyObject *__pyx_n_s_PriorityQueue_NR;
  PyObject *__pyx_n_s_PriorityQueue_NR___reduce_cython;
  PyObject *__pyx_n_s_PriorityQueue_NR___setstate_cyth;
  PyObject *__pyx_kp_u_PriorityQueue_Size;
  PyObject *__pyx_n_s_PtD;
  PyObject *__pyx_n_s_PtO;
  PyObject *__pyx_n_s_PtedC;
  PyObject *__pyx_n_s_PtedW;
  PyObject *__pyx_n_s_PtstC;
  PyObject *__pyx_n_s_PtstW;
  PyObject *__pyx_n_s_RemainDist;
  PyObject *__pyx_n_s_State_3d;
  PyObject *__pyx_n_s_TypeError;
  PyObject *__pyx_kp_s_Warning_resizing_nodes_array_sma;
  PyObject *__pyx_n_s__22;
  PyObject *__pyx_kp_u__23;
  PyObject *__pyx_kp_u__5;
  PyObject *__pyx_n_s__92;
  PyObject *__pyx_n_s_addEdge;
  PyObject *__pyx_n_s_addEdgefromNodes;
  PyObject *__pyx_n_s_addNode;
  PyObject *__pyx_n_s_addNodes;
  PyObject *__pyx_n_s_args;
  PyObject *__pyx_n_s_arraySizeInfo;
  PyObject *__pyx_n_s_asyncio_coroutines;
  PyObject *__pyx_n_s_changeNode;
  PyObject *__pyx_n_s_ckEd;
  PyObject *__pyx_n_s_ckSt;
  PyObject *__pyx_n_s_class_getitem;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_s_close;
  PyObject *__pyx_n_s_columns;
  PyObject *__pyx_n_s_coord;
  PyObject *__pyx_n_s_coords;
  PyObject *__pyx_n_s_cycles;
  PyObject *__pyx_n_s_dest;
  PyObject *__pyx_n_s_dfKeys;
  PyObject *__pyx_n_s_dfNetwork;
  PyObject *__pyx_n_s_dfSize;
  PyObject *__pyx_n_s_dict;
  PyObject *__pyx_kp_u_disable;
  PyObject *__pyx_n_s_dist3d_Py;
  PyObject *__pyx_n_s_edgeVector;
  PyObject *__pyx_n_s_edgeidCnt;
  PyObject *__pyx_n_s_edgeids;
  PyObject *__pyx_n_s_edges;
  PyObject *__pyx_n_s_edgesize;
  PyObject *__pyx_n_s_elook;
  PyObject *__pyx_kp_u_enable;
  PyObject *__pyx_n_s_enumerate;
  PyObject *__pyx_n_s_float;
  PyObject *__pyx_n_s_flook;
  PyObject *__pyx_n_s_fromGeopandas_Edges;
  PyObject *__pyx_kp_u_gc;
  PyObject *__pyx_n_s_gcy;
  PyObject *__pyx_n_s_genexpr;
  PyObject *__pyx_n_s_geometry;
  PyObject *__pyx_n_s_geopandas;
  PyObject *__pyx_n_s_get_NodeVisited;
  PyObject *__pyx_n_s_get_NodeVisited_locals_genexpr;
  PyObject *__pyx_n_s_getstate;
  PyObject *__pyx_n_s_gpd;
  PyObject *__pyx_kp_s_gpd_GeoDataFrame;
  PyObject *__pyx_n_s_graph;
  PyObject *__pyx_kp_s_graph_pyx;
  PyObject *__pyx_n_s_i;
  PyObject *__pyx_n_s_idEd;
  PyObject *__pyx_n_s_idSt;
  PyObject *__pyx_n_s_ids;
  PyObject *__pyx_n_s_idx;
  PyObject *__pyx_n_s_import;
  PyObject *__pyx_n_s_index;
  PyObject *__pyx_n_s_initializing;
  PyObject *__pyx_n_s_int;
  PyObject *__pyx_kp_s_int_None;
  PyObject *__pyx_n_s_is_coroutine;
  PyObject *__pyx_kp_u_isenabled;
  PyObject *__pyx_n_s_iterrows;
  PyObject *__pyx_n_s_keepGoing;
  PyObject *__pyx_n_s_len;
  PyObject *__pyx_n_s_lenE;
  PyObject *__pyx_n_s_length;
  PyObject *__pyx_n_s_lnEd;
  PyObject *__pyx_n_s_lnSt;
  PyObject *__pyx_n_s_lninfo;
  PyObject *__pyx_n_s_m;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_n;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_nlook;
  PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
  PyObject *__pyx_n_s_nodeMapped;
  PyObject *__pyx_n_s_nodeids;
  PyObject *__pyx_n_s_nodes;
  PyObject *__pyx_n_s_nodesize;
  PyObject *__pyx_n_s_numbers;
  PyObject *__pyx_n_s_outtup;
  PyObject *__pyx_n_s_p1;
  PyObject *__pyx_n_s_p2;
  PyObject *__pyx_n_s_pathN;
  PyObject *__pyx_n_s_pathlength;
  PyObject *__pyx_n_s_pointCoords;
  PyObject *__pyx_n_s_pointidCnt;
  PyObject *__pyx_n_s_print;
  PyObject *__pyx_n_s_protocol;
  PyObject *__pyx_n_s_pt;
  PyObject *__pyx_n_s_ptDcoord;
  PyObject *__pyx_n_s_ptDid;
  PyObject *__pyx_n_s_ptDinfo;
  PyObject *__pyx_n_s_ptOcoord;
  PyObject *__pyx_n_s_ptOid;
  PyObject *__pyx_n_s_ptOinfo;
  PyObject *__pyx_n_s_pth;
  PyObject *__pyx_n_s_ptinfo;
  PyObject *__pyx_n_s_ptsinfo;
  PyObject *__pyx_n_s_pySmallestMissing;
  PyObject *__pyx_n_s_pyx_state;
  PyObject *__pyx_n_s_pyx_vtable;
  PyObject *__pyx_n_s_range;
  PyObject *__pyx_n_s_reallocEdges;
  PyObject *__pyx_n_s_reallocNodes;
  PyObject *__pyx_n_s_reconstruct;
  PyObject *__pyx_n_s_reduce;
  PyObject *__pyx_n_s_reduce_cython;
  PyObject *__pyx_n_s_reduce_ex;
  PyObject *__pyx_n_s_reduce_ex___locals_genexpr;
  PyObject *__pyx_n_s_regEdges;
  PyObject *__pyx_n_s_regNodes;
  PyObject *__pyx_n_s_remainingDist;
  PyObject *__pyx_n_s_removeEdge;
  PyObject *__pyx_n_s_removeEdges;
  PyObject *__pyx_n_s_removeNode;
  PyObject *__pyx_n_s_return;
  PyObject *__pyx_n_s_row;
  PyObject *__pyx_n_s_self;
  PyObject *__pyx_n_s_send;
  PyObject *__pyx_n_s_setstate;
  PyObject *__pyx_n_s_setstate_cython;
  PyObject *__pyx_n_s_size;
  PyObject *__pyx_n_s_sizeInfo;
  PyObject *__pyx_n_s_spec;
  PyObject *__pyx_n_s_startNode;
  PyObject *__pyx_n_s_staticmethod;
  PyObject *__pyx_kp_s_str_None;
  PyObject *__pyx_kp_s_stringsource;
  PyObject *__pyx_n_s_tempC;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_n_s_threeD;
  PyObject *__pyx_n_s_throw;
  PyObject *__pyx_n_s_tuple;
  PyObject *__pyx_kp_s_tuple_float_float;
  PyObject *__pyx_kp_s_tuple_float_tuple_int;
  PyObject *__pyx_kp_s_tuple_int_int;
  PyObject *__pyx_kp_s_tuple_tuple_float_tuple_int_None;
  PyObject *__pyx_kp_s_tuple_tuple_int_float;
  PyObject *__pyx_n_s_typing;
  PyObject *__pyx_n_s_v;
  PyObject *__pyx_float_0_0;
  PyObject *__pyx_float_0_9;
  PyObject *__pyx_float_1_0;
  PyObject *__pyx_float_1_1;
  PyObject *__pyx_float_2_0;
  PyObject *__pyx_float_1000_0;
  PyObject *__pyx_float_10000_0;
  PyObject *__pyx_float_neg_1_0;
  PyObject *__pyx_int_10;
  PyObject *__pyx_int_100;
  PyObject *__pyx_int_10000;
  PyObject *__pyx_int_100000;
  PyObject *__pyx_int_1000000;
  PyObject *__pyx_int_10000000;
  PyObject *__pyx_int_1000000000;
  PyObject *__pyx_int_neg_1;
  PyObject *__pyx_k__2;
  PyObject *__pyx_k__3;
  PyObject *__pyx_k__4;
  float __pyx_k__20;
  float __pyx_k__21;
  PyObject *__pyx_tuple_;
  PyObject *__pyx_tuple__6;
  PyObject *__pyx_tuple__7;
  PyObject *__pyx_tuple__8;
  PyObject *__pyx_tuple__9;
  PyObject *__pyx_tuple__10;
  PyObject *__pyx_tuple__11;
  PyObject *__pyx_tuple__12;
  PyObject *__pyx_tuple__13;
  PyObject *__pyx_tuple__14;
  PyObject *__pyx_tuple__15;
  PyObject *__pyx_tuple__16;
  PyObject *__pyx_tuple__17;
  PyObject *__pyx_tuple__18;
  PyObject *__pyx_tuple__19;
  PyObject *__pyx_tuple__24;
  PyObject *__pyx_tuple__26;
  PyObject *__pyx_tuple__28;
  PyObject *__pyx_tuple__30;
  PyObject *__pyx_tuple__32;
  PyObject *__pyx_tuple__34;
  PyObject *__pyx_tuple__36;
  PyObject *__pyx_tuple__39;
  PyObject *__pyx_tuple__41;
  PyObject *__pyx_tuple__42;
  PyObject *__pyx_tuple__44;
  PyObject *__pyx_tuple__46;
  PyObject *__pyx_tuple__48;
  PyObject *__pyx_tuple__51;
  PyObject *__pyx_tuple__53;
  PyObject *__pyx_tuple__55;
  PyObject *__pyx_tuple__57;
  PyObject *__pyx_tuple__58;
  PyObject *__pyx_tuple__60;
  PyObject *__pyx_tuple__63;
  PyObject *__pyx_tuple__65;
  PyObject *__pyx_tuple__67;
  PyObject *__pyx_tuple__68;
  PyObject *__pyx_tuple__70;
  PyObject *__pyx_tuple__72;
  PyObject *__pyx_tuple__73;
  PyObject *__pyx_tuple__75;
  PyObject *__pyx_tuple__77;
  PyObject *__pyx_tuple__80;
  PyObject *__pyx_tuple__82;
  PyObject *__pyx_tuple__83;
  PyObject *__pyx_tuple__85;
  PyObject *__pyx_tuple__86;
  PyObject *__pyx_tuple__88;
  PyObject *__pyx_tuple__89;
  PyObject *__pyx_tuple__91;
  PyObject *__pyx_codeobj__25;
  PyObject *__pyx_codeobj__27;
  PyObject *__pyx_codeobj__29;
  PyObject *__pyx_codeobj__31;
  PyObject *__pyx_codeobj__33;
  PyObject *__pyx_codeobj__35;
  PyObject *__pyx_codeobj__37;
  PyObject *__pyx_codeobj__38;
  PyObject *__pyx_codeobj__40;
  PyObject *__pyx_codeobj__43;
  PyObject *__pyx_codeobj__45;
  PyObject *__pyx_codeobj__47;
  PyObject *__pyx_codeobj__49;
  PyObject *__pyx_codeobj__50;
  PyObject *__pyx_codeobj__52;
  PyObject *__pyx_codeobj__54;
  PyObject *__pyx_codeobj__56;
  PyObject *__pyx_codeobj__59;
  PyObject *__pyx_codeobj__61;
  PyObject *__pyx_codeobj__62;
  PyObject *__pyx_codeobj__64;
  PyObject *__pyx_codeobj__66;
  PyObject *__pyx_codeobj__69;
  PyObject *__pyx_codeobj__71;
  PyObject *__pyx_codeobj__74;
  PyObject *__pyx_codeobj__76;
  PyObject *__pyx_codeobj__78;
  PyObject *__pyx_codeobj__79;
  PyObject *__pyx_codeobj__81;
  PyObject *__pyx_codeobj__84;
  PyObject *__pyx_codeobj__87;
  PyObject *__pyx_codeobj__90;
} __pyx_mstate;

#if CYTHON_USE_MODULE_STATE
#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#else
static __pyx_mstate __pyx_mstate_global_static =
#ifdef __cplusplus
    {};
#else
    {0};
#endif
static __pyx_mstate *__pyx_mstate_global = &__pyx_mstate_global_static;
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_5graph_PriorityQueue_NR);
  Py_CLEAR(clear_module_state->__pyx_type_5graph_PriorityQueue_NR);
  Py_CLEAR(clear_module_state->__pyx_ptype_5graph_GraphCy);
  Py_CLEAR(clear_module_state->__pyx_type_5graph_GraphCy);
  Py_CLEAR(clear_module_state->__pyx_ptype_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple);
  Py_CLEAR(clear_module_state->__pyx_type_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple);
  Py_CLEAR(clear_module_state->__pyx_ptype_5graph___pyx_scope_struct_1_genexpr);
  Py_CLEAR(clear_module_state->__pyx_type_5graph___pyx_scope_struct_1_genexpr);
  Py_CLEAR(clear_module_state->__pyx_ptype_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple);
  Py_CLEAR(clear_module_state->__pyx_type_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple);
  Py_CLEAR(clear_module_state->__pyx_ptype_5graph___pyx_scope_struct_3_genexpr);
  Py_CLEAR(clear_module_state->__pyx_type_5graph___pyx_scope_struct_3_genexpr);
  Py_CLEAR(clear_module_state->__pyx_ptype_5graph___pyx_scope_struct_4___reduce_ex__);
  Py_CLEAR(clear_module_state->__pyx_type_5graph___pyx_scope_struct_4___reduce_ex__);
  Py_CLEAR(clear_module_state->__pyx_ptype_5graph___pyx_scope_struct_5_genexpr);
  Py_CLEAR(clear_module_state->__pyx_type_5graph___pyx_scope_struct_5_genexpr);
  Py_CLEAR(clear_module_state->__pyx_ptype_5graph___pyx_scope_struct_6_genexpr);
  Py_CLEAR(clear_module_state->__pyx_type_5graph___pyx_scope_struct_6_genexpr);
  Py_CLEAR(clear_module_state->__pyx_ptype_5graph___pyx_scope_struct_7_get_NodeVisited);
  Py_CLEAR(clear_module_state->__pyx_type_5graph___pyx_scope_struct_7_get_NodeVisited);
  Py_CLEAR(clear_module_state->__pyx_ptype_5graph___pyx_scope_struct_8_genexpr);
  Py_CLEAR(clear_module_state->__pyx_type_5graph___pyx_scope_struct_8_genexpr);
  Py_CLEAR(clear_module_state->__pyx_ptype_5graph___pyx_scope_struct_9_PathReach);
  Py_CLEAR(clear_module_state->__pyx_type_5graph___pyx_scope_struct_9_PathReach);
  Py_CLEAR(clear_module_state->__pyx_ptype_5graph___pyx_scope_struct_10_genexpr);
  Py_CLEAR(clear_module_state->__pyx_type_5graph___pyx_scope_struct_10_genexpr);
  Py_CLEAR(clear_module_state->__pyx_ptype_5graph___pyx_scope_struct_11_genexpr);
  Py_CLEAR(clear_module_state->__pyx_type_5graph___pyx_scope_struct_11_genexpr);
  Py_CLEAR(clear_module_state->__pyx_n_s_A_LnW);
  Py_CLEAR(clear_module_state->__pyx_n_s_A_Lnlength);
  Py_CLEAR(clear_module_state->__pyx_n_s_A_LnlengthR);
  Py_CLEAR(clear_module_state->__pyx_n_s_A_PtedC);
  Py_CLEAR(clear_module_state->__pyx_n_s_A_PtedW);
  Py_CLEAR(clear_module_state->__pyx_n_s_A_PtstC);
  Py_CLEAR(clear_module_state->__pyx_n_s_A_PtstW);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Atribute_for_line_length_not_fou);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Atribute_for_line_length_reverse);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Attribute_for_line_weight_not_fo);
  Py_CLEAR(clear_module_state->__pyx_n_s_BaseDist);
  Py_CLEAR(clear_module_state->__pyx_n_s_DestTup);
  Py_CLEAR(clear_module_state->__pyx_n_s_DistD);
  Py_CLEAR(clear_module_state->__pyx_n_s_DistMul);
  Py_CLEAR(clear_module_state->__pyx_n_s_DistMulLim);
  Py_CLEAR(clear_module_state->__pyx_n_s_DistO);
  Py_CLEAR(clear_module_state->__pyx_n_s_DstD);
  Py_CLEAR(clear_module_state->__pyx_n_s_DstO);
  Py_CLEAR(clear_module_state->__pyx_n_s_EdgeC);
  Py_CLEAR(clear_module_state->__pyx_n_s_EdgeCmin);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Edge_point_end_cost_attribute_no);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Edge_point_end_weight_attribute);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Edge_point_start_cost_attribute);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Edge_point_start_weight_attribut);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Edges);
  Py_CLEAR(clear_module_state->__pyx_n_s_EdgesFringe);
  Py_CLEAR(clear_module_state->__pyx_n_s_EdgesReach);
  Py_CLEAR(clear_module_state->__pyx_n_s_EdgesReachSize);
  Py_CLEAR(clear_module_state->__pyx_n_s_EdgesReach_EidVec);
  Py_CLEAR(clear_module_state->__pyx_n_s_Eid);
  Py_CLEAR(clear_module_state->__pyx_n_s_EidD);
  Py_CLEAR(clear_module_state->__pyx_n_s_EidN);
  Py_CLEAR(clear_module_state->__pyx_n_s_EidO);
  Py_CLEAR(clear_module_state->__pyx_n_s_Eididx);
  Py_CLEAR(clear_module_state->__pyx_n_s_Float_array_tuple_locals_genexpr);
  Py_CLEAR(clear_module_state->__pyx_n_s_ForceDst);
  Py_CLEAR(clear_module_state->__pyx_n_s_ForceOri);
  Py_CLEAR(clear_module_state->__pyx_n_s_FoundDistance);
  Py_CLEAR(clear_module_state->__pyx_n_s_FoundPaths);
  Py_CLEAR(clear_module_state->__pyx_n_s_FoundWeights);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphCy);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphCy_PathDistComp_AStar_Virtu);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphCy_PathDist_AStar);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphCy_PathDist_AStar_VirtuEntr);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphCy_PathDist_Dijkstra);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphCy_PathFind_AStar);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphCy_PathFind_AStar_VirtuEntr);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphCy_PathFind_Dijkstra);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphCy_PathFind_Multi);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphCy_PathFind_Multi_MultiDest);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphCy_PathFind_Multi_VirtuEntr);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphCy_PathLength);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphCy_PathReach);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphCy___reduce_ex);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphCy__reconstruct);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphCy_addEdge);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphCy_addEdgefromNodes);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphCy_addNode);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphCy_addNodes);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphCy_arraySizeInfo);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphCy_changeNode);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphCy_fromGeopandas_Edges);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphCy_get_NodeVisited);
  Py_CLEAR(clear_module_state->__pyx_kp_u_GraphCy_object_of);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphCy_reallocEdges);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphCy_reallocNodes);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphCy_removeEdge);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphCy_removeEdges);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphCy_removeNode);
  Py_CLEAR(clear_module_state->__pyx_n_s_GraphCy_sizeInfo);
  Py_CLEAR(clear_module_state->__pyx_n_s_IndexError);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Index_out_of_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_Int_array_tuple_locals_genexpr);
  Py_CLEAR(clear_module_state->__pyx_n_s_LimCycle);
  Py_CLEAR(clear_module_state->__pyx_n_s_LimDist);
  Py_CLEAR(clear_module_state->__pyx_n_s_LimitDistance);
  Py_CLEAR(clear_module_state->__pyx_n_s_List);
  Py_CLEAR(clear_module_state->__pyx_n_s_LnW);
  Py_CLEAR(clear_module_state->__pyx_n_s_Lnlength);
  Py_CLEAR(clear_module_state->__pyx_n_s_LnlengthR);
  Py_CLEAR(clear_module_state->__pyx_n_s_MappedPath_T);
  Py_CLEAR(clear_module_state->__pyx_n_s_MappedPath_T2);
  Py_CLEAR(clear_module_state->__pyx_n_s_MappedPaths);
  Py_CLEAR(clear_module_state->__pyx_n_s_MemoryError);
  Py_CLEAR(clear_module_state->__pyx_n_s_MinimumDistance);
  Py_CLEAR(clear_module_state->__pyx_n_s_Nedges);
  Py_CLEAR(clear_module_state->__pyx_n_s_NidD);
  Py_CLEAR(clear_module_state->__pyx_n_s_NidF);
  Py_CLEAR(clear_module_state->__pyx_n_s_NidO);
  Py_CLEAR(clear_module_state->__pyx_n_s_Nnodes);
  Py_CLEAR(clear_module_state->__pyx_n_s_NodeCheck);
  Py_CLEAR(clear_module_state->__pyx_n_s_NodeReach_T);
  Py_CLEAR(clear_module_state->__pyx_n_s_NodeTarget);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Nodes);
  Py_CLEAR(clear_module_state->__pyx_n_s_None);
  Py_CLEAR(clear_module_state->__pyx_n_s_Oid);
  Py_CLEAR(clear_module_state->__pyx_n_s_OpenNodes);
  Py_CLEAR(clear_module_state->__pyx_n_s_OverflowError);
  Py_CLEAR(clear_module_state->__pyx_n_s_PathDistComp_AStar_VirtuEntry);
  Py_CLEAR(clear_module_state->__pyx_n_s_PathDist_AStar);
  Py_CLEAR(clear_module_state->__pyx_n_s_PathDist_AStar_VirtuEntry);
  Py_CLEAR(clear_module_state->__pyx_n_s_PathDist_Dijkstra);
  Py_CLEAR(clear_module_state->__pyx_n_s_PathFind_AStar);
  Py_CLEAR(clear_module_state->__pyx_n_s_PathFind_AStar_VirtuEntry);
  Py_CLEAR(clear_module_state->__pyx_n_s_PathFind_Dijkstra);
  Py_CLEAR(clear_module_state->__pyx_n_s_PathFind_Multi);
  Py_CLEAR(clear_module_state->__pyx_n_s_PathFind_Multi_MultiDest_VirtuEn);
  Py_CLEAR(clear_module_state->__pyx_n_s_PathFind_Multi_VirtuEntry);
  Py_CLEAR(clear_module_state->__pyx_n_s_PathLength);
  Py_CLEAR(clear_module_state->__pyx_n_s_PathLim);
  Py_CLEAR(clear_module_state->__pyx_n_s_PathReach);
  Py_CLEAR(clear_module_state->__pyx_n_s_PathReach_locals_genexpr);
  Py_CLEAR(clear_module_state->__pyx_n_s_PointD);
  Py_CLEAR(clear_module_state->__pyx_n_s_PointO);
  Py_CLEAR(clear_module_state->__pyx_n_s_PriorityQueue_NR);
  Py_CLEAR(clear_module_state->__pyx_n_s_PriorityQueue_NR___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_PriorityQueue_NR___setstate_cyth);
  Py_CLEAR(clear_module_state->__pyx_kp_u_PriorityQueue_Size);
  Py_CLEAR(clear_module_state->__pyx_n_s_PtD);
  Py_CLEAR(clear_module_state->__pyx_n_s_PtO);
  Py_CLEAR(clear_module_state->__pyx_n_s_PtedC);
  Py_CLEAR(clear_module_state->__pyx_n_s_PtedW);
  Py_CLEAR(clear_module_state->__pyx_n_s_PtstC);
  Py_CLEAR(clear_module_state->__pyx_n_s_PtstW);
  Py_CLEAR(clear_module_state->__pyx_n_s_RemainDist);
  Py_CLEAR(clear_module_state->__pyx_n_s_State_3d);
  Py_CLEAR(clear_module_state->__pyx_n_s_TypeError);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Warning_resizing_nodes_array_sma);
  Py_CLEAR(clear_module_state->__pyx_n_s__22);
  Py_CLEAR(clear_module_state->__pyx_kp_u__23);
  Py_CLEAR(clear_module_state->__pyx_kp_u__5);
  Py_CLEAR(clear_module_state->__pyx_n_s__92);
  Py_CLEAR(clear_module_state->__pyx_n_s_addEdge);
  Py_CLEAR(clear_module_state->__pyx_n_s_addEdgefromNodes);
  Py_CLEAR(clear_module_state->__pyx_n_s_addNode);
  Py_CLEAR(clear_module_state->__pyx_n_s_addNodes);
  Py_CLEAR(clear_module_state->__pyx_n_s_args);
  Py_CLEAR(clear_module_state->__pyx_n_s_arraySizeInfo);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio_coroutines);
  Py_CLEAR(clear_module_state->__pyx_n_s_changeNode);
  Py_CLEAR(clear_module_state->__pyx_n_s_ckEd);
  Py_CLEAR(clear_module_state->__pyx_n_s_ckSt);
  Py_CLEAR(clear_module_state->__pyx_n_s_class_getitem);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_s_close);
  Py_CLEAR(clear_module_state->__pyx_n_s_columns);
  Py_CLEAR(clear_module_state->__pyx_n_s_coord);
  Py_CLEAR(clear_module_state->__pyx_n_s_coords);
  Py_CLEAR(clear_module_state->__pyx_n_s_cycles);
  Py_CLEAR(clear_module_state->__pyx_n_s_dest);
  Py_CLEAR(clear_module_state->__pyx_n_s_dfKeys);
  Py_CLEAR(clear_module_state->__pyx_n_s_dfNetwork);
  Py_CLEAR(clear_module_state->__pyx_n_s_dfSize);
  Py_CLEAR(clear_module_state->__pyx_n_s_dict);
  Py_CLEAR(clear_module_state->__pyx_kp_u_disable);
  Py_CLEAR(clear_module_state->__pyx_n_s_dist3d_Py);
  Py_CLEAR(clear_module_state->__pyx_n_s_edgeVector);
  Py_CLEAR(clear_module_state->__pyx_n_s_edgeidCnt);
  Py_CLEAR(clear_module_state->__pyx_n_s_edgeids);
  Py_CLEAR(clear_module_state->__pyx_n_s_edges);
  Py_CLEAR(clear_module_state->__pyx_n_s_edgesize);
  Py_CLEAR(clear_module_state->__pyx_n_s_elook);
  Py_CLEAR(clear_module_state->__pyx_kp_u_enable);
  Py_CLEAR(clear_module_state->__pyx_n_s_enumerate);
  Py_CLEAR(clear_module_state->__pyx_n_s_float);
  Py_CLEAR(clear_module_state->__pyx_n_s_flook);
  Py_CLEAR(clear_module_state->__pyx_n_s_fromGeopandas_Edges);
  Py_CLEAR(clear_module_state->__pyx_kp_u_gc);
  Py_CLEAR(clear_module_state->__pyx_n_s_gcy);
  Py_CLEAR(clear_module_state->__pyx_n_s_genexpr);
  Py_CLEAR(clear_module_state->__pyx_n_s_geometry);
  Py_CLEAR(clear_module_state->__pyx_n_s_geopandas);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_NodeVisited);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_NodeVisited_locals_genexpr);
  Py_CLEAR(clear_module_state->__pyx_n_s_getstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_gpd);
  Py_CLEAR(clear_module_state->__pyx_kp_s_gpd_GeoDataFrame);
  Py_CLEAR(clear_module_state->__pyx_n_s_graph);
  Py_CLEAR(clear_module_state->__pyx_kp_s_graph_pyx);
  Py_CLEAR(clear_module_state->__pyx_n_s_i);
  Py_CLEAR(clear_module_state->__pyx_n_s_idEd);
  Py_CLEAR(clear_module_state->__pyx_n_s_idSt);
  Py_CLEAR(clear_module_state->__pyx_n_s_ids);
  Py_CLEAR(clear_module_state->__pyx_n_s_idx);
  Py_CLEAR(clear_module_state->__pyx_n_s_import);
  Py_CLEAR(clear_module_state->__pyx_n_s_index);
  Py_CLEAR(clear_module_state->__pyx_n_s_initializing);
  Py_CLEAR(clear_module_state->__pyx_n_s_int);
  Py_CLEAR(clear_module_state->__pyx_kp_s_int_None);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_coroutine);
  Py_CLEAR(clear_module_state->__pyx_kp_u_isenabled);
  Py_CLEAR(clear_module_state->__pyx_n_s_iterrows);
  Py_CLEAR(clear_module_state->__pyx_n_s_keepGoing);
  Py_CLEAR(clear_module_state->__pyx_n_s_len);
  Py_CLEAR(clear_module_state->__pyx_n_s_lenE);
  Py_CLEAR(clear_module_state->__pyx_n_s_length);
  Py_CLEAR(clear_module_state->__pyx_n_s_lnEd);
  Py_CLEAR(clear_module_state->__pyx_n_s_lnSt);
  Py_CLEAR(clear_module_state->__pyx_n_s_lninfo);
  Py_CLEAR(clear_module_state->__pyx_n_s_m);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_n);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_nlook);
  Py_CLEAR(clear_module_state->__pyx_kp_s_no_default___reduce___due_to_non);
  Py_CLEAR(clear_module_state->__pyx_n_s_nodeMapped);
  Py_CLEAR(clear_module_state->__pyx_n_s_nodeids);
  Py_CLEAR(clear_module_state->__pyx_n_s_nodes);
  Py_CLEAR(clear_module_state->__pyx_n_s_nodesize);
  Py_CLEAR(clear_module_state->__pyx_n_s_numbers);
  Py_CLEAR(clear_module_state->__pyx_n_s_outtup);
  Py_CLEAR(clear_module_state->__pyx_n_s_p1);
  Py_CLEAR(clear_module_state->__pyx_n_s_p2);
  Py_CLEAR(clear_module_state->__pyx_n_s_pathN);
  Py_CLEAR(clear_module_state->__pyx_n_s_pathlength);
  Py_CLEAR(clear_module_state->__pyx_n_s_pointCoords);
  Py_CLEAR(clear_module_state->__pyx_n_s_pointidCnt);
  Py_CLEAR(clear_module_state->__pyx_n_s_print);
  Py_CLEAR(clear_module_state->__pyx_n_s_protocol);
  Py_CLEAR(clear_module_state->__pyx_n_s_pt);
  Py_CLEAR(clear_module_state->__pyx_n_s_ptDcoord);
  Py_CLEAR(clear_module_state->__pyx_n_s_ptDid);
  Py_CLEAR(clear_module_state->__pyx_n_s_ptDinfo);
  Py_CLEAR(clear_module_state->__pyx_n_s_ptOcoord);
  Py_CLEAR(clear_module_state->__pyx_n_s_ptOid);
  Py_CLEAR(clear_module_state->__pyx_n_s_ptOinfo);
  Py_CLEAR(clear_module_state->__pyx_n_s_pth);
  Py_CLEAR(clear_module_state->__pyx_n_s_ptinfo);
  Py_CLEAR(clear_module_state->__pyx_n_s_ptsinfo);
  Py_CLEAR(clear_module_state->__pyx_n_s_pySmallestMissing);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_vtable);
  Py_CLEAR(clear_module_state->__pyx_n_s_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_reallocEdges);
  Py_CLEAR(clear_module_state->__pyx_n_s_reallocNodes);
  Py_CLEAR(clear_module_state->__pyx_n_s_reconstruct);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_ex);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_ex___locals_genexpr);
  Py_CLEAR(clear_module_state->__pyx_n_s_regEdges);
  Py_CLEAR(clear_module_state->__pyx_n_s_regNodes);
  Py_CLEAR(clear_module_state->__pyx_n_s_remainingDist);
  Py_CLEAR(clear_module_state->__pyx_n_s_removeEdge);
  Py_CLEAR(clear_module_state->__pyx_n_s_removeEdges);
  Py_CLEAR(clear_module_state->__pyx_n_s_removeNode);
  Py_CLEAR(clear_module_state->__pyx_n_s_return);
  Py_CLEAR(clear_module_state->__pyx_n_s_row);
  Py_CLEAR(clear_module_state->__pyx_n_s_self);
  Py_CLEAR(clear_module_state->__pyx_n_s_send);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_sizeInfo);
  Py_CLEAR(clear_module_state->__pyx_n_s_spec);
  Py_CLEAR(clear_module_state->__pyx_n_s_startNode);
  Py_CLEAR(clear_module_state->__pyx_n_s_staticmethod);
  Py_CLEAR(clear_module_state->__pyx_kp_s_str_None);
  Py_CLEAR(clear_module_state->__pyx_kp_s_stringsource);
  Py_CLEAR(clear_module_state->__pyx_n_s_tempC);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_n_s_threeD);
  Py_CLEAR(clear_module_state->__pyx_n_s_throw);
  Py_CLEAR(clear_module_state->__pyx_n_s_tuple);
  Py_CLEAR(clear_module_state->__pyx_kp_s_tuple_float_float);
  Py_CLEAR(clear_module_state->__pyx_kp_s_tuple_float_tuple_int);
  Py_CLEAR(clear_module_state->__pyx_kp_s_tuple_int_int);
  Py_CLEAR(clear_module_state->__pyx_kp_s_tuple_tuple_float_tuple_int_None);
  Py_CLEAR(clear_module_state->__pyx_kp_s_tuple_tuple_int_float);
  Py_CLEAR(clear_module_state->__pyx_n_s_typing);
  Py_CLEAR(clear_module_state->__pyx_n_s_v);
  Py_CLEAR(clear_module_state->__pyx_float_0_0);
  Py_CLEAR(clear_module_state->__pyx_float_0_9);
  Py_CLEAR(clear_module_state->__pyx_float_1_0);
  Py_CLEAR(clear_module_state->__pyx_float_1_1);
  Py_CLEAR(clear_module_state->__pyx_float_2_0);
  Py_CLEAR(clear_module_state->__pyx_float_1000_0);
  Py_CLEAR(clear_module_state->__pyx_float_10000_0);
  Py_CLEAR(clear_module_state->__pyx_float_neg_1_0);
  Py_CLEAR(clear_module_state->__pyx_int_10);
  Py_CLEAR(clear_module_state->__pyx_int_100);
  Py_CLEAR(clear_module_state->__pyx_int_10000);
  Py_CLEAR(clear_module_state->__pyx_int_100000);
  Py_CLEAR(clear_module_state->__pyx_int_1000000);
  Py_CLEAR(clear_module_state->__pyx_int_10000000);
  Py_CLEAR(clear_module_state->__pyx_int_1000000000);
  Py_CLEAR(clear_module_state->__pyx_int_neg_1);
  Py_CLEAR(clear_module_state->__pyx_k__2);
  Py_CLEAR(clear_module_state->__pyx_k__3);
  Py_CLEAR(clear_module_state->__pyx_k__4);
  Py_CLEAR(clear_module_state->__pyx_tuple_);
  Py_CLEAR(clear_module_state->__pyx_tuple__6);
  Py_CLEAR(clear_module_state->__pyx_tuple__7);
  Py_CLEAR(clear_module_state->__pyx_tuple__8);
  Py_CLEAR(clear_module_state->__pyx_tuple__9);
  Py_CLEAR(clear_module_state->__pyx_tuple__10);
  Py_CLEAR(clear_module_state->__pyx_tuple__11);
  Py_CLEAR(clear_module_state->__pyx_tuple__12);
  Py_CLEAR(clear_module_state->__pyx_tuple__13);
  Py_CLEAR(clear_module_state->__pyx_tuple__14);
  Py_CLEAR(clear_module_state->__pyx_tuple__15);
  Py_CLEAR(clear_module_state->__pyx_tuple__16);
  Py_CLEAR(clear_module_state->__pyx_tuple__17);
  Py_CLEAR(clear_module_state->__pyx_tuple__18);
  Py_CLEAR(clear_module_state->__pyx_tuple__19);
  Py_CLEAR(clear_module_state->__pyx_tuple__24);
  Py_CLEAR(clear_module_state->__pyx_tuple__26);
  Py_CLEAR(clear_module_state->__pyx_tuple__28);
  Py_CLEAR(clear_module_state->__pyx_tuple__30);
  Py_CLEAR(clear_module_state->__pyx_tuple__32);
  Py_CLEAR(clear_module_state->__pyx_tuple__34);
  Py_CLEAR(clear_module_state->__pyx_tuple__36);
  Py_CLEAR(clear_module_state->__pyx_tuple__39);
  Py_CLEAR(clear_module_state->__pyx_tuple__41);
  Py_CLEAR(clear_module_state->__pyx_tuple__42);
  Py_CLEAR(clear_module_state->__pyx_tuple__44);
  Py_CLEAR(clear_module_state->__pyx_tuple__46);
  Py_CLEAR(clear_module_state->__pyx_tuple__48);
  Py_CLEAR(clear_module_state->__pyx_tuple__51);
  Py_CLEAR(clear_module_state->__pyx_tuple__53);
  Py_CLEAR(clear_module_state->__pyx_tuple__55);
  Py_CLEAR(clear_module_state->__pyx_tuple__57);
  Py_CLEAR(clear_module_state->__pyx_tuple__58);
  Py_CLEAR(clear_module_state->__pyx_tuple__60);
  Py_CLEAR(clear_module_state->__pyx_tuple__63);
  Py_CLEAR(clear_module_state->__pyx_tuple__65);
  Py_CLEAR(clear_module_state->__pyx_tuple__67);
  Py_CLEAR(clear_module_state->__pyx_tuple__68);
  Py_CLEAR(clear_module_state->__pyx_tuple__70);
  Py_CLEAR(clear_module_state->__pyx_tuple__72);
  Py_CLEAR(clear_module_state->__pyx_tuple__73);
  Py_CLEAR(clear_module_state->__pyx_tuple__75);
  Py_CLEAR(clear_module_state->__pyx_tuple__77);
  Py_CLEAR(clear_module_state->__pyx_tuple__80);
  Py_CLEAR(clear_module_state->__pyx_tuple__82);
  Py_CLEAR(clear_module_state->__pyx_tuple__83);
  Py_CLEAR(clear_module_state->__pyx_tuple__85);
  Py_CLEAR(clear_module_state->__pyx_tuple__86);
  Py_CLEAR(clear_module_state->__pyx_tuple__88);
  Py_CLEAR(clear_module_state->__pyx_tuple__89);
  Py_CLEAR(clear_module_state->__pyx_tuple__91);
  Py_CLEAR(clear_module_state->__pyx_codeobj__25);
  Py_CLEAR(clear_module_state->__pyx_codeobj__27);
  Py_CLEAR(clear_module_state->__pyx_codeobj__29);
  Py_CLEAR(clear_module_state->__pyx_codeobj__31);
  Py_CLEAR(clear_module_state->__pyx_codeobj__33);
  Py_CLEAR(clear_module_state->__pyx_codeobj__35);
  Py_CLEAR(clear_module_state->__pyx_codeobj__37);
  Py_CLEAR(clear_module_state->__pyx_codeobj__38);
  Py_CLEAR(clear_module_state->__pyx_codeobj__40);
  Py_CLEAR(clear_module_state->__pyx_codeobj__43);
  Py_CLEAR(clear_module_state->__pyx_codeobj__45);
  Py_CLEAR(clear_module_state->__pyx_codeobj__47);
  Py_CLEAR(clear_module_state->__pyx_codeobj__49);
  Py_CLEAR(clear_module_state->__pyx_codeobj__50);
  Py_CLEAR(clear_module_state->__pyx_codeobj__52);
  Py_CLEAR(clear_module_state->__pyx_codeobj__54);
  Py_CLEAR(clear_module_state->__pyx_codeobj__56);
  Py_CLEAR(clear_module_state->__pyx_codeobj__59);
  Py_CLEAR(clear_module_state->__pyx_codeobj__61);
  Py_CLEAR(clear_module_state->__pyx_codeobj__62);
  Py_CLEAR(clear_module_state->__pyx_codeobj__64);
  Py_CLEAR(clear_module_state->__pyx_codeobj__66);
  Py_CLEAR(clear_module_state->__pyx_codeobj__69);
  Py_CLEAR(clear_module_state->__pyx_codeobj__71);
  Py_CLEAR(clear_module_state->__pyx_codeobj__74);
  Py_CLEAR(clear_module_state->__pyx_codeobj__76);
  Py_CLEAR(clear_module_state->__pyx_codeobj__78);
  Py_CLEAR(clear_module_state->__pyx_codeobj__79);
  Py_CLEAR(clear_module_state->__pyx_codeobj__81);
  Py_CLEAR(clear_module_state->__pyx_codeobj__84);
  Py_CLEAR(clear_module_state->__pyx_codeobj__87);
  Py_CLEAR(clear_module_state->__pyx_codeobj__90);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_5graph_PriorityQueue_NR);
  Py_VISIT(traverse_module_state->__pyx_type_5graph_PriorityQueue_NR);
  Py_VISIT(traverse_module_state->__pyx_ptype_5graph_GraphCy);
  Py_VISIT(traverse_module_state->__pyx_type_5graph_GraphCy);
  Py_VISIT(traverse_module_state->__pyx_ptype_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple);
  Py_VISIT(traverse_module_state->__pyx_type_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple);
  Py_VISIT(traverse_module_state->__pyx_ptype_5graph___pyx_scope_struct_1_genexpr);
  Py_VISIT(traverse_module_state->__pyx_type_5graph___pyx_scope_struct_1_genexpr);
  Py_VISIT(traverse_module_state->__pyx_ptype_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple);
  Py_VISIT(traverse_module_state->__pyx_type_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple);
  Py_VISIT(traverse_module_state->__pyx_ptype_5graph___pyx_scope_struct_3_genexpr);
  Py_VISIT(traverse_module_state->__pyx_type_5graph___pyx_scope_struct_3_genexpr);
  Py_VISIT(traverse_module_state->__pyx_ptype_5graph___pyx_scope_struct_4___reduce_ex__);
  Py_VISIT(traverse_module_state->__pyx_type_5graph___pyx_scope_struct_4___reduce_ex__);
  Py_VISIT(traverse_module_state->__pyx_ptype_5graph___pyx_scope_struct_5_genexpr);
  Py_VISIT(traverse_module_state->__pyx_type_5graph___pyx_scope_struct_5_genexpr);
  Py_VISIT(traverse_module_state->__pyx_ptype_5graph___pyx_scope_struct_6_genexpr);
  Py_VISIT(traverse_module_state->__pyx_type_5graph___pyx_scope_struct_6_genexpr);
  Py_VISIT(traverse_module_state->__pyx_ptype_5graph___pyx_scope_struct_7_get_NodeVisited);
  Py_VISIT(traverse_module_state->__pyx_type_5graph___pyx_scope_struct_7_get_NodeVisited);
  Py_VISIT(traverse_module_state->__pyx_ptype_5graph___pyx_scope_struct_8_genexpr);
  Py_VISIT(traverse_module_state->__pyx_type_5graph___pyx_scope_struct_8_genexpr);
  Py_VISIT(traverse_module_state->__pyx_ptype_5graph___pyx_scope_struct_9_PathReach);
  Py_VISIT(traverse_module_state->__pyx_type_5graph___pyx_scope_struct_9_PathReach);
  Py_VISIT(traverse_module_state->__pyx_ptype_5graph___pyx_scope_struct_10_genexpr);
  Py_VISIT(traverse_module_state->__pyx_type_5graph___pyx_scope_struct_10_genexpr);
  Py_VISIT(traverse_module_state->__pyx_ptype_5graph___pyx_scope_struct_11_genexpr);
  Py_VISIT(traverse_module_state->__pyx_type_5graph___pyx_scope_struct_11_genexpr);
  Py_VISIT(traverse_module_state->__pyx_n_s_A_LnW);
  Py_VISIT(traverse_module_state->__pyx_n_s_A_Lnlength);
  Py_VISIT(traverse_module_state->__pyx_n_s_A_LnlengthR);
  Py_VISIT(traverse_module_state->__pyx_n_s_A_PtedC);
  Py_VISIT(traverse_module_state->__pyx_n_s_A_PtedW);
  Py_VISIT(traverse_module_state->__pyx_n_s_A_PtstC);
  Py_VISIT(traverse_module_state->__pyx_n_s_A_PtstW);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Atribute_for_line_length_not_fou);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Atribute_for_line_length_reverse);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Attribute_for_line_weight_not_fo);
  Py_VISIT(traverse_module_state->__pyx_n_s_BaseDist);
  Py_VISIT(traverse_module_state->__pyx_n_s_DestTup);
  Py_VISIT(traverse_module_state->__pyx_n_s_DistD);
  Py_VISIT(traverse_module_state->__pyx_n_s_DistMul);
  Py_VISIT(traverse_module_state->__pyx_n_s_DistMulLim);
  Py_VISIT(traverse_module_state->__pyx_n_s_DistO);
  Py_VISIT(traverse_module_state->__pyx_n_s_DstD);
  Py_VISIT(traverse_module_state->__pyx_n_s_DstO);
  Py_VISIT(traverse_module_state->__pyx_n_s_EdgeC);
  Py_VISIT(traverse_module_state->__pyx_n_s_EdgeCmin);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Edge_point_end_cost_attribute_no);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Edge_point_end_weight_attribute);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Edge_point_start_cost_attribute);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Edge_point_start_weight_attribut);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Edges);
  Py_VISIT(traverse_module_state->__pyx_n_s_EdgesFringe);
  Py_VISIT(traverse_module_state->__pyx_n_s_EdgesReach);
  Py_VISIT(traverse_module_state->__pyx_n_s_EdgesReachSize);
  Py_VISIT(traverse_module_state->__pyx_n_s_EdgesReach_EidVec);
  Py_VISIT(traverse_module_state->__pyx_n_s_Eid);
  Py_VISIT(traverse_module_state->__pyx_n_s_EidD);
  Py_VISIT(traverse_module_state->__pyx_n_s_EidN);
  Py_VISIT(traverse_module_state->__pyx_n_s_EidO);
  Py_VISIT(traverse_module_state->__pyx_n_s_Eididx);
  Py_VISIT(traverse_module_state->__pyx_n_s_Float_array_tuple_locals_genexpr);
  Py_VISIT(traverse_module_state->__pyx_n_s_ForceDst);
  Py_VISIT(traverse_module_state->__pyx_n_s_ForceOri);
  Py_VISIT(traverse_module_state->__pyx_n_s_FoundDistance);
  Py_VISIT(traverse_module_state->__pyx_n_s_FoundPaths);
  Py_VISIT(traverse_module_state->__pyx_n_s_FoundWeights);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphCy);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphCy_PathDistComp_AStar_Virtu);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphCy_PathDist_AStar);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphCy_PathDist_AStar_VirtuEntr);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphCy_PathDist_Dijkstra);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphCy_PathFind_AStar);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphCy_PathFind_AStar_VirtuEntr);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphCy_PathFind_Dijkstra);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphCy_PathFind_Multi);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphCy_PathFind_Multi_MultiDest);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphCy_PathFind_Multi_VirtuEntr);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphCy_PathLength);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphCy_PathReach);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphCy___reduce_ex);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphCy__reconstruct);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphCy_addEdge);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphCy_addEdgefromNodes);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphCy_addNode);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphCy_addNodes);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphCy_arraySizeInfo);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphCy_changeNode);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphCy_fromGeopandas_Edges);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphCy_get_NodeVisited);
  Py_VISIT(traverse_module_state->__pyx_kp_u_GraphCy_object_of);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphCy_reallocEdges);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphCy_reallocNodes);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphCy_removeEdge);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphCy_removeEdges);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphCy_removeNode);
  Py_VISIT(traverse_module_state->__pyx_n_s_GraphCy_sizeInfo);
  Py_VISIT(traverse_module_state->__pyx_n_s_IndexError);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Index_out_of_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_Int_array_tuple_locals_genexpr);
  Py_VISIT(traverse_module_state->__pyx_n_s_LimCycle);
  Py_VISIT(traverse_module_state->__pyx_n_s_LimDist);
  Py_VISIT(traverse_module_state->__pyx_n_s_LimitDistance);
  Py_VISIT(traverse_module_state->__pyx_n_s_List);
  Py_VISIT(traverse_module_state->__pyx_n_s_LnW);
  Py_VISIT(traverse_module_state->__pyx_n_s_Lnlength);
  Py_VISIT(traverse_module_state->__pyx_n_s_LnlengthR);
  Py_VISIT(traverse_module_state->__pyx_n_s_MappedPath_T);
  Py_VISIT(traverse_module_state->__pyx_n_s_MappedPath_T2);
  Py_VISIT(traverse_module_state->__pyx_n_s_MappedPaths);
  Py_VISIT(traverse_module_state->__pyx_n_s_MemoryError);
  Py_VISIT(traverse_module_state->__pyx_n_s_MinimumDistance);
  Py_VISIT(traverse_module_state->__pyx_n_s_Nedges);
  Py_VISIT(traverse_module_state->__pyx_n_s_NidD);
  Py_VISIT(traverse_module_state->__pyx_n_s_NidF);
  Py_VISIT(traverse_module_state->__pyx_n_s_NidO);
  Py_VISIT(traverse_module_state->__pyx_n_s_Nnodes);
  Py_VISIT(traverse_module_state->__pyx_n_s_NodeCheck);
  Py_VISIT(traverse_module_state->__pyx_n_s_NodeReach_T);
  Py_VISIT(traverse_module_state->__pyx_n_s_NodeTarget);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Nodes);
  Py_VISIT(traverse_module_state->__pyx_n_s_None);
  Py_VISIT(traverse_module_state->__pyx_n_s_Oid);
  Py_VISIT(traverse_module_state->__pyx_n_s_OpenNodes);
  Py_VISIT(traverse_module_state->__pyx_n_s_OverflowError);
  Py_VISIT(traverse_module_state->__pyx_n_s_PathDistComp_AStar_VirtuEntry);
  Py_VISIT(traverse_module_state->__pyx_n_s_PathDist_AStar);
  Py_VISIT(traverse_module_state->__pyx_n_s_PathDist_AStar_VirtuEntry);
  Py_VISIT(traverse_module_state->__pyx_n_s_PathDist_Dijkstra);
  Py_VISIT(traverse_module_state->__pyx_n_s_PathFind_AStar);
  Py_VISIT(traverse_module_state->__pyx_n_s_PathFind_AStar_VirtuEntry);
  Py_VISIT(traverse_module_state->__pyx_n_s_PathFind_Dijkstra);
  Py_VISIT(traverse_module_state->__pyx_n_s_PathFind_Multi);
  Py_VISIT(traverse_module_state->__pyx_n_s_PathFind_Multi_MultiDest_VirtuEn);
  Py_VISIT(traverse_module_state->__pyx_n_s_PathFind_Multi_VirtuEntry);
  Py_VISIT(traverse_module_state->__pyx_n_s_PathLength);
  Py_VISIT(traverse_module_state->__pyx_n_s_PathLim);
  Py_VISIT(traverse_module_state->__pyx_n_s_PathReach);
  Py_VISIT(traverse_module_state->__pyx_n_s_PathReach_locals_genexpr);
  Py_VISIT(traverse_module_state->__pyx_n_s_PointD);
  Py_VISIT(traverse_module_state->__pyx_n_s_PointO);
  Py_VISIT(traverse_module_state->__pyx_n_s_PriorityQueue_NR);
  Py_VISIT(traverse_module_state->__pyx_n_s_PriorityQueue_NR___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_PriorityQueue_NR___setstate_cyth);
  Py_VISIT(traverse_module_state->__pyx_kp_u_PriorityQueue_Size);
  Py_VISIT(traverse_module_state->__pyx_n_s_PtD);
  Py_VISIT(traverse_module_state->__pyx_n_s_PtO);
  Py_VISIT(traverse_module_state->__pyx_n_s_PtedC);
  Py_VISIT(traverse_module_state->__pyx_n_s_PtedW);
  Py_VISIT(traverse_module_state->__pyx_n_s_PtstC);
  Py_VISIT(traverse_module_state->__pyx_n_s_PtstW);
  Py_VISIT(traverse_module_state->__pyx_n_s_RemainDist);
  Py_VISIT(traverse_module_state->__pyx_n_s_State_3d);
  Py_VISIT(traverse_module_state->__pyx_n_s_TypeError);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Warning_resizing_nodes_array_sma);
  Py_VISIT(traverse_module_state->__pyx_n_s__22);
  Py_VISIT(traverse_module_state->__pyx_kp_u__23);
  Py_VISIT(traverse_module_state->__pyx_kp_u__5);
  Py_VISIT(traverse_module_state->__pyx_n_s__92);
  Py_VISIT(traverse_module_state->__pyx_n_s_addEdge);
  Py_VISIT(traverse_module_state->__pyx_n_s_addEdgefromNodes);
  Py_VISIT(traverse_module_state->__pyx_n_s_addNode);
  Py_VISIT(traverse_module_state->__pyx_n_s_addNodes);
  Py_VISIT(traverse_module_state->__pyx_n_s_args);
  Py_VISIT(traverse_module_state->__pyx_n_s_arraySizeInfo);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio_coroutines);
  Py_VISIT(traverse_module_state->__pyx_n_s_changeNode);
  Py_VISIT(traverse_module_state->__pyx_n_s_ckEd);
  Py_VISIT(traverse_module_state->__pyx_n_s_ckSt);
  Py_VISIT(traverse_module_state->__pyx_n_s_class_getitem);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_s_close);
  Py_VISIT(traverse_module_state->__pyx_n_s_columns);
  Py_VISIT(traverse_module_state->__pyx_n_s_coord);
  Py_VISIT(traverse_module_state->__pyx_n_s_coords);
  Py_VISIT(traverse_module_state->__pyx_n_s_cycles);
  Py_VISIT(traverse_module_state->__pyx_n_s_dest);
  Py_VISIT(traverse_module_state->__pyx_n_s_dfKeys);
  Py_VISIT(traverse_module_state->__pyx_n_s_dfNetwork);
  Py_VISIT(traverse_module_state->__pyx_n_s_dfSize);
  Py_VISIT(traverse_module_state->__pyx_n_s_dict);
  Py_VISIT(traverse_module_state->__pyx_kp_u_disable);
  Py_VISIT(traverse_module_state->__pyx_n_s_dist3d_Py);
  Py_VISIT(traverse_module_state->__pyx_n_s_edgeVector);
  Py_VISIT(traverse_module_state->__pyx_n_s_edgeidCnt);
  Py_VISIT(traverse_module_state->__pyx_n_s_edgeids);
  Py_VISIT(traverse_module_state->__pyx_n_s_edges);
  Py_VISIT(traverse_module_state->__pyx_n_s_edgesize);
  Py_VISIT(traverse_module_state->__pyx_n_s_elook);
  Py_VISIT(traverse_module_state->__pyx_kp_u_enable);
  Py_VISIT(traverse_module_state->__pyx_n_s_enumerate);
  Py_VISIT(traverse_module_state->__pyx_n_s_float);
  Py_VISIT(traverse_module_state->__pyx_n_s_flook);
  Py_VISIT(traverse_module_state->__pyx_n_s_fromGeopandas_Edges);
  Py_VISIT(traverse_module_state->__pyx_kp_u_gc);
  Py_VISIT(traverse_module_state->__pyx_n_s_gcy);
  Py_VISIT(traverse_module_state->__pyx_n_s_genexpr);
  Py_VISIT(traverse_module_state->__pyx_n_s_geometry);
  Py_VISIT(traverse_module_state->__pyx_n_s_geopandas);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_NodeVisited);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_NodeVisited_locals_genexpr);
  Py_VISIT(traverse_module_state->__pyx_n_s_getstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_gpd);
  Py_VISIT(traverse_module_state->__pyx_kp_s_gpd_GeoDataFrame);
  Py_VISIT(traverse_module_state->__pyx_n_s_graph);
  Py_VISIT(traverse_module_state->__pyx_kp_s_graph_pyx);
  Py_VISIT(traverse_module_state->__pyx_n_s_i);
  Py_VISIT(traverse_module_state->__pyx_n_s_idEd);
  Py_VISIT(traverse_module_state->__pyx_n_s_idSt);
  Py_VISIT(traverse_module_state->__pyx_n_s_ids);
  Py_VISIT(traverse_module_state->__pyx_n_s_idx);
  Py_VISIT(traverse_module_state->__pyx_n_s_import);
  Py_VISIT(traverse_module_state->__pyx_n_s_index);
  Py_VISIT(traverse_module_state->__pyx_n_s_initializing);
  Py_VISIT(traverse_module_state->__pyx_n_s_int);
  Py_VISIT(traverse_module_state->__pyx_kp_s_int_None);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_coroutine);
  Py_VISIT(traverse_module_state->__pyx_kp_u_isenabled);
  Py_VISIT(traverse_module_state->__pyx_n_s_iterrows);
  Py_VISIT(traverse_module_state->__pyx_n_s_keepGoing);
  Py_VISIT(traverse_module_state->__pyx_n_s_len);
  Py_VISIT(traverse_module_state->__pyx_n_s_lenE);
  Py_VISIT(traverse_module_state->__pyx_n_s_length);
  Py_VISIT(traverse_module_state->__pyx_n_s_lnEd);
  Py_VISIT(traverse_module_state->__pyx_n_s_lnSt);
  Py_VISIT(traverse_module_state->__pyx_n_s_lninfo);
  Py_VISIT(traverse_module_state->__pyx_n_s_m);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_n);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_nlook);
  Py_VISIT(traverse_module_state->__pyx_kp_s_no_default___reduce___due_to_non);
  Py_VISIT(traverse_module_state->__pyx_n_s_nodeMapped);
  Py_VISIT(traverse_module_state->__pyx_n_s_nodeids);
  Py_VISIT(traverse_module_state->__pyx_n_s_nodes);
  Py_VISIT(traverse_module_state->__pyx_n_s_nodesize);
  Py_VISIT(traverse_module_state->__pyx_n_s_numbers);
  Py_VISIT(traverse_module_state->__pyx_n_s_outtup);
  Py_VISIT(traverse_module_state->__pyx_n_s_p1);
  Py_VISIT(traverse_module_state->__pyx_n_s_p2);
  Py_VISIT(traverse_module_state->__pyx_n_s_pathN);
  Py_VISIT(traverse_module_state->__pyx_n_s_pathlength);
  Py_VISIT(traverse_module_state->__pyx_n_s_pointCoords);
  Py_VISIT(traverse_module_state->__pyx_n_s_pointidCnt);
  Py_VISIT(traverse_module_state->__pyx_n_s_print);
  Py_VISIT(traverse_module_state->__pyx_n_s_protocol);
  Py_VISIT(traverse_module_state->__pyx_n_s_pt);
  Py_VISIT(traverse_module_state->__pyx_n_s_ptDcoord);
  Py_VISIT(traverse_module_state->__pyx_n_s_ptDid);
  Py_VISIT(traverse_module_state->__pyx_n_s_ptDinfo);
  Py_VISIT(traverse_module_state->__pyx_n_s_ptOcoord);
  Py_VISIT(traverse_module_state->__pyx_n_s_ptOid);
  Py_VISIT(traverse_module_state->__pyx_n_s_ptOinfo);
  Py_VISIT(traverse_module_state->__pyx_n_s_pth);
  Py_VISIT(traverse_module_state->__pyx_n_s_ptinfo);
  Py_VISIT(traverse_module_state->__pyx_n_s_ptsinfo);
  Py_VISIT(traverse_module_state->__pyx_n_s_pySmallestMissing);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_vtable);
  Py_VISIT(traverse_module_state->__pyx_n_s_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_reallocEdges);
  Py_VISIT(traverse_module_state->__pyx_n_s_reallocNodes);
  Py_VISIT(traverse_module_state->__pyx_n_s_reconstruct);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_ex);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_ex___locals_genexpr);
  Py_VISIT(traverse_module_state->__pyx_n_s_regEdges);
  Py_VISIT(traverse_module_state->__pyx_n_s_regNodes);
  Py_VISIT(traverse_module_state->__pyx_n_s_remainingDist);
  Py_VISIT(traverse_module_state->__pyx_n_s_removeEdge);
  Py_VISIT(traverse_module_state->__pyx_n_s_removeEdges);
  Py_VISIT(traverse_module_state->__pyx_n_s_removeNode);
  Py_VISIT(traverse_module_state->__pyx_n_s_return);
  Py_VISIT(traverse_module_state->__pyx_n_s_row);
  Py_VISIT(traverse_module_state->__pyx_n_s_self);
  Py_VISIT(traverse_module_state->__pyx_n_s_send);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_sizeInfo);
  Py_VISIT(traverse_module_state->__pyx_n_s_spec);
  Py_VISIT(traverse_module_state->__pyx_n_s_startNode);
  Py_VISIT(traverse_module_state->__pyx_n_s_staticmethod);
  Py_VISIT(traverse_module_state->__pyx_kp_s_str_None);
  Py_VISIT(traverse_module_state->__pyx_kp_s_stringsource);
  Py_VISIT(traverse_module_state->__pyx_n_s_tempC);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_n_s_threeD);
  Py_VISIT(traverse_module_state->__pyx_n_s_throw);
  Py_VISIT(traverse_module_state->__pyx_n_s_tuple);
  Py_VISIT(traverse_module_state->__pyx_kp_s_tuple_float_float);
  Py_VISIT(traverse_module_state->__pyx_kp_s_tuple_float_tuple_int);
  Py_VISIT(traverse_module_state->__pyx_kp_s_tuple_int_int);
  Py_VISIT(traverse_module_state->__pyx_kp_s_tuple_tuple_float_tuple_int_None);
  Py_VISIT(traverse_module_state->__pyx_kp_s_tuple_tuple_int_float);
  Py_VISIT(traverse_module_state->__pyx_n_s_typing);
  Py_VISIT(traverse_module_state->__pyx_n_s_v);
  Py_VISIT(traverse_module_state->__pyx_float_0_0);
  Py_VISIT(traverse_module_state->__pyx_float_0_9);
  Py_VISIT(traverse_module_state->__pyx_float_1_0);
  Py_VISIT(traverse_module_state->__pyx_float_1_1);
  Py_VISIT(traverse_module_state->__pyx_float_2_0);
  Py_VISIT(traverse_module_state->__pyx_float_1000_0);
  Py_VISIT(traverse_module_state->__pyx_float_10000_0);
  Py_VISIT(traverse_module_state->__pyx_float_neg_1_0);
  Py_VISIT(traverse_module_state->__pyx_int_10);
  Py_VISIT(traverse_module_state->__pyx_int_100);
  Py_VISIT(traverse_module_state->__pyx_int_10000);
  Py_VISIT(traverse_module_state->__pyx_int_100000);
  Py_VISIT(traverse_module_state->__pyx_int_1000000);
  Py_VISIT(traverse_module_state->__pyx_int_10000000);
  Py_VISIT(traverse_module_state->__pyx_int_1000000000);
  Py_VISIT(traverse_module_state->__pyx_int_neg_1);
  Py_VISIT(traverse_module_state->__pyx_k__2);
  Py_VISIT(traverse_module_state->__pyx_k__3);
  Py_VISIT(traverse_module_state->__pyx_k__4);
  Py_VISIT(traverse_module_state->__pyx_tuple_);
  Py_VISIT(traverse_module_state->__pyx_tuple__6);
  Py_VISIT(traverse_module_state->__pyx_tuple__7);
  Py_VISIT(traverse_module_state->__pyx_tuple__8);
  Py_VISIT(traverse_module_state->__pyx_tuple__9);
  Py_VISIT(traverse_module_state->__pyx_tuple__10);
  Py_VISIT(traverse_module_state->__pyx_tuple__11);
  Py_VISIT(traverse_module_state->__pyx_tuple__12);
  Py_VISIT(traverse_module_state->__pyx_tuple__13);
  Py_VISIT(traverse_module_state->__pyx_tuple__14);
  Py_VISIT(traverse_module_state->__pyx_tuple__15);
  Py_VISIT(traverse_module_state->__pyx_tuple__16);
  Py_VISIT(traverse_module_state->__pyx_tuple__17);
  Py_VISIT(traverse_module_state->__pyx_tuple__18);
  Py_VISIT(traverse_module_state->__pyx_tuple__19);
  Py_VISIT(traverse_module_state->__pyx_tuple__24);
  Py_VISIT(traverse_module_state->__pyx_tuple__26);
  Py_VISIT(traverse_module_state->__pyx_tuple__28);
  Py_VISIT(traverse_module_state->__pyx_tuple__30);
  Py_VISIT(traverse_module_state->__pyx_tuple__32);
  Py_VISIT(traverse_module_state->__pyx_tuple__34);
  Py_VISIT(traverse_module_state->__pyx_tuple__36);
  Py_VISIT(traverse_module_state->__pyx_tuple__39);
  Py_VISIT(traverse_module_state->__pyx_tuple__41);
  Py_VISIT(traverse_module_state->__pyx_tuple__42);
  Py_VISIT(traverse_module_state->__pyx_tuple__44);
  Py_VISIT(traverse_module_state->__pyx_tuple__46);
  Py_VISIT(traverse_module_state->__pyx_tuple__48);
  Py_VISIT(traverse_module_state->__pyx_tuple__51);
  Py_VISIT(traverse_module_state->__pyx_tuple__53);
  Py_VISIT(traverse_module_state->__pyx_tuple__55);
  Py_VISIT(traverse_module_state->__pyx_tuple__57);
  Py_VISIT(traverse_module_state->__pyx_tuple__58);
  Py_VISIT(traverse_module_state->__pyx_tuple__60);
  Py_VISIT(traverse_module_state->__pyx_tuple__63);
  Py_VISIT(traverse_module_state->__pyx_tuple__65);
  Py_VISIT(traverse_module_state->__pyx_tuple__67);
  Py_VISIT(traverse_module_state->__pyx_tuple__68);
  Py_VISIT(traverse_module_state->__pyx_tuple__70);
  Py_VISIT(traverse_module_state->__pyx_tuple__72);
  Py_VISIT(traverse_module_state->__pyx_tuple__73);
  Py_VISIT(traverse_module_state->__pyx_tuple__75);
  Py_VISIT(traverse_module_state->__pyx_tuple__77);
  Py_VISIT(traverse_module_state->__pyx_tuple__80);
  Py_VISIT(traverse_module_state->__pyx_tuple__82);
  Py_VISIT(traverse_module_state->__pyx_tuple__83);
  Py_VISIT(traverse_module_state->__pyx_tuple__85);
  Py_VISIT(traverse_module_state->__pyx_tuple__86);
  Py_VISIT(traverse_module_state->__pyx_tuple__88);
  Py_VISIT(traverse_module_state->__pyx_tuple__89);
  Py_VISIT(traverse_module_state->__pyx_tuple__91);
  Py_VISIT(traverse_module_state->__pyx_codeobj__25);
  Py_VISIT(traverse_module_state->__pyx_codeobj__27);
  Py_VISIT(traverse_module_state->__pyx_codeobj__29);
  Py_VISIT(traverse_module_state->__pyx_codeobj__31);
  Py_VISIT(traverse_module_state->__pyx_codeobj__33);
  Py_VISIT(traverse_module_state->__pyx_codeobj__35);
  Py_VISIT(traverse_module_state->__pyx_codeobj__37);
  Py_VISIT(traverse_module_state->__pyx_codeobj__38);
  Py_VISIT(traverse_module_state->__pyx_codeobj__40);
  Py_VISIT(traverse_module_state->__pyx_codeobj__43);
  Py_VISIT(traverse_module_state->__pyx_codeobj__45);
  Py_VISIT(traverse_module_state->__pyx_codeobj__47);
  Py_VISIT(traverse_module_state->__pyx_codeobj__49);
  Py_VISIT(traverse_module_state->__pyx_codeobj__50);
  Py_VISIT(traverse_module_state->__pyx_codeobj__52);
  Py_VISIT(traverse_module_state->__pyx_codeobj__54);
  Py_VISIT(traverse_module_state->__pyx_codeobj__56);
  Py_VISIT(traverse_module_state->__pyx_codeobj__59);
  Py_VISIT(traverse_module_state->__pyx_codeobj__61);
  Py_VISIT(traverse_module_state->__pyx_codeobj__62);
  Py_VISIT(traverse_module_state->__pyx_codeobj__64);
  Py_VISIT(traverse_module_state->__pyx_codeobj__66);
  Py_VISIT(traverse_module_state->__pyx_codeobj__69);
  Py_VISIT(traverse_module_state->__pyx_codeobj__71);
  Py_VISIT(traverse_module_state->__pyx_codeobj__74);
  Py_VISIT(traverse_module_state->__pyx_codeobj__76);
  Py_VISIT(traverse_module_state->__pyx_codeobj__78);
  Py_VISIT(traverse_module_state->__pyx_codeobj__79);
  Py_VISIT(traverse_module_state->__pyx_codeobj__81);
  Py_VISIT(traverse_module_state->__pyx_codeobj__84);
  Py_VISIT(traverse_module_state->__pyx_codeobj__87);
  Py_VISIT(traverse_module_state->__pyx_codeobj__90);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#ifdef __Pyx_Generator_USED
#define __pyx_GeneratorType __pyx_mstate_global->__pyx_GeneratorType
#endif
#ifdef __Pyx_IterableCoroutine_USED
#define __pyx_IterableCoroutineType __pyx_mstate_global->__pyx_IterableCoroutineType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineAwaitType __pyx_mstate_global->__pyx_CoroutineAwaitType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineType __pyx_mstate_global->__pyx_CoroutineType
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#define __pyx_type_5graph_PriorityQueue_NR __pyx_mstate_global->__pyx_type_5graph_PriorityQueue_NR
#define __pyx_type_5graph_GraphCy __pyx_mstate_global->__pyx_type_5graph_GraphCy
#define __pyx_type_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple __pyx_mstate_global->__pyx_type_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple
#define __pyx_type_5graph___pyx_scope_struct_1_genexpr __pyx_mstate_global->__pyx_type_5graph___pyx_scope_struct_1_genexpr
#define __pyx_type_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple __pyx_mstate_global->__pyx_type_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple
#define __pyx_type_5graph___pyx_scope_struct_3_genexpr __pyx_mstate_global->__pyx_type_5graph___pyx_scope_struct_3_genexpr
#define __pyx_type_5graph___pyx_scope_struct_4___reduce_ex__ __pyx_mstate_global->__pyx_type_5graph___pyx_scope_struct_4___reduce_ex__
#define __pyx_type_5graph___pyx_scope_struct_5_genexpr __pyx_mstate_global->__pyx_type_5graph___pyx_scope_struct_5_genexpr
#define __pyx_type_5graph___pyx_scope_struct_6_genexpr __pyx_mstate_global->__pyx_type_5graph___pyx_scope_struct_6_genexpr
#define __pyx_type_5graph___pyx_scope_struct_7_get_NodeVisited __pyx_mstate_global->__pyx_type_5graph___pyx_scope_struct_7_get_NodeVisited
#define __pyx_type_5graph___pyx_scope_struct_8_genexpr __pyx_mstate_global->__pyx_type_5graph___pyx_scope_struct_8_genexpr
#define __pyx_type_5graph___pyx_scope_struct_9_PathReach __pyx_mstate_global->__pyx_type_5graph___pyx_scope_struct_9_PathReach
#define __pyx_type_5graph___pyx_scope_struct_10_genexpr __pyx_mstate_global->__pyx_type_5graph___pyx_scope_struct_10_genexpr
#define __pyx_type_5graph___pyx_scope_struct_11_genexpr __pyx_mstate_global->__pyx_type_5graph___pyx_scope_struct_11_genexpr
#endif
#define __pyx_ptype_5graph_PriorityQueue_NR __pyx_mstate_global->__pyx_ptype_5graph_PriorityQueue_NR
#define __pyx_ptype_5graph_GraphCy __pyx_mstate_global->__pyx_ptype_5graph_GraphCy
#define __pyx_ptype_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple __pyx_mstate_global->__pyx_ptype_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple
#define __pyx_ptype_5graph___pyx_scope_struct_1_genexpr __pyx_mstate_global->__pyx_ptype_5graph___pyx_scope_struct_1_genexpr
#define __pyx_ptype_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple __pyx_mstate_global->__pyx_ptype_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple
#define __pyx_ptype_5graph___pyx_scope_struct_3_genexpr __pyx_mstate_global->__pyx_ptype_5graph___pyx_scope_struct_3_genexpr
#define __pyx_ptype_5graph___pyx_scope_struct_4___reduce_ex__ __pyx_mstate_global->__pyx_ptype_5graph___pyx_scope_struct_4___reduce_ex__
#define __pyx_ptype_5graph___pyx_scope_struct_5_genexpr __pyx_mstate_global->__pyx_ptype_5graph___pyx_scope_struct_5_genexpr
#define __pyx_ptype_5graph___pyx_scope_struct_6_genexpr __pyx_mstate_global->__pyx_ptype_5graph___pyx_scope_struct_6_genexpr
#define __pyx_ptype_5graph___pyx_scope_struct_7_get_NodeVisited __pyx_mstate_global->__pyx_ptype_5graph___pyx_scope_struct_7_get_NodeVisited
#define __pyx_ptype_5graph___pyx_scope_struct_8_genexpr __pyx_mstate_global->__pyx_ptype_5graph___pyx_scope_struct_8_genexpr
#define __pyx_ptype_5graph___pyx_scope_struct_9_PathReach __pyx_mstate_global->__pyx_ptype_5graph___pyx_scope_struct_9_PathReach
#define __pyx_ptype_5graph___pyx_scope_struct_10_genexpr __pyx_mstate_global->__pyx_ptype_5graph___pyx_scope_struct_10_genexpr
#define __pyx_ptype_5graph___pyx_scope_struct_11_genexpr __pyx_mstate_global->__pyx_ptype_5graph___pyx_scope_struct_11_genexpr
#define __pyx_n_s_A_LnW __pyx_mstate_global->__pyx_n_s_A_LnW
#define __pyx_n_s_A_Lnlength __pyx_mstate_global->__pyx_n_s_A_Lnlength
#define __pyx_n_s_A_LnlengthR __pyx_mstate_global->__pyx_n_s_A_LnlengthR
#define __pyx_n_s_A_PtedC __pyx_mstate_global->__pyx_n_s_A_PtedC
#define __pyx_n_s_A_PtedW __pyx_mstate_global->__pyx_n_s_A_PtedW
#define __pyx_n_s_A_PtstC __pyx_mstate_global->__pyx_n_s_A_PtstC
#define __pyx_n_s_A_PtstW __pyx_mstate_global->__pyx_n_s_A_PtstW
#define __pyx_kp_s_Atribute_for_line_length_not_fou __pyx_mstate_global->__pyx_kp_s_Atribute_for_line_length_not_fou
#define __pyx_kp_s_Atribute_for_line_length_reverse __pyx_mstate_global->__pyx_kp_s_Atribute_for_line_length_reverse
#define __pyx_kp_s_Attribute_for_line_weight_not_fo __pyx_mstate_global->__pyx_kp_s_Attribute_for_line_weight_not_fo
#define __pyx_n_s_BaseDist __pyx_mstate_global->__pyx_n_s_BaseDist
#define __pyx_n_s_DestTup __pyx_mstate_global->__pyx_n_s_DestTup
#define __pyx_n_s_DistD __pyx_mstate_global->__pyx_n_s_DistD
#define __pyx_n_s_DistMul __pyx_mstate_global->__pyx_n_s_DistMul
#define __pyx_n_s_DistMulLim __pyx_mstate_global->__pyx_n_s_DistMulLim
#define __pyx_n_s_DistO __pyx_mstate_global->__pyx_n_s_DistO
#define __pyx_n_s_DstD __pyx_mstate_global->__pyx_n_s_DstD
#define __pyx_n_s_DstO __pyx_mstate_global->__pyx_n_s_DstO
#define __pyx_n_s_EdgeC __pyx_mstate_global->__pyx_n_s_EdgeC
#define __pyx_n_s_EdgeCmin __pyx_mstate_global->__pyx_n_s_EdgeCmin
#define __pyx_kp_s_Edge_point_end_cost_attribute_no __pyx_mstate_global->__pyx_kp_s_Edge_point_end_cost_attribute_no
#define __pyx_kp_s_Edge_point_end_weight_attribute __pyx_mstate_global->__pyx_kp_s_Edge_point_end_weight_attribute
#define __pyx_kp_s_Edge_point_start_cost_attribute __pyx_mstate_global->__pyx_kp_s_Edge_point_start_cost_attribute
#define __pyx_kp_s_Edge_point_start_weight_attribut __pyx_mstate_global->__pyx_kp_s_Edge_point_start_weight_attribut
#define __pyx_kp_u_Edges __pyx_mstate_global->__pyx_kp_u_Edges
#define __pyx_n_s_EdgesFringe __pyx_mstate_global->__pyx_n_s_EdgesFringe
#define __pyx_n_s_EdgesReach __pyx_mstate_global->__pyx_n_s_EdgesReach
#define __pyx_n_s_EdgesReachSize __pyx_mstate_global->__pyx_n_s_EdgesReachSize
#define __pyx_n_s_EdgesReach_EidVec __pyx_mstate_global->__pyx_n_s_EdgesReach_EidVec
#define __pyx_n_s_Eid __pyx_mstate_global->__pyx_n_s_Eid
#define __pyx_n_s_EidD __pyx_mstate_global->__pyx_n_s_EidD
#define __pyx_n_s_EidN __pyx_mstate_global->__pyx_n_s_EidN
#define __pyx_n_s_EidO __pyx_mstate_global->__pyx_n_s_EidO
#define __pyx_n_s_Eididx __pyx_mstate_global->__pyx_n_s_Eididx
#define __pyx_n_s_Float_array_tuple_locals_genexpr __pyx_mstate_global->__pyx_n_s_Float_array_tuple_locals_genexpr
#define __pyx_n_s_ForceDst __pyx_mstate_global->__pyx_n_s_ForceDst
#define __pyx_n_s_ForceOri __pyx_mstate_global->__pyx_n_s_ForceOri
#define __pyx_n_s_FoundDistance __pyx_mstate_global->__pyx_n_s_FoundDistance
#define __pyx_n_s_FoundPaths __pyx_mstate_global->__pyx_n_s_FoundPaths
#define __pyx_n_s_FoundWeights __pyx_mstate_global->__pyx_n_s_FoundWeights
#define __pyx_n_s_GraphCy __pyx_mstate_global->__pyx_n_s_GraphCy
#define __pyx_n_s_GraphCy_PathDistComp_AStar_Virtu __pyx_mstate_global->__pyx_n_s_GraphCy_PathDistComp_AStar_Virtu
#define __pyx_n_s_GraphCy_PathDist_AStar __pyx_mstate_global->__pyx_n_s_GraphCy_PathDist_AStar
#define __pyx_n_s_GraphCy_PathDist_AStar_VirtuEntr __pyx_mstate_global->__pyx_n_s_GraphCy_PathDist_AStar_VirtuEntr
#define __pyx_n_s_GraphCy_PathDist_Dijkstra __pyx_mstate_global->__pyx_n_s_GraphCy_PathDist_Dijkstra
#define __pyx_n_s_GraphCy_PathFind_AStar __pyx_mstate_global->__pyx_n_s_GraphCy_PathFind_AStar
#define __pyx_n_s_GraphCy_PathFind_AStar_VirtuEntr __pyx_mstate_global->__pyx_n_s_GraphCy_PathFind_AStar_VirtuEntr
#define __pyx_n_s_GraphCy_PathFind_Dijkstra __pyx_mstate_global->__pyx_n_s_GraphCy_PathFind_Dijkstra
#define __pyx_n_s_GraphCy_PathFind_Multi __pyx_mstate_global->__pyx_n_s_GraphCy_PathFind_Multi
#define __pyx_n_s_GraphCy_PathFind_Multi_MultiDest __pyx_mstate_global->__pyx_n_s_GraphCy_PathFind_Multi_MultiDest
#define __pyx_n_s_GraphCy_PathFind_Multi_VirtuEntr __pyx_mstate_global->__pyx_n_s_GraphCy_PathFind_Multi_VirtuEntr
#define __pyx_n_s_GraphCy_PathLength __pyx_mstate_global->__pyx_n_s_GraphCy_PathLength
#define __pyx_n_s_GraphCy_PathReach __pyx_mstate_global->__pyx_n_s_GraphCy_PathReach
#define __pyx_n_s_GraphCy___reduce_ex __pyx_mstate_global->__pyx_n_s_GraphCy___reduce_ex
#define __pyx_n_s_GraphCy__reconstruct __pyx_mstate_global->__pyx_n_s_GraphCy__reconstruct
#define __pyx_n_s_GraphCy_addEdge __pyx_mstate_global->__pyx_n_s_GraphCy_addEdge
#define __pyx_n_s_GraphCy_addEdgefromNodes __pyx_mstate_global->__pyx_n_s_GraphCy_addEdgefromNodes
#define __pyx_n_s_GraphCy_addNode __pyx_mstate_global->__pyx_n_s_GraphCy_addNode
#define __pyx_n_s_GraphCy_addNodes __pyx_mstate_global->__pyx_n_s_GraphCy_addNodes
#define __pyx_n_s_GraphCy_arraySizeInfo __pyx_mstate_global->__pyx_n_s_GraphCy_arraySizeInfo
#define __pyx_n_s_GraphCy_changeNode __pyx_mstate_global->__pyx_n_s_GraphCy_changeNode
#define __pyx_n_s_GraphCy_fromGeopandas_Edges __pyx_mstate_global->__pyx_n_s_GraphCy_fromGeopandas_Edges
#define __pyx_n_s_GraphCy_get_NodeVisited __pyx_mstate_global->__pyx_n_s_GraphCy_get_NodeVisited
#define __pyx_kp_u_GraphCy_object_of __pyx_mstate_global->__pyx_kp_u_GraphCy_object_of
#define __pyx_n_s_GraphCy_reallocEdges __pyx_mstate_global->__pyx_n_s_GraphCy_reallocEdges
#define __pyx_n_s_GraphCy_reallocNodes __pyx_mstate_global->__pyx_n_s_GraphCy_reallocNodes
#define __pyx_n_s_GraphCy_removeEdge __pyx_mstate_global->__pyx_n_s_GraphCy_removeEdge
#define __pyx_n_s_GraphCy_removeEdges __pyx_mstate_global->__pyx_n_s_GraphCy_removeEdges
#define __pyx_n_s_GraphCy_removeNode __pyx_mstate_global->__pyx_n_s_GraphCy_removeNode
#define __pyx_n_s_GraphCy_sizeInfo __pyx_mstate_global->__pyx_n_s_GraphCy_sizeInfo
#define __pyx_n_s_IndexError __pyx_mstate_global->__pyx_n_s_IndexError
#define __pyx_kp_s_Index_out_of_range __pyx_mstate_global->__pyx_kp_s_Index_out_of_range
#define __pyx_n_s_Int_array_tuple_locals_genexpr __pyx_mstate_global->__pyx_n_s_Int_array_tuple_locals_genexpr
#define __pyx_n_s_LimCycle __pyx_mstate_global->__pyx_n_s_LimCycle
#define __pyx_n_s_LimDist __pyx_mstate_global->__pyx_n_s_LimDist
#define __pyx_n_s_LimitDistance __pyx_mstate_global->__pyx_n_s_LimitDistance
#define __pyx_n_s_List __pyx_mstate_global->__pyx_n_s_List
#define __pyx_n_s_LnW __pyx_mstate_global->__pyx_n_s_LnW
#define __pyx_n_s_Lnlength __pyx_mstate_global->__pyx_n_s_Lnlength
#define __pyx_n_s_LnlengthR __pyx_mstate_global->__pyx_n_s_LnlengthR
#define __pyx_n_s_MappedPath_T __pyx_mstate_global->__pyx_n_s_MappedPath_T
#define __pyx_n_s_MappedPath_T2 __pyx_mstate_global->__pyx_n_s_MappedPath_T2
#define __pyx_n_s_MappedPaths __pyx_mstate_global->__pyx_n_s_MappedPaths
#define __pyx_n_s_MemoryError __pyx_mstate_global->__pyx_n_s_MemoryError
#define __pyx_n_s_MinimumDistance __pyx_mstate_global->__pyx_n_s_MinimumDistance
#define __pyx_n_s_Nedges __pyx_mstate_global->__pyx_n_s_Nedges
#define __pyx_n_s_NidD __pyx_mstate_global->__pyx_n_s_NidD
#define __pyx_n_s_NidF __pyx_mstate_global->__pyx_n_s_NidF
#define __pyx_n_s_NidO __pyx_mstate_global->__pyx_n_s_NidO
#define __pyx_n_s_Nnodes __pyx_mstate_global->__pyx_n_s_Nnodes
#define __pyx_n_s_NodeCheck __pyx_mstate_global->__pyx_n_s_NodeCheck
#define __pyx_n_s_NodeReach_T __pyx_mstate_global->__pyx_n_s_NodeReach_T
#define __pyx_n_s_NodeTarget __pyx_mstate_global->__pyx_n_s_NodeTarget
#define __pyx_kp_u_Nodes __pyx_mstate_global->__pyx_kp_u_Nodes
#define __pyx_n_s_None __pyx_mstate_global->__pyx_n_s_None
#define __pyx_n_s_Oid __pyx_mstate_global->__pyx_n_s_Oid
#define __pyx_n_s_OpenNodes __pyx_mstate_global->__pyx_n_s_OpenNodes
#define __pyx_n_s_OverflowError __pyx_mstate_global->__pyx_n_s_OverflowError
#define __pyx_n_s_PathDistComp_AStar_VirtuEntry __pyx_mstate_global->__pyx_n_s_PathDistComp_AStar_VirtuEntry
#define __pyx_n_s_PathDist_AStar __pyx_mstate_global->__pyx_n_s_PathDist_AStar
#define __pyx_n_s_PathDist_AStar_VirtuEntry __pyx_mstate_global->__pyx_n_s_PathDist_AStar_VirtuEntry
#define __pyx_n_s_PathDist_Dijkstra __pyx_mstate_global->__pyx_n_s_PathDist_Dijkstra
#define __pyx_n_s_PathFind_AStar __pyx_mstate_global->__pyx_n_s_PathFind_AStar
#define __pyx_n_s_PathFind_AStar_VirtuEntry __pyx_mstate_global->__pyx_n_s_PathFind_AStar_VirtuEntry
#define __pyx_n_s_PathFind_Dijkstra __pyx_mstate_global->__pyx_n_s_PathFind_Dijkstra
#define __pyx_n_s_PathFind_Multi __pyx_mstate_global->__pyx_n_s_PathFind_Multi
#define __pyx_n_s_PathFind_Multi_MultiDest_VirtuEn __pyx_mstate_global->__pyx_n_s_PathFind_Multi_MultiDest_VirtuEn
#define __pyx_n_s_PathFind_Multi_VirtuEntry __pyx_mstate_global->__pyx_n_s_PathFind_Multi_VirtuEntry
#define __pyx_n_s_PathLength __pyx_mstate_global->__pyx_n_s_PathLength
#define __pyx_n_s_PathLim __pyx_mstate_global->__pyx_n_s_PathLim
#define __pyx_n_s_PathReach __pyx_mstate_global->__pyx_n_s_PathReach
#define __pyx_n_s_PathReach_locals_genexpr __pyx_mstate_global->__pyx_n_s_PathReach_locals_genexpr
#define __pyx_n_s_PointD __pyx_mstate_global->__pyx_n_s_PointD
#define __pyx_n_s_PointO __pyx_mstate_global->__pyx_n_s_PointO
#define __pyx_n_s_PriorityQueue_NR __pyx_mstate_global->__pyx_n_s_PriorityQueue_NR
#define __pyx_n_s_PriorityQueue_NR___reduce_cython __pyx_mstate_global->__pyx_n_s_PriorityQueue_NR___reduce_cython
#define __pyx_n_s_PriorityQueue_NR___setstate_cyth __pyx_mstate_global->__pyx_n_s_PriorityQueue_NR___setstate_cyth
#define __pyx_kp_u_PriorityQueue_Size __pyx_mstate_global->__pyx_kp_u_PriorityQueue_Size
#define __pyx_n_s_PtD __pyx_mstate_global->__pyx_n_s_PtD
#define __pyx_n_s_PtO __pyx_mstate_global->__pyx_n_s_PtO
#define __pyx_n_s_PtedC __pyx_mstate_global->__pyx_n_s_PtedC
#define __pyx_n_s_PtedW __pyx_mstate_global->__pyx_n_s_PtedW
#define __pyx_n_s_PtstC __pyx_mstate_global->__pyx_n_s_PtstC
#define __pyx_n_s_PtstW __pyx_mstate_global->__pyx_n_s_PtstW
#define __pyx_n_s_RemainDist __pyx_mstate_global->__pyx_n_s_RemainDist
#define __pyx_n_s_State_3d __pyx_mstate_global->__pyx_n_s_State_3d
#define __pyx_n_s_TypeError __pyx_mstate_global->__pyx_n_s_TypeError
#define __pyx_kp_s_Warning_resizing_nodes_array_sma __pyx_mstate_global->__pyx_kp_s_Warning_resizing_nodes_array_sma
#define __pyx_n_s__22 __pyx_mstate_global->__pyx_n_s__22
#define __pyx_kp_u__23 __pyx_mstate_global->__pyx_kp_u__23
#define __pyx_kp_u__5 __pyx_mstate_global->__pyx_kp_u__5
#define __pyx_n_s__92 __pyx_mstate_global->__pyx_n_s__92
#define __pyx_n_s_addEdge __pyx_mstate_global->__pyx_n_s_addEdge
#define __pyx_n_s_addEdgefromNodes __pyx_mstate_global->__pyx_n_s_addEdgefromNodes
#define __pyx_n_s_addNode __pyx_mstate_global->__pyx_n_s_addNode
#define __pyx_n_s_addNodes __pyx_mstate_global->__pyx_n_s_addNodes
#define __pyx_n_s_args __pyx_mstate_global->__pyx_n_s_args
#define __pyx_n_s_arraySizeInfo __pyx_mstate_global->__pyx_n_s_arraySizeInfo
#define __pyx_n_s_asyncio_coroutines __pyx_mstate_global->__pyx_n_s_asyncio_coroutines
#define __pyx_n_s_changeNode __pyx_mstate_global->__pyx_n_s_changeNode
#define __pyx_n_s_ckEd __pyx_mstate_global->__pyx_n_s_ckEd
#define __pyx_n_s_ckSt __pyx_mstate_global->__pyx_n_s_ckSt
#define __pyx_n_s_class_getitem __pyx_mstate_global->__pyx_n_s_class_getitem
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_s_close __pyx_mstate_global->__pyx_n_s_close
#define __pyx_n_s_columns __pyx_mstate_global->__pyx_n_s_columns
#define __pyx_n_s_coord __pyx_mstate_global->__pyx_n_s_coord
#define __pyx_n_s_coords __pyx_mstate_global->__pyx_n_s_coords
#define __pyx_n_s_cycles __pyx_mstate_global->__pyx_n_s_cycles
#define __pyx_n_s_dest __pyx_mstate_global->__pyx_n_s_dest
#define __pyx_n_s_dfKeys __pyx_mstate_global->__pyx_n_s_dfKeys
#define __pyx_n_s_dfNetwork __pyx_mstate_global->__pyx_n_s_dfNetwork
#define __pyx_n_s_dfSize __pyx_mstate_global->__pyx_n_s_dfSize
#define __pyx_n_s_dict __pyx_mstate_global->__pyx_n_s_dict
#define __pyx_kp_u_disable __pyx_mstate_global->__pyx_kp_u_disable
#define __pyx_n_s_dist3d_Py __pyx_mstate_global->__pyx_n_s_dist3d_Py
#define __pyx_n_s_edgeVector __pyx_mstate_global->__pyx_n_s_edgeVector
#define __pyx_n_s_edgeidCnt __pyx_mstate_global->__pyx_n_s_edgeidCnt
#define __pyx_n_s_edgeids __pyx_mstate_global->__pyx_n_s_edgeids
#define __pyx_n_s_edges __pyx_mstate_global->__pyx_n_s_edges
#define __pyx_n_s_edgesize __pyx_mstate_global->__pyx_n_s_edgesize
#define __pyx_n_s_elook __pyx_mstate_global->__pyx_n_s_elook
#define __pyx_kp_u_enable __pyx_mstate_global->__pyx_kp_u_enable
#define __pyx_n_s_enumerate __pyx_mstate_global->__pyx_n_s_enumerate
#define __pyx_n_s_float __pyx_mstate_global->__pyx_n_s_float
#define __pyx_n_s_flook __pyx_mstate_global->__pyx_n_s_flook
#define __pyx_n_s_fromGeopandas_Edges __pyx_mstate_global->__pyx_n_s_fromGeopandas_Edges
#define __pyx_kp_u_gc __pyx_mstate_global->__pyx_kp_u_gc
#define __pyx_n_s_gcy __pyx_mstate_global->__pyx_n_s_gcy
#define __pyx_n_s_genexpr __pyx_mstate_global->__pyx_n_s_genexpr
#define __pyx_n_s_geometry __pyx_mstate_global->__pyx_n_s_geometry
#define __pyx_n_s_geopandas __pyx_mstate_global->__pyx_n_s_geopandas
#define __pyx_n_s_get_NodeVisited __pyx_mstate_global->__pyx_n_s_get_NodeVisited
#define __pyx_n_s_get_NodeVisited_locals_genexpr __pyx_mstate_global->__pyx_n_s_get_NodeVisited_locals_genexpr
#define __pyx_n_s_getstate __pyx_mstate_global->__pyx_n_s_getstate
#define __pyx_n_s_gpd __pyx_mstate_global->__pyx_n_s_gpd
#define __pyx_kp_s_gpd_GeoDataFrame __pyx_mstate_global->__pyx_kp_s_gpd_GeoDataFrame
#define __pyx_n_s_graph __pyx_mstate_global->__pyx_n_s_graph
#define __pyx_kp_s_graph_pyx __pyx_mstate_global->__pyx_kp_s_graph_pyx
#define __pyx_n_s_i __pyx_mstate_global->__pyx_n_s_i
#define __pyx_n_s_idEd __pyx_mstate_global->__pyx_n_s_idEd
#define __pyx_n_s_idSt __pyx_mstate_global->__pyx_n_s_idSt
#define __pyx_n_s_ids __pyx_mstate_global->__pyx_n_s_ids
#define __pyx_n_s_idx __pyx_mstate_global->__pyx_n_s_idx
#define __pyx_n_s_import __pyx_mstate_global->__pyx_n_s_import
#define __pyx_n_s_index __pyx_mstate_global->__pyx_n_s_index
#define __pyx_n_s_initializing __pyx_mstate_global->__pyx_n_s_initializing
#define __pyx_n_s_int __pyx_mstate_global->__pyx_n_s_int
#define __pyx_kp_s_int_None __pyx_mstate_global->__pyx_kp_s_int_None
#define __pyx_n_s_is_coroutine __pyx_mstate_global->__pyx_n_s_is_coroutine
#define __pyx_kp_u_isenabled __pyx_mstate_global->__pyx_kp_u_isenabled
#define __pyx_n_s_iterrows __pyx_mstate_global->__pyx_n_s_iterrows
#define __pyx_n_s_keepGoing __pyx_mstate_global->__pyx_n_s_keepGoing
#define __pyx_n_s_len __pyx_mstate_global->__pyx_n_s_len
#define __pyx_n_s_lenE __pyx_mstate_global->__pyx_n_s_lenE
#define __pyx_n_s_length __pyx_mstate_global->__pyx_n_s_length
#define __pyx_n_s_lnEd __pyx_mstate_global->__pyx_n_s_lnEd
#define __pyx_n_s_lnSt __pyx_mstate_global->__pyx_n_s_lnSt
#define __pyx_n_s_lninfo __pyx_mstate_global->__pyx_n_s_lninfo
#define __pyx_n_s_m __pyx_mstate_global->__pyx_n_s_m
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_n __pyx_mstate_global->__pyx_n_s_n
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_nlook __pyx_mstate_global->__pyx_n_s_nlook
#define __pyx_kp_s_no_default___reduce___due_to_non __pyx_mstate_global->__pyx_kp_s_no_default___reduce___due_to_non
#define __pyx_n_s_nodeMapped __pyx_mstate_global->__pyx_n_s_nodeMapped
#define __pyx_n_s_nodeids __pyx_mstate_global->__pyx_n_s_nodeids
#define __pyx_n_s_nodes __pyx_mstate_global->__pyx_n_s_nodes
#define __pyx_n_s_nodesize __pyx_mstate_global->__pyx_n_s_nodesize
#define __pyx_n_s_numbers __pyx_mstate_global->__pyx_n_s_numbers
#define __pyx_n_s_outtup __pyx_mstate_global->__pyx_n_s_outtup
#define __pyx_n_s_p1 __pyx_mstate_global->__pyx_n_s_p1
#define __pyx_n_s_p2 __pyx_mstate_global->__pyx_n_s_p2
#define __pyx_n_s_pathN __pyx_mstate_global->__pyx_n_s_pathN
#define __pyx_n_s_pathlength __pyx_mstate_global->__pyx_n_s_pathlength
#define __pyx_n_s_pointCoords __pyx_mstate_global->__pyx_n_s_pointCoords
#define __pyx_n_s_pointidCnt __pyx_mstate_global->__pyx_n_s_pointidCnt
#define __pyx_n_s_print __pyx_mstate_global->__pyx_n_s_print
#define __pyx_n_s_protocol __pyx_mstate_global->__pyx_n_s_protocol
#define __pyx_n_s_pt __pyx_mstate_global->__pyx_n_s_pt
#define __pyx_n_s_ptDcoord __pyx_mstate_global->__pyx_n_s_ptDcoord
#define __pyx_n_s_ptDid __pyx_mstate_global->__pyx_n_s_ptDid
#define __pyx_n_s_ptDinfo __pyx_mstate_global->__pyx_n_s_ptDinfo
#define __pyx_n_s_ptOcoord __pyx_mstate_global->__pyx_n_s_ptOcoord
#define __pyx_n_s_ptOid __pyx_mstate_global->__pyx_n_s_ptOid
#define __pyx_n_s_ptOinfo __pyx_mstate_global->__pyx_n_s_ptOinfo
#define __pyx_n_s_pth __pyx_mstate_global->__pyx_n_s_pth
#define __pyx_n_s_ptinfo __pyx_mstate_global->__pyx_n_s_ptinfo
#define __pyx_n_s_ptsinfo __pyx_mstate_global->__pyx_n_s_ptsinfo
#define __pyx_n_s_pySmallestMissing __pyx_mstate_global->__pyx_n_s_pySmallestMissing
#define __pyx_n_s_pyx_state __pyx_mstate_global->__pyx_n_s_pyx_state
#define __pyx_n_s_pyx_vtable __pyx_mstate_global->__pyx_n_s_pyx_vtable
#define __pyx_n_s_range __pyx_mstate_global->__pyx_n_s_range
#define __pyx_n_s_reallocEdges __pyx_mstate_global->__pyx_n_s_reallocEdges
#define __pyx_n_s_reallocNodes __pyx_mstate_global->__pyx_n_s_reallocNodes
#define __pyx_n_s_reconstruct __pyx_mstate_global->__pyx_n_s_reconstruct
#define __pyx_n_s_reduce __pyx_mstate_global->__pyx_n_s_reduce
#define __pyx_n_s_reduce_cython __pyx_mstate_global->__pyx_n_s_reduce_cython
#define __pyx_n_s_reduce_ex __pyx_mstate_global->__pyx_n_s_reduce_ex
#define __pyx_n_s_reduce_ex___locals_genexpr __pyx_mstate_global->__pyx_n_s_reduce_ex___locals_genexpr
#define __pyx_n_s_regEdges __pyx_mstate_global->__pyx_n_s_regEdges
#define __pyx_n_s_regNodes __pyx_mstate_global->__pyx_n_s_regNodes
#define __pyx_n_s_remainingDist __pyx_mstate_global->__pyx_n_s_remainingDist
#define __pyx_n_s_removeEdge __pyx_mstate_global->__pyx_n_s_removeEdge
#define __pyx_n_s_removeEdges __pyx_mstate_global->__pyx_n_s_removeEdges
#define __pyx_n_s_removeNode __pyx_mstate_global->__pyx_n_s_removeNode
#define __pyx_n_s_return __pyx_mstate_global->__pyx_n_s_return
#define __pyx_n_s_row __pyx_mstate_global->__pyx_n_s_row
#define __pyx_n_s_self __pyx_mstate_global->__pyx_n_s_self
#define __pyx_n_s_send __pyx_mstate_global->__pyx_n_s_send
#define __pyx_n_s_setstate __pyx_mstate_global->__pyx_n_s_setstate
#define __pyx_n_s_setstate_cython __pyx_mstate_global->__pyx_n_s_setstate_cython
#define __pyx_n_s_size __pyx_mstate_global->__pyx_n_s_size
#define __pyx_n_s_sizeInfo __pyx_mstate_global->__pyx_n_s_sizeInfo
#define __pyx_n_s_spec __pyx_mstate_global->__pyx_n_s_spec
#define __pyx_n_s_startNode __pyx_mstate_global->__pyx_n_s_startNode
#define __pyx_n_s_staticmethod __pyx_mstate_global->__pyx_n_s_staticmethod
#define __pyx_kp_s_str_None __pyx_mstate_global->__pyx_kp_s_str_None
#define __pyx_kp_s_stringsource __pyx_mstate_global->__pyx_kp_s_stringsource
#define __pyx_n_s_tempC __pyx_mstate_global->__pyx_n_s_tempC
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_n_s_threeD __pyx_mstate_global->__pyx_n_s_threeD
#define __pyx_n_s_throw __pyx_mstate_global->__pyx_n_s_throw
#define __pyx_n_s_tuple __pyx_mstate_global->__pyx_n_s_tuple
#define __pyx_kp_s_tuple_float_float __pyx_mstate_global->__pyx_kp_s_tuple_float_float
#define __pyx_kp_s_tuple_float_tuple_int __pyx_mstate_global->__pyx_kp_s_tuple_float_tuple_int
#define __pyx_kp_s_tuple_int_int __pyx_mstate_global->__pyx_kp_s_tuple_int_int
#define __pyx_kp_s_tuple_tuple_float_tuple_int_None __pyx_mstate_global->__pyx_kp_s_tuple_tuple_float_tuple_int_None
#define __pyx_kp_s_tuple_tuple_int_float __pyx_mstate_global->__pyx_kp_s_tuple_tuple_int_float
#define __pyx_n_s_typing __pyx_mstate_global->__pyx_n_s_typing
#define __pyx_n_s_v __pyx_mstate_global->__pyx_n_s_v
#define __pyx_float_0_0 __pyx_mstate_global->__pyx_float_0_0
#define __pyx_float_0_9 __pyx_mstate_global->__pyx_float_0_9
#define __pyx_float_1_0 __pyx_mstate_global->__pyx_float_1_0
#define __pyx_float_1_1 __pyx_mstate_global->__pyx_float_1_1
#define __pyx_float_2_0 __pyx_mstate_global->__pyx_float_2_0
#define __pyx_float_1000_0 __pyx_mstate_global->__pyx_float_1000_0
#define __pyx_float_10000_0 __pyx_mstate_global->__pyx_float_10000_0
#define __pyx_float_neg_1_0 __pyx_mstate_global->__pyx_float_neg_1_0
#define __pyx_int_10 __pyx_mstate_global->__pyx_int_10
#define __pyx_int_100 __pyx_mstate_global->__pyx_int_100
#define __pyx_int_10000 __pyx_mstate_global->__pyx_int_10000
#define __pyx_int_100000 __pyx_mstate_global->__pyx_int_100000
#define __pyx_int_1000000 __pyx_mstate_global->__pyx_int_1000000
#define __pyx_int_10000000 __pyx_mstate_global->__pyx_int_10000000
#define __pyx_int_1000000000 __pyx_mstate_global->__pyx_int_1000000000
#define __pyx_int_neg_1 __pyx_mstate_global->__pyx_int_neg_1
#define __pyx_k__2 __pyx_mstate_global->__pyx_k__2
#define __pyx_k__3 __pyx_mstate_global->__pyx_k__3
#define __pyx_k__4 __pyx_mstate_global->__pyx_k__4
#define __pyx_k__20 __pyx_mstate_global->__pyx_k__20
#define __pyx_k__21 __pyx_mstate_global->__pyx_k__21
#define __pyx_tuple_ __pyx_mstate_global->__pyx_tuple_
#define __pyx_tuple__6 __pyx_mstate_global->__pyx_tuple__6
#define __pyx_tuple__7 __pyx_mstate_global->__pyx_tuple__7
#define __pyx_tuple__8 __pyx_mstate_global->__pyx_tuple__8
#define __pyx_tuple__9 __pyx_mstate_global->__pyx_tuple__9
#define __pyx_tuple__10 __pyx_mstate_global->__pyx_tuple__10
#define __pyx_tuple__11 __pyx_mstate_global->__pyx_tuple__11
#define __pyx_tuple__12 __pyx_mstate_global->__pyx_tuple__12
#define __pyx_tuple__13 __pyx_mstate_global->__pyx_tuple__13
#define __pyx_tuple__14 __pyx_mstate_global->__pyx_tuple__14
#define __pyx_tuple__15 __pyx_mstate_global->__pyx_tuple__15
#define __pyx_tuple__16 __pyx_mstate_global->__pyx_tuple__16
#define __pyx_tuple__17 __pyx_mstate_global->__pyx_tuple__17
#define __pyx_tuple__18 __pyx_mstate_global->__pyx_tuple__18
#define __pyx_tuple__19 __pyx_mstate_global->__pyx_tuple__19
#define __pyx_tuple__24 __pyx_mstate_global->__pyx_tuple__24
#define __pyx_tuple__26 __pyx_mstate_global->__pyx_tuple__26
#define __pyx_tuple__28 __pyx_mstate_global->__pyx_tuple__28
#define __pyx_tuple__30 __pyx_mstate_global->__pyx_tuple__30
#define __pyx_tuple__32 __pyx_mstate_global->__pyx_tuple__32
#define __pyx_tuple__34 __pyx_mstate_global->__pyx_tuple__34
#define __pyx_tuple__36 __pyx_mstate_global->__pyx_tuple__36
#define __pyx_tuple__39 __pyx_mstate_global->__pyx_tuple__39
#define __pyx_tuple__41 __pyx_mstate_global->__pyx_tuple__41
#define __pyx_tuple__42 __pyx_mstate_global->__pyx_tuple__42
#define __pyx_tuple__44 __pyx_mstate_global->__pyx_tuple__44
#define __pyx_tuple__46 __pyx_mstate_global->__pyx_tuple__46
#define __pyx_tuple__48 __pyx_mstate_global->__pyx_tuple__48
#define __pyx_tuple__51 __pyx_mstate_global->__pyx_tuple__51
#define __pyx_tuple__53 __pyx_mstate_global->__pyx_tuple__53
#define __pyx_tuple__55 __pyx_mstate_global->__pyx_tuple__55
#define __pyx_tuple__57 __pyx_mstate_global->__pyx_tuple__57
#define __pyx_tuple__58 __pyx_mstate_global->__pyx_tuple__58
#define __pyx_tuple__60 __pyx_mstate_global->__pyx_tuple__60
#define __pyx_tuple__63 __pyx_mstate_global->__pyx_tuple__63
#define __pyx_tuple__65 __pyx_mstate_global->__pyx_tuple__65
#define __pyx_tuple__67 __pyx_mstate_global->__pyx_tuple__67
#define __pyx_tuple__68 __pyx_mstate_global->__pyx_tuple__68
#define __pyx_tuple__70 __pyx_mstate_global->__pyx_tuple__70
#define __pyx_tuple__72 __pyx_mstate_global->__pyx_tuple__72
#define __pyx_tuple__73 __pyx_mstate_global->__pyx_tuple__73
#define __pyx_tuple__75 __pyx_mstate_global->__pyx_tuple__75
#define __pyx_tuple__77 __pyx_mstate_global->__pyx_tuple__77
#define __pyx_tuple__80 __pyx_mstate_global->__pyx_tuple__80
#define __pyx_tuple__82 __pyx_mstate_global->__pyx_tuple__82
#define __pyx_tuple__83 __pyx_mstate_global->__pyx_tuple__83
#define __pyx_tuple__85 __pyx_mstate_global->__pyx_tuple__85
#define __pyx_tuple__86 __pyx_mstate_global->__pyx_tuple__86
#define __pyx_tuple__88 __pyx_mstate_global->__pyx_tuple__88
#define __pyx_tuple__89 __pyx_mstate_global->__pyx_tuple__89
#define __pyx_tuple__91 __pyx_mstate_global->__pyx_tuple__91
#define __pyx_codeobj__25 __pyx_mstate_global->__pyx_codeobj__25
#define __pyx_codeobj__27 __pyx_mstate_global->__pyx_codeobj__27
#define __pyx_codeobj__29 __pyx_mstate_global->__pyx_codeobj__29
#define __pyx_codeobj__31 __pyx_mstate_global->__pyx_codeobj__31
#define __pyx_codeobj__33 __pyx_mstate_global->__pyx_codeobj__33
#define __pyx_codeobj__35 __pyx_mstate_global->__pyx_codeobj__35
#define __pyx_codeobj__37 __pyx_mstate_global->__pyx_codeobj__37
#define __pyx_codeobj__38 __pyx_mstate_global->__pyx_codeobj__38
#define __pyx_codeobj__40 __pyx_mstate_global->__pyx_codeobj__40
#define __pyx_codeobj__43 __pyx_mstate_global->__pyx_codeobj__43
#define __pyx_codeobj__45 __pyx_mstate_global->__pyx_codeobj__45
#define __pyx_codeobj__47 __pyx_mstate_global->__pyx_codeobj__47
#define __pyx_codeobj__49 __pyx_mstate_global->__pyx_codeobj__49
#define __pyx_codeobj__50 __pyx_mstate_global->__pyx_codeobj__50
#define __pyx_codeobj__52 __pyx_mstate_global->__pyx_codeobj__52
#define __pyx_codeobj__54 __pyx_mstate_global->__pyx_codeobj__54
#define __pyx_codeobj__56 __pyx_mstate_global->__pyx_codeobj__56
#define __pyx_codeobj__59 __pyx_mstate_global->__pyx_codeobj__59
#define __pyx_codeobj__61 __pyx_mstate_global->__pyx_codeobj__61
#define __pyx_codeobj__62 __pyx_mstate_global->__pyx_codeobj__62
#define __pyx_codeobj__64 __pyx_mstate_global->__pyx_codeobj__64
#define __pyx_codeobj__66 __pyx_mstate_global->__pyx_codeobj__66
#define __pyx_codeobj__69 __pyx_mstate_global->__pyx_codeobj__69
#define __pyx_codeobj__71 __pyx_mstate_global->__pyx_codeobj__71
#define __pyx_codeobj__74 __pyx_mstate_global->__pyx_codeobj__74
#define __pyx_codeobj__76 __pyx_mstate_global->__pyx_codeobj__76
#define __pyx_codeobj__78 __pyx_mstate_global->__pyx_codeobj__78
#define __pyx_codeobj__79 __pyx_mstate_global->__pyx_codeobj__79
#define __pyx_codeobj__81 __pyx_mstate_global->__pyx_codeobj__81
#define __pyx_codeobj__84 __pyx_mstate_global->__pyx_codeobj__84
#define __pyx_codeobj__87 __pyx_mstate_global->__pyx_codeobj__87
#define __pyx_codeobj__90 __pyx_mstate_global->__pyx_codeobj__90
/* #### Code section: module_code ### */

/* "carray.from_py":79
 * 
 * @cname("__Pyx_carray_from_py_float")
 * cdef int __Pyx_carray_from_py_float(object o, base_type *v, Py_ssize_t length) except -1:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t i = length
 *     try:
 */

static int __Pyx_carray_from_py_float(PyObject *__pyx_v_o, float *__pyx_v_v, Py_ssize_t __pyx_v_length) {
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_item = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  float __pyx_t_11;
  char const *__pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_carray_from_py_float", 1);

  /* "carray.from_py":80
 * @cname("__Pyx_carray_from_py_float")
 * cdef int __Pyx_carray_from_py_float(object o, base_type *v, Py_ssize_t length) except -1:
 *     cdef Py_ssize_t i = length             # <<<<<<<<<<<<<<
 *     try:
 *         i = len(o)
 */
  __pyx_v_i = __pyx_v_length;

  /* "carray.from_py":81
 * cdef int __Pyx_carray_from_py_float(object o, base_type *v, Py_ssize_t length) except -1:
 *     cdef Py_ssize_t i = length
 *     try:             # <<<<<<<<<<<<<<
 *         i = len(o)
 *     except (TypeError, OverflowError):
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "carray.from_py":82
 *     cdef Py_ssize_t i = length
 *     try:
 *         i = len(o)             # <<<<<<<<<<<<<<
 *     except (TypeError, OverflowError):
 *         pass
 */
      __pyx_t_4 = PyObject_Length(__pyx_v_o); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 82, __pyx_L3_error)
      __pyx_v_i = __pyx_t_4;

      /* "carray.from_py":81
 * cdef int __Pyx_carray_from_py_float(object o, base_type *v, Py_ssize_t length) except -1:
 *     cdef Py_ssize_t i = length
 *     try:             # <<<<<<<<<<<<<<
 *         i = len(o)
 *     except (TypeError, OverflowError):
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "carray.from_py":83
 *     try:
 *         i = len(o)
 *     except (TypeError, OverflowError):             # <<<<<<<<<<<<<<
 *         pass
 *     if i == length:
 */
    __pyx_t_5 = __Pyx_PyErr_ExceptionMatches2(__pyx_builtin_TypeError, __pyx_builtin_OverflowError);
    if (__pyx_t_5) {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;

    /* "carray.from_py":81
 * cdef int __Pyx_carray_from_py_float(object o, base_type *v, Py_ssize_t length) except -1:
 *     cdef Py_ssize_t i = length
 *     try:             # <<<<<<<<<<<<<<
 *         i = len(o)
 *     except (TypeError, OverflowError):
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "carray.from_py":85
 *     except (TypeError, OverflowError):
 *         pass
 *     if i == length:             # <<<<<<<<<<<<<<
 *         for i, item in enumerate(o):
 *             if i >= length:
 */
  __pyx_t_6 = (__pyx_v_i == __pyx_v_length);
  if (__pyx_t_6) {

    /* "carray.from_py":86
 *         pass
 *     if i == length:
 *         for i, item in enumerate(o):             # <<<<<<<<<<<<<<
 *             if i >= length:
 *                 break
 */
    __pyx_t_4 = 0;
    if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
      __pyx_t_7 = __pyx_v_o; __Pyx_INCREF(__pyx_t_7);
      __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 86, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 86, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_7))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_7);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 86, __pyx_L1_error)
            #endif
            if (__pyx_t_8 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_10 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_8); __Pyx_INCREF(__pyx_t_10); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(1, 86, __pyx_L1_error)
          #else
          __pyx_t_10 = __Pyx_PySequence_ITEM(__pyx_t_7, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 86, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          #endif
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_7);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 86, __pyx_L1_error)
            #endif
            if (__pyx_t_8 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_8); __Pyx_INCREF(__pyx_t_10); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(1, 86, __pyx_L1_error)
          #else
          __pyx_t_10 = __Pyx_PySequence_ITEM(__pyx_t_7, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 86, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          #endif
        }
      } else {
        __pyx_t_10 = __pyx_t_9(__pyx_t_7);
        if (unlikely(!__pyx_t_10)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 86, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_10);
      }
      __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_10);
      __pyx_t_10 = 0;
      __pyx_v_i = __pyx_t_4;
      __pyx_t_4 = (__pyx_t_4 + 1);

      /* "carray.from_py":87
 *     if i == length:
 *         for i, item in enumerate(o):
 *             if i >= length:             # <<<<<<<<<<<<<<
 *                 break
 *             v[i] = item
 */
      __pyx_t_6 = (__pyx_v_i >= __pyx_v_length);
      if (__pyx_t_6) {

        /* "carray.from_py":88
 *         for i, item in enumerate(o):
 *             if i >= length:
 *                 break             # <<<<<<<<<<<<<<
 *             v[i] = item
 *         else:
 */
        goto __pyx_L11_break;

        /* "carray.from_py":87
 *     if i == length:
 *         for i, item in enumerate(o):
 *             if i >= length:             # <<<<<<<<<<<<<<
 *                 break
 *             v[i] = item
 */
      }

      /* "carray.from_py":89
 *             if i >= length:
 *                 break
 *             v[i] = item             # <<<<<<<<<<<<<<
 *         else:
 *             i += 1  # convert index to length
 */
      __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_v_item); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 89, __pyx_L1_error)
      (__pyx_v_v[__pyx_v_i]) = __pyx_t_11;

      /* "carray.from_py":86
 *         pass
 *     if i == length:
 *         for i, item in enumerate(o):             # <<<<<<<<<<<<<<
 *             if i >= length:
 *                 break
 */
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L13_for_else;
    __pyx_L11_break:;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L14_for_end;
    /*else*/ {
      __pyx_L13_for_else:;

      /* "carray.from_py":91
 *             v[i] = item
 *         else:
 *             i += 1  # convert index to length             # <<<<<<<<<<<<<<
 *             if i == length:
 *                 return 0
 */
      __pyx_v_i = (__pyx_v_i + 1);

      /* "carray.from_py":92
 *         else:
 *             i += 1  # convert index to length
 *             if i == length:             # <<<<<<<<<<<<<<
 *                 return 0
 * 
 */
      __pyx_t_6 = (__pyx_v_i == __pyx_v_length);
      if (__pyx_t_6) {

        /* "carray.from_py":93
 *             i += 1  # convert index to length
 *             if i == length:
 *                 return 0             # <<<<<<<<<<<<<<
 * 
 *     PyErr_Format(
 */
        __pyx_r = 0;
        goto __pyx_L0;

        /* "carray.from_py":92
 *         else:
 *             i += 1  # convert index to length
 *             if i == length:             # <<<<<<<<<<<<<<
 *                 return 0
 * 
 */
      }
    }
    __pyx_L14_for_end:;

    /* "carray.from_py":85
 *     except (TypeError, OverflowError):
 *         pass
 *     if i == length:             # <<<<<<<<<<<<<<
 *         for i, item in enumerate(o):
 *             if i >= length:
 */
  }

  /* "carray.from_py":98
 *         IndexError,
 *         ("too many values found during array assignment, expected %zd"
 *          if i >= length else             # <<<<<<<<<<<<<<
 *          "not enough values found during array assignment, expected %zd, got %zd"),
 *         length, i)
 */
  __pyx_t_6 = (__pyx_v_i >= __pyx_v_length);
  if (__pyx_t_6) {
    __pyx_t_12 = ((char const *)"too many values found during array assignment, expected %zd");
  } else {
    __pyx_t_12 = ((char const *)"not enough values found during array assignment, expected %zd, got %zd");
  }

  /* "carray.from_py":95
 *                 return 0
 * 
 *     PyErr_Format(             # <<<<<<<<<<<<<<
 *         IndexError,
 *         ("too many values found during array assignment, expected %zd"
 */
  __pyx_t_7 = PyErr_Format(__pyx_builtin_IndexError, __pyx_t_12, __pyx_v_length, __pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "carray.from_py":79
 * 
 * @cname("__Pyx_carray_from_py_float")
 * cdef int __Pyx_carray_from_py_float(object o, base_type *v, Py_ssize_t length) except -1:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t i = length
 *     try:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("carray.from_py.__Pyx_carray_from_py_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

static PyObject *__pyx_convert_vector_to_py_int(std::vector<int>  const &__pyx_v_v) {
  Py_ssize_t __pyx_v_v_size_signed;
  PyObject *__pyx_v_o = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_int", 1);

  /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  __pyx_t_1 = (__pyx_v_v.size() > ((size_t)PY_SSIZE_T_MAX));
  if (unlikely(__pyx_t_1)) {

    /* "vector.to_py":68
 * cdef object __pyx_convert_vector_to_py_int(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()             # <<<<<<<<<<<<<<
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(1, 68, __pyx_L1_error)

    /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  }

  /* "vector.to_py":69
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()             # <<<<<<<<<<<<<<
 * 
 *     o = PyList_New(v_size_signed)
 */
  __pyx_v_v_size_signed = ((Py_ssize_t)__pyx_v_v.size());

  /* "vector.to_py":71
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 *     o = PyList_New(v_size_signed)             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t i
 */
  __pyx_t_2 = PyList_New(__pyx_v_v_size_signed); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_o = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vector.to_py":76
 *     cdef object item
 * 
 *     for i in range(v_size_signed):             # <<<<<<<<<<<<<<
 *         item = v[i]
 *         Py_INCREF(item)
 */
  __pyx_t_3 = __pyx_v_v_size_signed;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "vector.to_py":77
 * 
 *     for i in range(v_size_signed):
 *         item = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)
 */
    __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "vector.to_py":78
 *     for i in range(v_size_signed):
 *         item = v[i]
 *         Py_INCREF(item)             # <<<<<<<<<<<<<<
 *         PyList_SET_ITEM(o, i, item)
 * 
 */
    Py_INCREF(__pyx_v_item);

    /* "vector.to_py":79
 *         item = v[i]
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)             # <<<<<<<<<<<<<<
 * 
 *     return o
 */
    PyList_SET_ITEM(__pyx_v_o, __pyx_v_i, __pyx_v_item);
  }

  /* "vector.to_py":81
 *         PyList_SET_ITEM(o, i, item)
 * 
 *     return o             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.to_py":190
 * 
 * @cname("__pyx_convert_pair_to_py_int____float")
 * cdef object __pyx_convert_pair_to_py_int____float(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

static PyObject *__pyx_convert_pair_to_py_int____float(std::pair<int,float>  const &__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_to_py_int____float", 1);

  /* "pair.to_py":191
 * @cname("__pyx_convert_pair_to_py_int____float")
 * cdef object __pyx_convert_pair_to_py_int____float(const pair[X,Y]& p):
 *     return p.first, p.second             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_p.first); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_p.second); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1)) __PYX_ERR(1, 191, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2)) __PYX_ERR(1, 191, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pair.to_py":190
 * 
 * @cname("__pyx_convert_pair_to_py_int____float")
 * cdef object __pyx_convert_pair_to_py_int____float(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.to_py.__pyx_convert_pair_to_py_int____float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py_float")
 * cdef object __pyx_convert_vector_to_py_float(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

static PyObject *__pyx_convert_vector_to_py_float(std::vector<float>  const &__pyx_v_v) {
  Py_ssize_t __pyx_v_v_size_signed;
  PyObject *__pyx_v_o = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_float", 1);

  /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py_float")
 * cdef object __pyx_convert_vector_to_py_float(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  __pyx_t_1 = (__pyx_v_v.size() > ((size_t)PY_SSIZE_T_MAX));
  if (unlikely(__pyx_t_1)) {

    /* "vector.to_py":68
 * cdef object __pyx_convert_vector_to_py_float(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()             # <<<<<<<<<<<<<<
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(1, 68, __pyx_L1_error)

    /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py_float")
 * cdef object __pyx_convert_vector_to_py_float(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  }

  /* "vector.to_py":69
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()             # <<<<<<<<<<<<<<
 * 
 *     o = PyList_New(v_size_signed)
 */
  __pyx_v_v_size_signed = ((Py_ssize_t)__pyx_v_v.size());

  /* "vector.to_py":71
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 *     o = PyList_New(v_size_signed)             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t i
 */
  __pyx_t_2 = PyList_New(__pyx_v_v_size_signed); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_o = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vector.to_py":76
 *     cdef object item
 * 
 *     for i in range(v_size_signed):             # <<<<<<<<<<<<<<
 *         item = v[i]
 *         Py_INCREF(item)
 */
  __pyx_t_3 = __pyx_v_v_size_signed;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "vector.to_py":77
 * 
 *     for i in range(v_size_signed):
 *         item = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)
 */
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "vector.to_py":78
 *     for i in range(v_size_signed):
 *         item = v[i]
 *         Py_INCREF(item)             # <<<<<<<<<<<<<<
 *         PyList_SET_ITEM(o, i, item)
 * 
 */
    Py_INCREF(__pyx_v_item);

    /* "vector.to_py":79
 *         item = v[i]
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)             # <<<<<<<<<<<<<<
 * 
 *     return o
 */
    PyList_SET_ITEM(__pyx_v_o, __pyx_v_i, __pyx_v_item);
  }

  /* "vector.to_py":81
 *         PyList_SET_ITEM(o, i, item)
 * 
 *     return o             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py_float")
 * cdef object __pyx_convert_vector_to_py_float(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(std::vector<std::vector<int> >  const &__pyx_v_v) {
  Py_ssize_t __pyx_v_v_size_signed;
  PyObject *__pyx_v_o = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___", 1);

  /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  __pyx_t_1 = (__pyx_v_v.size() > ((size_t)PY_SSIZE_T_MAX));
  if (unlikely(__pyx_t_1)) {

    /* "vector.to_py":68
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()             # <<<<<<<<<<<<<<
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(1, 68, __pyx_L1_error)

    /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  }

  /* "vector.to_py":69
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()             # <<<<<<<<<<<<<<
 * 
 *     o = PyList_New(v_size_signed)
 */
  __pyx_v_v_size_signed = ((Py_ssize_t)__pyx_v_v.size());

  /* "vector.to_py":71
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 *     o = PyList_New(v_size_signed)             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t i
 */
  __pyx_t_2 = PyList_New(__pyx_v_v_size_signed); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_o = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vector.to_py":76
 *     cdef object item
 * 
 *     for i in range(v_size_signed):             # <<<<<<<<<<<<<<
 *         item = v[i]
 *         Py_INCREF(item)
 */
  __pyx_t_3 = __pyx_v_v_size_signed;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "vector.to_py":77
 * 
 *     for i in range(v_size_signed):
 *         item = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)
 */
    __pyx_t_2 = __pyx_convert_vector_to_py_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "vector.to_py":78
 *     for i in range(v_size_signed):
 *         item = v[i]
 *         Py_INCREF(item)             # <<<<<<<<<<<<<<
 *         PyList_SET_ITEM(o, i, item)
 * 
 */
    Py_INCREF(__pyx_v_item);

    /* "vector.to_py":79
 *         item = v[i]
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)             # <<<<<<<<<<<<<<
 * 
 *     return o
 */
    PyList_SET_ITEM(__pyx_v_o, __pyx_v_i, __pyx_v_item);
  }

  /* "vector.to_py":81
 *         PyList_SET_ITEM(o, i, item)
 * 
 *     return o             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":29
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef Point3d MakePoint3d(float& x, float& y, float z= 0.0) nogil:             # <<<<<<<<<<<<<<
 *     cdef Point3d pt
 *     pt.x = x
 */

static struct __pyx_t_5graph_Point3d __pyx_f_5graph_MakePoint3d(float &__pyx_v_x, float &__pyx_v_y, struct __pyx_opt_args_5graph_MakePoint3d *__pyx_optional_args) {
  float __pyx_v_z = ((float)0.0);
  struct __pyx_t_5graph_Point3d __pyx_v_pt;
  struct __pyx_t_5graph_Point3d __pyx_r;
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_z = __pyx_optional_args->z;
    }
  }

  /* "graph.pyx":31
 * cdef Point3d MakePoint3d(float& x, float& y, float z= 0.0) nogil:
 *     cdef Point3d pt
 *     pt.x = x             # <<<<<<<<<<<<<<
 *     pt.y = y
 *     pt.z = z
 */
  __pyx_v_pt.x = __pyx_v_x;

  /* "graph.pyx":32
 *     cdef Point3d pt
 *     pt.x = x
 *     pt.y = y             # <<<<<<<<<<<<<<
 *     pt.z = z
 *     return pt
 */
  __pyx_v_pt.y = __pyx_v_y;

  /* "graph.pyx":33
 *     pt.x = x
 *     pt.y = y
 *     pt.z = z             # <<<<<<<<<<<<<<
 *     return pt
 * 
 */
  __pyx_v_pt.z = __pyx_v_z;

  /* "graph.pyx":34
 *     pt.y = y
 *     pt.z = z
 *     return pt             # <<<<<<<<<<<<<<
 * 
 * cdef struct Line3d:
 */
  __pyx_r = __pyx_v_pt;
  goto __pyx_L0;

  /* "graph.pyx":29
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef Point3d MakePoint3d(float& x, float& y, float z= 0.0) nogil:             # <<<<<<<<<<<<<<
 *     cdef Point3d pt
 *     pt.x = x
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "graph.pyx":42
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline int* Int_tuple_array(tuple input_tup):             # <<<<<<<<<<<<<<
 *     cdef int* arr
 *     cdef int i = <int>len(input_tup)
 */

static CYTHON_INLINE int *__pyx_f_5graph_Int_tuple_array(PyObject *__pyx_v_input_tup) {
  int *__pyx_v_arr;
  int __pyx_v_i;
  int __pyx_v_n;
  int *__pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "graph.pyx":44
 * cdef inline int* Int_tuple_array(tuple input_tup):
 *     cdef int* arr
 *     cdef int i = <int>len(input_tup)             # <<<<<<<<<<<<<<
 *     cdef int n
 * 
 */
  if (unlikely(__pyx_v_input_tup == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 44, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyTuple_GET_SIZE(__pyx_v_input_tup); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 44, __pyx_L1_error)
  __pyx_v_i = ((int)__pyx_t_1);

  /* "graph.pyx":47
 *     cdef int n
 * 
 *     arr = <int*>malloc(i * sizeof(int))             # <<<<<<<<<<<<<<
 *     for n in range(i):
 *         arr[n] = input_tup[n]
 */
  __pyx_v_arr = ((int *)malloc((__pyx_v_i * (sizeof(int)))));

  /* "graph.pyx":48
 * 
 *     arr = <int*>malloc(i * sizeof(int))
 *     for n in range(i):             # <<<<<<<<<<<<<<
 *         arr[n] = input_tup[n]
 *     return arr
 */
  __pyx_t_2 = __pyx_v_i;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_n = __pyx_t_4;

    /* "graph.pyx":49
 *     arr = <int*>malloc(i * sizeof(int))
 *     for n in range(i):
 *         arr[n] = input_tup[n]             # <<<<<<<<<<<<<<
 *     return arr
 * 
 */
    if (unlikely(__pyx_v_input_tup == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 49, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyInt_As_int(PyTuple_GET_ITEM(__pyx_v_input_tup, __pyx_v_n)); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 49, __pyx_L1_error)
    (__pyx_v_arr[__pyx_v_n]) = __pyx_t_5;
  }

  /* "graph.pyx":50
 *     for n in range(i):
 *         arr[n] = input_tup[n]
 *     return arr             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __pyx_r = __pyx_v_arr;
  goto __pyx_L0;

  /* "graph.pyx":42
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline int* Int_tuple_array(tuple input_tup):             # <<<<<<<<<<<<<<
 *     cdef int* arr
 *     cdef int i = <int>len(input_tup)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("graph.Int_tuple_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  return __pyx_r;
}
static PyObject *__pyx_gb_5graph_15Int_array_tuple_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "graph.pyx":56
 * cdef inline tuple Int_array_tuple(int* input_arr, int size):
 *     cdef int n
 *     return tuple((input_arr[n] for n in range(size)))             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */

static PyObject *__pyx_pf_5graph_15Int_array_tuple_genexpr(PyObject *__pyx_self, int __pyx_genexpr_arg_0) {
  struct __pyx_obj_5graph___pyx_scope_struct_1_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5graph___pyx_scope_struct_1_genexpr *)__pyx_tp_new_5graph___pyx_scope_struct_1_genexpr(__pyx_ptype_5graph___pyx_scope_struct_1_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5graph___pyx_scope_struct_1_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 56, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple *) __pyx_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  __pyx_cur_scope->__pyx_genexpr_arg_0 = __pyx_genexpr_arg_0;
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5graph_15Int_array_tuple_2generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_Int_array_tuple_locals_genexpr, __pyx_n_s_graph); if (unlikely(!gen)) __PYX_ERR(0, 56, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("graph.Int_array_tuple.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5graph_15Int_array_tuple_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5graph___pyx_scope_struct_1_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5graph___pyx_scope_struct_1_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 56, __pyx_L1_error)
  __pyx_t_1 = __pyx_cur_scope->__pyx_genexpr_arg_0;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_cur_scope->__pyx_v_n = __pyx_t_3;
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_cur_scope->__pyx_outer_scope->__pyx_v_input_arr[__pyx_cur_scope->__pyx_v_n])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 56, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 56, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":54
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline tuple Int_array_tuple(int* input_arr, int size):             # <<<<<<<<<<<<<<
 *     cdef int n
 *     return tuple((input_arr[n] for n in range(size)))
 */

static CYTHON_INLINE PyObject *__pyx_f_5graph_Int_array_tuple(int *__pyx_v_input_arr, int __pyx_v_size) {
  struct __pyx_obj_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple *__pyx_cur_scope;
  PyObject *__pyx_gb_5graph_15Int_array_tuple_2generator = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Int_array_tuple", 0);
  __pyx_cur_scope = (struct __pyx_obj_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple *)__pyx_tp_new_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple(__pyx_ptype_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 54, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_input_arr = __pyx_v_input_arr;

  /* "graph.pyx":56
 * cdef inline tuple Int_array_tuple(int* input_arr, int size):
 *     cdef int n
 *     return tuple((input_arr[n] for n in range(size)))             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_pf_5graph_15Int_array_tuple_genexpr(((PyObject*)__pyx_cur_scope), __pyx_v_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PySequence_Tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "graph.pyx":54
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline tuple Int_array_tuple(int* input_arr, int size):             # <<<<<<<<<<<<<<
 *     cdef int n
 *     return tuple((input_arr[n] for n in range(size)))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("graph.Int_array_tuple", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_gb_5graph_15Int_array_tuple_2generator);
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":60
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline float* Float_tuple_array(tuple input_tup):             # <<<<<<<<<<<<<<
 *     cdef float* arr
 *     cdef int i = <int>len(input_tup)
 */

static CYTHON_INLINE float *__pyx_f_5graph_Float_tuple_array(PyObject *__pyx_v_input_tup) {
  float *__pyx_v_arr;
  int __pyx_v_i;
  int __pyx_v_n;
  float *__pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  float __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "graph.pyx":62
 * cdef inline float* Float_tuple_array(tuple input_tup):
 *     cdef float* arr
 *     cdef int i = <int>len(input_tup)             # <<<<<<<<<<<<<<
 *     cdef int n
 * 
 */
  if (unlikely(__pyx_v_input_tup == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 62, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyTuple_GET_SIZE(__pyx_v_input_tup); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 62, __pyx_L1_error)
  __pyx_v_i = ((int)__pyx_t_1);

  /* "graph.pyx":65
 *     cdef int n
 * 
 *     arr = <float*>malloc(i * sizeof(float))             # <<<<<<<<<<<<<<
 *     for n in range(i):
 *         arr[n] = input_tup[n]
 */
  __pyx_v_arr = ((float *)malloc((__pyx_v_i * (sizeof(float)))));

  /* "graph.pyx":66
 * 
 *     arr = <float*>malloc(i * sizeof(float))
 *     for n in range(i):             # <<<<<<<<<<<<<<
 *         arr[n] = input_tup[n]
 *     return arr
 */
  __pyx_t_2 = __pyx_v_i;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_n = __pyx_t_4;

    /* "graph.pyx":67
 *     arr = <float*>malloc(i * sizeof(float))
 *     for n in range(i):
 *         arr[n] = input_tup[n]             # <<<<<<<<<<<<<<
 *     return arr
 * 
 */
    if (unlikely(__pyx_v_input_tup == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 67, __pyx_L1_error)
    }
    __pyx_t_5 = __pyx_PyFloat_AsFloat(PyTuple_GET_ITEM(__pyx_v_input_tup, __pyx_v_n)); if (unlikely((__pyx_t_5 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 67, __pyx_L1_error)
    (__pyx_v_arr[__pyx_v_n]) = __pyx_t_5;
  }

  /* "graph.pyx":68
 *     for n in range(i):
 *         arr[n] = input_tup[n]
 *     return arr             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __pyx_r = __pyx_v_arr;
  goto __pyx_L0;

  /* "graph.pyx":60
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline float* Float_tuple_array(tuple input_tup):             # <<<<<<<<<<<<<<
 *     cdef float* arr
 *     cdef int i = <int>len(input_tup)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("graph.Float_tuple_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  return __pyx_r;
}
static PyObject *__pyx_gb_5graph_17Float_array_tuple_2generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "graph.pyx":74
 * cdef inline tuple Float_array_tuple(float* input_arr, int size):
 *     cdef int n
 *     return tuple((input_arr[n] for n in range(size)))             # <<<<<<<<<<<<<<
 * 
 * cdef struct Node:
 */

static PyObject *__pyx_pf_5graph_17Float_array_tuple_genexpr(PyObject *__pyx_self, int __pyx_genexpr_arg_0) {
  struct __pyx_obj_5graph___pyx_scope_struct_3_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5graph___pyx_scope_struct_3_genexpr *)__pyx_tp_new_5graph___pyx_scope_struct_3_genexpr(__pyx_ptype_5graph___pyx_scope_struct_3_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5graph___pyx_scope_struct_3_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 74, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple *) __pyx_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  __pyx_cur_scope->__pyx_genexpr_arg_0 = __pyx_genexpr_arg_0;
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5graph_17Float_array_tuple_2generator1, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_Float_array_tuple_locals_genexpr, __pyx_n_s_graph); if (unlikely(!gen)) __PYX_ERR(0, 74, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("graph.Float_array_tuple.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5graph_17Float_array_tuple_2generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5graph___pyx_scope_struct_3_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5graph___pyx_scope_struct_3_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 74, __pyx_L1_error)
  __pyx_t_1 = __pyx_cur_scope->__pyx_genexpr_arg_0;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_cur_scope->__pyx_v_n = __pyx_t_3;
    __pyx_t_4 = PyFloat_FromDouble((__pyx_cur_scope->__pyx_outer_scope->__pyx_v_input_arr[__pyx_cur_scope->__pyx_v_n])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 74, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 74, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":72
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline tuple Float_array_tuple(float* input_arr, int size):             # <<<<<<<<<<<<<<
 *     cdef int n
 *     return tuple((input_arr[n] for n in range(size)))
 */

static CYTHON_INLINE PyObject *__pyx_f_5graph_Float_array_tuple(float *__pyx_v_input_arr, int __pyx_v_size) {
  struct __pyx_obj_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple *__pyx_cur_scope;
  PyObject *__pyx_gb_5graph_17Float_array_tuple_2generator1 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Float_array_tuple", 0);
  __pyx_cur_scope = (struct __pyx_obj_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple *)__pyx_tp_new_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple(__pyx_ptype_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 72, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_input_arr = __pyx_v_input_arr;

  /* "graph.pyx":74
 * cdef inline tuple Float_array_tuple(float* input_arr, int size):
 *     cdef int n
 *     return tuple((input_arr[n] for n in range(size)))             # <<<<<<<<<<<<<<
 * 
 * cdef struct Node:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_pf_5graph_17Float_array_tuple_genexpr(((PyObject*)__pyx_cur_scope), __pyx_v_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PySequence_Tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "graph.pyx":72
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline tuple Float_array_tuple(float* input_arr, int size):             # <<<<<<<<<<<<<<
 *     cdef int n
 *     return tuple((input_arr[n] for n in range(size)))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("graph.Float_array_tuple", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_gb_5graph_17Float_array_tuple_2generator1);
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":85
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef Node Node_make(tuple NodeDt):             # <<<<<<<<<<<<<<
 *     cdef Node nd
 *     nd.idx = NodeDt[0]
 */

static struct __pyx_t_5graph_Node __pyx_f_5graph_Node_make(PyObject *__pyx_v_NodeDt) {
  struct __pyx_t_5graph_Node __pyx_v_nd;
  struct __pyx_t_5graph_Node __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  float *__pyx_t_3;
  float __pyx_t_4;
  int *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Node_make", 1);

  /* "graph.pyx":87
 * cdef Node Node_make(tuple NodeDt):
 *     cdef Node nd
 *     nd.idx = NodeDt[0]             # <<<<<<<<<<<<<<
 *     nd.pt = Float_tuple_array(NodeDt[1])
 *     nd.w = NodeDt[2]
 */
  if (unlikely(__pyx_v_NodeDt == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 87, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_As_int(PyTuple_GET_ITEM(__pyx_v_NodeDt, 0)); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 87, __pyx_L1_error)
  __pyx_v_nd.idx = __pyx_t_1;

  /* "graph.pyx":88
 *     cdef Node nd
 *     nd.idx = NodeDt[0]
 *     nd.pt = Float_tuple_array(NodeDt[1])             # <<<<<<<<<<<<<<
 *     nd.w = NodeDt[2]
 *     nd.c = NodeDt[3]
 */
  if (unlikely(__pyx_v_NodeDt == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 88, __pyx_L1_error)
  }
  if (!(likely(PyTuple_CheckExact(PyTuple_GET_ITEM(__pyx_v_NodeDt, 1)))||((PyTuple_GET_ITEM(__pyx_v_NodeDt, 1)) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", PyTuple_GET_ITEM(__pyx_v_NodeDt, 1)))) __PYX_ERR(0, 88, __pyx_L1_error)
  __pyx_t_2 = PyTuple_GET_ITEM(__pyx_v_NodeDt, 1);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = __pyx_f_5graph_Float_tuple_array(((PyObject*)__pyx_t_2)); if (unlikely(__pyx_t_3 == ((float *)NULL) && PyErr_Occurred())) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  memcpy(&(__pyx_v_nd.pt[0]), __pyx_t_3, sizeof(__pyx_v_nd.pt[0]) * (3 - 0));

  /* "graph.pyx":89
 *     nd.idx = NodeDt[0]
 *     nd.pt = Float_tuple_array(NodeDt[1])
 *     nd.w = NodeDt[2]             # <<<<<<<<<<<<<<
 *     nd.c = NodeDt[3]
 *     nd.Eid = Int_tuple_array(NodeDt[4])
 */
  if (unlikely(__pyx_v_NodeDt == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 89, __pyx_L1_error)
  }
  __pyx_t_4 = __pyx_PyFloat_AsFloat(PyTuple_GET_ITEM(__pyx_v_NodeDt, 2)); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 89, __pyx_L1_error)
  __pyx_v_nd.w = __pyx_t_4;

  /* "graph.pyx":90
 *     nd.pt = Float_tuple_array(NodeDt[1])
 *     nd.w = NodeDt[2]
 *     nd.c = NodeDt[3]             # <<<<<<<<<<<<<<
 *     nd.Eid = Int_tuple_array(NodeDt[4])
 *     return nd
 */
  if (unlikely(__pyx_v_NodeDt == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 90, __pyx_L1_error)
  }
  __pyx_t_4 = __pyx_PyFloat_AsFloat(PyTuple_GET_ITEM(__pyx_v_NodeDt, 3)); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 90, __pyx_L1_error)
  __pyx_v_nd.c = __pyx_t_4;

  /* "graph.pyx":91
 *     nd.w = NodeDt[2]
 *     nd.c = NodeDt[3]
 *     nd.Eid = Int_tuple_array(NodeDt[4])             # <<<<<<<<<<<<<<
 *     return nd
 * 
 */
  if (unlikely(__pyx_v_NodeDt == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 91, __pyx_L1_error)
  }
  if (!(likely(PyTuple_CheckExact(PyTuple_GET_ITEM(__pyx_v_NodeDt, 4)))||((PyTuple_GET_ITEM(__pyx_v_NodeDt, 4)) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", PyTuple_GET_ITEM(__pyx_v_NodeDt, 4)))) __PYX_ERR(0, 91, __pyx_L1_error)
  __pyx_t_2 = PyTuple_GET_ITEM(__pyx_v_NodeDt, 4);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_5 = __pyx_f_5graph_Int_tuple_array(((PyObject*)__pyx_t_2)); if (unlikely(__pyx_t_5 == ((int *)NULL) && PyErr_Occurred())) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  memcpy(&(__pyx_v_nd.Eid[0]), __pyx_t_5, sizeof(__pyx_v_nd.Eid[0]) * (10 - 0));

  /* "graph.pyx":92
 *     nd.c = NodeDt[3]
 *     nd.Eid = Int_tuple_array(NodeDt[4])
 *     return nd             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_nd;
  goto __pyx_L0;

  /* "graph.pyx":85
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef Node Node_make(tuple NodeDt):             # <<<<<<<<<<<<<<
 *     cdef Node nd
 *     nd.idx = NodeDt[0]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("graph.Node_make", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":97
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef tuple Node_tuple(Node NodeDt):             # <<<<<<<<<<<<<<
 *     cdef tuple tup
 *     tup = (
 */

static PyObject *__pyx_f_5graph_Node_tuple(struct __pyx_t_5graph_Node __pyx_v_NodeDt) {
  PyObject *__pyx_v_tup = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Node_tuple", 1);

  /* "graph.pyx":100
 *     cdef tuple tup
 *     tup = (
 *         NodeDt.idx,             # <<<<<<<<<<<<<<
 *         Float_array_tuple(NodeDt.pt, 3),
 *         NodeDt.w,
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_NodeDt.idx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "graph.pyx":101
 *     tup = (
 *         NodeDt.idx,
 *         Float_array_tuple(NodeDt.pt, 3),             # <<<<<<<<<<<<<<
 *         NodeDt.w,
 *         NodeDt.c,
 */
  __pyx_t_2 = __pyx_f_5graph_Float_array_tuple(__pyx_v_NodeDt.pt, 3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "graph.pyx":102
 *         NodeDt.idx,
 *         Float_array_tuple(NodeDt.pt, 3),
 *         NodeDt.w,             # <<<<<<<<<<<<<<
 *         NodeDt.c,
 *         Int_array_tuple(NodeDt.Eid, 10)
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_NodeDt.w); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "graph.pyx":103
 *         Float_array_tuple(NodeDt.pt, 3),
 *         NodeDt.w,
 *         NodeDt.c,             # <<<<<<<<<<<<<<
 *         Int_array_tuple(NodeDt.Eid, 10)
 *     )
 */
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_NodeDt.c); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "graph.pyx":104
 *         NodeDt.w,
 *         NodeDt.c,
 *         Int_array_tuple(NodeDt.Eid, 10)             # <<<<<<<<<<<<<<
 *     )
 *     return tup
 */
  __pyx_t_5 = __pyx_f_5graph_Int_array_tuple(__pyx_v_NodeDt.Eid, 10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "graph.pyx":100
 *     cdef tuple tup
 *     tup = (
 *         NodeDt.idx,             # <<<<<<<<<<<<<<
 *         Float_array_tuple(NodeDt.pt, 3),
 *         NodeDt.w,
 */
  __pyx_t_6 = PyTuple_New(5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1)) __PYX_ERR(0, 100, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2)) __PYX_ERR(0, 100, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_3)) __PYX_ERR(0, 100, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_4)) __PYX_ERR(0, 100, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 4, __pyx_t_5)) __PYX_ERR(0, 100, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_v_tup = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "graph.pyx":106
 *         Int_array_tuple(NodeDt.Eid, 10)
 *     )
 *     return tup             # <<<<<<<<<<<<<<
 * 
 * cdef struct Edge:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_tup);
  __pyx_r = __pyx_v_tup;
  goto __pyx_L0;

  /* "graph.pyx":97
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef tuple Node_tuple(Node NodeDt):             # <<<<<<<<<<<<<<
 *     cdef tuple tup
 *     tup = (
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("graph.Node_tuple", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tup);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":118
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef Edge Edge_make(tuple EdgeDt):             # <<<<<<<<<<<<<<
 *     cdef Edge ed
 *     ed.idx = EdgeDt[0]
 */

static struct __pyx_t_5graph_Edge __pyx_f_5graph_Edge_make(PyObject *__pyx_v_EdgeDt) {
  struct __pyx_t_5graph_Edge __pyx_v_ed;
  struct __pyx_t_5graph_Edge __pyx_r;
  int __pyx_t_1;
  float __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "graph.pyx":120
 * cdef Edge Edge_make(tuple EdgeDt):
 *     cdef Edge ed
 *     ed.idx = EdgeDt[0]             # <<<<<<<<<<<<<<
 *     ed.NidO = EdgeDt[1]
 *     ed.NidD = EdgeDt[2]
 */
  if (unlikely(__pyx_v_EdgeDt == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 120, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_As_int(PyTuple_GET_ITEM(__pyx_v_EdgeDt, 0)); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 120, __pyx_L1_error)
  __pyx_v_ed.idx = __pyx_t_1;

  /* "graph.pyx":121
 *     cdef Edge ed
 *     ed.idx = EdgeDt[0]
 *     ed.NidO = EdgeDt[1]             # <<<<<<<<<<<<<<
 *     ed.NidD = EdgeDt[2]
 *     ed.len = EdgeDt[3]
 */
  if (unlikely(__pyx_v_EdgeDt == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 121, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_As_int(PyTuple_GET_ITEM(__pyx_v_EdgeDt, 1)); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 121, __pyx_L1_error)
  __pyx_v_ed.NidO = __pyx_t_1;

  /* "graph.pyx":122
 *     ed.idx = EdgeDt[0]
 *     ed.NidO = EdgeDt[1]
 *     ed.NidD = EdgeDt[2]             # <<<<<<<<<<<<<<
 *     ed.len = EdgeDt[3]
 *     ed.lenR = EdgeDt[4]
 */
  if (unlikely(__pyx_v_EdgeDt == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 122, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_As_int(PyTuple_GET_ITEM(__pyx_v_EdgeDt, 2)); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 122, __pyx_L1_error)
  __pyx_v_ed.NidD = __pyx_t_1;

  /* "graph.pyx":123
 *     ed.NidO = EdgeDt[1]
 *     ed.NidD = EdgeDt[2]
 *     ed.len = EdgeDt[3]             # <<<<<<<<<<<<<<
 *     ed.lenR = EdgeDt[4]
 *     ed.w = EdgeDt[5]
 */
  if (unlikely(__pyx_v_EdgeDt == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 123, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_PyFloat_AsFloat(PyTuple_GET_ITEM(__pyx_v_EdgeDt, 3)); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 123, __pyx_L1_error)
  __pyx_v_ed.len = __pyx_t_2;

  /* "graph.pyx":124
 *     ed.NidD = EdgeDt[2]
 *     ed.len = EdgeDt[3]
 *     ed.lenR = EdgeDt[4]             # <<<<<<<<<<<<<<
 *     ed.w = EdgeDt[5]
 *     return ed
 */
  if (unlikely(__pyx_v_EdgeDt == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 124, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_PyFloat_AsFloat(PyTuple_GET_ITEM(__pyx_v_EdgeDt, 4)); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 124, __pyx_L1_error)
  __pyx_v_ed.lenR = __pyx_t_2;

  /* "graph.pyx":125
 *     ed.len = EdgeDt[3]
 *     ed.lenR = EdgeDt[4]
 *     ed.w = EdgeDt[5]             # <<<<<<<<<<<<<<
 *     return ed
 * 
 */
  if (unlikely(__pyx_v_EdgeDt == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 125, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_PyFloat_AsFloat(PyTuple_GET_ITEM(__pyx_v_EdgeDt, 5)); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 125, __pyx_L1_error)
  __pyx_v_ed.w = __pyx_t_2;

  /* "graph.pyx":126
 *     ed.lenR = EdgeDt[4]
 *     ed.w = EdgeDt[5]
 *     return ed             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __pyx_r = __pyx_v_ed;
  goto __pyx_L0;

  /* "graph.pyx":118
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef Edge Edge_make(tuple EdgeDt):             # <<<<<<<<<<<<<<
 *     cdef Edge ed
 *     ed.idx = EdgeDt[0]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("graph.Edge_make", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  return __pyx_r;
}

/* "graph.pyx":130
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef tuple Edge_tuple(Edge EdgeDt):             # <<<<<<<<<<<<<<
 *     cdef tuple tup
 *     tup = (
 */

static PyObject *__pyx_f_5graph_Edge_tuple(struct __pyx_t_5graph_Edge __pyx_v_EdgeDt) {
  PyObject *__pyx_v_tup = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Edge_tuple", 1);

  /* "graph.pyx":133
 *     cdef tuple tup
 *     tup = (
 *         EdgeDt.idx,             # <<<<<<<<<<<<<<
 *         EdgeDt.NidO,
 *         EdgeDt.NidD,
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_EdgeDt.idx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "graph.pyx":134
 *     tup = (
 *         EdgeDt.idx,
 *         EdgeDt.NidO,             # <<<<<<<<<<<<<<
 *         EdgeDt.NidD,
 *         EdgeDt.len,
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_EdgeDt.NidO); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "graph.pyx":135
 *         EdgeDt.idx,
 *         EdgeDt.NidO,
 *         EdgeDt.NidD,             # <<<<<<<<<<<<<<
 *         EdgeDt.len,
 *         EdgeDt.lenR,
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_EdgeDt.NidD); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "graph.pyx":136
 *         EdgeDt.NidO,
 *         EdgeDt.NidD,
 *         EdgeDt.len,             # <<<<<<<<<<<<<<
 *         EdgeDt.lenR,
 *         EdgeDt.w,
 */
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_EdgeDt.len); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "graph.pyx":137
 *         EdgeDt.NidD,
 *         EdgeDt.len,
 *         EdgeDt.lenR,             # <<<<<<<<<<<<<<
 *         EdgeDt.w,
 *     )
 */
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_EdgeDt.lenR); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "graph.pyx":138
 *         EdgeDt.len,
 *         EdgeDt.lenR,
 *         EdgeDt.w,             # <<<<<<<<<<<<<<
 *     )
 *     return tup
 */
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_EdgeDt.w); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);

  /* "graph.pyx":133
 *     cdef tuple tup
 *     tup = (
 *         EdgeDt.idx,             # <<<<<<<<<<<<<<
 *         EdgeDt.NidO,
 *         EdgeDt.NidD,
 */
  __pyx_t_7 = PyTuple_New(6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1)) __PYX_ERR(0, 133, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_2)) __PYX_ERR(0, 133, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_3)) __PYX_ERR(0, 133, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_t_4)) __PYX_ERR(0, 133, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 4, __pyx_t_5)) __PYX_ERR(0, 133, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_6);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 5, __pyx_t_6)) __PYX_ERR(0, 133, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_v_tup = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "graph.pyx":140
 *         EdgeDt.w,
 *     )
 *     return tup             # <<<<<<<<<<<<<<
 * 
 * cdef struct NodeReach:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_tup);
  __pyx_r = __pyx_v_tup;
  goto __pyx_L0;

  /* "graph.pyx":130
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef tuple Edge_tuple(Edge EdgeDt):             # <<<<<<<<<<<<<<
 *     cdef tuple tup
 *     tup = (
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("graph.Edge_tuple", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tup);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":153
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef int NodeReach_CmpL(const NodeReach& a, const NodeReach& b) nogil:             # <<<<<<<<<<<<<<
 *     return a.Weight <= b.Weight
 * 
 */

static int __pyx_f_5graph_NodeReach_CmpL(struct __pyx_t_5graph_NodeReach const &__pyx_v_a, struct __pyx_t_5graph_NodeReach const &__pyx_v_b) {
  int __pyx_r;

  /* "graph.pyx":154
 * @cython.wraparound(False)
 * cdef int NodeReach_CmpL(const NodeReach& a, const NodeReach& b) nogil:
 *     return a.Weight <= b.Weight             # <<<<<<<<<<<<<<
 * 
 * cdef class PriorityQueue_NR:
 */
  __pyx_r = (__pyx_v_a.Weight <= __pyx_v_b.Weight);
  goto __pyx_L0;

  /* "graph.pyx":153
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef int NodeReach_CmpL(const NodeReach& a, const NodeReach& b) nogil:             # <<<<<<<<<<<<<<
 *     return a.Weight <= b.Weight
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "graph.pyx":161
 *     cdef vector[NodeReach] NodeQueue
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static int __pyx_pw_5graph_16PriorityQueue_NR_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5graph_16PriorityQueue_NR_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_5graph_16PriorityQueue_NR___cinit__(((struct __pyx_obj_5graph_PriorityQueue_NR *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5graph_16PriorityQueue_NR___cinit__(CYTHON_UNUSED struct __pyx_obj_5graph_PriorityQueue_NR *__pyx_v_self) {
  int __pyx_r;

  /* function exit code */
  __pyx_r = 0;
  return __pyx_r;
}

/* "graph.pyx":164
 *         pass
 * 
 *     def __str__(self) -> str:             # <<<<<<<<<<<<<<
 *         return f'PriorityQueue Size {self.NodeQueue.size()}'
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5graph_16PriorityQueue_NR_3__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5graph_16PriorityQueue_NR_3__str__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5graph_16PriorityQueue_NR_2__str__(((struct __pyx_obj_5graph_PriorityQueue_NR *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5graph_16PriorityQueue_NR_2__str__(struct __pyx_obj_5graph_PriorityQueue_NR *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 1);

  /* "graph.pyx":165
 * 
 *     def __str__(self) -> str:
 *         return f'PriorityQueue Size {self.NodeQueue.size()}'             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->NodeQueue.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_t_1, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_kp_u_PriorityQueue_Size, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "graph.pyx":164
 *         pass
 * 
 *     def __str__(self) -> str:             # <<<<<<<<<<<<<<
 *         return f'PriorityQueue Size {self.NodeQueue.size()}'
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("graph.PriorityQueue_NR.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":169
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     cdef void push(self, const NodeReach& item):             # <<<<<<<<<<<<<<
 *         # i dont really need to re-sort everything, things are already sorted.
 *         # deprecated version
 */

static void __pyx_f_5graph_16PriorityQueue_NR_push(struct __pyx_obj_5graph_PriorityQueue_NR *__pyx_v_self, struct __pyx_t_5graph_NodeReach const &__pyx_v_item) {
  size_t __pyx_v_size;
  int __pyx_v_n;
  int __pyx_t_1;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "graph.pyx":175
 *         # sort(self.NodeQueue.begin(), self.NodeQueue.end(), NodeReach_CmpL)
 *         # this is wayyyy more effective than sort
 *         if self.NodeQueue.empty():             # <<<<<<<<<<<<<<
 *             self.NodeQueue.push_back(item)
 *             return
 */
  __pyx_t_1 = __pyx_v_self->NodeQueue.empty();
  if (__pyx_t_1) {

    /* "graph.pyx":176
 *         # this is wayyyy more effective than sort
 *         if self.NodeQueue.empty():
 *             self.NodeQueue.push_back(item)             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    try {
      __pyx_v_self->NodeQueue.push_back(__pyx_v_item);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 176, __pyx_L1_error)
    }

    /* "graph.pyx":177
 *         if self.NodeQueue.empty():
 *             self.NodeQueue.push_back(item)
 *             return             # <<<<<<<<<<<<<<
 * 
 *         cdef size_t size = self.NodeQueue.size()
 */
    goto __pyx_L0;

    /* "graph.pyx":175
 *         # sort(self.NodeQueue.begin(), self.NodeQueue.end(), NodeReach_CmpL)
 *         # this is wayyyy more effective than sort
 *         if self.NodeQueue.empty():             # <<<<<<<<<<<<<<
 *             self.NodeQueue.push_back(item)
 *             return
 */
  }

  /* "graph.pyx":179
 *             return
 * 
 *         cdef size_t size = self.NodeQueue.size()             # <<<<<<<<<<<<<<
 *         cdef int n
 *         for n in range(size):
 */
  __pyx_v_size = __pyx_v_self->NodeQueue.size();

  /* "graph.pyx":181
 *         cdef size_t size = self.NodeQueue.size()
 *         cdef int n
 *         for n in range(size):             # <<<<<<<<<<<<<<
 *             if self.NodeQueue[n].Weight > item.Weight:
 *                 self.NodeQueue.insert(self.NodeQueue.begin()+n, item)
 */
  __pyx_t_2 = __pyx_v_size;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_n = __pyx_t_4;

    /* "graph.pyx":182
 *         cdef int n
 *         for n in range(size):
 *             if self.NodeQueue[n].Weight > item.Weight:             # <<<<<<<<<<<<<<
 *                 self.NodeQueue.insert(self.NodeQueue.begin()+n, item)
 *                 return
 */
    __pyx_t_1 = ((__pyx_v_self->NodeQueue[__pyx_v_n]).Weight > __pyx_v_item.Weight);
    if (__pyx_t_1) {

      /* "graph.pyx":183
 *         for n in range(size):
 *             if self.NodeQueue[n].Weight > item.Weight:
 *                 self.NodeQueue.insert(self.NodeQueue.begin()+n, item)             # <<<<<<<<<<<<<<
 *                 return
 *         self.NodeQueue.push_back(item)
 */
      try {
        __pyx_v_self->NodeQueue.insert((__pyx_v_self->NodeQueue.begin() + __pyx_v_n), __pyx_v_item);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 183, __pyx_L1_error)
      }

      /* "graph.pyx":184
 *             if self.NodeQueue[n].Weight > item.Weight:
 *                 self.NodeQueue.insert(self.NodeQueue.begin()+n, item)
 *                 return             # <<<<<<<<<<<<<<
 *         self.NodeQueue.push_back(item)
 * 
 */
      goto __pyx_L0;

      /* "graph.pyx":182
 *         cdef int n
 *         for n in range(size):
 *             if self.NodeQueue[n].Weight > item.Weight:             # <<<<<<<<<<<<<<
 *                 self.NodeQueue.insert(self.NodeQueue.begin()+n, item)
 *                 return
 */
    }
  }

  /* "graph.pyx":185
 *                 self.NodeQueue.insert(self.NodeQueue.begin()+n, item)
 *                 return
 *         self.NodeQueue.push_back(item)             # <<<<<<<<<<<<<<
 * 
 *     cdef NodeReach top(self):
 */
  try {
    __pyx_v_self->NodeQueue.push_back(__pyx_v_item);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 185, __pyx_L1_error)
  }

  /* "graph.pyx":169
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     cdef void push(self, const NodeReach& item):             # <<<<<<<<<<<<<<
 *         # i dont really need to re-sort everything, things are already sorted.
 *         # deprecated version
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("graph.PriorityQueue_NR.push", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
}

/* "graph.pyx":187
 *         self.NodeQueue.push_back(item)
 * 
 *     cdef NodeReach top(self):             # <<<<<<<<<<<<<<
 *         item = self.NodeQueue.front()
 *         return item
 */

static struct __pyx_t_5graph_NodeReach __pyx_f_5graph_16PriorityQueue_NR_top(struct __pyx_obj_5graph_PriorityQueue_NR *__pyx_v_self) {
  struct __pyx_t_5graph_NodeReach __pyx_v_item;
  struct __pyx_t_5graph_NodeReach __pyx_r;

  /* "graph.pyx":188
 * 
 *     cdef NodeReach top(self):
 *         item = self.NodeQueue.front()             # <<<<<<<<<<<<<<
 *         return item
 * 
 */
  __pyx_v_item = __pyx_v_self->NodeQueue.front();

  /* "graph.pyx":189
 *     cdef NodeReach top(self):
 *         item = self.NodeQueue.front()
 *         return item             # <<<<<<<<<<<<<<
 * 
 *     cdef NodeReach bot(self):
 */
  __pyx_r = __pyx_v_item;
  goto __pyx_L0;

  /* "graph.pyx":187
 *         self.NodeQueue.push_back(item)
 * 
 *     cdef NodeReach top(self):             # <<<<<<<<<<<<<<
 *         item = self.NodeQueue.front()
 *         return item
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "graph.pyx":191
 *         return item
 * 
 *     cdef NodeReach bot(self):             # <<<<<<<<<<<<<<
 *         item = self.NodeQueue.back()
 *         return item
 */

static struct __pyx_t_5graph_NodeReach __pyx_f_5graph_16PriorityQueue_NR_bot(struct __pyx_obj_5graph_PriorityQueue_NR *__pyx_v_self) {
  struct __pyx_t_5graph_NodeReach __pyx_v_item;
  struct __pyx_t_5graph_NodeReach __pyx_r;

  /* "graph.pyx":192
 * 
 *     cdef NodeReach bot(self):
 *         item = self.NodeQueue.back()             # <<<<<<<<<<<<<<
 *         return item
 * 
 */
  __pyx_v_item = __pyx_v_self->NodeQueue.back();

  /* "graph.pyx":193
 *     cdef NodeReach bot(self):
 *         item = self.NodeQueue.back()
 *         return item             # <<<<<<<<<<<<<<
 * 
 *     cdef NodeReach pop_top(self):
 */
  __pyx_r = __pyx_v_item;
  goto __pyx_L0;

  /* "graph.pyx":191
 *         return item
 * 
 *     cdef NodeReach bot(self):             # <<<<<<<<<<<<<<
 *         item = self.NodeQueue.back()
 *         return item
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "graph.pyx":195
 *         return item
 * 
 *     cdef NodeReach pop_top(self):             # <<<<<<<<<<<<<<
 *         item = self.NodeQueue.front()
 *         self.NodeQueue.erase(self.NodeQueue.begin())
 */

static struct __pyx_t_5graph_NodeReach __pyx_f_5graph_16PriorityQueue_NR_pop_top(struct __pyx_obj_5graph_PriorityQueue_NR *__pyx_v_self) {
  struct __pyx_t_5graph_NodeReach __pyx_v_item;
  struct __pyx_t_5graph_NodeReach __pyx_r;

  /* "graph.pyx":196
 * 
 *     cdef NodeReach pop_top(self):
 *         item = self.NodeQueue.front()             # <<<<<<<<<<<<<<
 *         self.NodeQueue.erase(self.NodeQueue.begin())
 *         return item
 */
  __pyx_v_item = __pyx_v_self->NodeQueue.front();

  /* "graph.pyx":197
 *     cdef NodeReach pop_top(self):
 *         item = self.NodeQueue.front()
 *         self.NodeQueue.erase(self.NodeQueue.begin())             # <<<<<<<<<<<<<<
 *         return item
 * 
 */
  (void)(__pyx_v_self->NodeQueue.erase(__pyx_v_self->NodeQueue.begin()));

  /* "graph.pyx":198
 *         item = self.NodeQueue.front()
 *         self.NodeQueue.erase(self.NodeQueue.begin())
 *         return item             # <<<<<<<<<<<<<<
 * 
 *     cdef NodeReach pop_bot(self):
 */
  __pyx_r = __pyx_v_item;
  goto __pyx_L0;

  /* "graph.pyx":195
 *         return item
 * 
 *     cdef NodeReach pop_top(self):             # <<<<<<<<<<<<<<
 *         item = self.NodeQueue.front()
 *         self.NodeQueue.erase(self.NodeQueue.begin())
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "graph.pyx":200
 *         return item
 * 
 *     cdef NodeReach pop_bot(self):             # <<<<<<<<<<<<<<
 *         item = self.NodeQueue.back()
 *         self.NodeQueue.pop_back()
 */

static struct __pyx_t_5graph_NodeReach __pyx_f_5graph_16PriorityQueue_NR_pop_bot(struct __pyx_obj_5graph_PriorityQueue_NR *__pyx_v_self) {
  struct __pyx_t_5graph_NodeReach __pyx_v_item;
  struct __pyx_t_5graph_NodeReach __pyx_r;

  /* "graph.pyx":201
 * 
 *     cdef NodeReach pop_bot(self):
 *         item = self.NodeQueue.back()             # <<<<<<<<<<<<<<
 *         self.NodeQueue.pop_back()
 *         return item
 */
  __pyx_v_item = __pyx_v_self->NodeQueue.back();

  /* "graph.pyx":202
 *     cdef NodeReach pop_bot(self):
 *         item = self.NodeQueue.back()
 *         self.NodeQueue.pop_back()             # <<<<<<<<<<<<<<
 *         return item
 * 
 */
  __pyx_v_self->NodeQueue.pop_back();

  /* "graph.pyx":203
 *         item = self.NodeQueue.back()
 *         self.NodeQueue.pop_back()
 *         return item             # <<<<<<<<<<<<<<
 * 
 *     cdef bint empty(self):
 */
  __pyx_r = __pyx_v_item;
  goto __pyx_L0;

  /* "graph.pyx":200
 *         return item
 * 
 *     cdef NodeReach pop_bot(self):             # <<<<<<<<<<<<<<
 *         item = self.NodeQueue.back()
 *         self.NodeQueue.pop_back()
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "graph.pyx":205
 *         return item
 * 
 *     cdef bint empty(self):             # <<<<<<<<<<<<<<
 *         return self.NodeQueue.empty()
 * 
 */

static int __pyx_f_5graph_16PriorityQueue_NR_empty(struct __pyx_obj_5graph_PriorityQueue_NR *__pyx_v_self) {
  int __pyx_r;

  /* "graph.pyx":206
 * 
 *     cdef bint empty(self):
 *         return self.NodeQueue.empty()             # <<<<<<<<<<<<<<
 * 
 *     cdef size_t size(self):
 */
  __pyx_r = __pyx_v_self->NodeQueue.empty();
  goto __pyx_L0;

  /* "graph.pyx":205
 *         return item
 * 
 *     cdef bint empty(self):             # <<<<<<<<<<<<<<
 *         return self.NodeQueue.empty()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "graph.pyx":208
 *         return self.NodeQueue.empty()
 * 
 *     cdef size_t size(self):             # <<<<<<<<<<<<<<
 *         return self.NodeQueue.size()
 * 
 */

static size_t __pyx_f_5graph_16PriorityQueue_NR_size(struct __pyx_obj_5graph_PriorityQueue_NR *__pyx_v_self) {
  size_t __pyx_r;

  /* "graph.pyx":209
 * 
 *     cdef size_t size(self):
 *         return self.NodeQueue.size()             # <<<<<<<<<<<<<<
 * 
 *     cdef void clear(self):
 */
  __pyx_r = __pyx_v_self->NodeQueue.size();
  goto __pyx_L0;

  /* "graph.pyx":208
 *         return self.NodeQueue.empty()
 * 
 *     cdef size_t size(self):             # <<<<<<<<<<<<<<
 *         return self.NodeQueue.size()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "graph.pyx":211
 *         return self.NodeQueue.size()
 * 
 *     cdef void clear(self):             # <<<<<<<<<<<<<<
 *         self.NodeQueue.clear()
 * 
 */

static void __pyx_f_5graph_16PriorityQueue_NR_clear(struct __pyx_obj_5graph_PriorityQueue_NR *__pyx_v_self) {

  /* "graph.pyx":212
 * 
 *     cdef void clear(self):
 *         self.NodeQueue.clear()             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __pyx_v_self->NodeQueue.clear();

  /* "graph.pyx":211
 *         return self.NodeQueue.size()
 * 
 *     cdef void clear(self):             # <<<<<<<<<<<<<<
 *         self.NodeQueue.clear()
 * 
 */

  /* function exit code */
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5graph_16PriorityQueue_NR_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5graph_16PriorityQueue_NR_5__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_16PriorityQueue_NR_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5graph_16PriorityQueue_NR_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_5graph_16PriorityQueue_NR_4__reduce_cython__(((struct __pyx_obj_5graph_PriorityQueue_NR *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5graph_16PriorityQueue_NR_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5graph_PriorityQueue_NR *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("graph.PriorityQueue_NR.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_5graph_16PriorityQueue_NR_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5graph_16PriorityQueue_NR_7__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_16PriorityQueue_NR_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5graph_16PriorityQueue_NR_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("graph.PriorityQueue_NR.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5graph_16PriorityQueue_NR_6__setstate_cython__(((struct __pyx_obj_5graph_PriorityQueue_NR *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5graph_16PriorityQueue_NR_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5graph_PriorityQueue_NR *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("graph.PriorityQueue_NR.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":216
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef vector[int] EdgesReach_Eididx(const vector[pair[int, float]]& vec, const int& value):             # <<<<<<<<<<<<<<
 *     cdef vector[int] v
 *     cdef int i
 */

static std::vector<int>  __pyx_f_5graph_EdgesReach_Eididx(std::vector<std::pair<int,float> >  const &__pyx_v_vec, int const &__pyx_v_value) {
  std::vector<int>  __pyx_v_v;
  int __pyx_v_i;
  size_t __pyx_v_n;
  std::vector<int>  __pyx_r;
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "graph.pyx":219
 *     cdef vector[int] v
 *     cdef int i
 *     cdef size_t n = vec.size()             # <<<<<<<<<<<<<<
 * 
 *     v.reserve(n)
 */
  __pyx_v_n = __pyx_v_vec.size();

  /* "graph.pyx":221
 *     cdef size_t n = vec.size()
 * 
 *     v.reserve(n)             # <<<<<<<<<<<<<<
 *     for i in range(n):
 *         if vec[i].first == value:
 */
  try {
    __pyx_v_v.reserve(__pyx_v_n);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 221, __pyx_L1_error)
  }

  /* "graph.pyx":222
 * 
 *     v.reserve(n)
 *     for i in range(n):             # <<<<<<<<<<<<<<
 *         if vec[i].first == value:
 *             # v.push_back(vec[i].first)
 */
  __pyx_t_1 = __pyx_v_n;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "graph.pyx":223
 *     v.reserve(n)
 *     for i in range(n):
 *         if vec[i].first == value:             # <<<<<<<<<<<<<<
 *             # v.push_back(vec[i].first)
 *             v.push_back(i)
 */
    __pyx_t_4 = ((__pyx_v_vec[__pyx_v_i]).first == __pyx_v_value);
    if (__pyx_t_4) {

      /* "graph.pyx":225
 *         if vec[i].first == value:
 *             # v.push_back(vec[i].first)
 *             v.push_back(i)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
      try {
        __pyx_v_v.push_back(__pyx_v_i);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 225, __pyx_L1_error)
      }

      /* "graph.pyx":223
 *     v.reserve(n)
 *     for i in range(n):
 *         if vec[i].first == value:             # <<<<<<<<<<<<<<
 *             # v.push_back(vec[i].first)
 *             v.push_back(i)
 */
    }
  }

  /* "graph.pyx":226
 *             # v.push_back(vec[i].first)
 *             v.push_back(i)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "graph.pyx":216
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef vector[int] EdgesReach_Eididx(const vector[pair[int, float]]& vec, const int& value):             # <<<<<<<<<<<<<<
 *     cdef vector[int] v
 *     cdef int i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("graph.EdgesReach_Eididx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  return __pyx_r;
}

/* "graph.pyx":230
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline bint Find_IntVector(vector[int]& vec, const int val) nogil:             # <<<<<<<<<<<<<<
 *     cdef vector[int].iterator it = find(vec.begin(), vec.end(), val)
 *     return it != vec.end()
 */

static CYTHON_INLINE int __pyx_f_5graph_Find_IntVector(std::vector<int>  &__pyx_v_vec, int const __pyx_v_val) {
  std::vector<int> ::iterator __pyx_v_it;
  int __pyx_r;
  std::vector<int> ::iterator __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif

  /* "graph.pyx":231
 * @cython.wraparound(False)
 * cdef inline bint Find_IntVector(vector[int]& vec, const int val) nogil:
 *     cdef vector[int].iterator it = find(vec.begin(), vec.end(), val)             # <<<<<<<<<<<<<<
 *     return it != vec.end()
 * 
 */
  try {
    __pyx_t_1 = std::find<std::vector<int> ::iterator,int const >(__pyx_v_vec.begin(), __pyx_v_vec.end(), __pyx_v_val);
  } catch(...) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_CppExn2PyErr();
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
    __PYX_ERR(0, 231, __pyx_L1_error)
  }
  __pyx_v_it = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1);

  /* "graph.pyx":232
 * cdef inline bint Find_IntVector(vector[int]& vec, const int val) nogil:
 *     cdef vector[int].iterator it = find(vec.begin(), vec.end(), val)
 *     return it != vec.end()             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __pyx_r = (__pyx_v_it != __pyx_v_vec.end());
  goto __pyx_L0;

  /* "graph.pyx":230
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline bint Find_IntVector(vector[int]& vec, const int val) nogil:             # <<<<<<<<<<<<<<
 *     cdef vector[int].iterator it = find(vec.begin(), vec.end(), val)
 *     return it != vec.end()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("graph.Find_IntVector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  return __pyx_r;
}

/* "graph.pyx":236
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline vector[int] Pop_IntVectorVector(vector[vector[int]]& vec, const int index):             # <<<<<<<<<<<<<<
 *     if index >= vec.size():
 *         raise IndexError("Index out of range")
 */

static CYTHON_INLINE std::vector<int>  __pyx_f_5graph_Pop_IntVectorVector(std::vector<std::vector<int> >  &__pyx_v_vec, int const __pyx_v_index) {
  std::vector<int>  __pyx_v_item;
  std::vector<int>  __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Pop_IntVectorVector", 1);

  /* "graph.pyx":237
 * @cython.wraparound(False)
 * cdef inline vector[int] Pop_IntVectorVector(vector[vector[int]]& vec, const int index):
 *     if index >= vec.size():             # <<<<<<<<<<<<<<
 *         raise IndexError("Index out of range")
 *     cdef vector[int] item = vec[index]
 */
  __pyx_t_1 = (__pyx_v_index >= __pyx_v_vec.size());
  if (unlikely(__pyx_t_1)) {

    /* "graph.pyx":238
 * cdef inline vector[int] Pop_IntVectorVector(vector[vector[int]]& vec, const int index):
 *     if index >= vec.size():
 *         raise IndexError("Index out of range")             # <<<<<<<<<<<<<<
 *     cdef vector[int] item = vec[index]
 *     vec.erase(vec.begin() + index)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 238, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 238, __pyx_L1_error)

    /* "graph.pyx":237
 * @cython.wraparound(False)
 * cdef inline vector[int] Pop_IntVectorVector(vector[vector[int]]& vec, const int index):
 *     if index >= vec.size():             # <<<<<<<<<<<<<<
 *         raise IndexError("Index out of range")
 *     cdef vector[int] item = vec[index]
 */
  }

  /* "graph.pyx":239
 *     if index >= vec.size():
 *         raise IndexError("Index out of range")
 *     cdef vector[int] item = vec[index]             # <<<<<<<<<<<<<<
 *     vec.erase(vec.begin() + index)
 *     return item
 */
  __pyx_v_item = (__pyx_v_vec[__pyx_v_index]);

  /* "graph.pyx":240
 *         raise IndexError("Index out of range")
 *     cdef vector[int] item = vec[index]
 *     vec.erase(vec.begin() + index)             # <<<<<<<<<<<<<<
 *     return item
 * 
 */
  (void)(__pyx_v_vec.erase((__pyx_v_vec.begin() + __pyx_v_index)));

  /* "graph.pyx":241
 *     cdef vector[int] item = vec[index]
 *     vec.erase(vec.begin() + index)
 *     return item             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __pyx_r = __pyx_v_item;
  goto __pyx_L0;

  /* "graph.pyx":236
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline vector[int] Pop_IntVectorVector(vector[vector[int]]& vec, const int index):             # <<<<<<<<<<<<<<
 *     if index >= vec.size():
 *         raise IndexError("Index out of range")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("graph.Pop_IntVectorVector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":245
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef float dist2d(const Node& N1, const Node& N2) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Node distance on 2d (only basing on x and y coordinate)
 */

static float __pyx_f_5graph_dist2d(struct __pyx_t_5graph_Node const &__pyx_v_N1, struct __pyx_t_5graph_Node const &__pyx_v_N2) {
  float __pyx_r;

  /* "graph.pyx":255
 *     returns float
 *     """
 *     return sqrt((N2.pt[0] - N1.pt[0])**2 + (N2.pt[1] - N1.pt[1])**2)             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __pyx_r = sqrt((powf(((__pyx_v_N2.pt[0]) - (__pyx_v_N1.pt[0])), 2.0) + powf(((__pyx_v_N2.pt[1]) - (__pyx_v_N1.pt[1])), 2.0)));
  goto __pyx_L0;

  /* "graph.pyx":245
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef float dist2d(const Node& N1, const Node& N2) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Node distance on 2d (only basing on x and y coordinate)
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "graph.pyx":259
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline float dist3d(const Node& N1, const Node& N2) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Node distance on 3d
 */

static CYTHON_INLINE float __pyx_f_5graph_dist3d(struct __pyx_t_5graph_Node const &__pyx_v_N1, struct __pyx_t_5graph_Node const &__pyx_v_N2) {
  float __pyx_v_dx;
  float __pyx_v_dy;
  float __pyx_v_dz;
  float __pyx_r;

  /* "graph.pyx":269
 *     returns float
 *     """
 *     cdef float dx = N2.pt[0] - N1.pt[0]             # <<<<<<<<<<<<<<
 *     cdef float dy = N2.pt[1] - N1.pt[1]
 *     cdef float dz = N2.pt[2] - N1.pt[2]
 */
  __pyx_v_dx = ((__pyx_v_N2.pt[0]) - (__pyx_v_N1.pt[0]));

  /* "graph.pyx":270
 *     """
 *     cdef float dx = N2.pt[0] - N1.pt[0]
 *     cdef float dy = N2.pt[1] - N1.pt[1]             # <<<<<<<<<<<<<<
 *     cdef float dz = N2.pt[2] - N1.pt[2]
 *     return sqrt(dx * dx + dy * dy + dz * dz)
 */
  __pyx_v_dy = ((__pyx_v_N2.pt[1]) - (__pyx_v_N1.pt[1]));

  /* "graph.pyx":271
 *     cdef float dx = N2.pt[0] - N1.pt[0]
 *     cdef float dy = N2.pt[1] - N1.pt[1]
 *     cdef float dz = N2.pt[2] - N1.pt[2]             # <<<<<<<<<<<<<<
 *     return sqrt(dx * dx + dy * dy + dz * dz)
 * 
 */
  __pyx_v_dz = ((__pyx_v_N2.pt[2]) - (__pyx_v_N1.pt[2]));

  /* "graph.pyx":272
 *     cdef float dy = N2.pt[1] - N1.pt[1]
 *     cdef float dz = N2.pt[2] - N1.pt[2]
 *     return sqrt(dx * dx + dy * dy + dz * dz)             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __pyx_r = sqrt((((__pyx_v_dx * __pyx_v_dx) + (__pyx_v_dy * __pyx_v_dy)) + (__pyx_v_dz * __pyx_v_dz)));
  goto __pyx_L0;

  /* "graph.pyx":259
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline float dist3d(const Node& N1, const Node& N2) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Node distance on 3d
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "graph.pyx":276
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline float dist3d_pt(const Point3d& N1, const Point3d& N2) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Node distance on 3d
 */

static CYTHON_INLINE float __pyx_f_5graph_dist3d_pt(struct __pyx_t_5graph_Point3d const &__pyx_v_N1, struct __pyx_t_5graph_Point3d const &__pyx_v_N2) {
  float __pyx_v_dx;
  float __pyx_v_dy;
  float __pyx_v_dz;
  float __pyx_r;

  /* "graph.pyx":286
 *     returns float
 *     """
 *     cdef float dx = N2.x - N1.x             # <<<<<<<<<<<<<<
 *     cdef float dy = N2.y - N1.y
 *     cdef float dz = N2.z - N1.z
 */
  __pyx_v_dx = (__pyx_v_N2.x - __pyx_v_N1.x);

  /* "graph.pyx":287
 *     """
 *     cdef float dx = N2.x - N1.x
 *     cdef float dy = N2.y - N1.y             # <<<<<<<<<<<<<<
 *     cdef float dz = N2.z - N1.z
 *     return sqrt(dx * dx + dy * dy + dz * dz)
 */
  __pyx_v_dy = (__pyx_v_N2.y - __pyx_v_N1.y);

  /* "graph.pyx":288
 *     cdef float dx = N2.x - N1.x
 *     cdef float dy = N2.y - N1.y
 *     cdef float dz = N2.z - N1.z             # <<<<<<<<<<<<<<
 *     return sqrt(dx * dx + dy * dy + dz * dz)
 * 
 */
  __pyx_v_dz = (__pyx_v_N2.z - __pyx_v_N1.z);

  /* "graph.pyx":289
 *     cdef float dy = N2.y - N1.y
 *     cdef float dz = N2.z - N1.z
 *     return sqrt(dx * dx + dy * dy + dz * dz)             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __pyx_r = sqrt((((__pyx_v_dx * __pyx_v_dx) + (__pyx_v_dy * __pyx_v_dy)) + (__pyx_v_dz * __pyx_v_dz)));
  goto __pyx_L0;

  /* "graph.pyx":276
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline float dist3d_pt(const Point3d& N1, const Point3d& N2) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Node distance on 3d
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "graph.pyx":293
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline float dist3d_ar(const float[3]& N1, const float[3]& N2) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Node distance on 3d
 */

static CYTHON_INLINE float __pyx_f_5graph_dist3d_ar(float *__pyx_v_N1, float *__pyx_v_N2) {
  float __pyx_v_dx;
  float __pyx_v_dy;
  float __pyx_v_dz;
  float __pyx_r;

  /* "graph.pyx":303
 *     returns float
 *     """
 *     cdef float dx = N2[0] - N1[0]             # <<<<<<<<<<<<<<
 *     cdef float dy = N2[1] - N1[1]
 *     cdef float dz = N2[2] - N1[2]
 */
  __pyx_v_dx = ((__pyx_v_N2[0]) - (__pyx_v_N1[0]));

  /* "graph.pyx":304
 *     """
 *     cdef float dx = N2[0] - N1[0]
 *     cdef float dy = N2[1] - N1[1]             # <<<<<<<<<<<<<<
 *     cdef float dz = N2[2] - N1[2]
 *     return sqrt(dx * dx + dy * dy + dz * dz)
 */
  __pyx_v_dy = ((__pyx_v_N2[1]) - (__pyx_v_N1[1]));

  /* "graph.pyx":305
 *     cdef float dx = N2[0] - N1[0]
 *     cdef float dy = N2[1] - N1[1]
 *     cdef float dz = N2[2] - N1[2]             # <<<<<<<<<<<<<<
 *     return sqrt(dx * dx + dy * dy + dz * dz)
 * 
 */
  __pyx_v_dz = ((__pyx_v_N2[2]) - (__pyx_v_N1[2]));

  /* "graph.pyx":306
 *     cdef float dy = N2[1] - N1[1]
 *     cdef float dz = N2[2] - N1[2]
 *     return sqrt(dx * dx + dy * dy + dz * dz)             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __pyx_r = sqrt((((__pyx_v_dx * __pyx_v_dx) + (__pyx_v_dy * __pyx_v_dy)) + (__pyx_v_dz * __pyx_v_dz)));
  goto __pyx_L0;

  /* "graph.pyx":293
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline float dist3d_ar(const float[3]& N1, const float[3]& N2) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Node distance on 3d
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "graph.pyx":310
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cpdef float dist3d_Py(tuple[float, float, float]& p1, tuple[float, float, float]& p2):             # <<<<<<<<<<<<<<
 *     """
 *     Node distance on 3d
 */

static PyObject *__pyx_pw_5graph_1dist3d_Py(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static float __pyx_f_5graph_dist3d_Py(__pyx_ctuple_float__and_float__and_float &__pyx_v_p1, __pyx_ctuple_float__and_float__and_float &__pyx_v_p2, CYTHON_UNUSED int __pyx_skip_dispatch) {
  float __pyx_v_dx;
  float __pyx_v_dy;
  float __pyx_v_dz;
  float __pyx_r;

  /* "graph.pyx":320
 *     returns float
 *     """
 *     cdef float dx = p2[0] - p1[0]             # <<<<<<<<<<<<<<
 *     cdef float dy = p2[1] - p1[1]
 *     cdef float dz = p2[2] - p1[2]
 */
  __pyx_v_dx = (__pyx_v_p2.f0 - __pyx_v_p1.f0);

  /* "graph.pyx":321
 *     """
 *     cdef float dx = p2[0] - p1[0]
 *     cdef float dy = p2[1] - p1[1]             # <<<<<<<<<<<<<<
 *     cdef float dz = p2[2] - p1[2]
 *     return sqrt(dx * dx + dy * dy + dz * dz)
 */
  __pyx_v_dy = (__pyx_v_p2.f1 - __pyx_v_p1.f1);

  /* "graph.pyx":322
 *     cdef float dx = p2[0] - p1[0]
 *     cdef float dy = p2[1] - p1[1]
 *     cdef float dz = p2[2] - p1[2]             # <<<<<<<<<<<<<<
 *     return sqrt(dx * dx + dy * dy + dz * dz)
 * 
 */
  __pyx_v_dz = (__pyx_v_p2.f2 - __pyx_v_p1.f2);

  /* "graph.pyx":323
 *     cdef float dy = p2[1] - p1[1]
 *     cdef float dz = p2[2] - p1[2]
 *     return sqrt(dx * dx + dy * dy + dz * dz)             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __pyx_r = sqrt((((__pyx_v_dx * __pyx_v_dx) + (__pyx_v_dy * __pyx_v_dy)) + (__pyx_v_dz * __pyx_v_dz)));
  goto __pyx_L0;

  /* "graph.pyx":310
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cpdef float dist3d_Py(tuple[float, float, float]& p1, tuple[float, float, float]& p2):             # <<<<<<<<<<<<<<
 *     """
 *     Node distance on 3d
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5graph_1dist3d_Py(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5graph_dist3d_Py, "\n    Node distance on 3d\n\n    Args:\n        N1: origin Node struct\n        N2: destination Node struct\n    \n    returns float\n    ");
static PyMethodDef __pyx_mdef_5graph_1dist3d_Py = {"dist3d_Py", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_1dist3d_Py, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5graph_dist3d_Py};
static PyObject *__pyx_pw_5graph_1dist3d_Py(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  __pyx_ctuple_float__and_float__and_float __pyx_v_p1;
  __pyx_ctuple_float__and_float__and_float __pyx_v_p2;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dist3d_Py (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_p1,&__pyx_n_s_p2,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_p1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 310, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_p2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 310, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("dist3d_Py", 1, 2, 2, 1); __PYX_ERR(0, 310, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "dist3d_Py") < 0)) __PYX_ERR(0, 310, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_p1 = __pyx_convert__from_py___pyx_ctuple_float__and_float__and_float(values[0]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 310, __pyx_L3_error)
    __pyx_v_p2 = __pyx_convert__from_py___pyx_ctuple_float__and_float__and_float(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 310, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dist3d_Py", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 310, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("graph.dist3d_Py", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5graph_dist3d_Py(__pyx_self, __pyx_v_p1, __pyx_v_p2);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5graph_dist3d_Py(CYTHON_UNUSED PyObject *__pyx_self, __pyx_ctuple_float__and_float__and_float __pyx_v_p1, __pyx_ctuple_float__and_float__and_float __pyx_v_p2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dist3d_Py", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5graph_dist3d_Py(__pyx_v_p1, __pyx_v_p2, 0); if (unlikely(__pyx_t_1 == ((float)-1) && PyErr_Occurred())) __PYX_ERR(0, 310, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("graph.dist3d_Py", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":327
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline bint SamePoint3d(Point3d& pt1, Point3d& pt2) nogil:             # <<<<<<<<<<<<<<
 *     if pt1.x == pt2.x and pt1.y == pt2.y and pt1.z == pt2.z:
 *         return 1
 */

static CYTHON_INLINE int __pyx_f_5graph_SamePoint3d(struct __pyx_t_5graph_Point3d &__pyx_v_pt1, struct __pyx_t_5graph_Point3d &__pyx_v_pt2) {
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;

  /* "graph.pyx":328
 * @cython.wraparound(False)
 * cdef inline bint SamePoint3d(Point3d& pt1, Point3d& pt2) nogil:
 *     if pt1.x == pt2.x and pt1.y == pt2.y and pt1.z == pt2.z:             # <<<<<<<<<<<<<<
 *         return 1
 *     return 0
 */
  __pyx_t_2 = (__pyx_v_pt1.x == __pyx_v_pt2.x);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_pt1.y == __pyx_v_pt2.y);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_pt1.z == __pyx_v_pt2.z);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "graph.pyx":329
 * cdef inline bint SamePoint3d(Point3d& pt1, Point3d& pt2) nogil:
 *     if pt1.x == pt2.x and pt1.y == pt2.y and pt1.z == pt2.z:
 *         return 1             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "graph.pyx":328
 * @cython.wraparound(False)
 * cdef inline bint SamePoint3d(Point3d& pt1, Point3d& pt2) nogil:
 *     if pt1.x == pt2.x and pt1.y == pt2.y and pt1.z == pt2.z:             # <<<<<<<<<<<<<<
 *         return 1
 *     return 0
 */
  }

  /* "graph.pyx":330
 *     if pt1.x == pt2.x and pt1.y == pt2.y and pt1.z == pt2.z:
 *         return 1
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "graph.pyx":327
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline bint SamePoint3d(Point3d& pt1, Point3d& pt2) nogil:             # <<<<<<<<<<<<<<
 *     if pt1.x == pt2.x and pt1.y == pt2.y and pt1.z == pt2.z:
 *         return 1
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "graph.pyx":335
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline int checkclosePt(Point3d& pt, vector[Point3d]& ptLt, float tol=1e-3) nogil:             # <<<<<<<<<<<<<<
 *     cdef int n
 *     for n in range(ptLt.size()):
 */

static CYTHON_INLINE int __pyx_f_5graph_checkclosePt(struct __pyx_t_5graph_Point3d &__pyx_v_pt, std::vector<struct __pyx_t_5graph_Point3d>  &__pyx_v_ptLt, struct __pyx_opt_args_5graph_checkclosePt *__pyx_optional_args) {
  float __pyx_v_tol = ((float)1e-3);
  int __pyx_v_n;
  int __pyx_r;
  std::vector<struct __pyx_t_5graph_Point3d> ::size_type __pyx_t_1;
  std::vector<struct __pyx_t_5graph_Point3d> ::size_type __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  float __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_tol = __pyx_optional_args->tol;
    }
  }

  /* "graph.pyx":337
 * cdef inline int checkclosePt(Point3d& pt, vector[Point3d]& ptLt, float tol=1e-3) nogil:
 *     cdef int n
 *     for n in range(ptLt.size()):             # <<<<<<<<<<<<<<
 *         if SamePoint3d(pt, ptLt[n]):
 *             return n
 */
  __pyx_t_1 = __pyx_v_ptLt.size();
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_n = __pyx_t_3;

    /* "graph.pyx":338
 *     cdef int n
 *     for n in range(ptLt.size()):
 *         if SamePoint3d(pt, ptLt[n]):             # <<<<<<<<<<<<<<
 *             return n
 *         if dist3d_pt(pt, ptLt[n]) < tol:
 */
    __pyx_t_4 = __pyx_f_5graph_SamePoint3d(__pyx_v_pt, (__pyx_v_ptLt[__pyx_v_n])); if (unlikely(__pyx_t_4 == ((int)-1) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 338, __pyx_L1_error)
    if (__pyx_t_4) {

      /* "graph.pyx":339
 *     for n in range(ptLt.size()):
 *         if SamePoint3d(pt, ptLt[n]):
 *             return n             # <<<<<<<<<<<<<<
 *         if dist3d_pt(pt, ptLt[n]) < tol:
 *             return n
 */
      __pyx_r = __pyx_v_n;
      goto __pyx_L0;

      /* "graph.pyx":338
 *     cdef int n
 *     for n in range(ptLt.size()):
 *         if SamePoint3d(pt, ptLt[n]):             # <<<<<<<<<<<<<<
 *             return n
 *         if dist3d_pt(pt, ptLt[n]) < tol:
 */
    }

    /* "graph.pyx":340
 *         if SamePoint3d(pt, ptLt[n]):
 *             return n
 *         if dist3d_pt(pt, ptLt[n]) < tol:             # <<<<<<<<<<<<<<
 *             return n
 *     return -1
 */
    __pyx_t_5 = __pyx_f_5graph_dist3d_pt(__pyx_v_pt, (__pyx_v_ptLt[__pyx_v_n])); if (unlikely(__pyx_t_5 == ((float)-1) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 340, __pyx_L1_error)
    __pyx_t_4 = (__pyx_t_5 < __pyx_v_tol);
    if (__pyx_t_4) {

      /* "graph.pyx":341
 *             return n
 *         if dist3d_pt(pt, ptLt[n]) < tol:
 *             return n             # <<<<<<<<<<<<<<
 *     return -1
 * 
 */
      __pyx_r = __pyx_v_n;
      goto __pyx_L0;

      /* "graph.pyx":340
 *         if SamePoint3d(pt, ptLt[n]):
 *             return n
 *         if dist3d_pt(pt, ptLt[n]) < tol:             # <<<<<<<<<<<<<<
 *             return n
 *     return -1
 */
    }
  }

  /* "graph.pyx":342
 *         if dist3d_pt(pt, ptLt[n]) < tol:
 *             return n
 *     return -1             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __pyx_r = -1;
  goto __pyx_L0;

  /* "graph.pyx":335
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline int checkclosePt(Point3d& pt, vector[Point3d]& ptLt, float tol=1e-3) nogil:             # <<<<<<<<<<<<<<
 *     cdef int n
 *     for n in range(ptLt.size()):
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("graph.checkclosePt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  return __pyx_r;
}

/* "graph.pyx":346
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cpdef int pySmallestMissing(list[int] numbers):             # <<<<<<<<<<<<<<
 *     """
 *     Finds the smallest non-negative integer not contained in the list.
 */

static PyObject *__pyx_pw_5graph_3pySmallestMissing(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static int __pyx_f_5graph_pySmallestMissing(PyObject *__pyx_v_numbers, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_v_seen = 0;
  int __pyx_v_n;
  int __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  long __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  long __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pySmallestMissing", 1);

  /* "graph.pyx":360
 * 
 *     # Set of seen numbers (efficient for membership checks)
 *     cdef set[int] seen = set()             # <<<<<<<<<<<<<<
 *     cdef int n
 *     cdef int i
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_seen = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "graph.pyx":364
 *     cdef int i
 * 
 *     n = int(len(list(numbers)))             # <<<<<<<<<<<<<<
 *     # quick exit for already sorted list of ids
 *     if numbers[n-1] == n-2:
 */
  __pyx_t_1 = PySequence_List(__pyx_v_numbers); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyList_GET_SIZE(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 364, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_n = ((int)__pyx_t_2);

  /* "graph.pyx":366
 *     n = int(len(list(numbers)))
 *     # quick exit for already sorted list of ids
 *     if numbers[n-1] == n-2:             # <<<<<<<<<<<<<<
 *         return n
 *     if n == 0:
 */
  if (unlikely(__pyx_v_numbers == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 366, __pyx_L1_error)
  }
  __pyx_t_3 = (__pyx_v_n - 1);
  __pyx_t_1 = __Pyx_PyInt_From_long((__pyx_v_n - 2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyObject_RichCompare(PyList_GET_ITEM(__pyx_v_numbers, __pyx_t_3), __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_5) {

    /* "graph.pyx":367
 *     # quick exit for already sorted list of ids
 *     if numbers[n-1] == n-2:
 *         return n             # <<<<<<<<<<<<<<
 *     if n == 0:
 *         return 0
 */
    __pyx_r = __pyx_v_n;
    goto __pyx_L0;

    /* "graph.pyx":366
 *     n = int(len(list(numbers)))
 *     # quick exit for already sorted list of ids
 *     if numbers[n-1] == n-2:             # <<<<<<<<<<<<<<
 *         return n
 *     if n == 0:
 */
  }

  /* "graph.pyx":368
 *     if numbers[n-1] == n-2:
 *         return n
 *     if n == 0:             # <<<<<<<<<<<<<<
 *         return 0
 *     # Add all elements from the list to the set
 */
  __pyx_t_5 = (__pyx_v_n == 0);
  if (__pyx_t_5) {

    /* "graph.pyx":369
 *         return n
 *     if n == 0:
 *         return 0             # <<<<<<<<<<<<<<
 *     # Add all elements from the list to the set
 *     for i in range(n):
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "graph.pyx":368
 *     if numbers[n-1] == n-2:
 *         return n
 *     if n == 0:             # <<<<<<<<<<<<<<
 *         return 0
 *     # Add all elements from the list to the set
 */
  }

  /* "graph.pyx":371
 *         return 0
 *     # Add all elements from the list to the set
 *     for i in range(n):             # <<<<<<<<<<<<<<
 *         seen.add(numbers[i])
 * 
 */
  __pyx_t_6 = __pyx_v_n;
  __pyx_t_7 = __pyx_t_6;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "graph.pyx":372
 *     # Add all elements from the list to the set
 *     for i in range(n):
 *         seen.add(numbers[i])             # <<<<<<<<<<<<<<
 * 
 *     # Check for non-negative integers starting from 0
 */
    if (unlikely(__pyx_v_numbers == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 372, __pyx_L1_error)
    }
    __pyx_t_4 = PyList_GET_ITEM(__pyx_v_numbers, __pyx_v_i);
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_9 = PySet_Add(__pyx_v_seen, __pyx_t_4); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 372, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }

  /* "graph.pyx":375
 * 
 *     # Check for non-negative integers starting from 0
 *     for i in range(n + 1):             # <<<<<<<<<<<<<<
 *         if i not in seen:
 *             return i
 */
  __pyx_t_3 = (__pyx_v_n + 1);
  __pyx_t_10 = __pyx_t_3;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_10; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "graph.pyx":376
 *     # Check for non-negative integers starting from 0
 *     for i in range(n + 1):
 *         if i not in seen:             # <<<<<<<<<<<<<<
 *             return i
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 376, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = (__Pyx_PySet_ContainsTF(__pyx_t_4, __pyx_v_seen, Py_NE)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 376, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_5) {

      /* "graph.pyx":377
 *     for i in range(n + 1):
 *         if i not in seen:
 *             return i             # <<<<<<<<<<<<<<
 * 
 *     # All non-negative integers are present in the list
 */
      __pyx_r = __pyx_v_i;
      goto __pyx_L0;

      /* "graph.pyx":376
 *     # Check for non-negative integers starting from 0
 *     for i in range(n + 1):
 *         if i not in seen:             # <<<<<<<<<<<<<<
 *             return i
 * 
 */
    }
  }

  /* "graph.pyx":380
 * 
 *     # All non-negative integers are present in the list
 *     return -1             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __pyx_r = -1;
  goto __pyx_L0;

  /* "graph.pyx":346
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cpdef int pySmallestMissing(list[int] numbers):             # <<<<<<<<<<<<<<
 *     """
 *     Finds the smallest non-negative integer not contained in the list.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("graph.pySmallestMissing", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_seen);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5graph_3pySmallestMissing(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5graph_2pySmallestMissing, "\n    Finds the smallest non-negative integer not contained in the list.\n\n    Args:\n        numbers: python list of interger numbers\n        n: The number of elements in the list.\n\n    Returns:\n        The smallest non-negative integer not contained in the list, \n        or -1 if all non-negative integers are present.\n    ");
static PyMethodDef __pyx_mdef_5graph_3pySmallestMissing = {"pySmallestMissing", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_3pySmallestMissing, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5graph_2pySmallestMissing};
static PyObject *__pyx_pw_5graph_3pySmallestMissing(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_numbers = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pySmallestMissing (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_numbers,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_numbers)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 346, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "pySmallestMissing") < 0)) __PYX_ERR(0, 346, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_numbers = ((PyObject*)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pySmallestMissing", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 346, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("graph.pySmallestMissing", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_numbers), (&PyList_Type), 1, "numbers", 1))) __PYX_ERR(0, 346, __pyx_L1_error)
  __pyx_r = __pyx_pf_5graph_2pySmallestMissing(__pyx_self, __pyx_v_numbers);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5graph_2pySmallestMissing(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_numbers) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pySmallestMissing", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5graph_pySmallestMissing(__pyx_v_numbers, 0); if (unlikely(__pyx_t_1 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 346, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("graph.pySmallestMissing", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":384
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline void arrAppendInt(int* ary, int arysize, int value):             # <<<<<<<<<<<<<<
 *     cdef int n
 *     for n in range(arysize):
 */

static CYTHON_INLINE void __pyx_f_5graph_arrAppendInt(int *__pyx_v_ary, int __pyx_v_arysize, int __pyx_v_value) {
  int __pyx_v_n;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "graph.pyx":386
 * cdef inline void arrAppendInt(int* ary, int arysize, int value):
 *     cdef int n
 *     for n in range(arysize):             # <<<<<<<<<<<<<<
 *         if ary[n] == -1:
 *             break
 */
  __pyx_t_1 = __pyx_v_arysize;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_n = __pyx_t_3;

    /* "graph.pyx":387
 *     cdef int n
 *     for n in range(arysize):
 *         if ary[n] == -1:             # <<<<<<<<<<<<<<
 *             break
 *     ary[n] = value
 */
    __pyx_t_4 = ((__pyx_v_ary[__pyx_v_n]) == -1L);
    if (__pyx_t_4) {

      /* "graph.pyx":388
 *     for n in range(arysize):
 *         if ary[n] == -1:
 *             break             # <<<<<<<<<<<<<<
 *     ary[n] = value
 * 
 */
      goto __pyx_L4_break;

      /* "graph.pyx":387
 *     cdef int n
 *     for n in range(arysize):
 *         if ary[n] == -1:             # <<<<<<<<<<<<<<
 *             break
 *     ary[n] = value
 */
    }
  }
  __pyx_L4_break:;

  /* "graph.pyx":389
 *         if ary[n] == -1:
 *             break
 *     ary[n] = value             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  (__pyx_v_ary[__pyx_v_n]) = __pyx_v_value;

  /* "graph.pyx":384
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline void arrAppendInt(int* ary, int arysize, int value):             # <<<<<<<<<<<<<<
 *     cdef int n
 *     for n in range(arysize):
 */

  /* function exit code */
}

/* "graph.pyx":393
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline void arrPopInt(int* ary, int arysize, int value):             # <<<<<<<<<<<<<<
 *     cdef int n
 *     for n in range(arysize):
 */

static CYTHON_INLINE void __pyx_f_5graph_arrPopInt(int *__pyx_v_ary, int __pyx_v_arysize, int __pyx_v_value) {
  int __pyx_v_n;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "graph.pyx":395
 * cdef inline void arrPopInt(int* ary, int arysize, int value):
 *     cdef int n
 *     for n in range(arysize):             # <<<<<<<<<<<<<<
 *         if ary[n] == value:
 *             ary[n] = -1
 */
  __pyx_t_1 = __pyx_v_arysize;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_n = __pyx_t_3;

    /* "graph.pyx":396
 *     cdef int n
 *     for n in range(arysize):
 *         if ary[n] == value:             # <<<<<<<<<<<<<<
 *             ary[n] = -1
 *             break
 */
    __pyx_t_4 = ((__pyx_v_ary[__pyx_v_n]) == __pyx_v_value);
    if (__pyx_t_4) {

      /* "graph.pyx":397
 *     for n in range(arysize):
 *         if ary[n] == value:
 *             ary[n] = -1             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      (__pyx_v_ary[__pyx_v_n]) = -1;

      /* "graph.pyx":398
 *         if ary[n] == value:
 *             ary[n] = -1
 *             break             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
      goto __pyx_L4_break;

      /* "graph.pyx":396
 *     cdef int n
 *     for n in range(arysize):
 *         if ary[n] == value:             # <<<<<<<<<<<<<<
 *             ary[n] = -1
 *             break
 */
    }
  }
  __pyx_L4_break:;

  /* "graph.pyx":393
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline void arrPopInt(int* ary, int arysize, int value):             # <<<<<<<<<<<<<<
 *     cdef int n
 *     for n in range(arysize):
 */

  /* function exit code */
}

/* "graph.pyx":402
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline int arrCountVals(int* ary, int arysize, int val=-1):             # <<<<<<<<<<<<<<
 *     cdef int count
 *     cdef int n
 */

static CYTHON_INLINE int __pyx_f_5graph_arrCountVals(int *__pyx_v_ary, int __pyx_v_arysize, struct __pyx_opt_args_5graph_arrCountVals *__pyx_optional_args) {
  int __pyx_v_val = ((int)-1);
  int __pyx_v_count;
  int __pyx_v_n;
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_val = __pyx_optional_args->val;
    }
  }

  /* "graph.pyx":405
 *     cdef int count
 *     cdef int n
 *     count = 0             # <<<<<<<<<<<<<<
 *     for n in range(arysize):
 *         if ary[n] != val:
 */
  __pyx_v_count = 0;

  /* "graph.pyx":406
 *     cdef int n
 *     count = 0
 *     for n in range(arysize):             # <<<<<<<<<<<<<<
 *         if ary[n] != val:
 *             count += 1
 */
  __pyx_t_1 = __pyx_v_arysize;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_n = __pyx_t_3;

    /* "graph.pyx":407
 *     count = 0
 *     for n in range(arysize):
 *         if ary[n] != val:             # <<<<<<<<<<<<<<
 *             count += 1
 *     return count
 */
    __pyx_t_4 = ((__pyx_v_ary[__pyx_v_n]) != __pyx_v_val);
    if (__pyx_t_4) {

      /* "graph.pyx":408
 *     for n in range(arysize):
 *         if ary[n] != val:
 *             count += 1             # <<<<<<<<<<<<<<
 *     return count
 * 
 */
      __pyx_v_count = (__pyx_v_count + 1);

      /* "graph.pyx":407
 *     count = 0
 *     for n in range(arysize):
 *         if ary[n] != val:             # <<<<<<<<<<<<<<
 *             count += 1
 *     return count
 */
    }
  }

  /* "graph.pyx":409
 *         if ary[n] != val:
 *             count += 1
 *     return count             # <<<<<<<<<<<<<<
 * 
 * cdef class GraphCy:
 */
  __pyx_r = __pyx_v_count;
  goto __pyx_L0;

  /* "graph.pyx":402
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline int arrCountVals(int* ary, int arysize, int val=-1):             # <<<<<<<<<<<<<<
 *     cdef int count
 *     cdef int n
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "graph.pyx":423
 *     cdef NodeReach* nodeVisited
 * 
 *     def __cinit__(self, nodesize:int = 100, edgesize:int = 100, EidN:int = 10):             # <<<<<<<<<<<<<<
 *         self.Nnodes = nodesize
 *         self.nodes = <Node*>malloc(nodesize * sizeof(Node))
 */

/* Python wrapper */
static int __pyx_pw_5graph_7GraphCy_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5graph_7GraphCy_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_nodesize = 0;
  PyObject *__pyx_v_edgesize = 0;
  PyObject *__pyx_v_EidN = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_nodesize,&__pyx_n_s_edgesize,&__pyx_n_s_EidN,0};
    values[0] = __Pyx_Arg_NewRef_VARARGS(__pyx_k__2);
    values[1] = __Pyx_Arg_NewRef_VARARGS(__pyx_k__3);
    values[2] = __Pyx_Arg_NewRef_VARARGS(__pyx_k__4);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_nodesize);
          if (value) { values[0] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 423, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_edgesize);
          if (value) { values[1] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 423, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_EidN);
          if (value) { values[2] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 423, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 423, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_nodesize = ((PyObject*)values[0]);
    __pyx_v_edgesize = ((PyObject*)values[1]);
    __pyx_v_EidN = ((PyObject*)values[2]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 3, __pyx_nargs); __PYX_ERR(0, 423, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("graph.GraphCy.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_nodesize), (&PyInt_Type), 0, "nodesize", 1))) __PYX_ERR(0, 423, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_edgesize), (&PyInt_Type), 0, "edgesize", 1))) __PYX_ERR(0, 423, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_EidN), (&PyInt_Type), 0, "EidN", 1))) __PYX_ERR(0, 423, __pyx_L1_error)
  __pyx_r = __pyx_pf_5graph_7GraphCy___cinit__(((struct __pyx_obj_5graph_GraphCy *)__pyx_v_self), __pyx_v_nodesize, __pyx_v_edgesize, __pyx_v_EidN);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5graph_7GraphCy___cinit__(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, PyObject *__pyx_v_nodesize, PyObject *__pyx_v_edgesize, PyObject *__pyx_v_EidN) {
  struct __pyx_t_5graph_Node __pyx_v_node;
  PyObject *__pyx_v_n = NULL;
  struct __pyx_t_5graph_Edge __pyx_v_edge;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  Py_ssize_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "graph.pyx":424
 * 
 *     def __cinit__(self, nodesize:int = 100, edgesize:int = 100, EidN:int = 10):
 *         self.Nnodes = nodesize             # <<<<<<<<<<<<<<
 *         self.nodes = <Node*>malloc(nodesize * sizeof(Node))
 *         self._nodesIds = <int*>malloc(nodesize * sizeof(int))
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_nodesize); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 424, __pyx_L1_error)
  __pyx_v_self->Nnodes = __pyx_t_1;

  /* "graph.pyx":425
 *     def __cinit__(self, nodesize:int = 100, edgesize:int = 100, EidN:int = 10):
 *         self.Nnodes = nodesize
 *         self.nodes = <Node*>malloc(nodesize * sizeof(Node))             # <<<<<<<<<<<<<<
 *         self._nodesIds = <int*>malloc(nodesize * sizeof(int))
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_FromSize_t((sizeof(struct __pyx_t_5graph_Node))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_nodesize, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_t_3); if (unlikely((__pyx_t_4 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_self->nodes = ((struct __pyx_t_5graph_Node *)malloc(__pyx_t_4));

  /* "graph.pyx":426
 *         self.Nnodes = nodesize
 *         self.nodes = <Node*>malloc(nodesize * sizeof(Node))
 *         self._nodesIds = <int*>malloc(nodesize * sizeof(int))             # <<<<<<<<<<<<<<
 * 
 *         cdef Node node
 */
  __pyx_t_3 = __Pyx_PyInt_FromSize_t((sizeof(int))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_nodesize, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_t_2); if (unlikely((__pyx_t_4 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 426, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_self->_nodesIds = ((int *)malloc(__pyx_t_4));

  /* "graph.pyx":429
 * 
 *         cdef Node node
 *         node.idx = -1             # <<<<<<<<<<<<<<
 *         for n in range(nodesize):
 *             self.nodes[n] = node
 */
  __pyx_v_node.idx = -1;

  /* "graph.pyx":430
 *         cdef Node node
 *         node.idx = -1
 *         for n in range(nodesize):             # <<<<<<<<<<<<<<
 *             self.nodes[n] = node
 *             self._nodesIds[n] = -1
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v_nodesize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3);
    __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 430, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 430, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 430, __pyx_L1_error)
        #else
        __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 430, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 430, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 430, __pyx_L1_error)
        #else
        __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 430, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_6(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 430, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if (!(likely(__Pyx_Py3Int_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("int", __pyx_t_2))) __PYX_ERR(0, 430, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_n, ((PyObject*)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "graph.pyx":431
 *         node.idx = -1
 *         for n in range(nodesize):
 *             self.nodes[n] = node             # <<<<<<<<<<<<<<
 *             self._nodesIds[n] = -1
 * 
 */
    __pyx_t_7 = __Pyx_PyIndex_AsSsize_t(__pyx_v_n); if (unlikely((__pyx_t_7 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 431, __pyx_L1_error)
    (__pyx_v_self->nodes[__pyx_t_7]) = __pyx_v_node;

    /* "graph.pyx":432
 *         for n in range(nodesize):
 *             self.nodes[n] = node
 *             self._nodesIds[n] = -1             # <<<<<<<<<<<<<<
 * 
 *         self.Nedges = edgesize
 */
    __pyx_t_7 = __Pyx_PyIndex_AsSsize_t(__pyx_v_n); if (unlikely((__pyx_t_7 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 432, __pyx_L1_error)
    (__pyx_v_self->_nodesIds[__pyx_t_7]) = -1;

    /* "graph.pyx":430
 *         cdef Node node
 *         node.idx = -1
 *         for n in range(nodesize):             # <<<<<<<<<<<<<<
 *             self.nodes[n] = node
 *             self._nodesIds[n] = -1
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "graph.pyx":434
 *             self._nodesIds[n] = -1
 * 
 *         self.Nedges = edgesize             # <<<<<<<<<<<<<<
 *         self.edges = <Edge*>malloc(edgesize * sizeof(Edge))
 *         self._edgesIds = <int*>malloc(edgesize * sizeof(int))
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_edgesize); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 434, __pyx_L1_error)
  __pyx_v_self->Nedges = __pyx_t_1;

  /* "graph.pyx":435
 * 
 *         self.Nedges = edgesize
 *         self.edges = <Edge*>malloc(edgesize * sizeof(Edge))             # <<<<<<<<<<<<<<
 *         self._edgesIds = <int*>malloc(edgesize * sizeof(int))
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_FromSize_t((sizeof(struct __pyx_t_5graph_Edge))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_edgesize, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_t_2); if (unlikely((__pyx_t_4 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_self->edges = ((struct __pyx_t_5graph_Edge *)malloc(__pyx_t_4));

  /* "graph.pyx":436
 *         self.Nedges = edgesize
 *         self.edges = <Edge*>malloc(edgesize * sizeof(Edge))
 *         self._edgesIds = <int*>malloc(edgesize * sizeof(int))             # <<<<<<<<<<<<<<
 * 
 *         cdef Edge edge
 */
  __pyx_t_2 = __Pyx_PyInt_FromSize_t((sizeof(int))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_edgesize, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_t_3); if (unlikely((__pyx_t_4 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_self->_edgesIds = ((int *)malloc(__pyx_t_4));

  /* "graph.pyx":439
 * 
 *         cdef Edge edge
 *         edge.idx = -1             # <<<<<<<<<<<<<<
 *         for n in range(edgesize):
 *             self.edges[n] = edge
 */
  __pyx_v_edge.idx = -1;

  /* "graph.pyx":440
 *         cdef Edge edge
 *         edge.idx = -1
 *         for n in range(edgesize):             # <<<<<<<<<<<<<<
 *             self.edges[n] = edge
 *             self._edgesIds[n] = -1
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v_edgesize); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2);
    __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 440, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 440, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 440, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 440, __pyx_L1_error)
        #else
        __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 440, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 440, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 440, __pyx_L1_error)
        #else
        __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 440, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 440, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    if (!(likely(__Pyx_Py3Int_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None) || __Pyx_RaiseUnexpectedTypeError("int", __pyx_t_3))) __PYX_ERR(0, 440, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_n, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "graph.pyx":441
 *         edge.idx = -1
 *         for n in range(edgesize):
 *             self.edges[n] = edge             # <<<<<<<<<<<<<<
 *             self._edgesIds[n] = -1
 * 
 */
    __pyx_t_7 = __Pyx_PyIndex_AsSsize_t(__pyx_v_n); if (unlikely((__pyx_t_7 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 441, __pyx_L1_error)
    (__pyx_v_self->edges[__pyx_t_7]) = __pyx_v_edge;

    /* "graph.pyx":442
 *         for n in range(edgesize):
 *             self.edges[n] = edge
 *             self._edgesIds[n] = -1             # <<<<<<<<<<<<<<
 * 
 *         self.nodeVisited = <NodeReach*>malloc(self.Nnodes * sizeof(NodeReach))
 */
    __pyx_t_7 = __Pyx_PyIndex_AsSsize_t(__pyx_v_n); if (unlikely((__pyx_t_7 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 442, __pyx_L1_error)
    (__pyx_v_self->_edgesIds[__pyx_t_7]) = -1;

    /* "graph.pyx":440
 *         cdef Edge edge
 *         edge.idx = -1
 *         for n in range(edgesize):             # <<<<<<<<<<<<<<
 *             self.edges[n] = edge
 *             self._edgesIds[n] = -1
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "graph.pyx":444
 *             self._edgesIds[n] = -1
 * 
 *         self.nodeVisited = <NodeReach*>malloc(self.Nnodes * sizeof(NodeReach))             # <<<<<<<<<<<<<<
 * 
 *         self.EidN = EidN
 */
  __pyx_v_self->nodeVisited = ((struct __pyx_t_5graph_NodeReach *)malloc((__pyx_v_self->Nnodes * (sizeof(struct __pyx_t_5graph_NodeReach)))));

  /* "graph.pyx":446
 *         self.nodeVisited = <NodeReach*>malloc(self.Nnodes * sizeof(NodeReach))
 * 
 *         self.EidN = EidN             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self) -> str:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_EidN); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 446, __pyx_L1_error)
  __pyx_v_self->EidN = __pyx_t_1;

  /* "graph.pyx":423
 *     cdef NodeReach* nodeVisited
 * 
 *     def __cinit__(self, nodesize:int = 100, edgesize:int = 100, EidN:int = 10):             # <<<<<<<<<<<<<<
 *         self.Nnodes = nodesize
 *         self.nodes = <Node*>malloc(nodesize * sizeof(Node))
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("graph.GraphCy.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":448
 *         self.EidN = EidN
 * 
 *     def __repr__(self) -> str:             # <<<<<<<<<<<<<<
 *         cdef int regNodes
 *         cdef int regEdges
 */

/* Python wrapper */
static PyObject *__pyx_pw_5graph_7GraphCy_3__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5graph_7GraphCy_3__repr__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5graph_7GraphCy_2__repr__(((struct __pyx_obj_5graph_GraphCy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5graph_7GraphCy_2__repr__(struct __pyx_obj_5graph_GraphCy *__pyx_v_self) {
  int __pyx_v_regNodes;
  int __pyx_v_regEdges;
  int __pyx_v_n;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  Py_UCS4 __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 1);

  /* "graph.pyx":452
 *         cdef int regEdges
 *         cdef int n
 *         regNodes = 0             # <<<<<<<<<<<<<<
 *         regEdges = 0
 *         for n in range(self.Nnodes):
 */
  __pyx_v_regNodes = 0;

  /* "graph.pyx":453
 *         cdef int n
 *         regNodes = 0
 *         regEdges = 0             # <<<<<<<<<<<<<<
 *         for n in range(self.Nnodes):
 *             regNodes += (self._nodesIds[n] != -1)
 */
  __pyx_v_regEdges = 0;

  /* "graph.pyx":454
 *         regNodes = 0
 *         regEdges = 0
 *         for n in range(self.Nnodes):             # <<<<<<<<<<<<<<
 *             regNodes += (self._nodesIds[n] != -1)
 *         for n in range(self.Nedges):
 */
  __pyx_t_1 = __pyx_v_self->Nnodes;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_n = __pyx_t_3;

    /* "graph.pyx":455
 *         regEdges = 0
 *         for n in range(self.Nnodes):
 *             regNodes += (self._nodesIds[n] != -1)             # <<<<<<<<<<<<<<
 *         for n in range(self.Nedges):
 *             regEdges += (self._edgesIds[n] != -1)
 */
    __pyx_v_regNodes = (__pyx_v_regNodes + ((__pyx_v_self->_nodesIds[__pyx_v_n]) != -1L));
  }

  /* "graph.pyx":456
 *         for n in range(self.Nnodes):
 *             regNodes += (self._nodesIds[n] != -1)
 *         for n in range(self.Nedges):             # <<<<<<<<<<<<<<
 *             regEdges += (self._edgesIds[n] != -1)
 *         return f"GraphCy object of {regNodes:,} Nodes,  {regEdges:,} Edges"
 */
  __pyx_t_1 = __pyx_v_self->Nedges;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_n = __pyx_t_3;

    /* "graph.pyx":457
 *             regNodes += (self._nodesIds[n] != -1)
 *         for n in range(self.Nedges):
 *             regEdges += (self._edgesIds[n] != -1)             # <<<<<<<<<<<<<<
 *         return f"GraphCy object of {regNodes:,} Nodes,  {regEdges:,} Edges"
 * 
 */
    __pyx_v_regEdges = (__pyx_v_regEdges + ((__pyx_v_self->_edgesIds[__pyx_v_n]) != -1L));
  }

  /* "graph.pyx":458
 *         for n in range(self.Nedges):
 *             regEdges += (self._edgesIds[n] != -1)
 *         return f"GraphCy object of {regNodes:,} Nodes,  {regEdges:,} Edges"             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, key:int) -> tuple:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyTuple_New(5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = 0;
  __pyx_t_6 = 127;
  __Pyx_INCREF(__pyx_kp_u_GraphCy_object_of);
  __pyx_t_5 += 18;
  __Pyx_GIVEREF(__pyx_kp_u_GraphCy_object_of);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_GraphCy_object_of);
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_regNodes); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_Format(__pyx_t_7, __pyx_kp_u__5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_6;
  __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_8);
  __pyx_t_8 = 0;
  __Pyx_INCREF(__pyx_kp_u_Nodes);
  __pyx_t_5 += 9;
  __Pyx_GIVEREF(__pyx_kp_u_Nodes);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_Nodes);
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_regEdges); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = __Pyx_PyObject_Format(__pyx_t_8, __pyx_kp_u__5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_6;
  __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_7);
  __pyx_t_7 = 0;
  __Pyx_INCREF(__pyx_kp_u_Edges);
  __pyx_t_5 += 6;
  __Pyx_GIVEREF(__pyx_kp_u_Edges);
  PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_kp_u_Edges);
  __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_4, 5, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "graph.pyx":448
 *         self.EidN = EidN
 * 
 *     def __repr__(self) -> str:             # <<<<<<<<<<<<<<
 *         cdef int regNodes
 *         cdef int regEdges
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("graph.GraphCy.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":460
 *         return f"GraphCy object of {regNodes:,} Nodes,  {regEdges:,} Edges"
 * 
 *     def __getitem__(self, key:int) -> tuple:             # <<<<<<<<<<<<<<
 *         # gets edges
 *         cdef Edge ed = self.edges[key]
 */

/* Python wrapper */
static PyObject *__pyx_pw_5graph_7GraphCy_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_pw_5graph_7GraphCy_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), (&PyInt_Type), 0, "key", 1))) __PYX_ERR(0, 460, __pyx_L1_error)
  __pyx_r = __pyx_pf_5graph_7GraphCy_4__getitem__(((struct __pyx_obj_5graph_GraphCy *)__pyx_v_self), ((PyObject*)__pyx_v_key));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5graph_7GraphCy_4__getitem__(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, PyObject *__pyx_v_key) {
  struct __pyx_t_5graph_Edge __pyx_v_ed;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 1);

  /* "graph.pyx":462
 *     def __getitem__(self, key:int) -> tuple:
 *         # gets edges
 *         cdef Edge ed = self.edges[key]             # <<<<<<<<<<<<<<
 *         return tuple((ed.idx, ed.NidO, ed.NidD, ed.len, ed.lenR, ed.w))
 * 
 */
  __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_v_key); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 462, __pyx_L1_error)
  __pyx_v_ed = (__pyx_v_self->edges[__pyx_t_1]);

  /* "graph.pyx":463
 *         # gets edges
 *         cdef Edge ed = self.edges[key]
 *         return tuple((ed.idx, ed.NidO, ed.NidD, ed.len, ed.lenR, ed.w))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_ed.idx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_ed.NidO); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_ed.NidD); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_ed.len); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_ed.lenR); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyFloat_FromDouble(__pyx_v_ed.w); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyTuple_New(6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2)) __PYX_ERR(0, 463, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_3)) __PYX_ERR(0, 463, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_4)) __PYX_ERR(0, 463, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_5)) __PYX_ERR(0, 463, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_6);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 4, __pyx_t_6)) __PYX_ERR(0, 463, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_7);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 5, __pyx_t_7)) __PYX_ERR(0, 463, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_r = __pyx_t_8;
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "graph.pyx":460
 *         return f"GraphCy object of {regNodes:,} Nodes,  {regEdges:,} Edges"
 * 
 *     def __getitem__(self, key:int) -> tuple:             # <<<<<<<<<<<<<<
 *         # gets edges
 *         cdef Edge ed = self.edges[key]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("graph.GraphCy.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":465
 *         return tuple((ed.idx, ed.NidO, ed.NidD, ed.len, ed.lenR, ed.w))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         free(self.nodes)
 *         free(self.edges)
 */

/* Python wrapper */
static void __pyx_pw_5graph_7GraphCy_7__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5graph_7GraphCy_7__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_5graph_7GraphCy_6__dealloc__(((struct __pyx_obj_5graph_GraphCy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5graph_7GraphCy_6__dealloc__(struct __pyx_obj_5graph_GraphCy *__pyx_v_self) {

  /* "graph.pyx":466
 * 
 *     def __dealloc__(self):
 *         free(self.nodes)             # <<<<<<<<<<<<<<
 *         free(self.edges)
 *         free(self._nodesIds)
 */
  free(__pyx_v_self->nodes);

  /* "graph.pyx":467
 *     def __dealloc__(self):
 *         free(self.nodes)
 *         free(self.edges)             # <<<<<<<<<<<<<<
 *         free(self._nodesIds)
 *         free(self._edgesIds)
 */
  free(__pyx_v_self->edges);

  /* "graph.pyx":468
 *         free(self.nodes)
 *         free(self.edges)
 *         free(self._nodesIds)             # <<<<<<<<<<<<<<
 *         free(self._edgesIds)
 *         free(self.nodeVisited)
 */
  free(__pyx_v_self->_nodesIds);

  /* "graph.pyx":469
 *         free(self.edges)
 *         free(self._nodesIds)
 *         free(self._edgesIds)             # <<<<<<<<<<<<<<
 *         free(self.nodeVisited)
 * 
 */
  free(__pyx_v_self->_edgesIds);

  /* "graph.pyx":470
 *         free(self._nodesIds)
 *         free(self._edgesIds)
 *         free(self.nodeVisited)             # <<<<<<<<<<<<<<
 * 
 *     def __reduce_ex__(self, protocol):
 */
  free(__pyx_v_self->nodeVisited);

  /* "graph.pyx":465
 *         return tuple((ed.idx, ed.NidO, ed.NidD, ed.len, ed.lenR, ed.w))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         free(self.nodes)
 *         free(self.edges)
 */

  /* function exit code */
}

/* "graph.pyx":472
 *         free(self.nodeVisited)
 * 
 *     def __reduce_ex__(self, protocol):             # <<<<<<<<<<<<<<
 *         cdef int n
 *         cdef tuple nodes = tuple((Node_tuple(self.nodes[n]) for n in range(self.Nnodes)))
 */

/* Python wrapper */
static PyObject *__pyx_pw_5graph_7GraphCy_9__reduce_ex__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5graph_7GraphCy_9__reduce_ex__ = {"__reduce_ex__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_9__reduce_ex__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5graph_7GraphCy_9__reduce_ex__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v_protocol = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_ex__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_protocol,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_protocol)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 472, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__reduce_ex__") < 0)) __PYX_ERR(0, 472, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_protocol = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__reduce_ex__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 472, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("graph.GraphCy.__reduce_ex__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5graph_7GraphCy_8__reduce_ex__(((struct __pyx_obj_5graph_GraphCy *)__pyx_v_self), __pyx_v_protocol);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5graph_7GraphCy_13__reduce_ex___2generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "graph.pyx":474
 *     def __reduce_ex__(self, protocol):
 *         cdef int n
 *         cdef tuple nodes = tuple((Node_tuple(self.nodes[n]) for n in range(self.Nnodes)))             # <<<<<<<<<<<<<<
 *         cdef tuple edges = tuple((Edge_tuple(self.edges[n]) for n in range(self.Nedges)))
 *         cdef tuple nodeids = Int_array_tuple(self._nodesIds, self.Nnodes)
 */

static PyObject *__pyx_pf_5graph_7GraphCy_13__reduce_ex___genexpr(PyObject *__pyx_self, int __pyx_genexpr_arg_0) {
  struct __pyx_obj_5graph___pyx_scope_struct_5_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5graph___pyx_scope_struct_5_genexpr *)__pyx_tp_new_5graph___pyx_scope_struct_5_genexpr(__pyx_ptype_5graph___pyx_scope_struct_5_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5graph___pyx_scope_struct_5_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 474, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_5graph___pyx_scope_struct_4___reduce_ex__ *) __pyx_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  __pyx_cur_scope->__pyx_genexpr_arg_0 = __pyx_genexpr_arg_0;
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5graph_7GraphCy_13__reduce_ex___2generator2, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_reduce_ex___locals_genexpr, __pyx_n_s_graph); if (unlikely(!gen)) __PYX_ERR(0, 474, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("graph.GraphCy.__reduce_ex__.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5graph_7GraphCy_13__reduce_ex___2generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5graph___pyx_scope_struct_5_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5graph___pyx_scope_struct_5_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 474, __pyx_L1_error)
  __pyx_t_1 = __pyx_cur_scope->__pyx_genexpr_arg_0;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_cur_scope->__pyx_v_n = __pyx_t_3;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 474, __pyx_L1_error) }
    __pyx_t_4 = __pyx_f_5graph_Node_tuple((__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self->nodes[__pyx_cur_scope->__pyx_v_n])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 474, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 474, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5graph_7GraphCy_13__reduce_ex___5generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "graph.pyx":475
 *         cdef int n
 *         cdef tuple nodes = tuple((Node_tuple(self.nodes[n]) for n in range(self.Nnodes)))
 *         cdef tuple edges = tuple((Edge_tuple(self.edges[n]) for n in range(self.Nedges)))             # <<<<<<<<<<<<<<
 *         cdef tuple nodeids = Int_array_tuple(self._nodesIds, self.Nnodes)
 *         cdef tuple edgeids = Int_array_tuple(self._edgesIds, self.Nedges)
 */

static PyObject *__pyx_pf_5graph_7GraphCy_13__reduce_ex___3genexpr(PyObject *__pyx_self, int __pyx_genexpr_arg_0) {
  struct __pyx_obj_5graph___pyx_scope_struct_6_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5graph___pyx_scope_struct_6_genexpr *)__pyx_tp_new_5graph___pyx_scope_struct_6_genexpr(__pyx_ptype_5graph___pyx_scope_struct_6_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5graph___pyx_scope_struct_6_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 475, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_5graph___pyx_scope_struct_4___reduce_ex__ *) __pyx_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  __pyx_cur_scope->__pyx_genexpr_arg_0 = __pyx_genexpr_arg_0;
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5graph_7GraphCy_13__reduce_ex___5generator3, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_reduce_ex___locals_genexpr, __pyx_n_s_graph); if (unlikely(!gen)) __PYX_ERR(0, 475, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("graph.GraphCy.__reduce_ex__.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5graph_7GraphCy_13__reduce_ex___5generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5graph___pyx_scope_struct_6_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5graph___pyx_scope_struct_6_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 475, __pyx_L1_error)
  __pyx_t_1 = __pyx_cur_scope->__pyx_genexpr_arg_0;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_cur_scope->__pyx_v_n = __pyx_t_3;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 475, __pyx_L1_error) }
    __pyx_t_4 = __pyx_f_5graph_Edge_tuple((__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self->edges[__pyx_cur_scope->__pyx_v_n])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 475, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":472
 *         free(self.nodeVisited)
 * 
 *     def __reduce_ex__(self, protocol):             # <<<<<<<<<<<<<<
 *         cdef int n
 *         cdef tuple nodes = tuple((Node_tuple(self.nodes[n]) for n in range(self.Nnodes)))
 */

static PyObject *__pyx_pf_5graph_7GraphCy_8__reduce_ex__(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_protocol) {
  struct __pyx_obj_5graph___pyx_scope_struct_4___reduce_ex__ *__pyx_cur_scope;
  PyObject *__pyx_v_nodes = 0;
  PyObject *__pyx_v_edges = 0;
  PyObject *__pyx_v_nodeids = 0;
  PyObject *__pyx_v_edgeids = 0;
  PyObject *__pyx_gb_5graph_7GraphCy_13__reduce_ex___2generator2 = 0;
  PyObject *__pyx_gb_5graph_7GraphCy_13__reduce_ex___5generator3 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_ex__", 0);
  __pyx_cur_scope = (struct __pyx_obj_5graph___pyx_scope_struct_4___reduce_ex__ *)__pyx_tp_new_5graph___pyx_scope_struct_4___reduce_ex__(__pyx_ptype_5graph___pyx_scope_struct_4___reduce_ex__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5graph___pyx_scope_struct_4___reduce_ex__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 472, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "graph.pyx":474
 *     def __reduce_ex__(self, protocol):
 *         cdef int n
 *         cdef tuple nodes = tuple((Node_tuple(self.nodes[n]) for n in range(self.Nnodes)))             # <<<<<<<<<<<<<<
 *         cdef tuple edges = tuple((Edge_tuple(self.edges[n]) for n in range(self.Nedges)))
 *         cdef tuple nodeids = Int_array_tuple(self._nodesIds, self.Nnodes)
 */
  __pyx_t_1 = __pyx_pf_5graph_7GraphCy_13__reduce_ex___genexpr(((PyObject*)__pyx_cur_scope), __pyx_cur_scope->__pyx_v_self->Nnodes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PySequence_Tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_nodes = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "graph.pyx":475
 *         cdef int n
 *         cdef tuple nodes = tuple((Node_tuple(self.nodes[n]) for n in range(self.Nnodes)))
 *         cdef tuple edges = tuple((Edge_tuple(self.edges[n]) for n in range(self.Nedges)))             # <<<<<<<<<<<<<<
 *         cdef tuple nodeids = Int_array_tuple(self._nodesIds, self.Nnodes)
 *         cdef tuple edgeids = Int_array_tuple(self._edgesIds, self.Nedges)
 */
  __pyx_t_2 = __pyx_pf_5graph_7GraphCy_13__reduce_ex___3genexpr(((PyObject*)__pyx_cur_scope), __pyx_cur_scope->__pyx_v_self->Nedges); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PySequence_Tuple(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_edges = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "graph.pyx":476
 *         cdef tuple nodes = tuple((Node_tuple(self.nodes[n]) for n in range(self.Nnodes)))
 *         cdef tuple edges = tuple((Edge_tuple(self.edges[n]) for n in range(self.Nedges)))
 *         cdef tuple nodeids = Int_array_tuple(self._nodesIds, self.Nnodes)             # <<<<<<<<<<<<<<
 *         cdef tuple edgeids = Int_array_tuple(self._edgesIds, self.Nedges)
 *         return (GraphCy._reconstruct, (nodes, edges, nodeids, edgeids, self.Nnodes, self.Nedges, self.EidN))
 */
  __pyx_t_1 = __pyx_f_5graph_Int_array_tuple(__pyx_cur_scope->__pyx_v_self->_nodesIds, __pyx_cur_scope->__pyx_v_self->Nnodes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_nodeids = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "graph.pyx":477
 *         cdef tuple edges = tuple((Edge_tuple(self.edges[n]) for n in range(self.Nedges)))
 *         cdef tuple nodeids = Int_array_tuple(self._nodesIds, self.Nnodes)
 *         cdef tuple edgeids = Int_array_tuple(self._edgesIds, self.Nedges)             # <<<<<<<<<<<<<<
 *         return (GraphCy._reconstruct, (nodes, edges, nodeids, edgeids, self.Nnodes, self.Nedges, self.EidN))
 * 
 */
  __pyx_t_1 = __pyx_f_5graph_Int_array_tuple(__pyx_cur_scope->__pyx_v_self->_edgesIds, __pyx_cur_scope->__pyx_v_self->Nedges); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_edgeids = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "graph.pyx":478
 *         cdef tuple nodeids = Int_array_tuple(self._nodesIds, self.Nnodes)
 *         cdef tuple edgeids = Int_array_tuple(self._edgesIds, self.Nedges)
 *         return (GraphCy._reconstruct, (nodes, edges, nodeids, edgeids, self.Nnodes, self.Nedges, self.EidN))             # <<<<<<<<<<<<<<
 * 
 *     cdef void reinstateGraph(self, tuple nodes, tuple edges, tuple nodeids, tuple edgeids):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_5graph_GraphCy), __pyx_n_s_reconstruct); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_self->Nnodes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_self->Nedges); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_self->EidN); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_nodes);
  __Pyx_GIVEREF(__pyx_v_nodes);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_nodes)) __PYX_ERR(0, 478, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_edges);
  __Pyx_GIVEREF(__pyx_v_edges);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_edges)) __PYX_ERR(0, 478, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_nodeids);
  __Pyx_GIVEREF(__pyx_v_nodeids);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_nodeids)) __PYX_ERR(0, 478, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_edgeids);
  __Pyx_GIVEREF(__pyx_v_edgeids);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_v_edgeids)) __PYX_ERR(0, 478, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 4, __pyx_t_2)) __PYX_ERR(0, 478, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 5, __pyx_t_3)) __PYX_ERR(0, 478, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 6, __pyx_t_4)) __PYX_ERR(0, 478, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1)) __PYX_ERR(0, 478, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5)) __PYX_ERR(0, 478, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_5 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "graph.pyx":472
 *         free(self.nodeVisited)
 * 
 *     def __reduce_ex__(self, protocol):             # <<<<<<<<<<<<<<
 *         cdef int n
 *         cdef tuple nodes = tuple((Node_tuple(self.nodes[n]) for n in range(self.Nnodes)))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("graph.GraphCy.__reduce_ex__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_nodes);
  __Pyx_XDECREF(__pyx_v_edges);
  __Pyx_XDECREF(__pyx_v_nodeids);
  __Pyx_XDECREF(__pyx_v_edgeids);
  __Pyx_XDECREF(__pyx_gb_5graph_7GraphCy_13__reduce_ex___2generator2);
  __Pyx_XDECREF(__pyx_gb_5graph_7GraphCy_13__reduce_ex___5generator3);
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":480
 *         return (GraphCy._reconstruct, (nodes, edges, nodeids, edgeids, self.Nnodes, self.Nedges, self.EidN))
 * 
 *     cdef void reinstateGraph(self, tuple nodes, tuple edges, tuple nodeids, tuple edgeids):             # <<<<<<<<<<<<<<
 *         cdef int n
 *         for n in range(self.Nnodes):
 */

static void __pyx_f_5graph_7GraphCy_reinstateGraph(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, PyObject *__pyx_v_nodes, PyObject *__pyx_v_edges, PyObject *__pyx_v_nodeids, PyObject *__pyx_v_edgeids) {
  int __pyx_v_n;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  struct __pyx_t_5graph_Node __pyx_t_5;
  int __pyx_t_6;
  struct __pyx_t_5graph_Edge __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reinstateGraph", 1);

  /* "graph.pyx":482
 *     cdef void reinstateGraph(self, tuple nodes, tuple edges, tuple nodeids, tuple edgeids):
 *         cdef int n
 *         for n in range(self.Nnodes):             # <<<<<<<<<<<<<<
 *             self.nodes[n] = Node_make(nodes[n])
 *             self._nodesIds[n] = nodeids[n]
 */
  __pyx_t_1 = __pyx_v_self->Nnodes;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_n = __pyx_t_3;

    /* "graph.pyx":483
 *         cdef int n
 *         for n in range(self.Nnodes):
 *             self.nodes[n] = Node_make(nodes[n])             # <<<<<<<<<<<<<<
 *             self._nodesIds[n] = nodeids[n]
 *         for n in range(self.Nedges):
 */
    if (unlikely(__pyx_v_nodes == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 483, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_nodes, __pyx_v_n, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 483, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (!(likely(PyTuple_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_t_4))) __PYX_ERR(0, 483, __pyx_L1_error)
    __pyx_t_5 = __pyx_f_5graph_Node_make(((PyObject*)__pyx_t_4)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 483, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    (__pyx_v_self->nodes[__pyx_v_n]) = __pyx_t_5;

    /* "graph.pyx":484
 *         for n in range(self.Nnodes):
 *             self.nodes[n] = Node_make(nodes[n])
 *             self._nodesIds[n] = nodeids[n]             # <<<<<<<<<<<<<<
 *         for n in range(self.Nedges):
 *             self.edges[n] = Edge_make(edges[n])
 */
    if (unlikely(__pyx_v_nodeids == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 484, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_nodeids, __pyx_v_n, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 484, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    (__pyx_v_self->_nodesIds[__pyx_v_n]) = __pyx_t_6;
  }

  /* "graph.pyx":485
 *             self.nodes[n] = Node_make(nodes[n])
 *             self._nodesIds[n] = nodeids[n]
 *         for n in range(self.Nedges):             # <<<<<<<<<<<<<<
 *             self.edges[n] = Edge_make(edges[n])
 *             self._edgesIds[n] = edgeids[n]
 */
  __pyx_t_1 = __pyx_v_self->Nedges;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_n = __pyx_t_3;

    /* "graph.pyx":486
 *             self._nodesIds[n] = nodeids[n]
 *         for n in range(self.Nedges):
 *             self.edges[n] = Edge_make(edges[n])             # <<<<<<<<<<<<<<
 *             self._edgesIds[n] = edgeids[n]
 *         return
 */
    if (unlikely(__pyx_v_edges == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 486, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_edges, __pyx_v_n, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 486, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (!(likely(PyTuple_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_t_4))) __PYX_ERR(0, 486, __pyx_L1_error)
    __pyx_t_7 = __pyx_f_5graph_Edge_make(((PyObject*)__pyx_t_4)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 486, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    (__pyx_v_self->edges[__pyx_v_n]) = __pyx_t_7;

    /* "graph.pyx":487
 *         for n in range(self.Nedges):
 *             self.edges[n] = Edge_make(edges[n])
 *             self._edgesIds[n] = edgeids[n]             # <<<<<<<<<<<<<<
 *         return
 * 
 */
    if (unlikely(__pyx_v_edgeids == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 487, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_edgeids, __pyx_v_n, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 487, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 487, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    (__pyx_v_self->_edgesIds[__pyx_v_n]) = __pyx_t_6;
  }

  /* "graph.pyx":488
 *             self.edges[n] = Edge_make(edges[n])
 *             self._edgesIds[n] = edgeids[n]
 *         return             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  goto __pyx_L0;

  /* "graph.pyx":480
 *         return (GraphCy._reconstruct, (nodes, edges, nodeids, edgeids, self.Nnodes, self.Nedges, self.EidN))
 * 
 *     cdef void reinstateGraph(self, tuple nodes, tuple edges, tuple nodeids, tuple edgeids):             # <<<<<<<<<<<<<<
 *         cdef int n
 *         for n in range(self.Nnodes):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("graph.GraphCy.reinstateGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "graph.pyx":490
 *         return
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def _reconstruct(nodes, edges, nodeids, edgeids, Nnodes, Nedges, EidN):
 *         cdef GraphCy gcy = GraphCy(Nnodes, Nedges, EidN)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5graph_7GraphCy_11_reconstruct(CYTHON_UNUSED PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5graph_7GraphCy_11_reconstruct = {"_reconstruct", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_11_reconstruct, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5graph_7GraphCy_11_reconstruct(CYTHON_UNUSED PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_nodes = 0;
  PyObject *__pyx_v_edges = 0;
  PyObject *__pyx_v_nodeids = 0;
  PyObject *__pyx_v_edgeids = 0;
  PyObject *__pyx_v_Nnodes = 0;
  PyObject *__pyx_v_Nedges = 0;
  PyObject *__pyx_v_EidN = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[7] = {0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_reconstruct (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_nodes,&__pyx_n_s_edges,&__pyx_n_s_nodeids,&__pyx_n_s_edgeids,&__pyx_n_s_Nnodes,&__pyx_n_s_Nedges,&__pyx_n_s_EidN,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_nodes)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 490, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_edges)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 490, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_reconstruct", 1, 7, 7, 1); __PYX_ERR(0, 490, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_nodeids)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 490, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_reconstruct", 1, 7, 7, 2); __PYX_ERR(0, 490, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_edgeids)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 490, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_reconstruct", 1, 7, 7, 3); __PYX_ERR(0, 490, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_Nnodes)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[4]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 490, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_reconstruct", 1, 7, 7, 4); __PYX_ERR(0, 490, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_Nedges)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[5]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 490, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_reconstruct", 1, 7, 7, 5); __PYX_ERR(0, 490, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_EidN)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[6]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 490, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_reconstruct", 1, 7, 7, 6); __PYX_ERR(0, 490, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_reconstruct") < 0)) __PYX_ERR(0, 490, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 7)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
      values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
      values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
      values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
    }
    __pyx_v_nodes = values[0];
    __pyx_v_edges = values[1];
    __pyx_v_nodeids = values[2];
    __pyx_v_edgeids = values[3];
    __pyx_v_Nnodes = values[4];
    __pyx_v_Nedges = values[5];
    __pyx_v_EidN = values[6];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_reconstruct", 1, 7, 7, __pyx_nargs); __PYX_ERR(0, 490, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("graph.GraphCy._reconstruct", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5graph_7GraphCy_10_reconstruct(__pyx_v_nodes, __pyx_v_edges, __pyx_v_nodeids, __pyx_v_edgeids, __pyx_v_Nnodes, __pyx_v_Nedges, __pyx_v_EidN);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5graph_7GraphCy_10_reconstruct(PyObject *__pyx_v_nodes, PyObject *__pyx_v_edges, PyObject *__pyx_v_nodeids, PyObject *__pyx_v_edgeids, PyObject *__pyx_v_Nnodes, PyObject *__pyx_v_Nedges, PyObject *__pyx_v_EidN) {
  struct __pyx_obj_5graph_GraphCy *__pyx_v_gcy = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_reconstruct", 1);

  /* "graph.pyx":492
 *     @staticmethod
 *     def _reconstruct(nodes, edges, nodeids, edgeids, Nnodes, Nedges, EidN):
 *         cdef GraphCy gcy = GraphCy(Nnodes, Nedges, EidN)             # <<<<<<<<<<<<<<
 *         gcy.reinstateGraph(nodes, edges, nodeids, edgeids)
 *         return gcy
 */
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_Nnodes);
  __Pyx_GIVEREF(__pyx_v_Nnodes);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_Nnodes)) __PYX_ERR(0, 492, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_Nedges);
  __Pyx_GIVEREF(__pyx_v_Nedges);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_Nedges)) __PYX_ERR(0, 492, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_EidN);
  __Pyx_GIVEREF(__pyx_v_EidN);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_EidN)) __PYX_ERR(0, 492, __pyx_L1_error);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5graph_GraphCy), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_gcy = ((struct __pyx_obj_5graph_GraphCy *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "graph.pyx":493
 *     def _reconstruct(nodes, edges, nodeids, edgeids, Nnodes, Nedges, EidN):
 *         cdef GraphCy gcy = GraphCy(Nnodes, Nedges, EidN)
 *         gcy.reinstateGraph(nodes, edges, nodeids, edgeids)             # <<<<<<<<<<<<<<
 *         return gcy
 * 
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v_nodes))||((__pyx_v_nodes) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v_nodes))) __PYX_ERR(0, 493, __pyx_L1_error)
  if (!(likely(PyTuple_CheckExact(__pyx_v_edges))||((__pyx_v_edges) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v_edges))) __PYX_ERR(0, 493, __pyx_L1_error)
  if (!(likely(PyTuple_CheckExact(__pyx_v_nodeids))||((__pyx_v_nodeids) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v_nodeids))) __PYX_ERR(0, 493, __pyx_L1_error)
  if (!(likely(PyTuple_CheckExact(__pyx_v_edgeids))||((__pyx_v_edgeids) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v_edgeids))) __PYX_ERR(0, 493, __pyx_L1_error)
  ((struct __pyx_vtabstruct_5graph_GraphCy *)__pyx_v_gcy->__pyx_vtab)->reinstateGraph(__pyx_v_gcy, ((PyObject*)__pyx_v_nodes), ((PyObject*)__pyx_v_edges), ((PyObject*)__pyx_v_nodeids), ((PyObject*)__pyx_v_edgeids)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 493, __pyx_L1_error)

  /* "graph.pyx":494
 *         cdef GraphCy gcy = GraphCy(Nnodes, Nedges, EidN)
 *         gcy.reinstateGraph(nodes, edges, nodeids, edgeids)
 *         return gcy             # <<<<<<<<<<<<<<
 * 
 *     def sizeInfo(self) -> tuple[int, int]:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_gcy);
  __pyx_r = ((PyObject *)__pyx_v_gcy);
  goto __pyx_L0;

  /* "graph.pyx":490
 *         return
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def _reconstruct(nodes, edges, nodeids, edgeids, Nnodes, Nedges, EidN):
 *         cdef GraphCy gcy = GraphCy(Nnodes, Nedges, EidN)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("graph.GraphCy._reconstruct", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_gcy);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":496
 *         return gcy
 * 
 *     def sizeInfo(self) -> tuple[int, int]:             # <<<<<<<<<<<<<<
 *         cdef int regNodes
 *         cdef int regEdges
 */

/* Python wrapper */
static PyObject *__pyx_pw_5graph_7GraphCy_13sizeInfo(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5graph_7GraphCy_13sizeInfo = {"sizeInfo", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_13sizeInfo, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5graph_7GraphCy_13sizeInfo(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sizeInfo (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("sizeInfo", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "sizeInfo", 0))) return NULL;
  __pyx_r = __pyx_pf_5graph_7GraphCy_12sizeInfo(((struct __pyx_obj_5graph_GraphCy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5graph_7GraphCy_12sizeInfo(struct __pyx_obj_5graph_GraphCy *__pyx_v_self) {
  int __pyx_v_regNodes;
  int __pyx_v_regEdges;
  int __pyx_v_n;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sizeInfo", 1);

  /* "graph.pyx":500
 *         cdef int regEdges
 *         cdef int n
 *         regNodes = 0             # <<<<<<<<<<<<<<
 *         regEdges = 0
 *         for n in range(self.Nnodes):
 */
  __pyx_v_regNodes = 0;

  /* "graph.pyx":501
 *         cdef int n
 *         regNodes = 0
 *         regEdges = 0             # <<<<<<<<<<<<<<
 *         for n in range(self.Nnodes):
 *             regNodes += (self._nodesIds[n] != -1)
 */
  __pyx_v_regEdges = 0;

  /* "graph.pyx":502
 *         regNodes = 0
 *         regEdges = 0
 *         for n in range(self.Nnodes):             # <<<<<<<<<<<<<<
 *             regNodes += (self._nodesIds[n] != -1)
 *         for n in range(self.Nedges):
 */
  __pyx_t_1 = __pyx_v_self->Nnodes;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_n = __pyx_t_3;

    /* "graph.pyx":503
 *         regEdges = 0
 *         for n in range(self.Nnodes):
 *             regNodes += (self._nodesIds[n] != -1)             # <<<<<<<<<<<<<<
 *         for n in range(self.Nedges):
 *             regEdges += (self._edgesIds[n] != -1)
 */
    __pyx_v_regNodes = (__pyx_v_regNodes + ((__pyx_v_self->_nodesIds[__pyx_v_n]) != -1L));
  }

  /* "graph.pyx":504
 *         for n in range(self.Nnodes):
 *             regNodes += (self._nodesIds[n] != -1)
 *         for n in range(self.Nedges):             # <<<<<<<<<<<<<<
 *             regEdges += (self._edgesIds[n] != -1)
 *         return regNodes, regEdges
 */
  __pyx_t_1 = __pyx_v_self->Nedges;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_n = __pyx_t_3;

    /* "graph.pyx":505
 *             regNodes += (self._nodesIds[n] != -1)
 *         for n in range(self.Nedges):
 *             regEdges += (self._edgesIds[n] != -1)             # <<<<<<<<<<<<<<
 *         return regNodes, regEdges
 * 
 */
    __pyx_v_regEdges = (__pyx_v_regEdges + ((__pyx_v_self->_edgesIds[__pyx_v_n]) != -1L));
  }

  /* "graph.pyx":506
 *         for n in range(self.Nedges):
 *             regEdges += (self._edgesIds[n] != -1)
 *         return regNodes, regEdges             # <<<<<<<<<<<<<<
 * 
 *     def arraySizeInfo(self) -> tuple[int, int]:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_regNodes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_regEdges); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4)) __PYX_ERR(0, 506, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5)) __PYX_ERR(0, 506, __pyx_L1_error);
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_r = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "graph.pyx":496
 *         return gcy
 * 
 *     def sizeInfo(self) -> tuple[int, int]:             # <<<<<<<<<<<<<<
 *         cdef int regNodes
 *         cdef int regEdges
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("graph.GraphCy.sizeInfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":508
 *         return regNodes, regEdges
 * 
 *     def arraySizeInfo(self) -> tuple[int, int]:             # <<<<<<<<<<<<<<
 *         return (self.Nnodes, self.Nedges)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5graph_7GraphCy_15arraySizeInfo(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5graph_7GraphCy_15arraySizeInfo = {"arraySizeInfo", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_15arraySizeInfo, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5graph_7GraphCy_15arraySizeInfo(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("arraySizeInfo (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("arraySizeInfo", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "arraySizeInfo", 0))) return NULL;
  __pyx_r = __pyx_pf_5graph_7GraphCy_14arraySizeInfo(((struct __pyx_obj_5graph_GraphCy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5graph_7GraphCy_14arraySizeInfo(struct __pyx_obj_5graph_GraphCy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("arraySizeInfo", 1);

  /* "graph.pyx":509
 * 
 *     def arraySizeInfo(self) -> tuple[int, int]:
 *         return (self.Nnodes, self.Nedges)             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->Nnodes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->Nedges); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1)) __PYX_ERR(0, 509, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2)) __PYX_ERR(0, 509, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "graph.pyx":508
 *         return regNodes, regEdges
 * 
 *     def arraySizeInfo(self) -> tuple[int, int]:             # <<<<<<<<<<<<<<
 *         return (self.Nnodes, self.Nedges)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("graph.GraphCy.arraySizeInfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":513
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     cdef str C_reallocNodes(self, int& size):             # <<<<<<<<<<<<<<
 * 
 *         # copyin existing nodes
 */

static PyObject *__pyx_f_5graph_7GraphCy_C_reallocNodes(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, int &__pyx_v_size) {
  struct __pyx_t_5graph_Node *__pyx_v_oldNodes;
  int *__pyx_v_oldNodeIds;
  int __pyx_v_n;
  int __pyx_v_oldNodeSize;
  struct __pyx_t_5graph_Node __pyx_v_nodeR;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  struct __pyx_t_5graph_Node *__pyx_t_1;
  int *__pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("C_reallocNodes", 1);

  /* "graph.pyx":516
 * 
 *         # copyin existing nodes
 *         cdef Node* oldNodes = <Node*>malloc(self.Nnodes * sizeof(Node))             # <<<<<<<<<<<<<<
 *         cdef int* oldNodeIds = <int*>malloc(self.Nnodes * sizeof(int))
 *         cdef int n
 */
  __pyx_v_oldNodes = ((struct __pyx_t_5graph_Node *)malloc((__pyx_v_self->Nnodes * (sizeof(struct __pyx_t_5graph_Node)))));

  /* "graph.pyx":517
 *         # copyin existing nodes
 *         cdef Node* oldNodes = <Node*>malloc(self.Nnodes * sizeof(Node))
 *         cdef int* oldNodeIds = <int*>malloc(self.Nnodes * sizeof(int))             # <<<<<<<<<<<<<<
 *         cdef int n
 * 
 */
  __pyx_v_oldNodeIds = ((int *)malloc((__pyx_v_self->Nnodes * (sizeof(int)))));

  /* "graph.pyx":520
 *         cdef int n
 * 
 *         oldNodes = self.nodes             # <<<<<<<<<<<<<<
 *         oldNodeIds = self._nodesIds
 * 
 */
  __pyx_t_1 = __pyx_v_self->nodes;
  __pyx_v_oldNodes = __pyx_t_1;

  /* "graph.pyx":521
 * 
 *         oldNodes = self.nodes
 *         oldNodeIds = self._nodesIds             # <<<<<<<<<<<<<<
 * 
 *         cdef int oldNodeSize = self.Nnodes
 */
  __pyx_t_2 = __pyx_v_self->_nodesIds;
  __pyx_v_oldNodeIds = __pyx_t_2;

  /* "graph.pyx":523
 *         oldNodeIds = self._nodesIds
 * 
 *         cdef int oldNodeSize = self.Nnodes             # <<<<<<<<<<<<<<
 *         # making new size
 *         self.nodes = <Node*>malloc(size * sizeof(Node))
 */
  __pyx_t_3 = __pyx_v_self->Nnodes;
  __pyx_v_oldNodeSize = __pyx_t_3;

  /* "graph.pyx":525
 *         cdef int oldNodeSize = self.Nnodes
 *         # making new size
 *         self.nodes = <Node*>malloc(size * sizeof(Node))             # <<<<<<<<<<<<<<
 *         self._nodesIds = <int*>malloc(size * sizeof(int))
 *         self.Nnodes = size
 */
  __pyx_v_self->nodes = ((struct __pyx_t_5graph_Node *)malloc((__pyx_v_size * (sizeof(struct __pyx_t_5graph_Node)))));

  /* "graph.pyx":526
 *         # making new size
 *         self.nodes = <Node*>malloc(size * sizeof(Node))
 *         self._nodesIds = <int*>malloc(size * sizeof(int))             # <<<<<<<<<<<<<<
 *         self.Nnodes = size
 *         self.nodeVisited = <NodeReach*>malloc(self.Nnodes * sizeof(NodeReach))
 */
  __pyx_v_self->_nodesIds = ((int *)malloc((__pyx_v_size * (sizeof(int)))));

  /* "graph.pyx":527
 *         self.nodes = <Node*>malloc(size * sizeof(Node))
 *         self._nodesIds = <int*>malloc(size * sizeof(int))
 *         self.Nnodes = size             # <<<<<<<<<<<<<<
 *         self.nodeVisited = <NodeReach*>malloc(self.Nnodes * sizeof(NodeReach))
 * 
 */
  __pyx_v_self->Nnodes = __pyx_v_size;

  /* "graph.pyx":528
 *         self._nodesIds = <int*>malloc(size * sizeof(int))
 *         self.Nnodes = size
 *         self.nodeVisited = <NodeReach*>malloc(self.Nnodes * sizeof(NodeReach))             # <<<<<<<<<<<<<<
 * 
 *         cdef Node nodeR
 */
  __pyx_v_self->nodeVisited = ((struct __pyx_t_5graph_NodeReach *)malloc((__pyx_v_self->Nnodes * (sizeof(struct __pyx_t_5graph_NodeReach)))));

  /* "graph.pyx":531
 * 
 *         cdef Node nodeR
 *         nodeR.idx = -1             # <<<<<<<<<<<<<<
 *         for n in range(size):
 *             self.nodes[n] = nodeR
 */
  __pyx_v_nodeR.idx = -1;

  /* "graph.pyx":532
 *         cdef Node nodeR
 *         nodeR.idx = -1
 *         for n in range(size):             # <<<<<<<<<<<<<<
 *             self.nodes[n] = nodeR
 *             self._nodesIds[n] = -1
 */
  __pyx_t_3 = __pyx_v_size;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_n = __pyx_t_5;

    /* "graph.pyx":533
 *         nodeR.idx = -1
 *         for n in range(size):
 *             self.nodes[n] = nodeR             # <<<<<<<<<<<<<<
 *             self._nodesIds[n] = -1
 * 
 */
    (__pyx_v_self->nodes[__pyx_v_n]) = __pyx_v_nodeR;

    /* "graph.pyx":534
 *         for n in range(size):
 *             self.nodes[n] = nodeR
 *             self._nodesIds[n] = -1             # <<<<<<<<<<<<<<
 * 
 *         if oldNodeSize > size:
 */
    (__pyx_v_self->_nodesIds[__pyx_v_n]) = -1;
  }

  /* "graph.pyx":536
 *             self._nodesIds[n] = -1
 * 
 *         if oldNodeSize > size:             # <<<<<<<<<<<<<<
 *             oldNodeSize = size
 * 
 */
  __pyx_t_6 = (__pyx_v_oldNodeSize > __pyx_v_size);
  if (__pyx_t_6) {

    /* "graph.pyx":537
 * 
 *         if oldNodeSize > size:
 *             oldNodeSize = size             # <<<<<<<<<<<<<<
 * 
 *         for n in range(oldNodeSize):
 */
    __pyx_v_oldNodeSize = __pyx_v_size;

    /* "graph.pyx":536
 *             self._nodesIds[n] = -1
 * 
 *         if oldNodeSize > size:             # <<<<<<<<<<<<<<
 *             oldNodeSize = size
 * 
 */
  }

  /* "graph.pyx":539
 *             oldNodeSize = size
 * 
 *         for n in range(oldNodeSize):             # <<<<<<<<<<<<<<
 *             self.nodes[n] = oldNodes[n]
 *             self._nodesIds[n] = oldNodeIds[n]
 */
  __pyx_t_3 = __pyx_v_oldNodeSize;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_n = __pyx_t_5;

    /* "graph.pyx":540
 * 
 *         for n in range(oldNodeSize):
 *             self.nodes[n] = oldNodes[n]             # <<<<<<<<<<<<<<
 *             self._nodesIds[n] = oldNodeIds[n]
 * 
 */
    (__pyx_v_self->nodes[__pyx_v_n]) = (__pyx_v_oldNodes[__pyx_v_n]);

    /* "graph.pyx":541
 *         for n in range(oldNodeSize):
 *             self.nodes[n] = oldNodes[n]
 *             self._nodesIds[n] = oldNodeIds[n]             # <<<<<<<<<<<<<<
 * 
 *         free(oldNodes)
 */
    (__pyx_v_self->_nodesIds[__pyx_v_n]) = (__pyx_v_oldNodeIds[__pyx_v_n]);
  }

  /* "graph.pyx":543
 *             self._nodesIds[n] = oldNodeIds[n]
 * 
 *         free(oldNodes)             # <<<<<<<<<<<<<<
 *         free(oldNodeIds)
 * 
 */
  free(__pyx_v_oldNodes);

  /* "graph.pyx":544
 * 
 *         free(oldNodes)
 *         free(oldNodeIds)             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
 */
  free(__pyx_v_oldNodeIds);

  /* "graph.pyx":513
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     cdef str C_reallocNodes(self, int& size):             # <<<<<<<<<<<<<<
 * 
 *         # copyin existing nodes
 */

  /* function exit code */
  __pyx_r = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":548
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     cdef void C_reallocEdges(self, int& size):             # <<<<<<<<<<<<<<
 * 
 *         # copyin existing edge
 */

static void __pyx_f_5graph_7GraphCy_C_reallocEdges(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, int &__pyx_v_size) {
  struct __pyx_t_5graph_Edge *__pyx_v_oldEdges;
  int *__pyx_v_oldEdgeIds;
  int __pyx_v_n;
  int __pyx_v_oldedgesize;
  struct __pyx_t_5graph_Edge __pyx_v_edge;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "graph.pyx":551
 * 
 *         # copyin existing edge
 *         cdef Edge* oldEdges = <Edge*>malloc(self.Nedges * sizeof(Edge))             # <<<<<<<<<<<<<<
 *         cdef int* oldEdgeIds = <int*>malloc(self.Nedges * sizeof(int))
 *         for n in range(self.Nedges):
 */
  __pyx_v_oldEdges = ((struct __pyx_t_5graph_Edge *)malloc((__pyx_v_self->Nedges * (sizeof(struct __pyx_t_5graph_Edge)))));

  /* "graph.pyx":552
 *         # copyin existing edge
 *         cdef Edge* oldEdges = <Edge*>malloc(self.Nedges * sizeof(Edge))
 *         cdef int* oldEdgeIds = <int*>malloc(self.Nedges * sizeof(int))             # <<<<<<<<<<<<<<
 *         for n in range(self.Nedges):
 *             oldEdges[n] = self.edges[n]
 */
  __pyx_v_oldEdgeIds = ((int *)malloc((__pyx_v_self->Nedges * (sizeof(int)))));

  /* "graph.pyx":553
 *         cdef Edge* oldEdges = <Edge*>malloc(self.Nedges * sizeof(Edge))
 *         cdef int* oldEdgeIds = <int*>malloc(self.Nedges * sizeof(int))
 *         for n in range(self.Nedges):             # <<<<<<<<<<<<<<
 *             oldEdges[n] = self.edges[n]
 *             oldEdgeIds[n] = self._edgesIds[n]
 */
  __pyx_t_1 = __pyx_v_self->Nedges;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_n = __pyx_t_3;

    /* "graph.pyx":554
 *         cdef int* oldEdgeIds = <int*>malloc(self.Nedges * sizeof(int))
 *         for n in range(self.Nedges):
 *             oldEdges[n] = self.edges[n]             # <<<<<<<<<<<<<<
 *             oldEdgeIds[n] = self._edgesIds[n]
 *         cdef int oldedgesize = self.Nedges
 */
    (__pyx_v_oldEdges[__pyx_v_n]) = (__pyx_v_self->edges[__pyx_v_n]);

    /* "graph.pyx":555
 *         for n in range(self.Nedges):
 *             oldEdges[n] = self.edges[n]
 *             oldEdgeIds[n] = self._edgesIds[n]             # <<<<<<<<<<<<<<
 *         cdef int oldedgesize = self.Nedges
 * 
 */
    (__pyx_v_oldEdgeIds[__pyx_v_n]) = (__pyx_v_self->_edgesIds[__pyx_v_n]);
  }

  /* "graph.pyx":556
 *             oldEdges[n] = self.edges[n]
 *             oldEdgeIds[n] = self._edgesIds[n]
 *         cdef int oldedgesize = self.Nedges             # <<<<<<<<<<<<<<
 * 
 *         # making new size
 */
  __pyx_t_1 = __pyx_v_self->Nedges;
  __pyx_v_oldedgesize = __pyx_t_1;

  /* "graph.pyx":559
 * 
 *         # making new size
 *         self.edges = <Edge*>malloc(size * sizeof(Edge))             # <<<<<<<<<<<<<<
 *         self._edgesIds = <int*>malloc(size * sizeof(int))
 *         self.Nedges = size
 */
  __pyx_v_self->edges = ((struct __pyx_t_5graph_Edge *)malloc((__pyx_v_size * (sizeof(struct __pyx_t_5graph_Edge)))));

  /* "graph.pyx":560
 *         # making new size
 *         self.edges = <Edge*>malloc(size * sizeof(Edge))
 *         self._edgesIds = <int*>malloc(size * sizeof(int))             # <<<<<<<<<<<<<<
 *         self.Nedges = size
 * 
 */
  __pyx_v_self->_edgesIds = ((int *)malloc((__pyx_v_size * (sizeof(int)))));

  /* "graph.pyx":561
 *         self.edges = <Edge*>malloc(size * sizeof(Edge))
 *         self._edgesIds = <int*>malloc(size * sizeof(int))
 *         self.Nedges = size             # <<<<<<<<<<<<<<
 * 
 *         cdef Edge edge
 */
  __pyx_v_self->Nedges = __pyx_v_size;

  /* "graph.pyx":564
 * 
 *         cdef Edge edge
 *         edge.idx = -1             # <<<<<<<<<<<<<<
 *         for n in range(size):
 *             self.edges[n] = edge
 */
  __pyx_v_edge.idx = -1;

  /* "graph.pyx":565
 *         cdef Edge edge
 *         edge.idx = -1
 *         for n in range(size):             # <<<<<<<<<<<<<<
 *             self.edges[n] = edge
 *             self._edgesIds[n] = -1
 */
  __pyx_t_1 = __pyx_v_size;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_n = __pyx_t_3;

    /* "graph.pyx":566
 *         edge.idx = -1
 *         for n in range(size):
 *             self.edges[n] = edge             # <<<<<<<<<<<<<<
 *             self._edgesIds[n] = -1
 * 
 */
    (__pyx_v_self->edges[__pyx_v_n]) = __pyx_v_edge;

    /* "graph.pyx":567
 *         for n in range(size):
 *             self.edges[n] = edge
 *             self._edgesIds[n] = -1             # <<<<<<<<<<<<<<
 * 
 *         if oldedgesize > size:
 */
    (__pyx_v_self->_edgesIds[__pyx_v_n]) = -1;
  }

  /* "graph.pyx":569
 *             self._edgesIds[n] = -1
 * 
 *         if oldedgesize > size:             # <<<<<<<<<<<<<<
 *             oldedgesize = size
 * 
 */
  __pyx_t_4 = (__pyx_v_oldedgesize > __pyx_v_size);
  if (__pyx_t_4) {

    /* "graph.pyx":570
 * 
 *         if oldedgesize > size:
 *             oldedgesize = size             # <<<<<<<<<<<<<<
 * 
 *         for n in range(oldedgesize):
 */
    __pyx_v_oldedgesize = __pyx_v_size;

    /* "graph.pyx":569
 *             self._edgesIds[n] = -1
 * 
 *         if oldedgesize > size:             # <<<<<<<<<<<<<<
 *             oldedgesize = size
 * 
 */
  }

  /* "graph.pyx":572
 *             oldedgesize = size
 * 
 *         for n in range(oldedgesize):             # <<<<<<<<<<<<<<
 *             self.edges[n] = oldEdges[n]
 *             self._edgesIds[n] = oldEdgeIds[n]
 */
  __pyx_t_1 = __pyx_v_oldedgesize;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_n = __pyx_t_3;

    /* "graph.pyx":573
 * 
 *         for n in range(oldedgesize):
 *             self.edges[n] = oldEdges[n]             # <<<<<<<<<<<<<<
 *             self._edgesIds[n] = oldEdgeIds[n]
 * 
 */
    (__pyx_v_self->edges[__pyx_v_n]) = (__pyx_v_oldEdges[__pyx_v_n]);

    /* "graph.pyx":574
 *         for n in range(oldedgesize):
 *             self.edges[n] = oldEdges[n]
 *             self._edgesIds[n] = oldEdgeIds[n]             # <<<<<<<<<<<<<<
 * 
 *     def reallocNodes(self, size:int|None=None):
 */
    (__pyx_v_self->_edgesIds[__pyx_v_n]) = (__pyx_v_oldEdgeIds[__pyx_v_n]);
  }

  /* "graph.pyx":548
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     cdef void C_reallocEdges(self, int& size):             # <<<<<<<<<<<<<<
 * 
 *         # copyin existing edge
 */

  /* function exit code */
}

/* "graph.pyx":576
 *             self._edgesIds[n] = oldEdgeIds[n]
 * 
 *     def reallocNodes(self, size:int|None=None):             # <<<<<<<<<<<<<<
 *         cdef int regNodes = self.sizeInfo()[0]
 *         if size == None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5graph_7GraphCy_17reallocNodes(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5graph_7GraphCy_17reallocNodes = {"reallocNodes", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_17reallocNodes, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5graph_7GraphCy_17reallocNodes(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_size = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reallocNodes (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_size,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_size);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 576, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "reallocNodes") < 0)) __PYX_ERR(0, 576, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_size = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("reallocNodes", 0, 0, 1, __pyx_nargs); __PYX_ERR(0, 576, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("graph.GraphCy.reallocNodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5graph_7GraphCy_16reallocNodes(((struct __pyx_obj_5graph_GraphCy *)__pyx_v_self), __pyx_v_size);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5graph_7GraphCy_16reallocNodes(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, PyObject *__pyx_v_size) {
  int __pyx_v_regNodes;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reallocNodes", 1);

  /* "graph.pyx":577
 * 
 *     def reallocNodes(self, size:int|None=None):
 *         cdef int regNodes = self.sizeInfo()[0]             # <<<<<<<<<<<<<<
 *         if size == None:
 *             self.C_reallocNodes(regNodes)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_sizeInfo); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 577, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_regNodes = __pyx_t_4;

  /* "graph.pyx":578
 *     def reallocNodes(self, size:int|None=None):
 *         cdef int regNodes = self.sizeInfo()[0]
 *         if size == None:             # <<<<<<<<<<<<<<
 *             self.C_reallocNodes(regNodes)
 *         else:
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_size, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 578, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 578, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_5) {

    /* "graph.pyx":579
 *         cdef int regNodes = self.sizeInfo()[0]
 *         if size == None:
 *             self.C_reallocNodes(regNodes)             # <<<<<<<<<<<<<<
 *         else:
 *             if size < regNodes:
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_5graph_GraphCy *)__pyx_v_self->__pyx_vtab)->C_reallocNodes(__pyx_v_self, __pyx_v_regNodes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "graph.pyx":578
 *     def reallocNodes(self, size:int|None=None):
 *         cdef int regNodes = self.sizeInfo()[0]
 *         if size == None:             # <<<<<<<<<<<<<<
 *             self.C_reallocNodes(regNodes)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "graph.pyx":581
 *             self.C_reallocNodes(regNodes)
 *         else:
 *             if size < regNodes:             # <<<<<<<<<<<<<<
 *                 print('Warning, resizing nodes array smaller than ammount of nodes')
 *             self.C_reallocNodes(size)
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_regNodes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 581, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_size, __pyx_t_2, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 581, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 581, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_5) {

      /* "graph.pyx":582
 *         else:
 *             if size < regNodes:
 *                 print('Warning, resizing nodes array smaller than ammount of nodes')             # <<<<<<<<<<<<<<
 *             self.C_reallocNodes(size)
 * 
 */
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 582, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "graph.pyx":581
 *             self.C_reallocNodes(regNodes)
 *         else:
 *             if size < regNodes:             # <<<<<<<<<<<<<<
 *                 print('Warning, resizing nodes array smaller than ammount of nodes')
 *             self.C_reallocNodes(size)
 */
    }

    /* "graph.pyx":583
 *             if size < regNodes:
 *                 print('Warning, resizing nodes array smaller than ammount of nodes')
 *             self.C_reallocNodes(size)             # <<<<<<<<<<<<<<
 * 
 *     def reallocEdges(self, size:int|None=None):
 */
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_size); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 583, __pyx_L1_error)
    __pyx_t_1 = ((struct __pyx_vtabstruct_5graph_GraphCy *)__pyx_v_self->__pyx_vtab)->C_reallocNodes(__pyx_v_self, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 583, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_L3:;

  /* "graph.pyx":576
 *             self._edgesIds[n] = oldEdgeIds[n]
 * 
 *     def reallocNodes(self, size:int|None=None):             # <<<<<<<<<<<<<<
 *         cdef int regNodes = self.sizeInfo()[0]
 *         if size == None:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("graph.GraphCy.reallocNodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":585
 *             self.C_reallocNodes(size)
 * 
 *     def reallocEdges(self, size:int|None=None):             # <<<<<<<<<<<<<<
 *         cdef int regEdges = self.sizeInfo()[1]
 *         if size == None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5graph_7GraphCy_19reallocEdges(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5graph_7GraphCy_19reallocEdges = {"reallocEdges", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_19reallocEdges, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5graph_7GraphCy_19reallocEdges(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_size = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reallocEdges (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_size,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_size);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 585, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "reallocEdges") < 0)) __PYX_ERR(0, 585, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_size = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("reallocEdges", 0, 0, 1, __pyx_nargs); __PYX_ERR(0, 585, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("graph.GraphCy.reallocEdges", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5graph_7GraphCy_18reallocEdges(((struct __pyx_obj_5graph_GraphCy *)__pyx_v_self), __pyx_v_size);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5graph_7GraphCy_18reallocEdges(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, PyObject *__pyx_v_size) {
  int __pyx_v_regEdges;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reallocEdges", 1);

  /* "graph.pyx":586
 * 
 *     def reallocEdges(self, size:int|None=None):
 *         cdef int regEdges = self.sizeInfo()[1]             # <<<<<<<<<<<<<<
 *         if size == None:
 *             self.C_reallocEdges(regEdges)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_sizeInfo); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 586, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 586, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_regEdges = __pyx_t_4;

  /* "graph.pyx":587
 *     def reallocEdges(self, size:int|None=None):
 *         cdef int regEdges = self.sizeInfo()[1]
 *         if size == None:             # <<<<<<<<<<<<<<
 *             self.C_reallocEdges(regEdges)
 *         else:
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_size, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 587, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_5) {

    /* "graph.pyx":588
 *         cdef int regEdges = self.sizeInfo()[1]
 *         if size == None:
 *             self.C_reallocEdges(regEdges)             # <<<<<<<<<<<<<<
 *         else:
 *             if size < regEdges:
 */
    ((struct __pyx_vtabstruct_5graph_GraphCy *)__pyx_v_self->__pyx_vtab)->C_reallocEdges(__pyx_v_self, __pyx_v_regEdges); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 588, __pyx_L1_error)

    /* "graph.pyx":587
 *     def reallocEdges(self, size:int|None=None):
 *         cdef int regEdges = self.sizeInfo()[1]
 *         if size == None:             # <<<<<<<<<<<<<<
 *             self.C_reallocEdges(regEdges)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "graph.pyx":590
 *             self.C_reallocEdges(regEdges)
 *         else:
 *             if size < regEdges:             # <<<<<<<<<<<<<<
 *                 print('Warning, resizing nodes array smaller than ammount of nodes')
 *             self.C_reallocEdges(size)
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_regEdges); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 590, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_size, __pyx_t_2, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 590, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 590, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_5) {

      /* "graph.pyx":591
 *         else:
 *             if size < regEdges:
 *                 print('Warning, resizing nodes array smaller than ammount of nodes')             # <<<<<<<<<<<<<<
 *             self.C_reallocEdges(size)
 * 
 */
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 591, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "graph.pyx":590
 *             self.C_reallocEdges(regEdges)
 *         else:
 *             if size < regEdges:             # <<<<<<<<<<<<<<
 *                 print('Warning, resizing nodes array smaller than ammount of nodes')
 *             self.C_reallocEdges(size)
 */
    }

    /* "graph.pyx":592
 *             if size < regEdges:
 *                 print('Warning, resizing nodes array smaller than ammount of nodes')
 *             self.C_reallocEdges(size)             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
 */
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_size); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 592, __pyx_L1_error)
    ((struct __pyx_vtabstruct_5graph_GraphCy *)__pyx_v_self->__pyx_vtab)->C_reallocEdges(__pyx_v_self, __pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 592, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "graph.pyx":585
 *             self.C_reallocNodes(size)
 * 
 *     def reallocEdges(self, size:int|None=None):             # <<<<<<<<<<<<<<
 *         cdef int regEdges = self.sizeInfo()[1]
 *         if size == None:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("graph.GraphCy.reallocEdges", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":596
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     cdef inline void C_Reset_NodeVisited(self, int val = -1):             # <<<<<<<<<<<<<<
 *         for n in range(self.Nnodes):
 *             self.nodeVisited[n].Nid = val
 */

static CYTHON_INLINE void __pyx_f_5graph_7GraphCy_C_Reset_NodeVisited(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, struct __pyx_opt_args_5graph_7GraphCy_C_Reset_NodeVisited *__pyx_optional_args) {
  int __pyx_v_val = ((int)-1);
  int __pyx_v_n;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_val = __pyx_optional_args->val;
    }
  }

  /* "graph.pyx":597
 *     @cython.wraparound(False)
 *     cdef inline void C_Reset_NodeVisited(self, int val = -1):
 *         for n in range(self.Nnodes):             # <<<<<<<<<<<<<<
 *             self.nodeVisited[n].Nid = val
 * 
 */
  __pyx_t_1 = __pyx_v_self->Nnodes;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_n = __pyx_t_3;

    /* "graph.pyx":598
 *     cdef inline void C_Reset_NodeVisited(self, int val = -1):
 *         for n in range(self.Nnodes):
 *             self.nodeVisited[n].Nid = val             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_self->nodeVisited[__pyx_v_n]).Nid = __pyx_v_val;
  }

  /* "graph.pyx":596
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     cdef inline void C_Reset_NodeVisited(self, int val = -1):             # <<<<<<<<<<<<<<
 *         for n in range(self.Nnodes):
 *             self.nodeVisited[n].Nid = val
 */

  /* function exit code */
}

/* "graph.pyx":601
 * 
 * 
 *     def get_NodeVisited(self):             # <<<<<<<<<<<<<<
 *         outtup = tuple((self.nodeVisited[n].Nid for n in range(self.Nnodes)))
 *         return outtup
 */

/* Python wrapper */
static PyObject *__pyx_pw_5graph_7GraphCy_21get_NodeVisited(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5graph_7GraphCy_21get_NodeVisited = {"get_NodeVisited", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_21get_NodeVisited, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5graph_7GraphCy_21get_NodeVisited(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_NodeVisited (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("get_NodeVisited", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "get_NodeVisited", 0))) return NULL;
  __pyx_r = __pyx_pf_5graph_7GraphCy_20get_NodeVisited(((struct __pyx_obj_5graph_GraphCy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5graph_7GraphCy_15get_NodeVisited_2generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "graph.pyx":602
 * 
 *     def get_NodeVisited(self):
 *         outtup = tuple((self.nodeVisited[n].Nid for n in range(self.Nnodes)))             # <<<<<<<<<<<<<<
 *         return outtup
 * 
 */

static PyObject *__pyx_pf_5graph_7GraphCy_15get_NodeVisited_genexpr(PyObject *__pyx_self, int __pyx_genexpr_arg_0) {
  struct __pyx_obj_5graph___pyx_scope_struct_8_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5graph___pyx_scope_struct_8_genexpr *)__pyx_tp_new_5graph___pyx_scope_struct_8_genexpr(__pyx_ptype_5graph___pyx_scope_struct_8_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5graph___pyx_scope_struct_8_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 602, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_5graph___pyx_scope_struct_7_get_NodeVisited *) __pyx_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  __pyx_cur_scope->__pyx_genexpr_arg_0 = __pyx_genexpr_arg_0;
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5graph_7GraphCy_15get_NodeVisited_2generator4, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_get_NodeVisited_locals_genexpr, __pyx_n_s_graph); if (unlikely(!gen)) __PYX_ERR(0, 602, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("graph.GraphCy.get_NodeVisited.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5graph_7GraphCy_15get_NodeVisited_2generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5graph___pyx_scope_struct_8_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5graph___pyx_scope_struct_8_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 602, __pyx_L1_error)
  __pyx_t_1 = __pyx_cur_scope->__pyx_genexpr_arg_0;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_cur_scope->__pyx_v_n = __pyx_t_3;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 602, __pyx_L1_error) }
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self->nodeVisited[__pyx_cur_scope->__pyx_v_n]).Nid); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 602, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 602, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":601
 * 
 * 
 *     def get_NodeVisited(self):             # <<<<<<<<<<<<<<
 *         outtup = tuple((self.nodeVisited[n].Nid for n in range(self.Nnodes)))
 *         return outtup
 */

static PyObject *__pyx_pf_5graph_7GraphCy_20get_NodeVisited(struct __pyx_obj_5graph_GraphCy *__pyx_v_self) {
  struct __pyx_obj_5graph___pyx_scope_struct_7_get_NodeVisited *__pyx_cur_scope;
  PyObject *__pyx_v_outtup = NULL;
  PyObject *__pyx_gb_5graph_7GraphCy_15get_NodeVisited_2generator4 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_NodeVisited", 0);
  __pyx_cur_scope = (struct __pyx_obj_5graph___pyx_scope_struct_7_get_NodeVisited *)__pyx_tp_new_5graph___pyx_scope_struct_7_get_NodeVisited(__pyx_ptype_5graph___pyx_scope_struct_7_get_NodeVisited, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5graph___pyx_scope_struct_7_get_NodeVisited *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 601, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "graph.pyx":602
 * 
 *     def get_NodeVisited(self):
 *         outtup = tuple((self.nodeVisited[n].Nid for n in range(self.Nnodes)))             # <<<<<<<<<<<<<<
 *         return outtup
 * 
 */
  __pyx_t_1 = __pyx_pf_5graph_7GraphCy_15get_NodeVisited_genexpr(((PyObject*)__pyx_cur_scope), __pyx_cur_scope->__pyx_v_self->Nnodes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PySequence_Tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_outtup = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "graph.pyx":603
 *     def get_NodeVisited(self):
 *         outtup = tuple((self.nodeVisited[n].Nid for n in range(self.Nnodes)))
 *         return outtup             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_outtup);
  __pyx_r = __pyx_v_outtup;
  goto __pyx_L0;

  /* "graph.pyx":601
 * 
 * 
 *     def get_NodeVisited(self):             # <<<<<<<<<<<<<<
 *         outtup = tuple((self.nodeVisited[n].Nid for n in range(self.Nnodes)))
 *         return outtup
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("graph.GraphCy.get_NodeVisited", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_outtup);
  __Pyx_XDECREF(__pyx_gb_5graph_7GraphCy_15get_NodeVisited_2generator4);
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":608
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     cdef void C_addNode(self, int& idx, float& cX, float& cY, float cZ=0.0, float w=1.0, float c=0.0):             # <<<<<<<<<<<<<<
 *         # create Node instance
 *         cdef Node node
 */

static void __pyx_f_5graph_7GraphCy_C_addNode(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, int &__pyx_v_idx, float &__pyx_v_cX, float &__pyx_v_cY, struct __pyx_opt_args_5graph_7GraphCy_C_addNode *__pyx_optional_args) {
  float __pyx_v_cZ = ((float)0.0);
  float __pyx_v_w = ((float)1.0);
  float __pyx_v_c = ((float)0.0);
  struct __pyx_t_5graph_Node __pyx_v_node;
  int __pyx_v_n;
  float *__pyx_t_1;
  float __pyx_t_2;
  float __pyx_t_3;
  float __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_cZ = __pyx_optional_args->cZ;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_w = __pyx_optional_args->w;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_c = __pyx_optional_args->c;
        }
      }
    }
  }

  /* "graph.pyx":614
 *         # if idx is None or idx in self._nodesIds:
 *         #     idx = find_smallest_missing(self._nodesIds)
 *         node.idx = idx             # <<<<<<<<<<<<<<
 *         node.pt = (cX, cY, cZ)
 *         node.w = w
 */
  __pyx_v_node.idx = __pyx_v_idx;

  /* "graph.pyx":615
 *         #     idx = find_smallest_missing(self._nodesIds)
 *         node.idx = idx
 *         node.pt = (cX, cY, cZ)             # <<<<<<<<<<<<<<
 *         node.w = w
 *         node.c = c
 */
  __pyx_t_1 = __pyx_v_node.pt;
  __pyx_t_2 = __pyx_v_cX;
  __pyx_t_3 = __pyx_v_cY;
  __pyx_t_4 = __pyx_v_cZ;
  (__pyx_t_1[0]) = __pyx_t_2;
  (__pyx_t_1[1]) = __pyx_t_3;
  (__pyx_t_1[2]) = __pyx_t_4;

  /* "graph.pyx":616
 *         node.idx = idx
 *         node.pt = (cX, cY, cZ)
 *         node.w = w             # <<<<<<<<<<<<<<
 *         node.c = c
 * 
 */
  __pyx_v_node.w = __pyx_v_w;

  /* "graph.pyx":617
 *         node.pt = (cX, cY, cZ)
 *         node.w = w
 *         node.c = c             # <<<<<<<<<<<<<<
 * 
 *         cdef int n
 */
  __pyx_v_node.c = __pyx_v_c;

  /* "graph.pyx":620
 * 
 *         cdef int n
 *         for n in range(self.EidN):             # <<<<<<<<<<<<<<
 *             node.Eid[n] = -1
 * 
 */
  __pyx_t_5 = __pyx_v_self->EidN;
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_n = __pyx_t_7;

    /* "graph.pyx":621
 *         cdef int n
 *         for n in range(self.EidN):
 *             node.Eid[n] = -1             # <<<<<<<<<<<<<<
 * 
 *         self.nodes[idx] = node
 */
    (__pyx_v_node.Eid[__pyx_v_n]) = -1;
  }

  /* "graph.pyx":623
 *             node.Eid[n] = -1
 * 
 *         self.nodes[idx] = node             # <<<<<<<<<<<<<<
 *         self._nodesIds[idx] = idx
 * 
 */
  (__pyx_v_self->nodes[__pyx_v_idx]) = __pyx_v_node;

  /* "graph.pyx":624
 * 
 *         self.nodes[idx] = node
 *         self._nodesIds[idx] = idx             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
 */
  (__pyx_v_self->_nodesIds[__pyx_v_idx]) = __pyx_v_idx;

  /* "graph.pyx":608
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     cdef void C_addNode(self, int& idx, float& cX, float& cY, float cZ=0.0, float w=1.0, float c=0.0):             # <<<<<<<<<<<<<<
 *         # create Node instance
 *         cdef Node node
 */

  /* function exit code */
}

/* "graph.pyx":628
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     cdef void C_removeEdge(self, int& idx):             # <<<<<<<<<<<<<<
 *         """
 *         removing edge, edits out node Eid.
 */

static void __pyx_f_5graph_7GraphCy_C_removeEdge(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, int &__pyx_v_idx) {
  int __pyx_v_NidO;
  int __pyx_v_NidD;
  int __pyx_t_1;
  struct __pyx_opt_args_5graph_arrCountVals __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "graph.pyx":634
 *         cdef int NidO
 *         cdef int NidD
 *         NidO = self.edges[idx].NidO             # <<<<<<<<<<<<<<
 *         NidD = self.edges[idx].NidD
 *         arrPopInt(self.nodes[NidO].Eid, self.EidN, idx)
 */
  __pyx_t_1 = (__pyx_v_self->edges[__pyx_v_idx]).NidO;
  __pyx_v_NidO = __pyx_t_1;

  /* "graph.pyx":635
 *         cdef int NidD
 *         NidO = self.edges[idx].NidO
 *         NidD = self.edges[idx].NidD             # <<<<<<<<<<<<<<
 *         arrPopInt(self.nodes[NidO].Eid, self.EidN, idx)
 *         arrPopInt(self.nodes[NidD].Eid, self.EidN, idx)
 */
  __pyx_t_1 = (__pyx_v_self->edges[__pyx_v_idx]).NidD;
  __pyx_v_NidD = __pyx_t_1;

  /* "graph.pyx":636
 *         NidO = self.edges[idx].NidO
 *         NidD = self.edges[idx].NidD
 *         arrPopInt(self.nodes[NidO].Eid, self.EidN, idx)             # <<<<<<<<<<<<<<
 *         arrPopInt(self.nodes[NidD].Eid, self.EidN, idx)
 *         self._edgesIds[idx] = -1
 */
  __pyx_f_5graph_arrPopInt((__pyx_v_self->nodes[__pyx_v_NidO]).Eid, __pyx_v_self->EidN, __pyx_v_idx); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 636, __pyx_L1_error)

  /* "graph.pyx":637
 *         NidD = self.edges[idx].NidD
 *         arrPopInt(self.nodes[NidO].Eid, self.EidN, idx)
 *         arrPopInt(self.nodes[NidD].Eid, self.EidN, idx)             # <<<<<<<<<<<<<<
 *         self._edgesIds[idx] = -1
 * 
 */
  __pyx_f_5graph_arrPopInt((__pyx_v_self->nodes[__pyx_v_NidD]).Eid, __pyx_v_self->EidN, __pyx_v_idx); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 637, __pyx_L1_error)

  /* "graph.pyx":638
 *         arrPopInt(self.nodes[NidO].Eid, self.EidN, idx)
 *         arrPopInt(self.nodes[NidD].Eid, self.EidN, idx)
 *         self._edgesIds[idx] = -1             # <<<<<<<<<<<<<<
 * 
 *         # makes sure if no edges connected to related nodes to be dropped.
 */
  (__pyx_v_self->_edgesIds[__pyx_v_idx]) = -1;

  /* "graph.pyx":641
 * 
 *         # makes sure if no edges connected to related nodes to be dropped.
 *         if arrCountVals(self.nodes[NidO].Eid, self.EidN, -1) == self.EidN:             # <<<<<<<<<<<<<<
 *             self._nodesIds[NidO] = -1
 *         if arrCountVals(self.nodes[NidD].Eid, self.EidN, -1) == self.EidN:
 */
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.val = -1;
  __pyx_t_1 = __pyx_f_5graph_arrCountVals((__pyx_v_self->nodes[__pyx_v_NidO]).Eid, __pyx_v_self->EidN, &__pyx_t_2); if (unlikely(__pyx_t_1 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 641, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_1 == __pyx_v_self->EidN);
  if (__pyx_t_3) {

    /* "graph.pyx":642
 *         # makes sure if no edges connected to related nodes to be dropped.
 *         if arrCountVals(self.nodes[NidO].Eid, self.EidN, -1) == self.EidN:
 *             self._nodesIds[NidO] = -1             # <<<<<<<<<<<<<<
 *         if arrCountVals(self.nodes[NidD].Eid, self.EidN, -1) == self.EidN:
 *             self._nodesIds[NidD] = -1
 */
    (__pyx_v_self->_nodesIds[__pyx_v_NidO]) = -1;

    /* "graph.pyx":641
 * 
 *         # makes sure if no edges connected to related nodes to be dropped.
 *         if arrCountVals(self.nodes[NidO].Eid, self.EidN, -1) == self.EidN:             # <<<<<<<<<<<<<<
 *             self._nodesIds[NidO] = -1
 *         if arrCountVals(self.nodes[NidD].Eid, self.EidN, -1) == self.EidN:
 */
  }

  /* "graph.pyx":643
 *         if arrCountVals(self.nodes[NidO].Eid, self.EidN, -1) == self.EidN:
 *             self._nodesIds[NidO] = -1
 *         if arrCountVals(self.nodes[NidD].Eid, self.EidN, -1) == self.EidN:             # <<<<<<<<<<<<<<
 *             self._nodesIds[NidD] = -1
 * 
 */
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.val = -1;
  __pyx_t_1 = __pyx_f_5graph_arrCountVals((__pyx_v_self->nodes[__pyx_v_NidD]).Eid, __pyx_v_self->EidN, &__pyx_t_2); if (unlikely(__pyx_t_1 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 643, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_1 == __pyx_v_self->EidN);
  if (__pyx_t_3) {

    /* "graph.pyx":644
 *             self._nodesIds[NidO] = -1
 *         if arrCountVals(self.nodes[NidD].Eid, self.EidN, -1) == self.EidN:
 *             self._nodesIds[NidD] = -1             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
 */
    (__pyx_v_self->_nodesIds[__pyx_v_NidD]) = -1;

    /* "graph.pyx":643
 *         if arrCountVals(self.nodes[NidO].Eid, self.EidN, -1) == self.EidN:
 *             self._nodesIds[NidO] = -1
 *         if arrCountVals(self.nodes[NidD].Eid, self.EidN, -1) == self.EidN:             # <<<<<<<<<<<<<<
 *             self._nodesIds[NidD] = -1
 * 
 */
  }

  /* "graph.pyx":628
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     cdef void C_removeEdge(self, int& idx):             # <<<<<<<<<<<<<<
 *         """
 *         removing edge, edits out node Eid.
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("graph.GraphCy.C_removeEdge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
}

/* "graph.pyx":648
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     cdef void C_removeNode(self, int& idx):             # <<<<<<<<<<<<<<
 *         # self.nodes[idx] = NULL
 *         cdef int n
 */

static void __pyx_f_5graph_7GraphCy_C_removeNode(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, int &__pyx_v_idx) {

  /* "graph.pyx":651
 *         # self.nodes[idx] = NULL
 *         cdef int n
 *         self._nodesIds[idx] = -1             # <<<<<<<<<<<<<<
 *         # removing related edges, not needed?
 *         # for n in range(self.EidN):
 */
  (__pyx_v_self->_nodesIds[__pyx_v_idx]) = -1;

  /* "graph.pyx":648
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     cdef void C_removeNode(self, int& idx):             # <<<<<<<<<<<<<<
 *         # self.nodes[idx] = NULL
 *         cdef int n
 */

  /* function exit code */
}

/* "graph.pyx":659
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     cdef void C_addEdge(self, int& idx, int& NidO, int& NidD, float& len, float& lenR, float& w):             # <<<<<<<<<<<<<<
 *         # edge add on an higher hierarchi of add_node, with spatial network focusing on edges. make sure paired with add_node
 *         cdef Edge edge
 */

static void __pyx_f_5graph_7GraphCy_C_addEdge(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, int &__pyx_v_idx, int &__pyx_v_NidO, int &__pyx_v_NidD, float &__pyx_v_len, float &__pyx_v_lenR, float &__pyx_v_w) {
  struct __pyx_t_5graph_Edge __pyx_v_edge;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "graph.pyx":663
 *         cdef Edge edge
 * 
 *         edge.idx = idx             # <<<<<<<<<<<<<<
 *         edge.NidO = NidO
 *         edge.NidD = NidD
 */
  __pyx_v_edge.idx = __pyx_v_idx;

  /* "graph.pyx":664
 * 
 *         edge.idx = idx
 *         edge.NidO = NidO             # <<<<<<<<<<<<<<
 *         edge.NidD = NidD
 *         edge.len = len
 */
  __pyx_v_edge.NidO = __pyx_v_NidO;

  /* "graph.pyx":665
 *         edge.idx = idx
 *         edge.NidO = NidO
 *         edge.NidD = NidD             # <<<<<<<<<<<<<<
 *         edge.len = len
 *         edge.lenR = lenR
 */
  __pyx_v_edge.NidD = __pyx_v_NidD;

  /* "graph.pyx":666
 *         edge.NidO = NidO
 *         edge.NidD = NidD
 *         edge.len = len             # <<<<<<<<<<<<<<
 *         edge.lenR = lenR
 *         edge.w = w
 */
  __pyx_v_edge.len = __pyx_v_len;

  /* "graph.pyx":667
 *         edge.NidD = NidD
 *         edge.len = len
 *         edge.lenR = lenR             # <<<<<<<<<<<<<<
 *         edge.w = w
 * 
 */
  __pyx_v_edge.lenR = __pyx_v_lenR;

  /* "graph.pyx":668
 *         edge.len = len
 *         edge.lenR = lenR
 *         edge.w = w             # <<<<<<<<<<<<<<
 * 
 *         # node appending information of connected edge
 */
  __pyx_v_edge.w = __pyx_v_w;

  /* "graph.pyx":671
 * 
 *         # node appending information of connected edge
 *         arrAppendInt(self.nodes[NidO].Eid, self.EidN, idx)             # <<<<<<<<<<<<<<
 *         arrAppendInt(self.nodes[NidD].Eid, self.EidN, idx)
 * 
 */
  __pyx_f_5graph_arrAppendInt((__pyx_v_self->nodes[__pyx_v_NidO]).Eid, __pyx_v_self->EidN, __pyx_v_idx); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 671, __pyx_L1_error)

  /* "graph.pyx":672
 *         # node appending information of connected edge
 *         arrAppendInt(self.nodes[NidO].Eid, self.EidN, idx)
 *         arrAppendInt(self.nodes[NidD].Eid, self.EidN, idx)             # <<<<<<<<<<<<<<
 * 
 *         self.edges[idx] = edge
 */
  __pyx_f_5graph_arrAppendInt((__pyx_v_self->nodes[__pyx_v_NidD]).Eid, __pyx_v_self->EidN, __pyx_v_idx); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 672, __pyx_L1_error)

  /* "graph.pyx":674
 *         arrAppendInt(self.nodes[NidD].Eid, self.EidN, idx)
 * 
 *         self.edges[idx] = edge             # <<<<<<<<<<<<<<
 *         self._edgesIds[idx] = idx
 * 
 */
  (__pyx_v_self->edges[__pyx_v_idx]) = __pyx_v_edge;

  /* "graph.pyx":675
 * 
 *         self.edges[idx] = edge
 *         self._edgesIds[idx] = idx             # <<<<<<<<<<<<<<
 * 
 *     def addEdge(self, ptOinfo:tuple, ptDinfo:tuple, lninfo:tuple) -> None:
 */
  (__pyx_v_self->_edgesIds[__pyx_v_idx]) = __pyx_v_idx;

  /* "graph.pyx":659
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     cdef void C_addEdge(self, int& idx, int& NidO, int& NidD, float& len, float& lenR, float& w):             # <<<<<<<<<<<<<<
 *         # edge add on an higher hierarchi of add_node, with spatial network focusing on edges. make sure paired with add_node
 *         cdef Edge edge
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("graph.GraphCy.C_addEdge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
}

/* "graph.pyx":677
 *         self._edgesIds[idx] = idx
 * 
 *     def addEdge(self, ptOinfo:tuple, ptDinfo:tuple, lninfo:tuple) -> None:             # <<<<<<<<<<<<<<
 *         # input of endpoints and line
 *         # input tuple information structure:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5graph_7GraphCy_23addEdge(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5graph_7GraphCy_23addEdge = {"addEdge", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_23addEdge, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5graph_7GraphCy_23addEdge(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_ptOinfo = 0;
  PyObject *__pyx_v_ptDinfo = 0;
  PyObject *__pyx_v_lninfo = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addEdge (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ptOinfo,&__pyx_n_s_ptDinfo,&__pyx_n_s_lninfo,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ptOinfo)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 677, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ptDinfo)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 677, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("addEdge", 1, 3, 3, 1); __PYX_ERR(0, 677, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_lninfo)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 677, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("addEdge", 1, 3, 3, 2); __PYX_ERR(0, 677, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "addEdge") < 0)) __PYX_ERR(0, 677, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_ptOinfo = ((PyObject*)values[0]);
    __pyx_v_ptDinfo = ((PyObject*)values[1]);
    __pyx_v_lninfo = ((PyObject*)values[2]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addEdge", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 677, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("graph.GraphCy.addEdge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ptOinfo), (&PyTuple_Type), 0, "ptOinfo", 1))) __PYX_ERR(0, 677, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ptDinfo), (&PyTuple_Type), 0, "ptDinfo", 1))) __PYX_ERR(0, 677, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_lninfo), (&PyTuple_Type), 0, "lninfo", 1))) __PYX_ERR(0, 677, __pyx_L1_error)
  __pyx_r = __pyx_pf_5graph_7GraphCy_22addEdge(((struct __pyx_obj_5graph_GraphCy *)__pyx_v_self), __pyx_v_ptOinfo, __pyx_v_ptDinfo, __pyx_v_lninfo);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5graph_7GraphCy_22addEdge(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, PyObject *__pyx_v_ptOinfo, PyObject *__pyx_v_ptDinfo, PyObject *__pyx_v_lninfo) {
  float __pyx_v_ptOcoord[3];
  float __pyx_v_ptDcoord[3];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  float __pyx_t_4[3];
  int __pyx_t_5;
  float __pyx_t_6;
  float __pyx_t_7;
  struct __pyx_opt_args_5graph_7GraphCy_C_addNode __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  float __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addEdge", 1);

  /* "graph.pyx":685
 *         cdef float[3] ptOcoord
 *         cdef float[3] ptDcoord
 *         if self._nodesIds[ptOinfo[0]] == -1:             # <<<<<<<<<<<<<<
 *             ptOcoord = ptOinfo[1]
 *             self.C_addNode(
 */
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_ptOinfo, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 685, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((__pyx_v_self->_nodesIds[__pyx_t_2]) == -1L);
  if (__pyx_t_3) {

    /* "graph.pyx":686
 *         cdef float[3] ptDcoord
 *         if self._nodesIds[ptOinfo[0]] == -1:
 *             ptOcoord = ptOinfo[1]             # <<<<<<<<<<<<<<
 *             self.C_addNode(
 *                 idx = ptOinfo[0],
 */
    __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_ptOinfo, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 686, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely((__Pyx_carray_from_py_float(__pyx_t_1, __pyx_t_4, 3) < 0))) __PYX_ERR(0, 686, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    memcpy(&(__pyx_v_ptOcoord[0]), __pyx_t_4, sizeof(__pyx_v_ptOcoord[0]) * (3));

    /* "graph.pyx":688
 *             ptOcoord = ptOinfo[1]
 *             self.C_addNode(
 *                 idx = ptOinfo[0],             # <<<<<<<<<<<<<<
 *                 cX  = ptOcoord[0],
 *                 cY  = ptOcoord[1],
 */
    __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_ptOinfo, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 688, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 688, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "graph.pyx":692
 *                 cY  = ptOcoord[1],
 *                 cZ  = ptOcoord[2],
 *                 w   = ptOinfo[2],             # <<<<<<<<<<<<<<
 *                 c   = ptOinfo[3])
 * 
 */
    __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_ptOinfo, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 692, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_6 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 692, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "graph.pyx":693
 *                 cZ  = ptOcoord[2],
 *                 w   = ptOinfo[2],
 *                 c   = ptOinfo[3])             # <<<<<<<<<<<<<<
 * 
 *         if self._nodesIds[ptDinfo[0]] == -1:
 */
    __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_ptOinfo, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 693, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 693, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "graph.pyx":687
 *         if self._nodesIds[ptOinfo[0]] == -1:
 *             ptOcoord = ptOinfo[1]
 *             self.C_addNode(             # <<<<<<<<<<<<<<
 *                 idx = ptOinfo[0],
 *                 cX  = ptOcoord[0],
 */
    __pyx_t_8.__pyx_n = 3;
    __pyx_t_8.cZ = (__pyx_v_ptOcoord[2]);
    __pyx_t_8.w = __pyx_t_6;
    __pyx_t_8.c = __pyx_t_7;
    ((struct __pyx_vtabstruct_5graph_GraphCy *)__pyx_v_self->__pyx_vtab)->C_addNode(__pyx_v_self, __pyx_t_5, (__pyx_v_ptOcoord[0]), (__pyx_v_ptOcoord[1]), &__pyx_t_8); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 687, __pyx_L1_error)

    /* "graph.pyx":685
 *         cdef float[3] ptOcoord
 *         cdef float[3] ptDcoord
 *         if self._nodesIds[ptOinfo[0]] == -1:             # <<<<<<<<<<<<<<
 *             ptOcoord = ptOinfo[1]
 *             self.C_addNode(
 */
  }

  /* "graph.pyx":695
 *                 c   = ptOinfo[3])
 * 
 *         if self._nodesIds[ptDinfo[0]] == -1:             # <<<<<<<<<<<<<<
 *             ptDcoord = ptDinfo[1]
 *             self.C_addNode(
 */
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_ptDinfo, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 695, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((__pyx_v_self->_nodesIds[__pyx_t_2]) == -1L);
  if (__pyx_t_3) {

    /* "graph.pyx":696
 * 
 *         if self._nodesIds[ptDinfo[0]] == -1:
 *             ptDcoord = ptDinfo[1]             # <<<<<<<<<<<<<<
 *             self.C_addNode(
 *                 idx = ptDinfo[0],
 */
    __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_ptDinfo, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 696, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely((__Pyx_carray_from_py_float(__pyx_t_1, __pyx_t_4, 3) < 0))) __PYX_ERR(0, 696, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    memcpy(&(__pyx_v_ptDcoord[0]), __pyx_t_4, sizeof(__pyx_v_ptDcoord[0]) * (3));

    /* "graph.pyx":698
 *             ptDcoord = ptDinfo[1]
 *             self.C_addNode(
 *                 idx = ptDinfo[0],             # <<<<<<<<<<<<<<
 *                 cX  = ptDcoord[0],
 *                 cY  = ptDcoord[1],
 */
    __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_ptDinfo, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 698, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "graph.pyx":702
 *                 cY  = ptDcoord[1],
 *                 cZ  = ptDcoord[2],
 *                 w   = ptDinfo[2],             # <<<<<<<<<<<<<<
 *                 c   = ptDinfo[3])
 * 
 */
    __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_ptDinfo, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 702, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 702, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "graph.pyx":703
 *                 cZ  = ptDcoord[2],
 *                 w   = ptDinfo[2],
 *                 c   = ptDinfo[3])             # <<<<<<<<<<<<<<
 * 
 *         # adding edge
 */
    __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_ptDinfo, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 703, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_6 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 703, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "graph.pyx":697
 *         if self._nodesIds[ptDinfo[0]] == -1:
 *             ptDcoord = ptDinfo[1]
 *             self.C_addNode(             # <<<<<<<<<<<<<<
 *                 idx = ptDinfo[0],
 *                 cX  = ptDcoord[0],
 */
    __pyx_t_8.__pyx_n = 3;
    __pyx_t_8.cZ = (__pyx_v_ptDcoord[2]);
    __pyx_t_8.w = __pyx_t_7;
    __pyx_t_8.c = __pyx_t_6;
    ((struct __pyx_vtabstruct_5graph_GraphCy *)__pyx_v_self->__pyx_vtab)->C_addNode(__pyx_v_self, __pyx_t_5, (__pyx_v_ptDcoord[0]), (__pyx_v_ptDcoord[1]), &__pyx_t_8); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 697, __pyx_L1_error)

    /* "graph.pyx":695
 *                 c   = ptOinfo[3])
 * 
 *         if self._nodesIds[ptDinfo[0]] == -1:             # <<<<<<<<<<<<<<
 *             ptDcoord = ptDinfo[1]
 *             self.C_addNode(
 */
  }

  /* "graph.pyx":707
 *         # adding edge
 *         self.C_addEdge(
 *             idx = lninfo[0],             # <<<<<<<<<<<<<<
 *             NidO = ptOinfo[0],
 *             NidD = ptDinfo[0],
 */
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_lninfo, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 707, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 707, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "graph.pyx":708
 *         self.C_addEdge(
 *             idx = lninfo[0],
 *             NidO = ptOinfo[0],             # <<<<<<<<<<<<<<
 *             NidD = ptDinfo[0],
 *             len = lninfo[1],
 */
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_ptOinfo, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 708, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "graph.pyx":709
 *             idx = lninfo[0],
 *             NidO = ptOinfo[0],
 *             NidD = ptDinfo[0],             # <<<<<<<<<<<<<<
 *             len = lninfo[1],
 *             lenR = lninfo[2],
 */
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_ptDinfo, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 709, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 709, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "graph.pyx":710
 *             NidO = ptOinfo[0],
 *             NidD = ptDinfo[0],
 *             len = lninfo[1],             # <<<<<<<<<<<<<<
 *             lenR = lninfo[2],
 *             w = lninfo[3])
 */
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_lninfo, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_6 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 710, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "graph.pyx":711
 *             NidD = ptDinfo[0],
 *             len = lninfo[1],
 *             lenR = lninfo[2],             # <<<<<<<<<<<<<<
 *             w = lninfo[3])
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_lninfo, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 711, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "graph.pyx":712
 *             len = lninfo[1],
 *             lenR = lninfo[2],
 *             w = lninfo[3])             # <<<<<<<<<<<<<<
 * 
 *     def addNode(self, ptinfo:tuple) -> None:
 */
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_lninfo, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 712, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 712, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "graph.pyx":706
 * 
 *         # adding edge
 *         self.C_addEdge(             # <<<<<<<<<<<<<<
 *             idx = lninfo[0],
 *             NidO = ptOinfo[0],
 */
  ((struct __pyx_vtabstruct_5graph_GraphCy *)__pyx_v_self->__pyx_vtab)->C_addEdge(__pyx_v_self, __pyx_t_5, __pyx_t_9, __pyx_t_10, __pyx_t_6, __pyx_t_7, __pyx_t_11); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 706, __pyx_L1_error)

  /* "graph.pyx":677
 *         self._edgesIds[idx] = idx
 * 
 *     def addEdge(self, ptOinfo:tuple, ptDinfo:tuple, lninfo:tuple) -> None:             # <<<<<<<<<<<<<<
 *         # input of endpoints and line
 *         # input tuple information structure:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("graph.GraphCy.addEdge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":714
 *             w = lninfo[3])
 * 
 *     def addNode(self, ptinfo:tuple) -> None:             # <<<<<<<<<<<<<<
 *         cdef float[3] ptOcoord
 *         if self._nodesIds[ptinfo[0]] == -1:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5graph_7GraphCy_25addNode(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5graph_7GraphCy_25addNode = {"addNode", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_25addNode, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5graph_7GraphCy_25addNode(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_ptinfo = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addNode (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ptinfo,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ptinfo)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 714, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "addNode") < 0)) __PYX_ERR(0, 714, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_ptinfo = ((PyObject*)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addNode", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 714, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("graph.GraphCy.addNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ptinfo), (&PyTuple_Type), 0, "ptinfo", 1))) __PYX_ERR(0, 714, __pyx_L1_error)
  __pyx_r = __pyx_pf_5graph_7GraphCy_24addNode(((struct __pyx_obj_5graph_GraphCy *)__pyx_v_self), __pyx_v_ptinfo);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5graph_7GraphCy_24addNode(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, PyObject *__pyx_v_ptinfo) {
  float __pyx_v_ptOcoord[3];
  PyObject *__pyx_v_coord = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  float *__pyx_t_4;
  float __pyx_t_5;
  float __pyx_t_6;
  float __pyx_t_7;
  float __pyx_t_8[3];
  int __pyx_t_9;
  struct __pyx_opt_args_5graph_7GraphCy_C_addNode __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addNode", 1);

  /* "graph.pyx":716
 *     def addNode(self, ptinfo:tuple) -> None:
 *         cdef float[3] ptOcoord
 *         if self._nodesIds[ptinfo[0]] == -1:             # <<<<<<<<<<<<<<
 *             coord = ptinfo[1]
 *             if len(coord) == 2: # if 2d point turn into 3d
 */
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_ptinfo, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 716, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((__pyx_v_self->_nodesIds[__pyx_t_2]) == -1L);
  if (__pyx_t_3) {

    /* "graph.pyx":717
 *         cdef float[3] ptOcoord
 *         if self._nodesIds[ptinfo[0]] == -1:
 *             coord = ptinfo[1]             # <<<<<<<<<<<<<<
 *             if len(coord) == 2: # if 2d point turn into 3d
 *                 ptOcoord = (coord[0], coord[1], 0.0)
 */
    __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_ptinfo, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 717, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_coord = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "graph.pyx":718
 *         if self._nodesIds[ptinfo[0]] == -1:
 *             coord = ptinfo[1]
 *             if len(coord) == 2: # if 2d point turn into 3d             # <<<<<<<<<<<<<<
 *                 ptOcoord = (coord[0], coord[1], 0.0)
 *             else:
 */
    __pyx_t_2 = PyObject_Length(__pyx_v_coord); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 718, __pyx_L1_error)
    __pyx_t_3 = (__pyx_t_2 == 2);
    if (__pyx_t_3) {

      /* "graph.pyx":719
 *             coord = ptinfo[1]
 *             if len(coord) == 2: # if 2d point turn into 3d
 *                 ptOcoord = (coord[0], coord[1], 0.0)             # <<<<<<<<<<<<<<
 *             else:
 *                 ptOcoord = coord
 */
      __pyx_t_4 = __pyx_v_ptOcoord;
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_coord, 0, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 719, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_5 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 719, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_coord, 1, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 719, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_6 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 719, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_7 = 0.0;
      (__pyx_t_4[0]) = __pyx_t_5;
      (__pyx_t_4[1]) = __pyx_t_6;
      (__pyx_t_4[2]) = __pyx_t_7;

      /* "graph.pyx":718
 *         if self._nodesIds[ptinfo[0]] == -1:
 *             coord = ptinfo[1]
 *             if len(coord) == 2: # if 2d point turn into 3d             # <<<<<<<<<<<<<<
 *                 ptOcoord = (coord[0], coord[1], 0.0)
 *             else:
 */
      goto __pyx_L4;
    }

    /* "graph.pyx":721
 *                 ptOcoord = (coord[0], coord[1], 0.0)
 *             else:
 *                 ptOcoord = coord             # <<<<<<<<<<<<<<
 *             self.C_addNode(
 *                 idx = ptinfo[0],
 */
    /*else*/ {
      if (unlikely((__Pyx_carray_from_py_float(__pyx_v_coord, __pyx_t_8, 3) < 0))) __PYX_ERR(0, 721, __pyx_L1_error)
      memcpy(&(__pyx_v_ptOcoord[0]), __pyx_t_8, sizeof(__pyx_v_ptOcoord[0]) * (3));
    }
    __pyx_L4:;

    /* "graph.pyx":723
 *                 ptOcoord = coord
 *             self.C_addNode(
 *                 idx = ptinfo[0],             # <<<<<<<<<<<<<<
 *                 cX  = ptOcoord[0],
 *                 cY  = ptOcoord[1],
 */
    __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_ptinfo, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 723, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 723, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "graph.pyx":727
 *                 cY  = ptOcoord[1],
 *                 cZ  = ptOcoord[2],
 *                 w   = ptinfo[2],             # <<<<<<<<<<<<<<
 *                 c   = ptinfo[3])
 * 
 */
    __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_ptinfo, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 727, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 727, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "graph.pyx":728
 *                 cZ  = ptOcoord[2],
 *                 w   = ptinfo[2],
 *                 c   = ptinfo[3])             # <<<<<<<<<<<<<<
 * 
 *     def changeNode(self, ptinfo:tuple) -> None:
 */
    __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_ptinfo, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 728, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_6 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 728, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "graph.pyx":722
 *             else:
 *                 ptOcoord = coord
 *             self.C_addNode(             # <<<<<<<<<<<<<<
 *                 idx = ptinfo[0],
 *                 cX  = ptOcoord[0],
 */
    __pyx_t_10.__pyx_n = 3;
    __pyx_t_10.cZ = (__pyx_v_ptOcoord[2]);
    __pyx_t_10.w = __pyx_t_7;
    __pyx_t_10.c = __pyx_t_6;
    ((struct __pyx_vtabstruct_5graph_GraphCy *)__pyx_v_self->__pyx_vtab)->C_addNode(__pyx_v_self, __pyx_t_9, (__pyx_v_ptOcoord[0]), (__pyx_v_ptOcoord[1]), &__pyx_t_10); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 722, __pyx_L1_error)

    /* "graph.pyx":716
 *     def addNode(self, ptinfo:tuple) -> None:
 *         cdef float[3] ptOcoord
 *         if self._nodesIds[ptinfo[0]] == -1:             # <<<<<<<<<<<<<<
 *             coord = ptinfo[1]
 *             if len(coord) == 2: # if 2d point turn into 3d
 */
  }

  /* "graph.pyx":714
 *             w = lninfo[3])
 * 
 *     def addNode(self, ptinfo:tuple) -> None:             # <<<<<<<<<<<<<<
 *         cdef float[3] ptOcoord
 *         if self._nodesIds[ptinfo[0]] == -1:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("graph.GraphCy.addNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_coord);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":730
 *                 c   = ptinfo[3])
 * 
 *     def changeNode(self, ptinfo:tuple) -> None:             # <<<<<<<<<<<<<<
 *         cdef float[3] ptOcoord
 *         coord = ptinfo[1]
 */

/* Python wrapper */
static PyObject *__pyx_pw_5graph_7GraphCy_27changeNode(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5graph_7GraphCy_27changeNode = {"changeNode", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_27changeNode, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5graph_7GraphCy_27changeNode(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_ptinfo = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("changeNode (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ptinfo,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ptinfo)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 730, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "changeNode") < 0)) __PYX_ERR(0, 730, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_ptinfo = ((PyObject*)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("changeNode", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 730, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("graph.GraphCy.changeNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ptinfo), (&PyTuple_Type), 0, "ptinfo", 1))) __PYX_ERR(0, 730, __pyx_L1_error)
  __pyx_r = __pyx_pf_5graph_7GraphCy_26changeNode(((struct __pyx_obj_5graph_GraphCy *)__pyx_v_self), __pyx_v_ptinfo);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5graph_7GraphCy_26changeNode(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, PyObject *__pyx_v_ptinfo) {
  float __pyx_v_ptOcoord[3];
  PyObject *__pyx_v_coord = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  float *__pyx_t_4;
  float __pyx_t_5;
  float __pyx_t_6;
  float __pyx_t_7;
  float __pyx_t_8[3];
  int __pyx_t_9;
  struct __pyx_opt_args_5graph_7GraphCy_C_addNode __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("changeNode", 1);

  /* "graph.pyx":732
 *     def changeNode(self, ptinfo:tuple) -> None:
 *         cdef float[3] ptOcoord
 *         coord = ptinfo[1]             # <<<<<<<<<<<<<<
 *         if len(coord) == 2: # if 2d point turn into 3d
 *             ptOcoord = (coord[0], coord[1], 0.0)
 */
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_ptinfo, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 732, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_coord = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "graph.pyx":733
 *         cdef float[3] ptOcoord
 *         coord = ptinfo[1]
 *         if len(coord) == 2: # if 2d point turn into 3d             # <<<<<<<<<<<<<<
 *             ptOcoord = (coord[0], coord[1], 0.0)
 *         else:
 */
  __pyx_t_2 = PyObject_Length(__pyx_v_coord); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 733, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_2 == 2);
  if (__pyx_t_3) {

    /* "graph.pyx":734
 *         coord = ptinfo[1]
 *         if len(coord) == 2: # if 2d point turn into 3d
 *             ptOcoord = (coord[0], coord[1], 0.0)             # <<<<<<<<<<<<<<
 *         else:
 *             ptOcoord = coord
 */
    __pyx_t_4 = __pyx_v_ptOcoord;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_coord, 0, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 734, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_5 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 734, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_coord, 1, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 734, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_6 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 734, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = 0.0;
    (__pyx_t_4[0]) = __pyx_t_5;
    (__pyx_t_4[1]) = __pyx_t_6;
    (__pyx_t_4[2]) = __pyx_t_7;

    /* "graph.pyx":733
 *         cdef float[3] ptOcoord
 *         coord = ptinfo[1]
 *         if len(coord) == 2: # if 2d point turn into 3d             # <<<<<<<<<<<<<<
 *             ptOcoord = (coord[0], coord[1], 0.0)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "graph.pyx":736
 *             ptOcoord = (coord[0], coord[1], 0.0)
 *         else:
 *             ptOcoord = coord             # <<<<<<<<<<<<<<
 *         self.C_addNode(
 *             idx = ptinfo[0],
 */
  /*else*/ {
    if (unlikely((__Pyx_carray_from_py_float(__pyx_v_coord, __pyx_t_8, 3) < 0))) __PYX_ERR(0, 736, __pyx_L1_error)
    memcpy(&(__pyx_v_ptOcoord[0]), __pyx_t_8, sizeof(__pyx_v_ptOcoord[0]) * (3));
  }
  __pyx_L3:;

  /* "graph.pyx":738
 *             ptOcoord = coord
 *         self.C_addNode(
 *             idx = ptinfo[0],             # <<<<<<<<<<<<<<
 *             cX  = ptOcoord[0],
 *             cY  = ptOcoord[1],
 */
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_ptinfo, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 738, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "graph.pyx":742
 *             cY  = ptOcoord[1],
 *             cZ  = ptOcoord[2],
 *             w   = ptinfo[2],             # <<<<<<<<<<<<<<
 *             c   = ptinfo[3])
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_ptinfo, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 742, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 742, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "graph.pyx":743
 *             cZ  = ptOcoord[2],
 *             w   = ptinfo[2],
 *             c   = ptinfo[3])             # <<<<<<<<<<<<<<
 * 
 *     def addEdgefromNodes(self, ptOid:int, ptDid:int, lninfo:tuple) -> None:
 */
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_ptinfo, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_6 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 743, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "graph.pyx":737
 *         else:
 *             ptOcoord = coord
 *         self.C_addNode(             # <<<<<<<<<<<<<<
 *             idx = ptinfo[0],
 *             cX  = ptOcoord[0],
 */
  __pyx_t_10.__pyx_n = 3;
  __pyx_t_10.cZ = (__pyx_v_ptOcoord[2]);
  __pyx_t_10.w = __pyx_t_7;
  __pyx_t_10.c = __pyx_t_6;
  ((struct __pyx_vtabstruct_5graph_GraphCy *)__pyx_v_self->__pyx_vtab)->C_addNode(__pyx_v_self, __pyx_t_9, (__pyx_v_ptOcoord[0]), (__pyx_v_ptOcoord[1]), &__pyx_t_10); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 737, __pyx_L1_error)

  /* "graph.pyx":730
 *                 c   = ptinfo[3])
 * 
 *     def changeNode(self, ptinfo:tuple) -> None:             # <<<<<<<<<<<<<<
 *         cdef float[3] ptOcoord
 *         coord = ptinfo[1]
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("graph.GraphCy.changeNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_coord);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":745
 *             c   = ptinfo[3])
 * 
 *     def addEdgefromNodes(self, ptOid:int, ptDid:int, lninfo:tuple) -> None:             # <<<<<<<<<<<<<<
 *         # making sure the connecting nodes already exist
 *         if self._nodesIds[ptOid] != -1 and self._nodesIds[ptDid] != -1:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5graph_7GraphCy_29addEdgefromNodes(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5graph_7GraphCy_29addEdgefromNodes = {"addEdgefromNodes", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_29addEdgefromNodes, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5graph_7GraphCy_29addEdgefromNodes(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_ptOid = 0;
  PyObject *__pyx_v_ptDid = 0;
  PyObject *__pyx_v_lninfo = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addEdgefromNodes (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ptOid,&__pyx_n_s_ptDid,&__pyx_n_s_lninfo,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ptOid)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 745, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ptDid)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 745, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("addEdgefromNodes", 1, 3, 3, 1); __PYX_ERR(0, 745, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_lninfo)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 745, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("addEdgefromNodes", 1, 3, 3, 2); __PYX_ERR(0, 745, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "addEdgefromNodes") < 0)) __PYX_ERR(0, 745, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_ptOid = ((PyObject*)values[0]);
    __pyx_v_ptDid = ((PyObject*)values[1]);
    __pyx_v_lninfo = ((PyObject*)values[2]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addEdgefromNodes", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 745, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("graph.GraphCy.addEdgefromNodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ptOid), (&PyInt_Type), 0, "ptOid", 1))) __PYX_ERR(0, 745, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ptDid), (&PyInt_Type), 0, "ptDid", 1))) __PYX_ERR(0, 745, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_lninfo), (&PyTuple_Type), 0, "lninfo", 1))) __PYX_ERR(0, 745, __pyx_L1_error)
  __pyx_r = __pyx_pf_5graph_7GraphCy_28addEdgefromNodes(((struct __pyx_obj_5graph_GraphCy *)__pyx_v_self), __pyx_v_ptOid, __pyx_v_ptDid, __pyx_v_lninfo);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5graph_7GraphCy_28addEdgefromNodes(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, PyObject *__pyx_v_ptOid, PyObject *__pyx_v_ptDid, PyObject *__pyx_v_lninfo) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  float __pyx_t_9;
  float __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addEdgefromNodes", 1);

  /* "graph.pyx":747
 *     def addEdgefromNodes(self, ptOid:int, ptDid:int, lninfo:tuple) -> None:
 *         # making sure the connecting nodes already exist
 *         if self._nodesIds[ptOid] != -1 and self._nodesIds[ptDid] != -1:             # <<<<<<<<<<<<<<
 *             self.C_addEdge(
 *                 idx = lninfo[0],
 */
  __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ptOid); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 747, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_v_self->_nodesIds[__pyx_t_2]) != -1L);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ptDid); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 747, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_v_self->_nodesIds[__pyx_t_2]) != -1L);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "graph.pyx":749
 *         if self._nodesIds[ptOid] != -1 and self._nodesIds[ptDid] != -1:
 *             self.C_addEdge(
 *                 idx = lninfo[0],             # <<<<<<<<<<<<<<
 *                 NidO = ptOid,
 *                 NidD = ptDid,
 */
    __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_lninfo, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 749, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 749, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "graph.pyx":750
 *             self.C_addEdge(
 *                 idx = lninfo[0],
 *                 NidO = ptOid,             # <<<<<<<<<<<<<<
 *                 NidD = ptDid,
 *                 len = lninfo[1],
 */
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_ptOid); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 750, __pyx_L1_error)

    /* "graph.pyx":751
 *                 idx = lninfo[0],
 *                 NidO = ptOid,
 *                 NidD = ptDid,             # <<<<<<<<<<<<<<
 *                 len = lninfo[1],
 *                 lenR = lninfo[2],
 */
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_ptDid); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 751, __pyx_L1_error)

    /* "graph.pyx":752
 *                 NidO = ptOid,
 *                 NidD = ptDid,
 *                 len = lninfo[1],             # <<<<<<<<<<<<<<
 *                 lenR = lninfo[2],
 *                 w = lninfo[3])
 */
    __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_lninfo, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 752, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_4); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 752, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "graph.pyx":753
 *                 NidD = ptDid,
 *                 len = lninfo[1],
 *                 lenR = lninfo[2],             # <<<<<<<<<<<<<<
 *                 w = lninfo[3])
 * 
 */
    __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_lninfo, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 753, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_t_4); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 753, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "graph.pyx":754
 *                 len = lninfo[1],
 *                 lenR = lninfo[2],
 *                 w = lninfo[3])             # <<<<<<<<<<<<<<
 * 
 *     def addNodes(self, ptsinfo:tuple) -> None:
 */
    __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_lninfo, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 754, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_t_4); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 754, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "graph.pyx":748
 *         # making sure the connecting nodes already exist
 *         if self._nodesIds[ptOid] != -1 and self._nodesIds[ptDid] != -1:
 *             self.C_addEdge(             # <<<<<<<<<<<<<<
 *                 idx = lninfo[0],
 *                 NidO = ptOid,
 */
    ((struct __pyx_vtabstruct_5graph_GraphCy *)__pyx_v_self->__pyx_vtab)->C_addEdge(__pyx_v_self, __pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 748, __pyx_L1_error)

    /* "graph.pyx":747
 *     def addEdgefromNodes(self, ptOid:int, ptDid:int, lninfo:tuple) -> None:
 *         # making sure the connecting nodes already exist
 *         if self._nodesIds[ptOid] != -1 and self._nodesIds[ptDid] != -1:             # <<<<<<<<<<<<<<
 *             self.C_addEdge(
 *                 idx = lninfo[0],
 */
  }

  /* "graph.pyx":745
 *             c   = ptinfo[3])
 * 
 *     def addEdgefromNodes(self, ptOid:int, ptDid:int, lninfo:tuple) -> None:             # <<<<<<<<<<<<<<
 *         # making sure the connecting nodes already exist
 *         if self._nodesIds[ptOid] != -1 and self._nodesIds[ptDid] != -1:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("graph.GraphCy.addEdgefromNodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":756
 *                 w = lninfo[3])
 * 
 *     def addNodes(self, ptsinfo:tuple) -> None:             # <<<<<<<<<<<<<<
 *         cdef float[3] ptOcoord
 *         cdef bint threeD = True
 */

/* Python wrapper */
static PyObject *__pyx_pw_5graph_7GraphCy_31addNodes(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5graph_7GraphCy_31addNodes = {"addNodes", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_31addNodes, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5graph_7GraphCy_31addNodes(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_ptsinfo = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addNodes (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ptsinfo,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ptsinfo)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 756, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "addNodes") < 0)) __PYX_ERR(0, 756, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_ptsinfo = ((PyObject*)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addNodes", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 756, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("graph.GraphCy.addNodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ptsinfo), (&PyTuple_Type), 0, "ptsinfo", 1))) __PYX_ERR(0, 756, __pyx_L1_error)
  __pyx_r = __pyx_pf_5graph_7GraphCy_30addNodes(((struct __pyx_obj_5graph_GraphCy *)__pyx_v_self), __pyx_v_ptsinfo);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5graph_7GraphCy_30addNodes(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, PyObject *__pyx_v_ptsinfo) {
  float __pyx_v_ptOcoord[3];
  int __pyx_v_threeD;
  PyObject *__pyx_v_pt = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  float __pyx_t_6[3];
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  float __pyx_t_9;
  float __pyx_t_10;
  struct __pyx_opt_args_5graph_7GraphCy_C_addNode __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addNodes", 1);

  /* "graph.pyx":758
 *     def addNodes(self, ptsinfo:tuple) -> None:
 *         cdef float[3] ptOcoord
 *         cdef bint threeD = True             # <<<<<<<<<<<<<<
 *         if len(ptsinfo[1]) == 2: # if 2d point turn into 3d
 *             threeD = False
 */
  __pyx_v_threeD = 1;

  /* "graph.pyx":759
 *         cdef float[3] ptOcoord
 *         cdef bint threeD = True
 *         if len(ptsinfo[1]) == 2: # if 2d point turn into 3d             # <<<<<<<<<<<<<<
 *             threeD = False
 *         for pt in ptsinfo:
 */
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_ptsinfo, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 == 2);
  if (__pyx_t_3) {

    /* "graph.pyx":760
 *         cdef bint threeD = True
 *         if len(ptsinfo[1]) == 2: # if 2d point turn into 3d
 *             threeD = False             # <<<<<<<<<<<<<<
 *         for pt in ptsinfo:
 *             if self._nodesIds[pt[0]] == -1:
 */
    __pyx_v_threeD = 0;

    /* "graph.pyx":759
 *         cdef float[3] ptOcoord
 *         cdef bint threeD = True
 *         if len(ptsinfo[1]) == 2: # if 2d point turn into 3d             # <<<<<<<<<<<<<<
 *             threeD = False
 *         for pt in ptsinfo:
 */
  }

  /* "graph.pyx":761
 *         if len(ptsinfo[1]) == 2: # if 2d point turn into 3d
 *             threeD = False
 *         for pt in ptsinfo:             # <<<<<<<<<<<<<<
 *             if self._nodesIds[pt[0]] == -1:
 *                 if threeD:
 */
  __pyx_t_1 = __pyx_v_ptsinfo; __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = 0;
  for (;;) {
    {
      Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
      #if !CYTHON_ASSUME_SAFE_MACROS
      if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 761, __pyx_L1_error)
      #endif
      if (__pyx_t_2 >= __pyx_temp) break;
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 761, __pyx_L1_error)
    #else
    __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 761, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_pt, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "graph.pyx":762
 *             threeD = False
 *         for pt in ptsinfo:
 *             if self._nodesIds[pt[0]] == -1:             # <<<<<<<<<<<<<<
 *                 if threeD:
 *                     ptOcoord = pt[1]
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_pt, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 762, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_t_4); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 762, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_3 = ((__pyx_v_self->_nodesIds[__pyx_t_5]) == -1L);
    if (__pyx_t_3) {

      /* "graph.pyx":763
 *         for pt in ptsinfo:
 *             if self._nodesIds[pt[0]] == -1:
 *                 if threeD:             # <<<<<<<<<<<<<<
 *                     ptOcoord = pt[1]
 *                 else:
 */
      if (__pyx_v_threeD) {

        /* "graph.pyx":764
 *             if self._nodesIds[pt[0]] == -1:
 *                 if threeD:
 *                     ptOcoord = pt[1]             # <<<<<<<<<<<<<<
 *                 else:
 *                     ptOcoord = pt[1] + (0.0,)
 */
        __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_pt, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 764, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        if (unlikely((__Pyx_carray_from_py_float(__pyx_t_4, __pyx_t_6, 3) < 0))) __PYX_ERR(0, 764, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        memcpy(&(__pyx_v_ptOcoord[0]), __pyx_t_6, sizeof(__pyx_v_ptOcoord[0]) * (3));

        /* "graph.pyx":763
 *         for pt in ptsinfo:
 *             if self._nodesIds[pt[0]] == -1:
 *                 if threeD:             # <<<<<<<<<<<<<<
 *                     ptOcoord = pt[1]
 *                 else:
 */
        goto __pyx_L7;
      }

      /* "graph.pyx":766
 *                     ptOcoord = pt[1]
 *                 else:
 *                     ptOcoord = pt[1] + (0.0,)             # <<<<<<<<<<<<<<
 *                 self.C_addNode(
 *                     idx = pt[0],
 */
      /*else*/ {
        __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_pt, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 766, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = PyNumber_Add(__pyx_t_4, __pyx_tuple__7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 766, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely((__Pyx_carray_from_py_float(__pyx_t_7, __pyx_t_6, 3) < 0))) __PYX_ERR(0, 766, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        memcpy(&(__pyx_v_ptOcoord[0]), __pyx_t_6, sizeof(__pyx_v_ptOcoord[0]) * (3));
      }
      __pyx_L7:;

      /* "graph.pyx":768
 *                     ptOcoord = pt[1] + (0.0,)
 *                 self.C_addNode(
 *                     idx = pt[0],             # <<<<<<<<<<<<<<
 *                     cX  = ptOcoord[0],
 *                     cY  = ptOcoord[1],
 */
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_pt, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 768, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 768, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "graph.pyx":772
 *                     cY  = ptOcoord[1],
 *                     cZ  = ptOcoord[2],
 *                     w   = pt[2],             # <<<<<<<<<<<<<<
 *                     c   = pt[3])
 * 
 */
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_pt, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 772, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_t_7); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 772, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "graph.pyx":773
 *                     cZ  = ptOcoord[2],
 *                     w   = pt[2],
 *                     c   = pt[3])             # <<<<<<<<<<<<<<
 * 
 *     def fromGeopandas_Edges(self, dfNetwork:gpd.GeoDataFrame,
 */
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_pt, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 773, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_t_7); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 773, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "graph.pyx":767
 *                 else:
 *                     ptOcoord = pt[1] + (0.0,)
 *                 self.C_addNode(             # <<<<<<<<<<<<<<
 *                     idx = pt[0],
 *                     cX  = ptOcoord[0],
 */
      __pyx_t_11.__pyx_n = 3;
      __pyx_t_11.cZ = (__pyx_v_ptOcoord[2]);
      __pyx_t_11.w = __pyx_t_9;
      __pyx_t_11.c = __pyx_t_10;
      ((struct __pyx_vtabstruct_5graph_GraphCy *)__pyx_v_self->__pyx_vtab)->C_addNode(__pyx_v_self, __pyx_t_8, (__pyx_v_ptOcoord[0]), (__pyx_v_ptOcoord[1]), &__pyx_t_11); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 767, __pyx_L1_error)

      /* "graph.pyx":762
 *             threeD = False
 *         for pt in ptsinfo:
 *             if self._nodesIds[pt[0]] == -1:             # <<<<<<<<<<<<<<
 *                 if threeD:
 *                     ptOcoord = pt[1]
 */
    }

    /* "graph.pyx":761
 *         if len(ptsinfo[1]) == 2: # if 2d point turn into 3d
 *             threeD = False
 *         for pt in ptsinfo:             # <<<<<<<<<<<<<<
 *             if self._nodesIds[pt[0]] == -1:
 *                 if threeD:
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "graph.pyx":756
 *                 w = lninfo[3])
 * 
 *     def addNodes(self, ptsinfo:tuple) -> None:             # <<<<<<<<<<<<<<
 *         cdef float[3] ptOcoord
 *         cdef bint threeD = True
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("graph.GraphCy.addNodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pt);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":775
 *                     c   = pt[3])
 * 
 *     def fromGeopandas_Edges(self, dfNetwork:gpd.GeoDataFrame,             # <<<<<<<<<<<<<<
 *         A_Lnlength:str|None = None,
 *         A_LnlengthR:str|None = None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5graph_7GraphCy_33fromGeopandas_Edges(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5graph_7GraphCy_33fromGeopandas_Edges = {"fromGeopandas_Edges", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_33fromGeopandas_Edges, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5graph_7GraphCy_33fromGeopandas_Edges(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_dfNetwork = 0;
  PyObject *__pyx_v_A_Lnlength = 0;
  PyObject *__pyx_v_A_LnlengthR = 0;
  PyObject *__pyx_v_A_LnW = 0;
  PyObject *__pyx_v_A_PtstW = 0;
  PyObject *__pyx_v_A_PtstC = 0;
  PyObject *__pyx_v_A_PtedW = 0;
  PyObject *__pyx_v_A_PtedC = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[8] = {0,0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fromGeopandas_Edges (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dfNetwork,&__pyx_n_s_A_Lnlength,&__pyx_n_s_A_LnlengthR,&__pyx_n_s_A_LnW,&__pyx_n_s_A_PtstW,&__pyx_n_s_A_PtstC,&__pyx_n_s_A_PtedW,&__pyx_n_s_A_PtedC,0};

    /* "graph.pyx":776
 * 
 *     def fromGeopandas_Edges(self, dfNetwork:gpd.GeoDataFrame,
 *         A_Lnlength:str|None = None,             # <<<<<<<<<<<<<<
 *         A_LnlengthR:str|None = None,
 *         A_LnW:str|None = None,
 */
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));

    /* "graph.pyx":777
 *     def fromGeopandas_Edges(self, dfNetwork:gpd.GeoDataFrame,
 *         A_Lnlength:str|None = None,
 *         A_LnlengthR:str|None = None,             # <<<<<<<<<<<<<<
 *         A_LnW:str|None = None,
 *         A_PtstW:str|None = None,
 */
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));

    /* "graph.pyx":778
 *         A_Lnlength:str|None = None,
 *         A_LnlengthR:str|None = None,
 *         A_LnW:str|None = None,             # <<<<<<<<<<<<<<
 *         A_PtstW:str|None = None,
 *         A_PtstC:str|None = None,
 */
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));

    /* "graph.pyx":779
 *         A_LnlengthR:str|None = None,
 *         A_LnW:str|None = None,
 *         A_PtstW:str|None = None,             # <<<<<<<<<<<<<<
 *         A_PtstC:str|None = None,
 *         A_PtedW:str|None = None,
 */
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));

    /* "graph.pyx":780
 *         A_LnW:str|None = None,
 *         A_PtstW:str|None = None,
 *         A_PtstC:str|None = None,             # <<<<<<<<<<<<<<
 *         A_PtedW:str|None = None,
 *         A_PtedC:str|None = None,
 */
    values[5] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));

    /* "graph.pyx":781
 *         A_PtstW:str|None = None,
 *         A_PtstC:str|None = None,
 *         A_PtedW:str|None = None,             # <<<<<<<<<<<<<<
 *         A_PtedC:str|None = None,
 *         ) -> None:
 */
    values[6] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));

    /* "graph.pyx":782
 *         A_PtstC:str|None = None,
 *         A_PtedW:str|None = None,
 *         A_PtedC:str|None = None,             # <<<<<<<<<<<<<<
 *         ) -> None:
 *         # edgesInfo consist of
 */
    values[7] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  8: values[7] = __Pyx_Arg_FASTCALL(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_dfNetwork)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 775, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_A_Lnlength);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 775, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_A_LnlengthR);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 775, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_A_LnW);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 775, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_A_PtstW);
          if (value) { values[4] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 775, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_A_PtstC);
          if (value) { values[5] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 775, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_A_PtedW);
          if (value) { values[6] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 775, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_A_PtedC);
          if (value) { values[7] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 775, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "fromGeopandas_Edges") < 0)) __PYX_ERR(0, 775, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  8: values[7] = __Pyx_Arg_FASTCALL(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_dfNetwork = values[0];
    __pyx_v_A_Lnlength = values[1];
    __pyx_v_A_LnlengthR = values[2];
    __pyx_v_A_LnW = values[3];
    __pyx_v_A_PtstW = values[4];
    __pyx_v_A_PtstC = values[5];
    __pyx_v_A_PtedW = values[6];
    __pyx_v_A_PtedC = values[7];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fromGeopandas_Edges", 0, 1, 8, __pyx_nargs); __PYX_ERR(0, 775, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("graph.GraphCy.fromGeopandas_Edges", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5graph_7GraphCy_32fromGeopandas_Edges(((struct __pyx_obj_5graph_GraphCy *)__pyx_v_self), __pyx_v_dfNetwork, __pyx_v_A_Lnlength, __pyx_v_A_LnlengthR, __pyx_v_A_LnW, __pyx_v_A_PtstW, __pyx_v_A_PtstC, __pyx_v_A_PtedW, __pyx_v_A_PtedC);

  /* "graph.pyx":775
 *                     c   = pt[3])
 * 
 *     def fromGeopandas_Edges(self, dfNetwork:gpd.GeoDataFrame,             # <<<<<<<<<<<<<<
 *         A_Lnlength:str|None = None,
 *         A_LnlengthR:str|None = None,
 */

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5graph_7GraphCy_32fromGeopandas_Edges(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, PyObject *__pyx_v_dfNetwork, PyObject *__pyx_v_A_Lnlength, PyObject *__pyx_v_A_LnlengthR, PyObject *__pyx_v_A_LnW, PyObject *__pyx_v_A_PtstW, PyObject *__pyx_v_A_PtstC, PyObject *__pyx_v_A_PtedW, PyObject *__pyx_v_A_PtedC) {
  int __pyx_v_index;
  struct __pyx_t_5graph_Point3d __pyx_v_lnSt;
  struct __pyx_t_5graph_Point3d __pyx_v_lnEd;
  std::vector<struct __pyx_t_5graph_Point3d>  __pyx_v_pointCoords;
  int __pyx_v_pointidCnt;
  int __pyx_v_edgeidCnt;
  int __pyx_v_idSt;
  int __pyx_v_idEd;
  int __pyx_v_State_3d;
  int __pyx_v_ckSt;
  int __pyx_v_dfSize;
  PyObject *__pyx_v_dfKeys = NULL;
  PyObject *__pyx_v_Lnlength = NULL;
  PyObject *__pyx_v_LnlengthR = NULL;
  PyObject *__pyx_v_LnW = NULL;
  PyObject *__pyx_v_PtstW = NULL;
  PyObject *__pyx_v_PtstC = NULL;
  PyObject *__pyx_v_PtedW = NULL;
  PyObject *__pyx_v_PtedC = NULL;
  PyObject *__pyx_v_row = NULL;
  int __pyx_v_ckEd;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  float __pyx_t_11;
  float __pyx_t_12;
  float __pyx_t_13;
  struct __pyx_t_5graph_Point3d __pyx_t_14;
  struct __pyx_opt_args_5graph_MakePoint3d __pyx_t_15;
  struct __pyx_opt_args_5graph_7GraphCy_C_addNode __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fromGeopandas_Edges", 1);

  /* "graph.pyx":790
 *         cdef Point3d lnEd
 *         cdef vector[Point3d] pointCoords
 *         cdef int pointidCnt = 0             # <<<<<<<<<<<<<<
 *         cdef int edgeidCnt = 0
 *         cdef int idSt
 */
  __pyx_v_pointidCnt = 0;

  /* "graph.pyx":791
 *         cdef vector[Point3d] pointCoords
 *         cdef int pointidCnt = 0
 *         cdef int edgeidCnt = 0             # <<<<<<<<<<<<<<
 *         cdef int idSt
 *         cdef int idEd
 */
  __pyx_v_edgeidCnt = 0;

  /* "graph.pyx":794
 *         cdef int idSt
 *         cdef int idEd
 *         cdef bint State_3d = True             # <<<<<<<<<<<<<<
 *         cdef int ckSt
 *         cdef int dfSize = int(dfNetwork.size)
 */
  __pyx_v_State_3d = 1;

  /* "graph.pyx":796
 *         cdef bint State_3d = True
 *         cdef int ckSt
 *         cdef int dfSize = int(dfNetwork.size)             # <<<<<<<<<<<<<<
 * 
 *         dfKeys = tuple(dfNetwork.columns)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_dfNetwork, __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 796, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_dfSize = __pyx_t_3;

  /* "graph.pyx":798
 *         cdef int dfSize = int(dfNetwork.size)
 * 
 *         dfKeys = tuple(dfNetwork.columns)             # <<<<<<<<<<<<<<
 *         # checking if fields exists
 *         if A_Lnlength != None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_dfNetwork, __pyx_n_s_columns); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 798, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PySequence_Tuple(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 798, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_dfKeys = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "graph.pyx":800
 *         dfKeys = tuple(dfNetwork.columns)
 *         # checking if fields exists
 *         if A_Lnlength != None:             # <<<<<<<<<<<<<<
 *             if A_Lnlength not in dfKeys:
 *                 print('Atribute for line length not found, using geometric weight')
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_A_Lnlength, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 800, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 800, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "graph.pyx":801
 *         # checking if fields exists
 *         if A_Lnlength != None:
 *             if A_Lnlength not in dfKeys:             # <<<<<<<<<<<<<<
 *                 print('Atribute for line length not found, using geometric weight')
 *                 Lnlength = tuple(dfNetwork.geometry.length)
 */
    __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_v_A_Lnlength, __pyx_v_dfKeys, Py_NE)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 801, __pyx_L1_error)
    if (__pyx_t_4) {

      /* "graph.pyx":802
 *         if A_Lnlength != None:
 *             if A_Lnlength not in dfKeys:
 *                 print('Atribute for line length not found, using geometric weight')             # <<<<<<<<<<<<<<
 *                 Lnlength = tuple(dfNetwork.geometry.length)
 *             else:
 */
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 802, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "graph.pyx":803
 *             if A_Lnlength not in dfKeys:
 *                 print('Atribute for line length not found, using geometric weight')
 *                 Lnlength = tuple(dfNetwork.geometry.length)             # <<<<<<<<<<<<<<
 *             else:
 *                 Lnlength = tuple(dfNetwork[A_Lnlength])
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_dfNetwork, __pyx_n_s_geometry); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 803, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_length); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 803, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PySequence_Tuple(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 803, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_Lnlength = ((PyObject*)__pyx_t_1);
      __pyx_t_1 = 0;

      /* "graph.pyx":801
 *         # checking if fields exists
 *         if A_Lnlength != None:
 *             if A_Lnlength not in dfKeys:             # <<<<<<<<<<<<<<
 *                 print('Atribute for line length not found, using geometric weight')
 *                 Lnlength = tuple(dfNetwork.geometry.length)
 */
      goto __pyx_L4;
    }

    /* "graph.pyx":805
 *                 Lnlength = tuple(dfNetwork.geometry.length)
 *             else:
 *                 Lnlength = tuple(dfNetwork[A_Lnlength])             # <<<<<<<<<<<<<<
 *         else:
 *             Lnlength = tuple(dfNetwork.geometry.length)
 */
    /*else*/ {
      __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_dfNetwork, __pyx_v_A_Lnlength); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 805, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PySequence_Tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 805, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_Lnlength = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;
    }
    __pyx_L4:;

    /* "graph.pyx":800
 *         dfKeys = tuple(dfNetwork.columns)
 *         # checking if fields exists
 *         if A_Lnlength != None:             # <<<<<<<<<<<<<<
 *             if A_Lnlength not in dfKeys:
 *                 print('Atribute for line length not found, using geometric weight')
 */
    goto __pyx_L3;
  }

  /* "graph.pyx":807
 *                 Lnlength = tuple(dfNetwork[A_Lnlength])
 *         else:
 *             Lnlength = tuple(dfNetwork.geometry.length)             # <<<<<<<<<<<<<<
 *         if A_LnlengthR != None:
 *             if A_LnlengthR not in dfKeys:
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_dfNetwork, __pyx_n_s_geometry); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 807, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 807, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PySequence_Tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 807, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_Lnlength = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "graph.pyx":808
 *         else:
 *             Lnlength = tuple(dfNetwork.geometry.length)
 *         if A_LnlengthR != None:             # <<<<<<<<<<<<<<
 *             if A_LnlengthR not in dfKeys:
 *                 print('Atribute for line length reverse not found, using same length as lnlength')
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_A_LnlengthR, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 808, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 808, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "graph.pyx":809
 *             Lnlength = tuple(dfNetwork.geometry.length)
 *         if A_LnlengthR != None:
 *             if A_LnlengthR not in dfKeys:             # <<<<<<<<<<<<<<
 *                 print('Atribute for line length reverse not found, using same length as lnlength')
 *                 LnlengthR = Lnlength
 */
    __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_v_A_LnlengthR, __pyx_v_dfKeys, Py_NE)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 809, __pyx_L1_error)
    if (__pyx_t_4) {

      /* "graph.pyx":810
 *         if A_LnlengthR != None:
 *             if A_LnlengthR not in dfKeys:
 *                 print('Atribute for line length reverse not found, using same length as lnlength')             # <<<<<<<<<<<<<<
 *                 LnlengthR = Lnlength
 *             else:
 */
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 810, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "graph.pyx":811
 *             if A_LnlengthR not in dfKeys:
 *                 print('Atribute for line length reverse not found, using same length as lnlength')
 *                 LnlengthR = Lnlength             # <<<<<<<<<<<<<<
 *             else:
 *                 LnlengthR = tuple(dfNetwork[A_LnlengthR])
 */
      __Pyx_INCREF(__pyx_v_Lnlength);
      __pyx_v_LnlengthR = __pyx_v_Lnlength;

      /* "graph.pyx":809
 *             Lnlength = tuple(dfNetwork.geometry.length)
 *         if A_LnlengthR != None:
 *             if A_LnlengthR not in dfKeys:             # <<<<<<<<<<<<<<
 *                 print('Atribute for line length reverse not found, using same length as lnlength')
 *                 LnlengthR = Lnlength
 */
      goto __pyx_L6;
    }

    /* "graph.pyx":813
 *                 LnlengthR = Lnlength
 *             else:
 *                 LnlengthR = tuple(dfNetwork[A_LnlengthR])             # <<<<<<<<<<<<<<
 *         else:
 *             LnlengthR = Lnlength
 */
    /*else*/ {
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_dfNetwork, __pyx_v_A_LnlengthR); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 813, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PySequence_Tuple(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 813, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_LnlengthR = ((PyObject*)__pyx_t_1);
      __pyx_t_1 = 0;
    }
    __pyx_L6:;

    /* "graph.pyx":808
 *         else:
 *             Lnlength = tuple(dfNetwork.geometry.length)
 *         if A_LnlengthR != None:             # <<<<<<<<<<<<<<
 *             if A_LnlengthR not in dfKeys:
 *                 print('Atribute for line length reverse not found, using same length as lnlength')
 */
    goto __pyx_L5;
  }

  /* "graph.pyx":815
 *                 LnlengthR = tuple(dfNetwork[A_LnlengthR])
 *         else:
 *             LnlengthR = Lnlength             # <<<<<<<<<<<<<<
 *         if A_LnW != None:
 *             if A_LnW not in dfKeys:
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_v_Lnlength);
    __pyx_v_LnlengthR = __pyx_v_Lnlength;
  }
  __pyx_L5:;

  /* "graph.pyx":816
 *         else:
 *             LnlengthR = Lnlength
 *         if A_LnW != None:             # <<<<<<<<<<<<<<
 *             if A_LnW not in dfKeys:
 *                 print('Attribute for line weight not found, defaulting to 1.0')
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_A_LnW, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 816, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 816, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "graph.pyx":817
 *             LnlengthR = Lnlength
 *         if A_LnW != None:
 *             if A_LnW not in dfKeys:             # <<<<<<<<<<<<<<
 *                 print('Attribute for line weight not found, defaulting to 1.0')
 *                 LnW = (1.0,)*dfSize
 */
    __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_v_A_LnW, __pyx_v_dfKeys, Py_NE)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 817, __pyx_L1_error)
    if (__pyx_t_4) {

      /* "graph.pyx":818
 *         if A_LnW != None:
 *             if A_LnW not in dfKeys:
 *                 print('Attribute for line weight not found, defaulting to 1.0')             # <<<<<<<<<<<<<<
 *                 LnW = (1.0,)*dfSize
 *             else:
 */
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 818, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "graph.pyx":819
 *             if A_LnW not in dfKeys:
 *                 print('Attribute for line weight not found, defaulting to 1.0')
 *                 LnW = (1.0,)*dfSize             # <<<<<<<<<<<<<<
 *             else:
 *                 LnW = tuple(dfNetwork[A_LnW])
 */
      __pyx_t_1 = __Pyx_PySequence_Multiply(__pyx_tuple__11, __pyx_v_dfSize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 819, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_v_LnW = ((PyObject*)__pyx_t_1);
      __pyx_t_1 = 0;

      /* "graph.pyx":817
 *             LnlengthR = Lnlength
 *         if A_LnW != None:
 *             if A_LnW not in dfKeys:             # <<<<<<<<<<<<<<
 *                 print('Attribute for line weight not found, defaulting to 1.0')
 *                 LnW = (1.0,)*dfSize
 */
      goto __pyx_L8;
    }

    /* "graph.pyx":821
 *                 LnW = (1.0,)*dfSize
 *             else:
 *                 LnW = tuple(dfNetwork[A_LnW])             # <<<<<<<<<<<<<<
 *         else:
 *             LnW = (1.0,)*dfSize
 */
    /*else*/ {
      __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_dfNetwork, __pyx_v_A_LnW); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 821, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PySequence_Tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 821, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_LnW = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;
    }
    __pyx_L8:;

    /* "graph.pyx":816
 *         else:
 *             LnlengthR = Lnlength
 *         if A_LnW != None:             # <<<<<<<<<<<<<<
 *             if A_LnW not in dfKeys:
 *                 print('Attribute for line weight not found, defaulting to 1.0')
 */
    goto __pyx_L7;
  }

  /* "graph.pyx":823
 *                 LnW = tuple(dfNetwork[A_LnW])
 *         else:
 *             LnW = (1.0,)*dfSize             # <<<<<<<<<<<<<<
 *         if A_PtstW != None:
 *             if A_PtstW not in dfKeys:
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PySequence_Multiply(__pyx_tuple__11, __pyx_v_dfSize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 823, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_LnW = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;
  }
  __pyx_L7:;

  /* "graph.pyx":824
 *         else:
 *             LnW = (1.0,)*dfSize
 *         if A_PtstW != None:             # <<<<<<<<<<<<<<
 *             if A_PtstW not in dfKeys:
 *                 print('Edge point start weight attribute not found, defaulting to 1.0')
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_A_PtstW, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 824, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 824, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "graph.pyx":825
 *             LnW = (1.0,)*dfSize
 *         if A_PtstW != None:
 *             if A_PtstW not in dfKeys:             # <<<<<<<<<<<<<<
 *                 print('Edge point start weight attribute not found, defaulting to 1.0')
 *                 PtstW = (1.0,)*dfSize
 */
    __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_v_A_PtstW, __pyx_v_dfKeys, Py_NE)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 825, __pyx_L1_error)
    if (__pyx_t_4) {

      /* "graph.pyx":826
 *         if A_PtstW != None:
 *             if A_PtstW not in dfKeys:
 *                 print('Edge point start weight attribute not found, defaulting to 1.0')             # <<<<<<<<<<<<<<
 *                 PtstW = (1.0,)*dfSize
 *             else:
 */
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 826, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "graph.pyx":827
 *             if A_PtstW not in dfKeys:
 *                 print('Edge point start weight attribute not found, defaulting to 1.0')
 *                 PtstW = (1.0,)*dfSize             # <<<<<<<<<<<<<<
 *             else:
 *                 PtstW = tuple(dfNetwork[A_PtstW])
 */
      __pyx_t_2 = __Pyx_PySequence_Multiply(__pyx_tuple__11, __pyx_v_dfSize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 827, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_v_PtstW = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "graph.pyx":825
 *             LnW = (1.0,)*dfSize
 *         if A_PtstW != None:
 *             if A_PtstW not in dfKeys:             # <<<<<<<<<<<<<<
 *                 print('Edge point start weight attribute not found, defaulting to 1.0')
 *                 PtstW = (1.0,)*dfSize
 */
      goto __pyx_L10;
    }

    /* "graph.pyx":829
 *                 PtstW = (1.0,)*dfSize
 *             else:
 *                 PtstW = tuple(dfNetwork[A_PtstW])             # <<<<<<<<<<<<<<
 *         else:
 *             PtstW = (1.0,)*dfSize
 */
    /*else*/ {
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_dfNetwork, __pyx_v_A_PtstW); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 829, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PySequence_Tuple(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 829, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_PtstW = ((PyObject*)__pyx_t_1);
      __pyx_t_1 = 0;
    }
    __pyx_L10:;

    /* "graph.pyx":824
 *         else:
 *             LnW = (1.0,)*dfSize
 *         if A_PtstW != None:             # <<<<<<<<<<<<<<
 *             if A_PtstW not in dfKeys:
 *                 print('Edge point start weight attribute not found, defaulting to 1.0')
 */
    goto __pyx_L9;
  }

  /* "graph.pyx":831
 *                 PtstW = tuple(dfNetwork[A_PtstW])
 *         else:
 *             PtstW = (1.0,)*dfSize             # <<<<<<<<<<<<<<
 *         if A_PtstC != None:
 *             if A_PtstC not in dfKeys:
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PySequence_Multiply(__pyx_tuple__11, __pyx_v_dfSize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 831, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_PtstW = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;
  }
  __pyx_L9:;

  /* "graph.pyx":832
 *         else:
 *             PtstW = (1.0,)*dfSize
 *         if A_PtstC != None:             # <<<<<<<<<<<<<<
 *             if A_PtstC not in dfKeys:
 *                 print('Edge point start cost attribute not found, defaulting to 0.0')
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_A_PtstC, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 832, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 832, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "graph.pyx":833
 *             PtstW = (1.0,)*dfSize
 *         if A_PtstC != None:
 *             if A_PtstC not in dfKeys:             # <<<<<<<<<<<<<<
 *                 print('Edge point start cost attribute not found, defaulting to 0.0')
 *                 PtstC = (0.0,)*dfSize
 */
    __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_v_A_PtstC, __pyx_v_dfKeys, Py_NE)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 833, __pyx_L1_error)
    if (__pyx_t_4) {

      /* "graph.pyx":834
 *         if A_PtstC != None:
 *             if A_PtstC not in dfKeys:
 *                 print('Edge point start cost attribute not found, defaulting to 0.0')             # <<<<<<<<<<<<<<
 *                 PtstC = (0.0,)*dfSize
 *             else:
 */
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 834, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "graph.pyx":835
 *             if A_PtstC not in dfKeys:
 *                 print('Edge point start cost attribute not found, defaulting to 0.0')
 *                 PtstC = (0.0,)*dfSize             # <<<<<<<<<<<<<<
 *             else:
 *                 PtstC = tuple(dfNetwork[A_PtstC])
 */
      __pyx_t_1 = __Pyx_PySequence_Multiply(__pyx_tuple__7, __pyx_v_dfSize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 835, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_v_PtstC = ((PyObject*)__pyx_t_1);
      __pyx_t_1 = 0;

      /* "graph.pyx":833
 *             PtstW = (1.0,)*dfSize
 *         if A_PtstC != None:
 *             if A_PtstC not in dfKeys:             # <<<<<<<<<<<<<<
 *                 print('Edge point start cost attribute not found, defaulting to 0.0')
 *                 PtstC = (0.0,)*dfSize
 */
      goto __pyx_L12;
    }

    /* "graph.pyx":837
 *                 PtstC = (0.0,)*dfSize
 *             else:
 *                 PtstC = tuple(dfNetwork[A_PtstC])             # <<<<<<<<<<<<<<
 *         else:
 *             PtstC = (0.0,)*dfSize
 */
    /*else*/ {
      __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_dfNetwork, __pyx_v_A_PtstC); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 837, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PySequence_Tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 837, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_PtstC = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;
    }
    __pyx_L12:;

    /* "graph.pyx":832
 *         else:
 *             PtstW = (1.0,)*dfSize
 *         if A_PtstC != None:             # <<<<<<<<<<<<<<
 *             if A_PtstC not in dfKeys:
 *                 print('Edge point start cost attribute not found, defaulting to 0.0')
 */
    goto __pyx_L11;
  }

  /* "graph.pyx":839
 *                 PtstC = tuple(dfNetwork[A_PtstC])
 *         else:
 *             PtstC = (0.0,)*dfSize             # <<<<<<<<<<<<<<
 *         if A_PtedW != None:
 *             if A_PtedW not in dfKeys:
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PySequence_Multiply(__pyx_tuple__7, __pyx_v_dfSize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 839, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_PtstC = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;
  }
  __pyx_L11:;

  /* "graph.pyx":840
 *         else:
 *             PtstC = (0.0,)*dfSize
 *         if A_PtedW != None:             # <<<<<<<<<<<<<<
 *             if A_PtedW not in dfKeys:
 *                 print('Edge point end weight attribute not found, defaulting to 1.0')
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_A_PtedW, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 840, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 840, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "graph.pyx":841
 *             PtstC = (0.0,)*dfSize
 *         if A_PtedW != None:
 *             if A_PtedW not in dfKeys:             # <<<<<<<<<<<<<<
 *                 print('Edge point end weight attribute not found, defaulting to 1.0')
 *                 PtedW = (1.0,)*dfSize
 */
    __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_v_A_PtedW, __pyx_v_dfKeys, Py_NE)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 841, __pyx_L1_error)
    if (__pyx_t_4) {

      /* "graph.pyx":842
 *         if A_PtedW != None:
 *             if A_PtedW not in dfKeys:
 *                 print('Edge point end weight attribute not found, defaulting to 1.0')             # <<<<<<<<<<<<<<
 *                 PtedW = (1.0,)*dfSize
 *             else:
 */
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 842, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "graph.pyx":843
 *             if A_PtedW not in dfKeys:
 *                 print('Edge point end weight attribute not found, defaulting to 1.0')
 *                 PtedW = (1.0,)*dfSize             # <<<<<<<<<<<<<<
 *             else:
 *                 PtedW = tuple(dfNetwork[A_PtedW])
 */
      __pyx_t_2 = __Pyx_PySequence_Multiply(__pyx_tuple__11, __pyx_v_dfSize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 843, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_v_PtedW = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "graph.pyx":841
 *             PtstC = (0.0,)*dfSize
 *         if A_PtedW != None:
 *             if A_PtedW not in dfKeys:             # <<<<<<<<<<<<<<
 *                 print('Edge point end weight attribute not found, defaulting to 1.0')
 *                 PtedW = (1.0,)*dfSize
 */
      goto __pyx_L14;
    }

    /* "graph.pyx":845
 *                 PtedW = (1.0,)*dfSize
 *             else:
 *                 PtedW = tuple(dfNetwork[A_PtedW])             # <<<<<<<<<<<<<<
 *         else:
 *             PtedW = (1.0,)*dfSize
 */
    /*else*/ {
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_dfNetwork, __pyx_v_A_PtedW); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 845, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PySequence_Tuple(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 845, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_PtedW = ((PyObject*)__pyx_t_1);
      __pyx_t_1 = 0;
    }
    __pyx_L14:;

    /* "graph.pyx":840
 *         else:
 *             PtstC = (0.0,)*dfSize
 *         if A_PtedW != None:             # <<<<<<<<<<<<<<
 *             if A_PtedW not in dfKeys:
 *                 print('Edge point end weight attribute not found, defaulting to 1.0')
 */
    goto __pyx_L13;
  }

  /* "graph.pyx":847
 *                 PtedW = tuple(dfNetwork[A_PtedW])
 *         else:
 *             PtedW = (1.0,)*dfSize             # <<<<<<<<<<<<<<
 *         if A_PtedC != None:
 *             if A_PtedC not in dfKeys:
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PySequence_Multiply(__pyx_tuple__11, __pyx_v_dfSize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 847, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_PtedW = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;
  }
  __pyx_L13:;

  /* "graph.pyx":848
 *         else:
 *             PtedW = (1.0,)*dfSize
 *         if A_PtedC != None:             # <<<<<<<<<<<<<<
 *             if A_PtedC not in dfKeys:
 *                 print('Edge point end cost attribute not found, defaulting to 0.0')
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_A_PtedC, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 848, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 848, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "graph.pyx":849
 *             PtedW = (1.0,)*dfSize
 *         if A_PtedC != None:
 *             if A_PtedC not in dfKeys:             # <<<<<<<<<<<<<<
 *                 print('Edge point end cost attribute not found, defaulting to 0.0')
 *                 PtedC = (0.0,)*dfSize
 */
    __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_v_A_PtedC, __pyx_v_dfKeys, Py_NE)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 849, __pyx_L1_error)
    if (__pyx_t_4) {

      /* "graph.pyx":850
 *         if A_PtedC != None:
 *             if A_PtedC not in dfKeys:
 *                 print('Edge point end cost attribute not found, defaulting to 0.0')             # <<<<<<<<<<<<<<
 *                 PtedC = (0.0,)*dfSize
 *             else:
 */
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 850, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "graph.pyx":851
 *             if A_PtedC not in dfKeys:
 *                 print('Edge point end cost attribute not found, defaulting to 0.0')
 *                 PtedC = (0.0,)*dfSize             # <<<<<<<<<<<<<<
 *             else:
 *                 PtedC = tuple(dfNetwork[A_PtedC])
 */
      __pyx_t_1 = __Pyx_PySequence_Multiply(__pyx_tuple__7, __pyx_v_dfSize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 851, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_v_PtedC = ((PyObject*)__pyx_t_1);
      __pyx_t_1 = 0;

      /* "graph.pyx":849
 *             PtedW = (1.0,)*dfSize
 *         if A_PtedC != None:
 *             if A_PtedC not in dfKeys:             # <<<<<<<<<<<<<<
 *                 print('Edge point end cost attribute not found, defaulting to 0.0')
 *                 PtedC = (0.0,)*dfSize
 */
      goto __pyx_L16;
    }

    /* "graph.pyx":853
 *                 PtedC = (0.0,)*dfSize
 *             else:
 *                 PtedC = tuple(dfNetwork[A_PtedC])             # <<<<<<<<<<<<<<
 *         else:
 *             PtedC = (0.0,)*dfSize
 */
    /*else*/ {
      __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_dfNetwork, __pyx_v_A_PtedC); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 853, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PySequence_Tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 853, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_PtedC = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;
    }
    __pyx_L16:;

    /* "graph.pyx":848
 *         else:
 *             PtedW = (1.0,)*dfSize
 *         if A_PtedC != None:             # <<<<<<<<<<<<<<
 *             if A_PtedC not in dfKeys:
 *                 print('Edge point end cost attribute not found, defaulting to 0.0')
 */
    goto __pyx_L15;
  }

  /* "graph.pyx":855
 *                 PtedC = tuple(dfNetwork[A_PtedC])
 *         else:
 *             PtedC = (0.0,)*dfSize             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PySequence_Multiply(__pyx_tuple__7, __pyx_v_dfSize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 855, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_PtedC = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;
  }
  __pyx_L15:;

  /* "graph.pyx":858
 * 
 * 
 *         if len(dfNetwork.geometry[0].coords[0]) == 2:             # <<<<<<<<<<<<<<
 *             State_3d = False # checks dimension
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_dfNetwork, __pyx_n_s_geometry); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_coords); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 858, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = (__pyx_t_5 == 2);
  if (__pyx_t_4) {

    /* "graph.pyx":859
 * 
 *         if len(dfNetwork.geometry[0].coords[0]) == 2:
 *             State_3d = False # checks dimension             # <<<<<<<<<<<<<<
 * 
 *         for index, row in dfNetwork.iterrows():
 */
    __pyx_v_State_3d = 0;

    /* "graph.pyx":858
 * 
 * 
 *         if len(dfNetwork.geometry[0].coords[0]) == 2:             # <<<<<<<<<<<<<<
 *             State_3d = False # checks dimension
 * 
 */
  }

  /* "graph.pyx":861
 *             State_3d = False # checks dimension
 * 
 *         for index, row in dfNetwork.iterrows():             # <<<<<<<<<<<<<<
 *             if State_3d:
 *                 lnSt = MakePoint3d(row.geometry.coords[0][0], row.geometry.coords[0][1], row.geometry.coords[0][2])
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_dfNetwork, __pyx_n_s_iterrows); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 861, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = NULL;
  __pyx_t_3 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_3 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_3, 0+__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 861, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2);
    __pyx_t_5 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 861, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 861, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 861, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 861, __pyx_L1_error)
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 861, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 861, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 861, __pyx_L1_error)
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 861, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_7(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 861, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 861, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_8);
      #else
      __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 861, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 861, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_9 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 861, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_10 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_9);
      index = 0; __pyx_t_6 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_6)) goto __pyx_L20_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      index = 1; __pyx_t_8 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_8)) goto __pyx_L20_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_8);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 2) < 0) __PYX_ERR(0, 861, __pyx_L1_error)
      __pyx_t_10 = NULL;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L21_unpacking_done;
      __pyx_L20_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 861, __pyx_L1_error)
      __pyx_L21_unpacking_done:;
    }
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 861, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_index = __pyx_t_3;
    __Pyx_XDECREF_SET(__pyx_v_row, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "graph.pyx":862
 * 
 *         for index, row in dfNetwork.iterrows():
 *             if State_3d:             # <<<<<<<<<<<<<<
 *                 lnSt = MakePoint3d(row.geometry.coords[0][0], row.geometry.coords[0][1], row.geometry.coords[0][2])
 *                 lnEd = MakePoint3d(row.geometry.coords[-1][0], row.geometry.coords[-1][1], row.geometry.coords[-1][2])
 */
    if (__pyx_v_State_3d) {

      /* "graph.pyx":863
 *         for index, row in dfNetwork.iterrows():
 *             if State_3d:
 *                 lnSt = MakePoint3d(row.geometry.coords[0][0], row.geometry.coords[0][1], row.geometry.coords[0][2])             # <<<<<<<<<<<<<<
 *                 lnEd = MakePoint3d(row.geometry.coords[-1][0], row.geometry.coords[-1][1], row.geometry.coords[-1][2])
 *             else: # for 2d points, appending 3d
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_row, __pyx_n_s_geometry); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 863, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_coords); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 863, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_8, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 863, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 863, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_t_8); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 863, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_row, __pyx_n_s_geometry); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 863, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_coords); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 863, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 863, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_8, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 863, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_12 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_12 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 863, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_row, __pyx_n_s_geometry); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 863, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_coords); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 863, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_8, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 863, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_1, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 863, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_13 = __pyx_PyFloat_AsFloat(__pyx_t_8); if (unlikely((__pyx_t_13 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 863, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_15.__pyx_n = 1;
      __pyx_t_15.z = __pyx_t_13;
      __pyx_t_14 = __pyx_f_5graph_MakePoint3d(__pyx_t_11, __pyx_t_12, &__pyx_t_15); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 863, __pyx_L1_error)
      __pyx_v_lnSt = __pyx_t_14;

      /* "graph.pyx":864
 *             if State_3d:
 *                 lnSt = MakePoint3d(row.geometry.coords[0][0], row.geometry.coords[0][1], row.geometry.coords[0][2])
 *                 lnEd = MakePoint3d(row.geometry.coords[-1][0], row.geometry.coords[-1][1], row.geometry.coords[-1][2])             # <<<<<<<<<<<<<<
 *             else: # for 2d points, appending 3d
 *                 lnSt = MakePoint3d(row.geometry.coords[0][0], row.geometry.coords[0][1], 0.0)
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_row, __pyx_n_s_geometry); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 864, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_coords); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 864, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_1, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 864, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_8, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 864, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_13 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_13 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 864, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_row, __pyx_n_s_geometry); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 864, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_coords); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 864, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_8, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 864, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 864, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_12 = __pyx_PyFloat_AsFloat(__pyx_t_8); if (unlikely((__pyx_t_12 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 864, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_row, __pyx_n_s_geometry); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 864, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_coords); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 864, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_1, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 864, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_8, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 864, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 864, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_15.__pyx_n = 1;
      __pyx_t_15.z = __pyx_t_11;
      __pyx_t_14 = __pyx_f_5graph_MakePoint3d(__pyx_t_13, __pyx_t_12, &__pyx_t_15); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 864, __pyx_L1_error)
      __pyx_v_lnEd = __pyx_t_14;

      /* "graph.pyx":862
 * 
 *         for index, row in dfNetwork.iterrows():
 *             if State_3d:             # <<<<<<<<<<<<<<
 *                 lnSt = MakePoint3d(row.geometry.coords[0][0], row.geometry.coords[0][1], row.geometry.coords[0][2])
 *                 lnEd = MakePoint3d(row.geometry.coords[-1][0], row.geometry.coords[-1][1], row.geometry.coords[-1][2])
 */
      goto __pyx_L22;
    }

    /* "graph.pyx":866
 *                 lnEd = MakePoint3d(row.geometry.coords[-1][0], row.geometry.coords[-1][1], row.geometry.coords[-1][2])
 *             else: # for 2d points, appending 3d
 *                 lnSt = MakePoint3d(row.geometry.coords[0][0], row.geometry.coords[0][1], 0.0)             # <<<<<<<<<<<<<<
 *                 lnEd = MakePoint3d(row.geometry.coords[-1][0], row.geometry.coords[-1][1], 0.0)
 * 
 */
    /*else*/ {
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_row, __pyx_n_s_geometry); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 866, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_coords); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 866, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_8, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 866, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 866, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_t_8); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 866, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_row, __pyx_n_s_geometry); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 866, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_coords); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 866, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 866, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_8, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 866, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_12 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_12 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 866, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_15.__pyx_n = 1;
      __pyx_t_15.z = 0.0;
      __pyx_t_14 = __pyx_f_5graph_MakePoint3d(__pyx_t_11, __pyx_t_12, &__pyx_t_15); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 866, __pyx_L1_error)
      __pyx_v_lnSt = __pyx_t_14;

      /* "graph.pyx":867
 *             else: # for 2d points, appending 3d
 *                 lnSt = MakePoint3d(row.geometry.coords[0][0], row.geometry.coords[0][1], 0.0)
 *                 lnEd = MakePoint3d(row.geometry.coords[-1][0], row.geometry.coords[-1][1], 0.0)             # <<<<<<<<<<<<<<
 * 
 *             ckSt = checkclosePt(lnSt, pointCoords)
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_row, __pyx_n_s_geometry); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 867, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_coords); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 867, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_8, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 867, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 867, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_12 = __pyx_PyFloat_AsFloat(__pyx_t_8); if (unlikely((__pyx_t_12 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 867, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_row, __pyx_n_s_geometry); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 867, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_coords); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 867, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_1, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 867, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_8, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 867, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 867, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_15.__pyx_n = 1;
      __pyx_t_15.z = 0.0;
      __pyx_t_14 = __pyx_f_5graph_MakePoint3d(__pyx_t_12, __pyx_t_11, &__pyx_t_15); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 867, __pyx_L1_error)
      __pyx_v_lnEd = __pyx_t_14;
    }
    __pyx_L22:;

    /* "graph.pyx":869
 *                 lnEd = MakePoint3d(row.geometry.coords[-1][0], row.geometry.coords[-1][1], 0.0)
 * 
 *             ckSt = checkclosePt(lnSt, pointCoords)             # <<<<<<<<<<<<<<
 *             if ckSt == -1:
 *                 pointCoords.push_back(lnSt)
 */
    __pyx_t_3 = __pyx_f_5graph_checkclosePt(__pyx_v_lnSt, __pyx_v_pointCoords, NULL); if (unlikely(__pyx_t_3 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 869, __pyx_L1_error)
    __pyx_v_ckSt = __pyx_t_3;

    /* "graph.pyx":870
 * 
 *             ckSt = checkclosePt(lnSt, pointCoords)
 *             if ckSt == -1:             # <<<<<<<<<<<<<<
 *                 pointCoords.push_back(lnSt)
 *                 idSt = pointidCnt
 */
    __pyx_t_4 = (__pyx_v_ckSt == -1L);
    if (__pyx_t_4) {

      /* "graph.pyx":871
 *             ckSt = checkclosePt(lnSt, pointCoords)
 *             if ckSt == -1:
 *                 pointCoords.push_back(lnSt)             # <<<<<<<<<<<<<<
 *                 idSt = pointidCnt
 *                 self.C_addNode(idSt, lnSt.x, lnSt.y, lnSt.z, PtstW[edgeidCnt], PtstC[edgeidCnt])
 */
      try {
        __pyx_v_pointCoords.push_back(__pyx_v_lnSt);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 871, __pyx_L1_error)
      }

      /* "graph.pyx":872
 *             if ckSt == -1:
 *                 pointCoords.push_back(lnSt)
 *                 idSt = pointidCnt             # <<<<<<<<<<<<<<
 *                 self.C_addNode(idSt, lnSt.x, lnSt.y, lnSt.z, PtstW[edgeidCnt], PtstC[edgeidCnt])
 *                 pointidCnt += 1
 */
      __pyx_v_idSt = __pyx_v_pointidCnt;

      /* "graph.pyx":873
 *                 pointCoords.push_back(lnSt)
 *                 idSt = pointidCnt
 *                 self.C_addNode(idSt, lnSt.x, lnSt.y, lnSt.z, PtstW[edgeidCnt], PtstC[edgeidCnt])             # <<<<<<<<<<<<<<
 *                 pointidCnt += 1
 *             else:
 */
      __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_PtstW, __pyx_v_edgeidCnt, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 873, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 873, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_PtstC, __pyx_v_edgeidCnt, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 873, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_12 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_12 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 873, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_16.__pyx_n = 3;
      __pyx_t_16.cZ = __pyx_v_lnSt.z;
      __pyx_t_16.w = __pyx_t_11;
      __pyx_t_16.c = __pyx_t_12;
      ((struct __pyx_vtabstruct_5graph_GraphCy *)__pyx_v_self->__pyx_vtab)->C_addNode(__pyx_v_self, __pyx_v_idSt, __pyx_v_lnSt.x, __pyx_v_lnSt.y, &__pyx_t_16); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 873, __pyx_L1_error)

      /* "graph.pyx":874
 *                 idSt = pointidCnt
 *                 self.C_addNode(idSt, lnSt.x, lnSt.y, lnSt.z, PtstW[edgeidCnt], PtstC[edgeidCnt])
 *                 pointidCnt += 1             # <<<<<<<<<<<<<<
 *             else:
 *                 idSt = ckSt
 */
      __pyx_v_pointidCnt = (__pyx_v_pointidCnt + 1);

      /* "graph.pyx":870
 * 
 *             ckSt = checkclosePt(lnSt, pointCoords)
 *             if ckSt == -1:             # <<<<<<<<<<<<<<
 *                 pointCoords.push_back(lnSt)
 *                 idSt = pointidCnt
 */
      goto __pyx_L23;
    }

    /* "graph.pyx":876
 *                 pointidCnt += 1
 *             else:
 *                 idSt = ckSt             # <<<<<<<<<<<<<<
 * 
 *             ckEd = checkclosePt(lnEd, pointCoords)
 */
    /*else*/ {
      __pyx_v_idSt = __pyx_v_ckSt;
    }
    __pyx_L23:;

    /* "graph.pyx":878
 *                 idSt = ckSt
 * 
 *             ckEd = checkclosePt(lnEd, pointCoords)             # <<<<<<<<<<<<<<
 *             if ckEd == -1:
 *                 pointCoords.push_back(lnEd)
 */
    __pyx_t_3 = __pyx_f_5graph_checkclosePt(__pyx_v_lnEd, __pyx_v_pointCoords, NULL); if (unlikely(__pyx_t_3 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 878, __pyx_L1_error)
    __pyx_v_ckEd = __pyx_t_3;

    /* "graph.pyx":879
 * 
 *             ckEd = checkclosePt(lnEd, pointCoords)
 *             if ckEd == -1:             # <<<<<<<<<<<<<<
 *                 pointCoords.push_back(lnEd)
 *                 idEd = pointidCnt
 */
    __pyx_t_4 = (__pyx_v_ckEd == -1L);
    if (__pyx_t_4) {

      /* "graph.pyx":880
 *             ckEd = checkclosePt(lnEd, pointCoords)
 *             if ckEd == -1:
 *                 pointCoords.push_back(lnEd)             # <<<<<<<<<<<<<<
 *                 idEd = pointidCnt
 *                 self.C_addNode(idEd, lnEd.x, lnEd.y, lnEd.z, PtedW[edgeidCnt], PtedC[edgeidCnt])
 */
      try {
        __pyx_v_pointCoords.push_back(__pyx_v_lnEd);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 880, __pyx_L1_error)
      }

      /* "graph.pyx":881
 *             if ckEd == -1:
 *                 pointCoords.push_back(lnEd)
 *                 idEd = pointidCnt             # <<<<<<<<<<<<<<
 *                 self.C_addNode(idEd, lnEd.x, lnEd.y, lnEd.z, PtedW[edgeidCnt], PtedC[edgeidCnt])
 *                 pointidCnt += 1
 */
      __pyx_v_idEd = __pyx_v_pointidCnt;

      /* "graph.pyx":882
 *                 pointCoords.push_back(lnEd)
 *                 idEd = pointidCnt
 *                 self.C_addNode(idEd, lnEd.x, lnEd.y, lnEd.z, PtedW[edgeidCnt], PtedC[edgeidCnt])             # <<<<<<<<<<<<<<
 *                 pointidCnt += 1
 *             else:
 */
      __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_PtedW, __pyx_v_edgeidCnt, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 882, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_12 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_12 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 882, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_PtedC, __pyx_v_edgeidCnt, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 882, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 882, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_16.__pyx_n = 3;
      __pyx_t_16.cZ = __pyx_v_lnEd.z;
      __pyx_t_16.w = __pyx_t_12;
      __pyx_t_16.c = __pyx_t_11;
      ((struct __pyx_vtabstruct_5graph_GraphCy *)__pyx_v_self->__pyx_vtab)->C_addNode(__pyx_v_self, __pyx_v_idEd, __pyx_v_lnEd.x, __pyx_v_lnEd.y, &__pyx_t_16); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 882, __pyx_L1_error)

      /* "graph.pyx":883
 *                 idEd = pointidCnt
 *                 self.C_addNode(idEd, lnEd.x, lnEd.y, lnEd.z, PtedW[edgeidCnt], PtedC[edgeidCnt])
 *                 pointidCnt += 1             # <<<<<<<<<<<<<<
 *             else:
 *                 idEd = ckEd
 */
      __pyx_v_pointidCnt = (__pyx_v_pointidCnt + 1);

      /* "graph.pyx":879
 * 
 *             ckEd = checkclosePt(lnEd, pointCoords)
 *             if ckEd == -1:             # <<<<<<<<<<<<<<
 *                 pointCoords.push_back(lnEd)
 *                 idEd = pointidCnt
 */
      goto __pyx_L24;
    }

    /* "graph.pyx":885
 *                 pointidCnt += 1
 *             else:
 *                 idEd = ckEd             # <<<<<<<<<<<<<<
 * 
 *             self.C_addEdge(index, idSt, idEd, Lnlength[edgeidCnt], LnlengthR[edgeidCnt], LnW[edgeidCnt]) # add edge
 */
    /*else*/ {
      __pyx_v_idEd = __pyx_v_ckEd;
    }
    __pyx_L24:;

    /* "graph.pyx":887
 *                 idEd = ckEd
 * 
 *             self.C_addEdge(index, idSt, idEd, Lnlength[edgeidCnt], LnlengthR[edgeidCnt], LnW[edgeidCnt]) # add edge             # <<<<<<<<<<<<<<
 *             edgeidCnt += 1
 * 
 */
    __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_Lnlength, __pyx_v_edgeidCnt, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 887, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 887, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_LnlengthR, __pyx_v_edgeidCnt, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 887, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_12 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_12 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 887, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_LnW, __pyx_v_edgeidCnt, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 887, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_13 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_13 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 887, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    ((struct __pyx_vtabstruct_5graph_GraphCy *)__pyx_v_self->__pyx_vtab)->C_addEdge(__pyx_v_self, __pyx_v_index, __pyx_v_idSt, __pyx_v_idEd, __pyx_t_11, __pyx_t_12, __pyx_t_13); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 887, __pyx_L1_error)

    /* "graph.pyx":888
 * 
 *             self.C_addEdge(index, idSt, idEd, Lnlength[edgeidCnt], LnlengthR[edgeidCnt], LnW[edgeidCnt]) # add edge
 *             edgeidCnt += 1             # <<<<<<<<<<<<<<
 * 
 *         # print(f'Add edges from geopandas successfull, added {pointidCnt:,} nodes, and {edgeidCnt:,} edges')
 */
    __pyx_v_edgeidCnt = (__pyx_v_edgeidCnt + 1);

    /* "graph.pyx":861
 *             State_3d = False # checks dimension
 * 
 *         for index, row in dfNetwork.iterrows():             # <<<<<<<<<<<<<<
 *             if State_3d:
 *                 lnSt = MakePoint3d(row.geometry.coords[0][0], row.geometry.coords[0][1], row.geometry.coords[0][2])
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "graph.pyx":775
 *                     c   = pt[3])
 * 
 *     def fromGeopandas_Edges(self, dfNetwork:gpd.GeoDataFrame,             # <<<<<<<<<<<<<<
 *         A_Lnlength:str|None = None,
 *         A_LnlengthR:str|None = None,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("graph.GraphCy.fromGeopandas_Edges", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dfKeys);
  __Pyx_XDECREF(__pyx_v_Lnlength);
  __Pyx_XDECREF(__pyx_v_LnlengthR);
  __Pyx_XDECREF(__pyx_v_LnW);
  __Pyx_XDECREF(__pyx_v_PtstW);
  __Pyx_XDECREF(__pyx_v_PtstC);
  __Pyx_XDECREF(__pyx_v_PtedW);
  __Pyx_XDECREF(__pyx_v_PtedC);
  __Pyx_XDECREF(__pyx_v_row);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":892
 *         # print(f'Add edges from geopandas successfull, added {pointidCnt:,} nodes, and {edgeidCnt:,} edges')
 * 
 *     def removeEdge(self, idx:int) -> None:             # <<<<<<<<<<<<<<
 *         self.C_removeEdge(idx)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5graph_7GraphCy_35removeEdge(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5graph_7GraphCy_35removeEdge = {"removeEdge", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_35removeEdge, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5graph_7GraphCy_35removeEdge(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_idx = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("removeEdge (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_idx,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_idx)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 892, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "removeEdge") < 0)) __PYX_ERR(0, 892, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_idx = ((PyObject*)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("removeEdge", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 892, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("graph.GraphCy.removeEdge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_idx), (&PyInt_Type), 0, "idx", 1))) __PYX_ERR(0, 892, __pyx_L1_error)
  __pyx_r = __pyx_pf_5graph_7GraphCy_34removeEdge(((struct __pyx_obj_5graph_GraphCy *)__pyx_v_self), __pyx_v_idx);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5graph_7GraphCy_34removeEdge(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, PyObject *__pyx_v_idx) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("removeEdge", 1);

  /* "graph.pyx":893
 * 
 *     def removeEdge(self, idx:int) -> None:
 *         self.C_removeEdge(idx)             # <<<<<<<<<<<<<<
 * 
 *     def removeEdges(self, ids:tuple) -> None:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_idx); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 893, __pyx_L1_error)
  ((struct __pyx_vtabstruct_5graph_GraphCy *)__pyx_v_self->__pyx_vtab)->C_removeEdge(__pyx_v_self, __pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 893, __pyx_L1_error)

  /* "graph.pyx":892
 *         # print(f'Add edges from geopandas successfull, added {pointidCnt:,} nodes, and {edgeidCnt:,} edges')
 * 
 *     def removeEdge(self, idx:int) -> None:             # <<<<<<<<<<<<<<
 *         self.C_removeEdge(idx)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("graph.GraphCy.removeEdge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":895
 *         self.C_removeEdge(idx)
 * 
 *     def removeEdges(self, ids:tuple) -> None:             # <<<<<<<<<<<<<<
 *         cdef int n
 *         for n in ids:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5graph_7GraphCy_37removeEdges(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5graph_7GraphCy_37removeEdges = {"removeEdges", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_37removeEdges, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5graph_7GraphCy_37removeEdges(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_ids = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("removeEdges (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ids,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ids)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 895, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "removeEdges") < 0)) __PYX_ERR(0, 895, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_ids = ((PyObject*)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("removeEdges", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 895, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("graph.GraphCy.removeEdges", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ids), (&PyTuple_Type), 0, "ids", 1))) __PYX_ERR(0, 895, __pyx_L1_error)
  __pyx_r = __pyx_pf_5graph_7GraphCy_36removeEdges(((struct __pyx_obj_5graph_GraphCy *)__pyx_v_self), __pyx_v_ids);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5graph_7GraphCy_36removeEdges(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, PyObject *__pyx_v_ids) {
  int __pyx_v_n;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("removeEdges", 1);

  /* "graph.pyx":897
 *     def removeEdges(self, ids:tuple) -> None:
 *         cdef int n
 *         for n in ids:             # <<<<<<<<<<<<<<
 *             self.C_removeEdge(n)
 * 
 */
  __pyx_t_1 = __pyx_v_ids; __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = 0;
  for (;;) {
    {
      Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
      #if !CYTHON_ASSUME_SAFE_MACROS
      if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 897, __pyx_L1_error)
      #endif
      if (__pyx_t_2 >= __pyx_temp) break;
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 897, __pyx_L1_error)
    #else
    __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 897, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 897, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_n = __pyx_t_4;

    /* "graph.pyx":898
 *         cdef int n
 *         for n in ids:
 *             self.C_removeEdge(n)             # <<<<<<<<<<<<<<
 * 
 *     def removeNode(self, idx:int) -> None:
 */
    ((struct __pyx_vtabstruct_5graph_GraphCy *)__pyx_v_self->__pyx_vtab)->C_removeEdge(__pyx_v_self, __pyx_v_n); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 898, __pyx_L1_error)

    /* "graph.pyx":897
 *     def removeEdges(self, ids:tuple) -> None:
 *         cdef int n
 *         for n in ids:             # <<<<<<<<<<<<<<
 *             self.C_removeEdge(n)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "graph.pyx":895
 *         self.C_removeEdge(idx)
 * 
 *     def removeEdges(self, ids:tuple) -> None:             # <<<<<<<<<<<<<<
 *         cdef int n
 *         for n in ids:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("graph.GraphCy.removeEdges", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":900
 *             self.C_removeEdge(n)
 * 
 *     def removeNode(self, idx:int) -> None:             # <<<<<<<<<<<<<<
 *         self.C_removeNode(idx)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5graph_7GraphCy_39removeNode(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5graph_7GraphCy_39removeNode = {"removeNode", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_39removeNode, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5graph_7GraphCy_39removeNode(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_idx = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("removeNode (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_idx,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_idx)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 900, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "removeNode") < 0)) __PYX_ERR(0, 900, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_idx = ((PyObject*)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("removeNode", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 900, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("graph.GraphCy.removeNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_idx), (&PyInt_Type), 0, "idx", 1))) __PYX_ERR(0, 900, __pyx_L1_error)
  __pyx_r = __pyx_pf_5graph_7GraphCy_38removeNode(((struct __pyx_obj_5graph_GraphCy *)__pyx_v_self), __pyx_v_idx);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5graph_7GraphCy_38removeNode(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, PyObject *__pyx_v_idx) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("removeNode", 1);

  /* "graph.pyx":901
 * 
 *     def removeNode(self, idx:int) -> None:
 *         self.C_removeNode(idx)             # <<<<<<<<<<<<<<
 * 
 *     def PathLength(self, edges:tuple) -> float:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_idx); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 901, __pyx_L1_error)
  ((struct __pyx_vtabstruct_5graph_GraphCy *)__pyx_v_self->__pyx_vtab)->C_removeNode(__pyx_v_self, __pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 901, __pyx_L1_error)

  /* "graph.pyx":900
 *             self.C_removeEdge(n)
 * 
 *     def removeNode(self, idx:int) -> None:             # <<<<<<<<<<<<<<
 *         self.C_removeNode(idx)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("graph.GraphCy.removeNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":903
 *         self.C_removeNode(idx)
 * 
 *     def PathLength(self, edges:tuple) -> float:             # <<<<<<<<<<<<<<
 *         cdef float length = 0.0
 *         cdef int n
 */

/* Python wrapper */
static PyObject *__pyx_pw_5graph_7GraphCy_41PathLength(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5graph_7GraphCy_41PathLength = {"PathLength", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_41PathLength, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5graph_7GraphCy_41PathLength(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_edges = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("PathLength (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_edges,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_edges)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 903, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "PathLength") < 0)) __PYX_ERR(0, 903, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_edges = ((PyObject*)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("PathLength", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 903, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("graph.GraphCy.PathLength", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_edges), (&PyTuple_Type), 0, "edges", 1))) __PYX_ERR(0, 903, __pyx_L1_error)
  __pyx_r = __pyx_pf_5graph_7GraphCy_40PathLength(((struct __pyx_obj_5graph_GraphCy *)__pyx_v_self), __pyx_v_edges);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5graph_7GraphCy_40PathLength(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, PyObject *__pyx_v_edges) {
  float __pyx_v_length;
  int __pyx_v_n;
  struct __pyx_t_5graph_Edge __pyx_v_elook;
  struct __pyx_t_5graph_Edge __pyx_v_flook;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  long __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PathLength", 1);

  /* "graph.pyx":904
 * 
 *     def PathLength(self, edges:tuple) -> float:
 *         cdef float length = 0.0             # <<<<<<<<<<<<<<
 *         cdef int n
 *         cdef Edge elook
 */
  __pyx_v_length = 0.0;

  /* "graph.pyx":909
 *         cdef Edge flook
 *         # it has to know if it is reversed or not
 *         if len(edges) == 1:             # <<<<<<<<<<<<<<
 *             return length
 *         for n in range(len(edges)):
 */
  __pyx_t_1 = __Pyx_PyTuple_GET_SIZE(__pyx_v_edges); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 909, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 == 1);
  if (__pyx_t_2) {

    /* "graph.pyx":910
 *         # it has to know if it is reversed or not
 *         if len(edges) == 1:
 *             return length             # <<<<<<<<<<<<<<
 *         for n in range(len(edges)):
 *             if n == len(edges)-1:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_length); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 910, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "graph.pyx":909
 *         cdef Edge flook
 *         # it has to know if it is reversed or not
 *         if len(edges) == 1:             # <<<<<<<<<<<<<<
 *             return length
 *         for n in range(len(edges)):
 */
  }

  /* "graph.pyx":911
 *         if len(edges) == 1:
 *             return length
 *         for n in range(len(edges)):             # <<<<<<<<<<<<<<
 *             if n == len(edges)-1:
 *                 elook = self.edges[edges[n]]
 */
  __pyx_t_1 = __Pyx_PyTuple_GET_SIZE(__pyx_v_edges); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 911, __pyx_L1_error)
  __pyx_t_4 = __pyx_t_1;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_n = __pyx_t_5;

    /* "graph.pyx":912
 *             return length
 *         for n in range(len(edges)):
 *             if n == len(edges)-1:             # <<<<<<<<<<<<<<
 *                 elook = self.edges[edges[n]]
 *                 flook = self.edges[edges[n-1]]
 */
    __pyx_t_6 = __Pyx_PyTuple_GET_SIZE(__pyx_v_edges); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 912, __pyx_L1_error)
    __pyx_t_2 = (__pyx_v_n == (__pyx_t_6 - 1));
    if (__pyx_t_2) {

      /* "graph.pyx":913
 *         for n in range(len(edges)):
 *             if n == len(edges)-1:
 *                 elook = self.edges[edges[n]]             # <<<<<<<<<<<<<<
 *                 flook = self.edges[edges[n-1]]
 *                 if elook.NidO == flook.NidO or elook.NidO == flook.NidD:
 */
      __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_edges, __pyx_v_n, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 913, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 913, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_elook = (__pyx_v_self->edges[__pyx_t_6]);

      /* "graph.pyx":914
 *             if n == len(edges)-1:
 *                 elook = self.edges[edges[n]]
 *                 flook = self.edges[edges[n-1]]             # <<<<<<<<<<<<<<
 *                 if elook.NidO == flook.NidO or elook.NidO == flook.NidD:
 *                     length += elook.len
 */
      __pyx_t_7 = (__pyx_v_n - 1);
      __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_edges, __pyx_t_7, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 914, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 914, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_flook = (__pyx_v_self->edges[__pyx_t_6]);

      /* "graph.pyx":915
 *                 elook = self.edges[edges[n]]
 *                 flook = self.edges[edges[n-1]]
 *                 if elook.NidO == flook.NidO or elook.NidO == flook.NidD:             # <<<<<<<<<<<<<<
 *                     length += elook.len
 *                 else:
 */
      __pyx_t_8 = (__pyx_v_elook.NidO == __pyx_v_flook.NidO);
      if (!__pyx_t_8) {
      } else {
        __pyx_t_2 = __pyx_t_8;
        goto __pyx_L8_bool_binop_done;
      }
      __pyx_t_8 = (__pyx_v_elook.NidO == __pyx_v_flook.NidD);
      __pyx_t_2 = __pyx_t_8;
      __pyx_L8_bool_binop_done:;
      if (__pyx_t_2) {

        /* "graph.pyx":916
 *                 flook = self.edges[edges[n-1]]
 *                 if elook.NidO == flook.NidO or elook.NidO == flook.NidD:
 *                     length += elook.len             # <<<<<<<<<<<<<<
 *                 else:
 *                     length += elook.lenR
 */
        __pyx_v_length = (__pyx_v_length + __pyx_v_elook.len);

        /* "graph.pyx":915
 *                 elook = self.edges[edges[n]]
 *                 flook = self.edges[edges[n-1]]
 *                 if elook.NidO == flook.NidO or elook.NidO == flook.NidD:             # <<<<<<<<<<<<<<
 *                     length += elook.len
 *                 else:
 */
        goto __pyx_L7;
      }

      /* "graph.pyx":918
 *                     length += elook.len
 *                 else:
 *                     length += elook.lenR             # <<<<<<<<<<<<<<
 *             else:
 *                 elook = self.edges[edges[n]]
 */
      /*else*/ {
        __pyx_v_length = (__pyx_v_length + __pyx_v_elook.lenR);
      }
      __pyx_L7:;

      /* "graph.pyx":912
 *             return length
 *         for n in range(len(edges)):
 *             if n == len(edges)-1:             # <<<<<<<<<<<<<<
 *                 elook = self.edges[edges[n]]
 *                 flook = self.edges[edges[n-1]]
 */
      goto __pyx_L6;
    }

    /* "graph.pyx":920
 *                     length += elook.lenR
 *             else:
 *                 elook = self.edges[edges[n]]             # <<<<<<<<<<<<<<
 *                 flook = self.edges[edges[n+1]]
 *                 if elook.NidD == flook.NidO or elook.NidD == flook.NidD:
 */
    /*else*/ {
      __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_edges, __pyx_v_n, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 920, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 920, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_elook = (__pyx_v_self->edges[__pyx_t_6]);

      /* "graph.pyx":921
 *             else:
 *                 elook = self.edges[edges[n]]
 *                 flook = self.edges[edges[n+1]]             # <<<<<<<<<<<<<<
 *                 if elook.NidD == flook.NidO or elook.NidD == flook.NidD:
 *                     length += elook.len
 */
      __pyx_t_7 = (__pyx_v_n + 1);
      __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_edges, __pyx_t_7, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 921, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 921, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_flook = (__pyx_v_self->edges[__pyx_t_6]);

      /* "graph.pyx":922
 *                 elook = self.edges[edges[n]]
 *                 flook = self.edges[edges[n+1]]
 *                 if elook.NidD == flook.NidO or elook.NidD == flook.NidD:             # <<<<<<<<<<<<<<
 *                     length += elook.len
 *                 else:
 */
      __pyx_t_8 = (__pyx_v_elook.NidD == __pyx_v_flook.NidO);
      if (!__pyx_t_8) {
      } else {
        __pyx_t_2 = __pyx_t_8;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_8 = (__pyx_v_elook.NidD == __pyx_v_flook.NidD);
      __pyx_t_2 = __pyx_t_8;
      __pyx_L11_bool_binop_done:;
      if (__pyx_t_2) {

        /* "graph.pyx":923
 *                 flook = self.edges[edges[n+1]]
 *                 if elook.NidD == flook.NidO or elook.NidD == flook.NidD:
 *                     length += elook.len             # <<<<<<<<<<<<<<
 *                 else:
 *                     length += elook.lenR
 */
        __pyx_v_length = (__pyx_v_length + __pyx_v_elook.len);

        /* "graph.pyx":922
 *                 elook = self.edges[edges[n]]
 *                 flook = self.edges[edges[n+1]]
 *                 if elook.NidD == flook.NidO or elook.NidD == flook.NidD:             # <<<<<<<<<<<<<<
 *                     length += elook.len
 *                 else:
 */
        goto __pyx_L10;
      }

      /* "graph.pyx":925
 *                     length += elook.len
 *                 else:
 *                     length += elook.lenR             # <<<<<<<<<<<<<<
 * 
 *         return length
 */
      /*else*/ {
        __pyx_v_length = (__pyx_v_length + __pyx_v_elook.lenR);
      }
      __pyx_L10:;
    }
    __pyx_L6:;
  }

  /* "graph.pyx":927
 *                     length += elook.lenR
 * 
 *         return length             # <<<<<<<<<<<<<<
 * 
 *     def PathFind_Dijkstra(self, int NidO, int NidD, float LimDist = 10_000.0, int LimCycle = 10_000) -> tuple[float, tuple[int]]:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_length); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 927, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "graph.pyx":903
 *         self.C_removeNode(idx)
 * 
 *     def PathLength(self, edges:tuple) -> float:             # <<<<<<<<<<<<<<
 *         cdef float length = 0.0
 *         cdef int n
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("graph.GraphCy.PathLength", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":929
 *         return length
 * 
 *     def PathFind_Dijkstra(self, int NidO, int NidD, float LimDist = 10_000.0, int LimCycle = 10_000) -> tuple[float, tuple[int]]:             # <<<<<<<<<<<<<<
 *         """
 *         Find smallest distance and edges traversed between two nodes in the graph.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5graph_7GraphCy_43PathFind_Dijkstra(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5graph_7GraphCy_42PathFind_Dijkstra, "\n        Find smallest distance and edges traversed between two nodes in the graph.\n\n        Parameters\n        ------------\n        NidO : int\n            starting node ID\n        NidD : int\n            destination node ID\n        LimDist : float, default 10,000.0\n            distance limit before giving up the pathfinding process\n        LimCycle : int, default 10,000\n            number of cycles of priority_queue before giving up the pathfinding process\n        \n        Returns\n        -----------\n        length: float\n            if a path is found, it will return with the length of shortest possible distance of the path\n        \n        Edge IDs: tuple[int]\n            tuple of edge ids of found shortest path.\n        \n        if path is not found, it will return (-1.0,(-1,))\n        \n        Notes\n        -----------\n        The algorithm has bidirectional capability and also node cost added.\n        ");
static PyMethodDef __pyx_mdef_5graph_7GraphCy_43PathFind_Dijkstra = {"PathFind_Dijkstra", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_43PathFind_Dijkstra, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5graph_7GraphCy_42PathFind_Dijkstra};
static PyObject *__pyx_pw_5graph_7GraphCy_43PathFind_Dijkstra(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_NidO;
  int __pyx_v_NidD;
  float __pyx_v_LimDist;
  int __pyx_v_LimCycle;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("PathFind_Dijkstra (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_NidO,&__pyx_n_s_NidD,&__pyx_n_s_LimDist,&__pyx_n_s_LimCycle,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_NidO)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 929, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_NidD)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 929, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("PathFind_Dijkstra", 0, 2, 4, 1); __PYX_ERR(0, 929, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_LimDist);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 929, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_LimCycle);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 929, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "PathFind_Dijkstra") < 0)) __PYX_ERR(0, 929, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_NidO = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_NidO == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 929, __pyx_L3_error)
    __pyx_v_NidD = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_NidD == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 929, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_LimDist = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_LimDist == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 929, __pyx_L3_error)
    } else {
      __pyx_v_LimDist = ((float)10000.0);
    }
    if (values[3]) {
      __pyx_v_LimCycle = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_LimCycle == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 929, __pyx_L3_error)
    } else {
      __pyx_v_LimCycle = ((int)0x2710);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("PathFind_Dijkstra", 0, 2, 4, __pyx_nargs); __PYX_ERR(0, 929, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("graph.GraphCy.PathFind_Dijkstra", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5graph_7GraphCy_42PathFind_Dijkstra(((struct __pyx_obj_5graph_GraphCy *)__pyx_v_self), __pyx_v_NidO, __pyx_v_NidD, __pyx_v_LimDist, __pyx_v_LimCycle);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5graph_7GraphCy_42PathFind_Dijkstra(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, int __pyx_v_NidO, int __pyx_v_NidD, float __pyx_v_LimDist, int __pyx_v_LimCycle) {
  float __pyx_v_BaseDist;
  int __pyx_v_cycles;
  int __pyx_v_keepGoing;
  struct __pyx_obj_5graph_PriorityQueue_NR *__pyx_v_OpenNodes = 0;
  struct __pyx_t_5graph_NodeReach __pyx_v_startNode;
  struct __pyx_t_5graph_NodeReach __pyx_v_NodeReach_T;
  int __pyx_v_NidF;
  float __pyx_v_len;
  struct __pyx_t_5graph_Edge __pyx_v_EdgeC;
  struct __pyx_t_5graph_NodeReach __pyx_v_NodeCheck;
  std::vector<int>  __pyx_v_pth;
  int __pyx_v_nlook;
  int __pyx_v_i;
  int __pyx_v_Eid;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  struct __pyx_t_5graph_NodeReach __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PathFind_Dijkstra", 1);

  /* "graph.pyx":958
 *         The algorithm has bidirectional capability and also node cost added.
 *         """
 *         cdef float BaseDist = dist3d(self.nodes[NidO], self.nodes[NidD])             # <<<<<<<<<<<<<<
 *         if BaseDist*0.9 > LimDist:
 *             return -1.0
 */
  __pyx_t_1 = __pyx_f_5graph_dist3d((__pyx_v_self->nodes[__pyx_v_NidO]), (__pyx_v_self->nodes[__pyx_v_NidD])); if (unlikely(__pyx_t_1 == ((float)-1) && PyErr_Occurred())) __PYX_ERR(0, 958, __pyx_L1_error)
  __pyx_v_BaseDist = __pyx_t_1;

  /* "graph.pyx":959
 *         """
 *         cdef float BaseDist = dist3d(self.nodes[NidO], self.nodes[NidD])
 *         if BaseDist*0.9 > LimDist:             # <<<<<<<<<<<<<<
 *             return -1.0
 * 
 */
  __pyx_t_2 = ((__pyx_v_BaseDist * 0.9) > __pyx_v_LimDist);
  if (__pyx_t_2) {

    /* "graph.pyx":960
 *         cdef float BaseDist = dist3d(self.nodes[NidO], self.nodes[NidD])
 *         if BaseDist*0.9 > LimDist:
 *             return -1.0             # <<<<<<<<<<<<<<
 * 
 *         self.C_Reset_NodeVisited()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_neg_1_0);
    __pyx_r = ((PyObject*)__pyx_float_neg_1_0);
    goto __pyx_L0;

    /* "graph.pyx":959
 *         """
 *         cdef float BaseDist = dist3d(self.nodes[NidO], self.nodes[NidD])
 *         if BaseDist*0.9 > LimDist:             # <<<<<<<<<<<<<<
 *             return -1.0
 * 
 */
  }

  /* "graph.pyx":962
 *             return -1.0
 * 
 *         self.C_Reset_NodeVisited()             # <<<<<<<<<<<<<<
 * 
 *         cdef int cycles
 */
  __pyx_f_5graph_7GraphCy_C_Reset_NodeVisited(__pyx_v_self, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 962, __pyx_L1_error)

  /* "graph.pyx":965
 * 
 *         cdef int cycles
 *         cycles = 1             # <<<<<<<<<<<<<<
 *         cdef bint keepGoing
 *         keepGoing = True
 */
  __pyx_v_cycles = 1;

  /* "graph.pyx":967
 *         cycles = 1
 *         cdef bint keepGoing
 *         keepGoing = True             # <<<<<<<<<<<<<<
 * 
 *         # cdef vector[NodeReach] OpenNodes
 */
  __pyx_v_keepGoing = 1;

  /* "graph.pyx":972
 *         cdef PriorityQueue_NR OpenNodes
 *         cdef NodeReach startNode
 *         startNode.Nid = NidO             # <<<<<<<<<<<<<<
 *         startNode.Eid = -1
 *         startNode.Dist = 0.0
 */
  __pyx_v_startNode.Nid = __pyx_v_NidO;

  /* "graph.pyx":973
 *         cdef NodeReach startNode
 *         startNode.Nid = NidO
 *         startNode.Eid = -1             # <<<<<<<<<<<<<<
 *         startNode.Dist = 0.0
 *         startNode.NidO = -1
 */
  __pyx_v_startNode.Eid = -1;

  /* "graph.pyx":974
 *         startNode.Nid = NidO
 *         startNode.Eid = -1
 *         startNode.Dist = 0.0             # <<<<<<<<<<<<<<
 *         startNode.NidO = -1
 *         startNode.Weight = 0.0
 */
  __pyx_v_startNode.Dist = 0.0;

  /* "graph.pyx":975
 *         startNode.Eid = -1
 *         startNode.Dist = 0.0
 *         startNode.NidO = -1             # <<<<<<<<<<<<<<
 *         startNode.Weight = 0.0
 *         OpenNodes = PriorityQueue_NR()
 */
  __pyx_v_startNode.NidO = -1;

  /* "graph.pyx":976
 *         startNode.Dist = 0.0
 *         startNode.NidO = -1
 *         startNode.Weight = 0.0             # <<<<<<<<<<<<<<
 *         OpenNodes = PriorityQueue_NR()
 *         OpenNodes.push(startNode)
 */
  __pyx_v_startNode.Weight = 0.0;

  /* "graph.pyx":977
 *         startNode.NidO = -1
 *         startNode.Weight = 0.0
 *         OpenNodes = PriorityQueue_NR()             # <<<<<<<<<<<<<<
 *         OpenNodes.push(startNode)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5graph_PriorityQueue_NR)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 977, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_OpenNodes = ((struct __pyx_obj_5graph_PriorityQueue_NR *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "graph.pyx":978
 *         startNode.Weight = 0.0
 *         OpenNodes = PriorityQueue_NR()
 *         OpenNodes.push(startNode)             # <<<<<<<<<<<<<<
 * 
 *         cdef NodeReach NodeReach_T
 */
  ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_startNode); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 978, __pyx_L1_error)

  /* "graph.pyx":989
 *         cdef int nlook
 * 
 *         while keepGoing:             # <<<<<<<<<<<<<<
 *             cycles += 1
 *             # check paths from OpenNodes
 */
  while (1) {
    if (!__pyx_v_keepGoing) break;

    /* "graph.pyx":990
 * 
 *         while keepGoing:
 *             cycles += 1             # <<<<<<<<<<<<<<
 *             # check paths from OpenNodes
 *             NodeCheck = OpenNodes.pop_top()
 */
    __pyx_v_cycles = (__pyx_v_cycles + 1);

    /* "graph.pyx":992
 *             cycles += 1
 *             # check paths from OpenNodes
 *             NodeCheck = OpenNodes.pop_top()             # <<<<<<<<<<<<<<
 * 
 *             if NodeCheck.Nid == NidD:
 */
    __pyx_t_4 = ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->pop_top(__pyx_v_OpenNodes); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 992, __pyx_L1_error)
    __pyx_v_NodeCheck = __pyx_t_4;

    /* "graph.pyx":994
 *             NodeCheck = OpenNodes.pop_top()
 * 
 *             if NodeCheck.Nid == NidD:             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
    __pyx_t_2 = (__pyx_v_NodeCheck.Nid == __pyx_v_NidD);
    if (__pyx_t_2) {

      /* "graph.pyx":995
 * 
 *             if NodeCheck.Nid == NidD:
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             for i in range(self.EidN):
 */
      goto __pyx_L5_break;

      /* "graph.pyx":994
 *             NodeCheck = OpenNodes.pop_top()
 * 
 *             if NodeCheck.Nid == NidD:             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
    }

    /* "graph.pyx":997
 *                 break
 * 
 *             for i in range(self.EidN):             # <<<<<<<<<<<<<<
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1 or Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 */
    __pyx_t_5 = __pyx_v_self->EidN;
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_i = __pyx_t_7;

      /* "graph.pyx":998
 * 
 *             for i in range(self.EidN):
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]             # <<<<<<<<<<<<<<
 *                 if Eid == -1 or Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 *                     continue
 */
      __pyx_v_Eid = ((__pyx_v_self->nodes[__pyx_v_NodeCheck.Nid]).Eid[__pyx_v_i]);

      /* "graph.pyx":999
 *             for i in range(self.EidN):
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1 or Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:             # <<<<<<<<<<<<<<
 *                     continue
 *                 # possible new path
 */
      __pyx_t_8 = (__pyx_v_Eid == -1L);
      if (!__pyx_t_8) {
      } else {
        __pyx_t_2 = __pyx_t_8;
        goto __pyx_L10_bool_binop_done;
      }
      __pyx_t_8 = (__pyx_v_Eid == __pyx_v_NodeCheck.Eid);
      if (!__pyx_t_8) {
      } else {
        __pyx_t_2 = __pyx_t_8;
        goto __pyx_L10_bool_binop_done;
      }
      __pyx_t_8 = ((__pyx_v_self->_edgesIds[__pyx_v_Eid]) == -1L);
      __pyx_t_2 = __pyx_t_8;
      __pyx_L10_bool_binop_done:;
      if (__pyx_t_2) {

        /* "graph.pyx":1000
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1 or Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 *                     continue             # <<<<<<<<<<<<<<
 *                 # possible new path
 *                 # new node?
 */
        goto __pyx_L7_continue;

        /* "graph.pyx":999
 *             for i in range(self.EidN):
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1 or Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:             # <<<<<<<<<<<<<<
 *                     continue
 *                 # possible new path
 */
      }

      /* "graph.pyx":1003
 *                 # possible new path
 *                 # new node?
 *                 EdgeC = self.edges[Eid]             # <<<<<<<<<<<<<<
 *                 if EdgeC.NidO == NodeCheck.Nid:
 *                     len = EdgeC.len
 */
      __pyx_v_EdgeC = (__pyx_v_self->edges[__pyx_v_Eid]);

      /* "graph.pyx":1004
 *                 # new node?
 *                 EdgeC = self.edges[Eid]
 *                 if EdgeC.NidO == NodeCheck.Nid:             # <<<<<<<<<<<<<<
 *                     len = EdgeC.len
 *                     NidF = EdgeC.NidD
 */
      __pyx_t_2 = (__pyx_v_EdgeC.NidO == __pyx_v_NodeCheck.Nid);
      if (__pyx_t_2) {

        /* "graph.pyx":1005
 *                 EdgeC = self.edges[Eid]
 *                 if EdgeC.NidO == NodeCheck.Nid:
 *                     len = EdgeC.len             # <<<<<<<<<<<<<<
 *                     NidF = EdgeC.NidD
 *                 else :
 */
        __pyx_t_1 = __pyx_v_EdgeC.len;
        __pyx_v_len = __pyx_t_1;

        /* "graph.pyx":1006
 *                 if EdgeC.NidO == NodeCheck.Nid:
 *                     len = EdgeC.len
 *                     NidF = EdgeC.NidD             # <<<<<<<<<<<<<<
 *                 else :
 *                     len = EdgeC.lenR
 */
        __pyx_t_9 = __pyx_v_EdgeC.NidD;
        __pyx_v_NidF = __pyx_t_9;

        /* "graph.pyx":1004
 *                 # new node?
 *                 EdgeC = self.edges[Eid]
 *                 if EdgeC.NidO == NodeCheck.Nid:             # <<<<<<<<<<<<<<
 *                     len = EdgeC.len
 *                     NidF = EdgeC.NidD
 */
        goto __pyx_L13;
      }

      /* "graph.pyx":1008
 *                     NidF = EdgeC.NidD
 *                 else :
 *                     len = EdgeC.lenR             # <<<<<<<<<<<<<<
 *                     NidF = EdgeC.NidO
 * 
 */
      /*else*/ {
        __pyx_t_1 = __pyx_v_EdgeC.lenR;
        __pyx_v_len = __pyx_t_1;

        /* "graph.pyx":1009
 *                 else :
 *                     len = EdgeC.lenR
 *                     NidF = EdgeC.NidO             # <<<<<<<<<<<<<<
 * 
 *                 if self._nodesIds[NidF] == -1:
 */
        __pyx_t_9 = __pyx_v_EdgeC.NidO;
        __pyx_v_NidF = __pyx_t_9;
      }
      __pyx_L13:;

      /* "graph.pyx":1011
 *                     NidF = EdgeC.NidO
 * 
 *                 if self._nodesIds[NidF] == -1:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      __pyx_t_2 = ((__pyx_v_self->_nodesIds[__pyx_v_NidF]) == -1L);
      if (__pyx_t_2) {

        /* "graph.pyx":1012
 * 
 *                 if self._nodesIds[NidF] == -1:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 len += NodeCheck.Dist + self.nodes[NidF].c
 */
        goto __pyx_L7_continue;

        /* "graph.pyx":1011
 *                     NidF = EdgeC.NidO
 * 
 *                 if self._nodesIds[NidF] == -1:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      }

      /* "graph.pyx":1014
 *                     continue
 * 
 *                 len += NodeCheck.Dist + self.nodes[NidF].c             # <<<<<<<<<<<<<<
 * 
 *                 if len > LimDist:
 */
      __pyx_v_len = (__pyx_v_len + (__pyx_v_NodeCheck.Dist + (__pyx_v_self->nodes[__pyx_v_NidF]).c));

      /* "graph.pyx":1016
 *                 len += NodeCheck.Dist + self.nodes[NidF].c
 * 
 *                 if len > LimDist:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      __pyx_t_2 = (__pyx_v_len > __pyx_v_LimDist);
      if (__pyx_t_2) {

        /* "graph.pyx":1017
 * 
 *                 if len > LimDist:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 NodeReach_T.Nid = NidF
 */
        goto __pyx_L7_continue;

        /* "graph.pyx":1016
 *                 len += NodeCheck.Dist + self.nodes[NidF].c
 * 
 *                 if len > LimDist:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      }

      /* "graph.pyx":1019
 *                     continue
 * 
 *                 NodeReach_T.Nid = NidF             # <<<<<<<<<<<<<<
 *                 NodeReach_T.Dist = len
 *                 NodeReach_T.Eid = Eid
 */
      __pyx_v_NodeReach_T.Nid = __pyx_v_NidF;

      /* "graph.pyx":1020
 * 
 *                 NodeReach_T.Nid = NidF
 *                 NodeReach_T.Dist = len             # <<<<<<<<<<<<<<
 *                 NodeReach_T.Eid = Eid
 *                 NodeReach_T.NidO = NodeCheck.Nid
 */
      __pyx_v_NodeReach_T.Dist = __pyx_v_len;

      /* "graph.pyx":1021
 *                 NodeReach_T.Nid = NidF
 *                 NodeReach_T.Dist = len
 *                 NodeReach_T.Eid = Eid             # <<<<<<<<<<<<<<
 *                 NodeReach_T.NidO = NodeCheck.Nid
 *                 NodeReach_T.Weight = len
 */
      __pyx_v_NodeReach_T.Eid = __pyx_v_Eid;

      /* "graph.pyx":1022
 *                 NodeReach_T.Dist = len
 *                 NodeReach_T.Eid = Eid
 *                 NodeReach_T.NidO = NodeCheck.Nid             # <<<<<<<<<<<<<<
 *                 NodeReach_T.Weight = len
 * 
 */
      __pyx_t_9 = __pyx_v_NodeCheck.Nid;
      __pyx_v_NodeReach_T.NidO = __pyx_t_9;

      /* "graph.pyx":1023
 *                 NodeReach_T.Eid = Eid
 *                 NodeReach_T.NidO = NodeCheck.Nid
 *                 NodeReach_T.Weight = len             # <<<<<<<<<<<<<<
 * 
 *                 # check to visited nodes
 */
      __pyx_v_NodeReach_T.Weight = __pyx_v_len;

      /* "graph.pyx":1026
 * 
 *                 # check to visited nodes
 *                 if self.nodeVisited[NidF].Nid == -1 : # if node havent been visited             # <<<<<<<<<<<<<<
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 */
      __pyx_t_2 = ((__pyx_v_self->nodeVisited[__pyx_v_NidF]).Nid == -1L);
      if (__pyx_t_2) {

        /* "graph.pyx":1027
 *                 # check to visited nodes
 *                 if self.nodeVisited[NidF].Nid == -1 : # if node havent been visited
 *                     self.nodeVisited[NidF] = NodeReach_T             # <<<<<<<<<<<<<<
 *                     OpenNodes.push(NodeReach_T)
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance
 */
        (__pyx_v_self->nodeVisited[__pyx_v_NidF]) = __pyx_v_NodeReach_T;

        /* "graph.pyx":1028
 *                 if self.nodeVisited[NidF].Nid == -1 : # if node havent been visited
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)             # <<<<<<<<<<<<<<
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance
 *                     self.nodeVisited[NidF] = NodeReach_T
 */
        ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_NodeReach_T); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1028, __pyx_L1_error)

        /* "graph.pyx":1026
 * 
 *                 # check to visited nodes
 *                 if self.nodeVisited[NidF].Nid == -1 : # if node havent been visited             # <<<<<<<<<<<<<<
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 */
        goto __pyx_L16;
      }

      /* "graph.pyx":1029
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance             # <<<<<<<<<<<<<<
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 */
      __pyx_t_2 = ((__pyx_v_self->nodeVisited[__pyx_v_NidF]).Dist > __pyx_v_len);
      if (__pyx_t_2) {

        /* "graph.pyx":1030
 *                     OpenNodes.push(NodeReach_T)
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance
 *                     self.nodeVisited[NidF] = NodeReach_T             # <<<<<<<<<<<<<<
 *                     OpenNodes.push(NodeReach_T)
 * 
 */
        (__pyx_v_self->nodeVisited[__pyx_v_NidF]) = __pyx_v_NodeReach_T;

        /* "graph.pyx":1031
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)             # <<<<<<<<<<<<<<
 * 
 *             if cycles > LimCycle or OpenNodes.top().Dist > LimDist:
 */
        ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_NodeReach_T); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1031, __pyx_L1_error)

        /* "graph.pyx":1029
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance             # <<<<<<<<<<<<<<
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 */
      }
      __pyx_L16:;
      __pyx_L7_continue:;
    }

    /* "graph.pyx":1033
 *                     OpenNodes.push(NodeReach_T)
 * 
 *             if cycles > LimCycle or OpenNodes.top().Dist > LimDist:             # <<<<<<<<<<<<<<
 *                 # if reaches cycle count limit
 *                 # if the minimum distance in open nodes is more than the distance limit
 */
    __pyx_t_8 = (__pyx_v_cycles > __pyx_v_LimCycle);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_2 = __pyx_t_8;
      goto __pyx_L18_bool_binop_done;
    }
    __pyx_t_4 = ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->top(__pyx_v_OpenNodes); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1033, __pyx_L1_error)
    __pyx_t_8 = (__pyx_t_4.Dist > __pyx_v_LimDist);
    __pyx_t_2 = __pyx_t_8;
    __pyx_L18_bool_binop_done:;
    if (__pyx_t_2) {

      /* "graph.pyx":1036
 *                 # if reaches cycle count limit
 *                 # if the minimum distance in open nodes is more than the distance limit
 *                 keepGoing = False             # <<<<<<<<<<<<<<
 *             elif OpenNodes.empty():
 *                 keepGoing = False
 */
      __pyx_v_keepGoing = 0;

      /* "graph.pyx":1033
 *                     OpenNodes.push(NodeReach_T)
 * 
 *             if cycles > LimCycle or OpenNodes.top().Dist > LimDist:             # <<<<<<<<<<<<<<
 *                 # if reaches cycle count limit
 *                 # if the minimum distance in open nodes is more than the distance limit
 */
      goto __pyx_L17;
    }

    /* "graph.pyx":1037
 *                 # if the minimum distance in open nodes is more than the distance limit
 *                 keepGoing = False
 *             elif OpenNodes.empty():             # <<<<<<<<<<<<<<
 *                 keepGoing = False
 * 
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->empty(__pyx_v_OpenNodes); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1037, __pyx_L1_error)
    if (__pyx_t_2) {

      /* "graph.pyx":1038
 *                 keepGoing = False
 *             elif OpenNodes.empty():
 *                 keepGoing = False             # <<<<<<<<<<<<<<
 * 
 *         if not keepGoing:
 */
      __pyx_v_keepGoing = 0;

      /* "graph.pyx":1037
 *                 # if the minimum distance in open nodes is more than the distance limit
 *                 keepGoing = False
 *             elif OpenNodes.empty():             # <<<<<<<<<<<<<<
 *                 keepGoing = False
 * 
 */
    }
    __pyx_L17:;
  }
  __pyx_L5_break:;

  /* "graph.pyx":1040
 *                 keepGoing = False
 * 
 *         if not keepGoing:             # <<<<<<<<<<<<<<
 *             return (-1.0,(-1,))
 *         else:
 */
  __pyx_t_2 = (!__pyx_v_keepGoing);
  if (__pyx_t_2) {

    /* "graph.pyx":1041
 * 
 *         if not keepGoing:
 *             return (-1.0,(-1,))             # <<<<<<<<<<<<<<
 *         else:
 *             # if found path, retracing steps
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_tuple__17);
    __pyx_r = __pyx_tuple__17;
    goto __pyx_L0;

    /* "graph.pyx":1040
 *                 keepGoing = False
 * 
 *         if not keepGoing:             # <<<<<<<<<<<<<<
 *             return (-1.0,(-1,))
 *         else:
 */
  }

  /* "graph.pyx":1044
 *         else:
 *             # if found path, retracing steps
 *             nlook = NidD             # <<<<<<<<<<<<<<
 *             while nlook != NidO:
 *                 pth.insert(pth.begin(),self.nodeVisited[nlook].Eid)
 */
  /*else*/ {
    __pyx_v_nlook = __pyx_v_NidD;

    /* "graph.pyx":1045
 *             # if found path, retracing steps
 *             nlook = NidD
 *             while nlook != NidO:             # <<<<<<<<<<<<<<
 *                 pth.insert(pth.begin(),self.nodeVisited[nlook].Eid)
 *                 nlook = self.nodeVisited[nlook].NidO
 */
    while (1) {
      __pyx_t_2 = (__pyx_v_nlook != __pyx_v_NidO);
      if (!__pyx_t_2) break;

      /* "graph.pyx":1046
 *             nlook = NidD
 *             while nlook != NidO:
 *                 pth.insert(pth.begin(),self.nodeVisited[nlook].Eid)             # <<<<<<<<<<<<<<
 *                 nlook = self.nodeVisited[nlook].NidO
 *             # pth.insert(pth.begin(),nlook) # inserting the NidO
 */
      try {
        __pyx_v_pth.insert(__pyx_v_pth.begin(), (__pyx_v_self->nodeVisited[__pyx_v_nlook]).Eid);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 1046, __pyx_L1_error)
      }

      /* "graph.pyx":1047
 *             while nlook != NidO:
 *                 pth.insert(pth.begin(),self.nodeVisited[nlook].Eid)
 *                 nlook = self.nodeVisited[nlook].NidO             # <<<<<<<<<<<<<<
 *             # pth.insert(pth.begin(),nlook) # inserting the NidO
 *             return (NodeCheck.Dist, tuple(pth))
 */
      __pyx_t_5 = (__pyx_v_self->nodeVisited[__pyx_v_nlook]).NidO;
      __pyx_v_nlook = __pyx_t_5;
    }

    /* "graph.pyx":1049
 *                 nlook = self.nodeVisited[nlook].NidO
 *             # pth.insert(pth.begin(),nlook) # inserting the NidO
 *             return (NodeCheck.Dist, tuple(pth))             # <<<<<<<<<<<<<<
 * 
 *     def PathDist_Dijkstra(self, int NidO, int NidD, float LimDist = 10_000.0, int LimCycle = 10_000) -> float:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_NodeCheck.Dist); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1049, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = __pyx_convert_vector_to_py_int(__pyx_v_pth); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1049, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_11 = __Pyx_PySequence_Tuple(__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1049, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1049, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_3)) __PYX_ERR(0, 1049, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_11);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_11)) __PYX_ERR(0, 1049, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_t_11 = 0;
    __pyx_r = ((PyObject*)__pyx_t_10);
    __pyx_t_10 = 0;
    goto __pyx_L0;
  }

  /* "graph.pyx":929
 *         return length
 * 
 *     def PathFind_Dijkstra(self, int NidO, int NidD, float LimDist = 10_000.0, int LimCycle = 10_000) -> tuple[float, tuple[int]]:             # <<<<<<<<<<<<<<
 *         """
 *         Find smallest distance and edges traversed between two nodes in the graph.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("graph.GraphCy.PathFind_Dijkstra", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_OpenNodes);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":1051
 *             return (NodeCheck.Dist, tuple(pth))
 * 
 *     def PathDist_Dijkstra(self, int NidO, int NidD, float LimDist = 10_000.0, int LimCycle = 10_000) -> float:             # <<<<<<<<<<<<<<
 *         """
 *         Find smallest distance between two nodes in the graph.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5graph_7GraphCy_45PathDist_Dijkstra(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5graph_7GraphCy_44PathDist_Dijkstra, "\n        Find smallest distance between two nodes in the graph.\n\n        Parameters\n        ------------\n        NidO : int\n            starting node ID\n        NidD : int\n            destination node ID\n        LimDist : float, default 10,000.0\n            distance limit before giving up the pathfinding process\n        LimCycle : int, default 10,000\n            number of cycles of priority_queue before giving up the pathfinding process\n        \n        Returns\n        -----------\n        length: float\n            if a path is found, it will return with the length of shortest possible distance of the path\n            if a path is not found, it will return -1.0\n        \n        Notes\n        -----------\n        The algorithm has bidirectional capability and also node cost added.\n        ");
static PyMethodDef __pyx_mdef_5graph_7GraphCy_45PathDist_Dijkstra = {"PathDist_Dijkstra", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_45PathDist_Dijkstra, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5graph_7GraphCy_44PathDist_Dijkstra};
static PyObject *__pyx_pw_5graph_7GraphCy_45PathDist_Dijkstra(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_NidO;
  int __pyx_v_NidD;
  float __pyx_v_LimDist;
  int __pyx_v_LimCycle;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("PathDist_Dijkstra (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_NidO,&__pyx_n_s_NidD,&__pyx_n_s_LimDist,&__pyx_n_s_LimCycle,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_NidO)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1051, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_NidD)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1051, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("PathDist_Dijkstra", 0, 2, 4, 1); __PYX_ERR(0, 1051, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_LimDist);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1051, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_LimCycle);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1051, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "PathDist_Dijkstra") < 0)) __PYX_ERR(0, 1051, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_NidO = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_NidO == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1051, __pyx_L3_error)
    __pyx_v_NidD = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_NidD == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1051, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_LimDist = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_LimDist == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1051, __pyx_L3_error)
    } else {
      __pyx_v_LimDist = ((float)10000.0);
    }
    if (values[3]) {
      __pyx_v_LimCycle = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_LimCycle == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1051, __pyx_L3_error)
    } else {
      __pyx_v_LimCycle = ((int)0x2710);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("PathDist_Dijkstra", 0, 2, 4, __pyx_nargs); __PYX_ERR(0, 1051, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("graph.GraphCy.PathDist_Dijkstra", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5graph_7GraphCy_44PathDist_Dijkstra(((struct __pyx_obj_5graph_GraphCy *)__pyx_v_self), __pyx_v_NidO, __pyx_v_NidD, __pyx_v_LimDist, __pyx_v_LimCycle);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5graph_7GraphCy_44PathDist_Dijkstra(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, int __pyx_v_NidO, int __pyx_v_NidD, float __pyx_v_LimDist, int __pyx_v_LimCycle) {
  float __pyx_v_BaseDist;
  int __pyx_v_cycles;
  int __pyx_v_keepGoing;
  struct __pyx_obj_5graph_PriorityQueue_NR *__pyx_v_OpenNodes = 0;
  struct __pyx_t_5graph_NodeReach __pyx_v_startNode;
  struct __pyx_t_5graph_NodeReach __pyx_v_NodeReach_T;
  int __pyx_v_NidF;
  float __pyx_v_len;
  struct __pyx_t_5graph_Edge __pyx_v_EdgeC;
  struct __pyx_t_5graph_NodeReach __pyx_v_NodeCheck;
  int __pyx_v_i;
  int __pyx_v_Eid;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  struct __pyx_t_5graph_NodeReach __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PathDist_Dijkstra", 1);

  /* "graph.pyx":1076
 *         The algorithm has bidirectional capability and also node cost added.
 *         """
 *         cdef float BaseDist = dist3d(self.nodes[NidO], self.nodes[NidD])             # <<<<<<<<<<<<<<
 *         if BaseDist*0.9 > LimDist:
 *             return -1.0
 */
  __pyx_t_1 = __pyx_f_5graph_dist3d((__pyx_v_self->nodes[__pyx_v_NidO]), (__pyx_v_self->nodes[__pyx_v_NidD])); if (unlikely(__pyx_t_1 == ((float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1076, __pyx_L1_error)
  __pyx_v_BaseDist = __pyx_t_1;

  /* "graph.pyx":1077
 *         """
 *         cdef float BaseDist = dist3d(self.nodes[NidO], self.nodes[NidD])
 *         if BaseDist*0.9 > LimDist:             # <<<<<<<<<<<<<<
 *             return -1.0
 * 
 */
  __pyx_t_2 = ((__pyx_v_BaseDist * 0.9) > __pyx_v_LimDist);
  if (__pyx_t_2) {

    /* "graph.pyx":1078
 *         cdef float BaseDist = dist3d(self.nodes[NidO], self.nodes[NidD])
 *         if BaseDist*0.9 > LimDist:
 *             return -1.0             # <<<<<<<<<<<<<<
 * 
 *         self.C_Reset_NodeVisited()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_neg_1_0);
    __pyx_r = __pyx_float_neg_1_0;
    goto __pyx_L0;

    /* "graph.pyx":1077
 *         """
 *         cdef float BaseDist = dist3d(self.nodes[NidO], self.nodes[NidD])
 *         if BaseDist*0.9 > LimDist:             # <<<<<<<<<<<<<<
 *             return -1.0
 * 
 */
  }

  /* "graph.pyx":1080
 *             return -1.0
 * 
 *         self.C_Reset_NodeVisited()             # <<<<<<<<<<<<<<
 * 
 *         cdef int cycles
 */
  __pyx_f_5graph_7GraphCy_C_Reset_NodeVisited(__pyx_v_self, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1080, __pyx_L1_error)

  /* "graph.pyx":1083
 * 
 *         cdef int cycles
 *         cycles = 1             # <<<<<<<<<<<<<<
 *         cdef bint keepGoing
 *         keepGoing = True
 */
  __pyx_v_cycles = 1;

  /* "graph.pyx":1085
 *         cycles = 1
 *         cdef bint keepGoing
 *         keepGoing = True             # <<<<<<<<<<<<<<
 * 
 *         # cdef vector[NodeReach] OpenNodes
 */
  __pyx_v_keepGoing = 1;

  /* "graph.pyx":1090
 *         cdef PriorityQueue_NR OpenNodes
 *         cdef NodeReach startNode
 *         startNode.Nid = NidO             # <<<<<<<<<<<<<<
 *         startNode.Eid = -1
 *         startNode.Dist = 0.0
 */
  __pyx_v_startNode.Nid = __pyx_v_NidO;

  /* "graph.pyx":1091
 *         cdef NodeReach startNode
 *         startNode.Nid = NidO
 *         startNode.Eid = -1             # <<<<<<<<<<<<<<
 *         startNode.Dist = 0.0
 *         startNode.NidO = -1
 */
  __pyx_v_startNode.Eid = -1;

  /* "graph.pyx":1092
 *         startNode.Nid = NidO
 *         startNode.Eid = -1
 *         startNode.Dist = 0.0             # <<<<<<<<<<<<<<
 *         startNode.NidO = -1
 *         startNode.Weight = 0.0
 */
  __pyx_v_startNode.Dist = 0.0;

  /* "graph.pyx":1093
 *         startNode.Eid = -1
 *         startNode.Dist = 0.0
 *         startNode.NidO = -1             # <<<<<<<<<<<<<<
 *         startNode.Weight = 0.0
 *         OpenNodes = PriorityQueue_NR()
 */
  __pyx_v_startNode.NidO = -1;

  /* "graph.pyx":1094
 *         startNode.Dist = 0.0
 *         startNode.NidO = -1
 *         startNode.Weight = 0.0             # <<<<<<<<<<<<<<
 *         OpenNodes = PriorityQueue_NR()
 *         OpenNodes.push(startNode)
 */
  __pyx_v_startNode.Weight = 0.0;

  /* "graph.pyx":1095
 *         startNode.NidO = -1
 *         startNode.Weight = 0.0
 *         OpenNodes = PriorityQueue_NR()             # <<<<<<<<<<<<<<
 *         OpenNodes.push(startNode)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5graph_PriorityQueue_NR)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1095, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_OpenNodes = ((struct __pyx_obj_5graph_PriorityQueue_NR *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "graph.pyx":1096
 *         startNode.Weight = 0.0
 *         OpenNodes = PriorityQueue_NR()
 *         OpenNodes.push(startNode)             # <<<<<<<<<<<<<<
 * 
 *         cdef NodeReach NodeReach_T
 */
  ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_startNode); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1096, __pyx_L1_error)

  /* "graph.pyx":1104
 *         cdef NodeReach NodeCheck
 * 
 *         while keepGoing:             # <<<<<<<<<<<<<<
 *             cycles += 1
 *             # check paths from OpenNodes
 */
  while (1) {
    if (!__pyx_v_keepGoing) break;

    /* "graph.pyx":1105
 * 
 *         while keepGoing:
 *             cycles += 1             # <<<<<<<<<<<<<<
 *             # check paths from OpenNodes
 *             NodeCheck = OpenNodes.pop_top()
 */
    __pyx_v_cycles = (__pyx_v_cycles + 1);

    /* "graph.pyx":1107
 *             cycles += 1
 *             # check paths from OpenNodes
 *             NodeCheck = OpenNodes.pop_top()             # <<<<<<<<<<<<<<
 * 
 *             if NodeCheck.Nid == NidD:
 */
    __pyx_t_4 = ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->pop_top(__pyx_v_OpenNodes); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1107, __pyx_L1_error)
    __pyx_v_NodeCheck = __pyx_t_4;

    /* "graph.pyx":1109
 *             NodeCheck = OpenNodes.pop_top()
 * 
 *             if NodeCheck.Nid == NidD:             # <<<<<<<<<<<<<<
 *                 return NodeCheck.Dist
 * 
 */
    __pyx_t_2 = (__pyx_v_NodeCheck.Nid == __pyx_v_NidD);
    if (__pyx_t_2) {

      /* "graph.pyx":1110
 * 
 *             if NodeCheck.Nid == NidD:
 *                 return NodeCheck.Dist             # <<<<<<<<<<<<<<
 * 
 *             for i in range(self.EidN):
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = PyFloat_FromDouble(__pyx_v_NodeCheck.Dist); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1110, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "graph.pyx":1109
 *             NodeCheck = OpenNodes.pop_top()
 * 
 *             if NodeCheck.Nid == NidD:             # <<<<<<<<<<<<<<
 *                 return NodeCheck.Dist
 * 
 */
    }

    /* "graph.pyx":1112
 *                 return NodeCheck.Dist
 * 
 *             for i in range(self.EidN):             # <<<<<<<<<<<<<<
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1 or Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 */
    __pyx_t_5 = __pyx_v_self->EidN;
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_i = __pyx_t_7;

      /* "graph.pyx":1113
 * 
 *             for i in range(self.EidN):
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]             # <<<<<<<<<<<<<<
 *                 if Eid == -1 or Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 *                     continue
 */
      __pyx_v_Eid = ((__pyx_v_self->nodes[__pyx_v_NodeCheck.Nid]).Eid[__pyx_v_i]);

      /* "graph.pyx":1114
 *             for i in range(self.EidN):
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1 or Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:             # <<<<<<<<<<<<<<
 *                     continue
 *                 # possible new path
 */
      __pyx_t_8 = (__pyx_v_Eid == -1L);
      if (!__pyx_t_8) {
      } else {
        __pyx_t_2 = __pyx_t_8;
        goto __pyx_L10_bool_binop_done;
      }
      __pyx_t_8 = (__pyx_v_Eid == __pyx_v_NodeCheck.Eid);
      if (!__pyx_t_8) {
      } else {
        __pyx_t_2 = __pyx_t_8;
        goto __pyx_L10_bool_binop_done;
      }
      __pyx_t_8 = ((__pyx_v_self->_edgesIds[__pyx_v_Eid]) == -1L);
      __pyx_t_2 = __pyx_t_8;
      __pyx_L10_bool_binop_done:;
      if (__pyx_t_2) {

        /* "graph.pyx":1115
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1 or Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 *                     continue             # <<<<<<<<<<<<<<
 *                 # possible new path
 *                 # new node?
 */
        goto __pyx_L7_continue;

        /* "graph.pyx":1114
 *             for i in range(self.EidN):
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1 or Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:             # <<<<<<<<<<<<<<
 *                     continue
 *                 # possible new path
 */
      }

      /* "graph.pyx":1118
 *                 # possible new path
 *                 # new node?
 *                 EdgeC = self.edges[Eid]             # <<<<<<<<<<<<<<
 *                 if EdgeC.NidO == NodeCheck.Nid:
 *                     len = EdgeC.len
 */
      __pyx_v_EdgeC = (__pyx_v_self->edges[__pyx_v_Eid]);

      /* "graph.pyx":1119
 *                 # new node?
 *                 EdgeC = self.edges[Eid]
 *                 if EdgeC.NidO == NodeCheck.Nid:             # <<<<<<<<<<<<<<
 *                     len = EdgeC.len
 *                     NidF = EdgeC.NidD
 */
      __pyx_t_2 = (__pyx_v_EdgeC.NidO == __pyx_v_NodeCheck.Nid);
      if (__pyx_t_2) {

        /* "graph.pyx":1120
 *                 EdgeC = self.edges[Eid]
 *                 if EdgeC.NidO == NodeCheck.Nid:
 *                     len = EdgeC.len             # <<<<<<<<<<<<<<
 *                     NidF = EdgeC.NidD
 *                 else :
 */
        __pyx_t_1 = __pyx_v_EdgeC.len;
        __pyx_v_len = __pyx_t_1;

        /* "graph.pyx":1121
 *                 if EdgeC.NidO == NodeCheck.Nid:
 *                     len = EdgeC.len
 *                     NidF = EdgeC.NidD             # <<<<<<<<<<<<<<
 *                 else :
 *                     len = EdgeC.lenR
 */
        __pyx_t_9 = __pyx_v_EdgeC.NidD;
        __pyx_v_NidF = __pyx_t_9;

        /* "graph.pyx":1119
 *                 # new node?
 *                 EdgeC = self.edges[Eid]
 *                 if EdgeC.NidO == NodeCheck.Nid:             # <<<<<<<<<<<<<<
 *                     len = EdgeC.len
 *                     NidF = EdgeC.NidD
 */
        goto __pyx_L13;
      }

      /* "graph.pyx":1123
 *                     NidF = EdgeC.NidD
 *                 else :
 *                     len = EdgeC.lenR             # <<<<<<<<<<<<<<
 *                     NidF = EdgeC.NidO
 * 
 */
      /*else*/ {
        __pyx_t_1 = __pyx_v_EdgeC.lenR;
        __pyx_v_len = __pyx_t_1;

        /* "graph.pyx":1124
 *                 else :
 *                     len = EdgeC.lenR
 *                     NidF = EdgeC.NidO             # <<<<<<<<<<<<<<
 * 
 *                 if self._nodesIds[NidF] == -1:
 */
        __pyx_t_9 = __pyx_v_EdgeC.NidO;
        __pyx_v_NidF = __pyx_t_9;
      }
      __pyx_L13:;

      /* "graph.pyx":1126
 *                     NidF = EdgeC.NidO
 * 
 *                 if self._nodesIds[NidF] == -1:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      __pyx_t_2 = ((__pyx_v_self->_nodesIds[__pyx_v_NidF]) == -1L);
      if (__pyx_t_2) {

        /* "graph.pyx":1127
 * 
 *                 if self._nodesIds[NidF] == -1:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 len += NodeCheck.Dist + self.nodes[NidF].c
 */
        goto __pyx_L7_continue;

        /* "graph.pyx":1126
 *                     NidF = EdgeC.NidO
 * 
 *                 if self._nodesIds[NidF] == -1:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      }

      /* "graph.pyx":1129
 *                     continue
 * 
 *                 len += NodeCheck.Dist + self.nodes[NidF].c             # <<<<<<<<<<<<<<
 * 
 *                 if len > LimDist:
 */
      __pyx_v_len = (__pyx_v_len + (__pyx_v_NodeCheck.Dist + (__pyx_v_self->nodes[__pyx_v_NidF]).c));

      /* "graph.pyx":1131
 *                 len += NodeCheck.Dist + self.nodes[NidF].c
 * 
 *                 if len > LimDist:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      __pyx_t_2 = (__pyx_v_len > __pyx_v_LimDist);
      if (__pyx_t_2) {

        /* "graph.pyx":1132
 * 
 *                 if len > LimDist:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 NodeReach_T.Nid = NidF
 */
        goto __pyx_L7_continue;

        /* "graph.pyx":1131
 *                 len += NodeCheck.Dist + self.nodes[NidF].c
 * 
 *                 if len > LimDist:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      }

      /* "graph.pyx":1134
 *                     continue
 * 
 *                 NodeReach_T.Nid = NidF             # <<<<<<<<<<<<<<
 *                 NodeReach_T.Dist = len
 *                 NodeReach_T.Eid = Eid
 */
      __pyx_v_NodeReach_T.Nid = __pyx_v_NidF;

      /* "graph.pyx":1135
 * 
 *                 NodeReach_T.Nid = NidF
 *                 NodeReach_T.Dist = len             # <<<<<<<<<<<<<<
 *                 NodeReach_T.Eid = Eid
 *                 NodeReach_T.NidO = NodeCheck.Nid
 */
      __pyx_v_NodeReach_T.Dist = __pyx_v_len;

      /* "graph.pyx":1136
 *                 NodeReach_T.Nid = NidF
 *                 NodeReach_T.Dist = len
 *                 NodeReach_T.Eid = Eid             # <<<<<<<<<<<<<<
 *                 NodeReach_T.NidO = NodeCheck.Nid
 *                 NodeReach_T.Weight = len
 */
      __pyx_v_NodeReach_T.Eid = __pyx_v_Eid;

      /* "graph.pyx":1137
 *                 NodeReach_T.Dist = len
 *                 NodeReach_T.Eid = Eid
 *                 NodeReach_T.NidO = NodeCheck.Nid             # <<<<<<<<<<<<<<
 *                 NodeReach_T.Weight = len
 * 
 */
      __pyx_t_9 = __pyx_v_NodeCheck.Nid;
      __pyx_v_NodeReach_T.NidO = __pyx_t_9;

      /* "graph.pyx":1138
 *                 NodeReach_T.Eid = Eid
 *                 NodeReach_T.NidO = NodeCheck.Nid
 *                 NodeReach_T.Weight = len             # <<<<<<<<<<<<<<
 * 
 *                 # check to visited nodes
 */
      __pyx_v_NodeReach_T.Weight = __pyx_v_len;

      /* "graph.pyx":1141
 * 
 *                 # check to visited nodes
 *                 if self.nodeVisited[NidF].Nid == -1 : # if node havent been visited             # <<<<<<<<<<<<<<
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 */
      __pyx_t_2 = ((__pyx_v_self->nodeVisited[__pyx_v_NidF]).Nid == -1L);
      if (__pyx_t_2) {

        /* "graph.pyx":1142
 *                 # check to visited nodes
 *                 if self.nodeVisited[NidF].Nid == -1 : # if node havent been visited
 *                     self.nodeVisited[NidF] = NodeReach_T             # <<<<<<<<<<<<<<
 *                     OpenNodes.push(NodeReach_T)
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance
 */
        (__pyx_v_self->nodeVisited[__pyx_v_NidF]) = __pyx_v_NodeReach_T;

        /* "graph.pyx":1143
 *                 if self.nodeVisited[NidF].Nid == -1 : # if node havent been visited
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)             # <<<<<<<<<<<<<<
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance
 *                     self.nodeVisited[NidF] = NodeReach_T
 */
        ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_NodeReach_T); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1143, __pyx_L1_error)

        /* "graph.pyx":1141
 * 
 *                 # check to visited nodes
 *                 if self.nodeVisited[NidF].Nid == -1 : # if node havent been visited             # <<<<<<<<<<<<<<
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 */
        goto __pyx_L16;
      }

      /* "graph.pyx":1144
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance             # <<<<<<<<<<<<<<
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 */
      __pyx_t_2 = ((__pyx_v_self->nodeVisited[__pyx_v_NidF]).Dist > __pyx_v_len);
      if (__pyx_t_2) {

        /* "graph.pyx":1145
 *                     OpenNodes.push(NodeReach_T)
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance
 *                     self.nodeVisited[NidF] = NodeReach_T             # <<<<<<<<<<<<<<
 *                     OpenNodes.push(NodeReach_T)
 * 
 */
        (__pyx_v_self->nodeVisited[__pyx_v_NidF]) = __pyx_v_NodeReach_T;

        /* "graph.pyx":1146
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)             # <<<<<<<<<<<<<<
 * 
 *             if cycles > LimCycle or OpenNodes.top().Dist > LimDist:
 */
        ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_NodeReach_T); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1146, __pyx_L1_error)

        /* "graph.pyx":1144
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance             # <<<<<<<<<<<<<<
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 */
      }
      __pyx_L16:;
      __pyx_L7_continue:;
    }

    /* "graph.pyx":1148
 *                     OpenNodes.push(NodeReach_T)
 * 
 *             if cycles > LimCycle or OpenNodes.top().Dist > LimDist:             # <<<<<<<<<<<<<<
 *                 # if reaches cycle count limit
 *                 # if the minimum distance in open nodes is more than the distance limit
 */
    __pyx_t_8 = (__pyx_v_cycles > __pyx_v_LimCycle);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_2 = __pyx_t_8;
      goto __pyx_L18_bool_binop_done;
    }
    __pyx_t_4 = ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->top(__pyx_v_OpenNodes); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1148, __pyx_L1_error)
    __pyx_t_8 = (__pyx_t_4.Dist > __pyx_v_LimDist);
    __pyx_t_2 = __pyx_t_8;
    __pyx_L18_bool_binop_done:;
    if (__pyx_t_2) {

      /* "graph.pyx":1151
 *                 # if reaches cycle count limit
 *                 # if the minimum distance in open nodes is more than the distance limit
 *                 keepGoing = False             # <<<<<<<<<<<<<<
 *             elif OpenNodes.empty():
 *                 keepGoing = False
 */
      __pyx_v_keepGoing = 0;

      /* "graph.pyx":1148
 *                     OpenNodes.push(NodeReach_T)
 * 
 *             if cycles > LimCycle or OpenNodes.top().Dist > LimDist:             # <<<<<<<<<<<<<<
 *                 # if reaches cycle count limit
 *                 # if the minimum distance in open nodes is more than the distance limit
 */
      goto __pyx_L17;
    }

    /* "graph.pyx":1152
 *                 # if the minimum distance in open nodes is more than the distance limit
 *                 keepGoing = False
 *             elif OpenNodes.empty():             # <<<<<<<<<<<<<<
 *                 keepGoing = False
 * 
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->empty(__pyx_v_OpenNodes); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1152, __pyx_L1_error)
    if (__pyx_t_2) {

      /* "graph.pyx":1153
 *                 keepGoing = False
 *             elif OpenNodes.empty():
 *                 keepGoing = False             # <<<<<<<<<<<<<<
 * 
 *         return -1.0
 */
      __pyx_v_keepGoing = 0;

      /* "graph.pyx":1152
 *                 # if the minimum distance in open nodes is more than the distance limit
 *                 keepGoing = False
 *             elif OpenNodes.empty():             # <<<<<<<<<<<<<<
 *                 keepGoing = False
 * 
 */
    }
    __pyx_L17:;
  }

  /* "graph.pyx":1155
 *                 keepGoing = False
 * 
 *         return -1.0             # <<<<<<<<<<<<<<
 * 
 *     def PathFind_AStar(self, int NidO, int NidD, float LimDist = 10_000.0, int LimCycle = 10_000, float DistMul = 2.0) -> tuple[float, tuple[int]]:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_float_neg_1_0);
  __pyx_r = __pyx_float_neg_1_0;
  goto __pyx_L0;

  /* "graph.pyx":1051
 *             return (NodeCheck.Dist, tuple(pth))
 * 
 *     def PathDist_Dijkstra(self, int NidO, int NidD, float LimDist = 10_000.0, int LimCycle = 10_000) -> float:             # <<<<<<<<<<<<<<
 *         """
 *         Find smallest distance between two nodes in the graph.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("graph.GraphCy.PathDist_Dijkstra", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_OpenNodes);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":1157
 *         return -1.0
 * 
 *     def PathFind_AStar(self, int NidO, int NidD, float LimDist = 10_000.0, int LimCycle = 10_000, float DistMul = 2.0) -> tuple[float, tuple[int]]:             # <<<<<<<<<<<<<<
 *         """
 *         Find smallest distance and edges traversed between two nodes in the graph. Using Astar principle from 3d location information.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5graph_7GraphCy_47PathFind_AStar(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5graph_7GraphCy_46PathFind_AStar, "\n        Find smallest distance and edges traversed between two nodes in the graph. Using Astar principle from 3d location information.\n\n        Parameters\n        ------------\n        NidO : int\n            starting node ID\n        NidD : int\n            destination node ID\n        LimDist : float, default 10,000.0\n            distance limit before giving up the pathfinding process\n        LimCycle : int, default 10,000\n            number of cycles of priority_queue before giving up the pathfinding process\n        DistMul : float, default 1.0\n            A* weighting multiplier for the remaining cartesian distance\n        \n        Returns\n        -----------\n        length: float\n            if a path is found, it will return with the length of shortest possible distance of the path\n        \n        Edge IDs: tuple[int]\n            tuple of edge ids of found shortest path.\n        \n        if path is not found, it will return (-1.0,(-1,))\n        \n        Notes\n        -----------\n        The algorithm has bidirectional capability and also node cost added.\n        PriorityQueue weighting using:\n            minimum(distance_NetworkDistance + (distance_RemainingCartesianDistance x Distmul) )\n        ");
static PyMethodDef __pyx_mdef_5graph_7GraphCy_47PathFind_AStar = {"PathFind_AStar", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_47PathFind_AStar, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5graph_7GraphCy_46PathFind_AStar};
static PyObject *__pyx_pw_5graph_7GraphCy_47PathFind_AStar(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_NidO;
  int __pyx_v_NidD;
  float __pyx_v_LimDist;
  int __pyx_v_LimCycle;
  float __pyx_v_DistMul;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("PathFind_AStar (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_NidO,&__pyx_n_s_NidD,&__pyx_n_s_LimDist,&__pyx_n_s_LimCycle,&__pyx_n_s_DistMul,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_NidO)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1157, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_NidD)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1157, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("PathFind_AStar", 0, 2, 5, 1); __PYX_ERR(0, 1157, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_LimDist);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1157, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_LimCycle);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1157, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_DistMul);
          if (value) { values[4] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1157, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "PathFind_AStar") < 0)) __PYX_ERR(0, 1157, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_NidO = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_NidO == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1157, __pyx_L3_error)
    __pyx_v_NidD = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_NidD == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1157, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_LimDist = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_LimDist == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1157, __pyx_L3_error)
    } else {
      __pyx_v_LimDist = ((float)10000.0);
    }
    if (values[3]) {
      __pyx_v_LimCycle = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_LimCycle == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1157, __pyx_L3_error)
    } else {
      __pyx_v_LimCycle = ((int)0x2710);
    }
    if (values[4]) {
      __pyx_v_DistMul = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_DistMul == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1157, __pyx_L3_error)
    } else {
      __pyx_v_DistMul = ((float)2.0);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("PathFind_AStar", 0, 2, 5, __pyx_nargs); __PYX_ERR(0, 1157, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("graph.GraphCy.PathFind_AStar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5graph_7GraphCy_46PathFind_AStar(((struct __pyx_obj_5graph_GraphCy *)__pyx_v_self), __pyx_v_NidO, __pyx_v_NidD, __pyx_v_LimDist, __pyx_v_LimCycle, __pyx_v_DistMul);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5graph_7GraphCy_46PathFind_AStar(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, int __pyx_v_NidO, int __pyx_v_NidD, float __pyx_v_LimDist, int __pyx_v_LimCycle, float __pyx_v_DistMul) {
  float __pyx_v_BaseDist;
  int __pyx_v_cycles;
  int __pyx_v_keepGoing;
  struct __pyx_obj_5graph_PriorityQueue_NR *__pyx_v_OpenNodes = 0;
  struct __pyx_t_5graph_NodeReach __pyx_v_startNode;
  struct __pyx_t_5graph_NodeReach __pyx_v_NodeReach_T;
  int __pyx_v_NidF;
  float __pyx_v_len;
  struct __pyx_t_5graph_Edge __pyx_v_EdgeC;
  struct __pyx_t_5graph_NodeReach __pyx_v_NodeCheck;
  struct __pyx_t_5graph_Node __pyx_v_NodeTarget;
  std::vector<int>  __pyx_v_pth;
  int __pyx_v_nlook;
  int __pyx_v_i;
  int __pyx_v_Eid;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  struct __pyx_t_5graph_NodeReach __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PathFind_AStar", 1);

  /* "graph.pyx":1190
 *             minimum(distance_NetworkDistance + (distance_RemainingCartesianDistance x Distmul) )
 *         """
 *         cdef float BaseDist = dist3d(self.nodes[NidO], self.nodes[NidD])             # <<<<<<<<<<<<<<
 *         if BaseDist*0.9 > LimDist:
 *             return -1.0
 */
  __pyx_t_1 = __pyx_f_5graph_dist3d((__pyx_v_self->nodes[__pyx_v_NidO]), (__pyx_v_self->nodes[__pyx_v_NidD])); if (unlikely(__pyx_t_1 == ((float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1190, __pyx_L1_error)
  __pyx_v_BaseDist = __pyx_t_1;

  /* "graph.pyx":1191
 *         """
 *         cdef float BaseDist = dist3d(self.nodes[NidO], self.nodes[NidD])
 *         if BaseDist*0.9 > LimDist:             # <<<<<<<<<<<<<<
 *             return -1.0
 * 
 */
  __pyx_t_2 = ((__pyx_v_BaseDist * 0.9) > __pyx_v_LimDist);
  if (__pyx_t_2) {

    /* "graph.pyx":1192
 *         cdef float BaseDist = dist3d(self.nodes[NidO], self.nodes[NidD])
 *         if BaseDist*0.9 > LimDist:
 *             return -1.0             # <<<<<<<<<<<<<<
 * 
 *         self.C_Reset_NodeVisited()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_neg_1_0);
    __pyx_r = ((PyObject*)__pyx_float_neg_1_0);
    goto __pyx_L0;

    /* "graph.pyx":1191
 *         """
 *         cdef float BaseDist = dist3d(self.nodes[NidO], self.nodes[NidD])
 *         if BaseDist*0.9 > LimDist:             # <<<<<<<<<<<<<<
 *             return -1.0
 * 
 */
  }

  /* "graph.pyx":1194
 *             return -1.0
 * 
 *         self.C_Reset_NodeVisited()             # <<<<<<<<<<<<<<
 * 
 *         cdef int cycles
 */
  __pyx_f_5graph_7GraphCy_C_Reset_NodeVisited(__pyx_v_self, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1194, __pyx_L1_error)

  /* "graph.pyx":1197
 * 
 *         cdef int cycles
 *         cycles = 1             # <<<<<<<<<<<<<<
 *         cdef bint keepGoing
 *         keepGoing = True
 */
  __pyx_v_cycles = 1;

  /* "graph.pyx":1199
 *         cycles = 1
 *         cdef bint keepGoing
 *         keepGoing = True             # <<<<<<<<<<<<<<
 * 
 *         # cdef vector[NodeReach] OpenNodes
 */
  __pyx_v_keepGoing = 1;

  /* "graph.pyx":1204
 *         cdef PriorityQueue_NR OpenNodes
 *         cdef NodeReach startNode
 *         startNode.Nid = NidO             # <<<<<<<<<<<<<<
 *         startNode.Eid = -1
 *         startNode.Dist = 0.0
 */
  __pyx_v_startNode.Nid = __pyx_v_NidO;

  /* "graph.pyx":1205
 *         cdef NodeReach startNode
 *         startNode.Nid = NidO
 *         startNode.Eid = -1             # <<<<<<<<<<<<<<
 *         startNode.Dist = 0.0
 *         startNode.NidO = -1
 */
  __pyx_v_startNode.Eid = -1;

  /* "graph.pyx":1206
 *         startNode.Nid = NidO
 *         startNode.Eid = -1
 *         startNode.Dist = 0.0             # <<<<<<<<<<<<<<
 *         startNode.NidO = -1
 *         startNode.Weight = 0.0
 */
  __pyx_v_startNode.Dist = 0.0;

  /* "graph.pyx":1207
 *         startNode.Eid = -1
 *         startNode.Dist = 0.0
 *         startNode.NidO = -1             # <<<<<<<<<<<<<<
 *         startNode.Weight = 0.0
 *         OpenNodes = PriorityQueue_NR()
 */
  __pyx_v_startNode.NidO = -1;

  /* "graph.pyx":1208
 *         startNode.Dist = 0.0
 *         startNode.NidO = -1
 *         startNode.Weight = 0.0             # <<<<<<<<<<<<<<
 *         OpenNodes = PriorityQueue_NR()
 *         OpenNodes.push(startNode)
 */
  __pyx_v_startNode.Weight = 0.0;

  /* "graph.pyx":1209
 *         startNode.NidO = -1
 *         startNode.Weight = 0.0
 *         OpenNodes = PriorityQueue_NR()             # <<<<<<<<<<<<<<
 *         OpenNodes.push(startNode)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5graph_PriorityQueue_NR)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_OpenNodes = ((struct __pyx_obj_5graph_PriorityQueue_NR *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "graph.pyx":1210
 *         startNode.Weight = 0.0
 *         OpenNodes = PriorityQueue_NR()
 *         OpenNodes.push(startNode)             # <<<<<<<<<<<<<<
 * 
 *         cdef NodeReach NodeReach_T
 */
  ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_startNode); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1210, __pyx_L1_error)

  /* "graph.pyx":1218
 *         cdef NodeReach NodeCheck
 *         cdef Node NodeTarget
 *         NodeTarget = self.nodes[NidD]             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[int] pth
 */
  __pyx_v_NodeTarget = (__pyx_v_self->nodes[__pyx_v_NidD]);

  /* "graph.pyx":1223
 *         cdef int nlook
 * 
 *         while keepGoing:             # <<<<<<<<<<<<<<
 *             cycles += 1
 *             # check paths from OpenNodes
 */
  while (1) {
    if (!__pyx_v_keepGoing) break;

    /* "graph.pyx":1224
 * 
 *         while keepGoing:
 *             cycles += 1             # <<<<<<<<<<<<<<
 *             # check paths from OpenNodes
 *             NodeCheck = OpenNodes.pop_top()
 */
    __pyx_v_cycles = (__pyx_v_cycles + 1);

    /* "graph.pyx":1226
 *             cycles += 1
 *             # check paths from OpenNodes
 *             NodeCheck = OpenNodes.pop_top()             # <<<<<<<<<<<<<<
 * 
 *             if NodeCheck.Nid == NidD:
 */
    __pyx_t_4 = ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->pop_top(__pyx_v_OpenNodes); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1226, __pyx_L1_error)
    __pyx_v_NodeCheck = __pyx_t_4;

    /* "graph.pyx":1228
 *             NodeCheck = OpenNodes.pop_top()
 * 
 *             if NodeCheck.Nid == NidD:             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
    __pyx_t_2 = (__pyx_v_NodeCheck.Nid == __pyx_v_NidD);
    if (__pyx_t_2) {

      /* "graph.pyx":1229
 * 
 *             if NodeCheck.Nid == NidD:
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             for i in range(self.EidN):
 */
      goto __pyx_L5_break;

      /* "graph.pyx":1228
 *             NodeCheck = OpenNodes.pop_top()
 * 
 *             if NodeCheck.Nid == NidD:             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
    }

    /* "graph.pyx":1231
 *                 break
 * 
 *             for i in range(self.EidN):             # <<<<<<<<<<<<<<
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1 or Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 */
    __pyx_t_5 = __pyx_v_self->EidN;
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_i = __pyx_t_7;

      /* "graph.pyx":1232
 * 
 *             for i in range(self.EidN):
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]             # <<<<<<<<<<<<<<
 *                 if Eid == -1 or Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 *                     continue
 */
      __pyx_v_Eid = ((__pyx_v_self->nodes[__pyx_v_NodeCheck.Nid]).Eid[__pyx_v_i]);

      /* "graph.pyx":1233
 *             for i in range(self.EidN):
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1 or Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:             # <<<<<<<<<<<<<<
 *                     continue
 *                 # possible new path
 */
      __pyx_t_8 = (__pyx_v_Eid == -1L);
      if (!__pyx_t_8) {
      } else {
        __pyx_t_2 = __pyx_t_8;
        goto __pyx_L10_bool_binop_done;
      }
      __pyx_t_8 = (__pyx_v_Eid == __pyx_v_NodeCheck.Eid);
      if (!__pyx_t_8) {
      } else {
        __pyx_t_2 = __pyx_t_8;
        goto __pyx_L10_bool_binop_done;
      }
      __pyx_t_8 = ((__pyx_v_self->_edgesIds[__pyx_v_Eid]) == -1L);
      __pyx_t_2 = __pyx_t_8;
      __pyx_L10_bool_binop_done:;
      if (__pyx_t_2) {

        /* "graph.pyx":1234
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1 or Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 *                     continue             # <<<<<<<<<<<<<<
 *                 # possible new path
 *                 # new node?
 */
        goto __pyx_L7_continue;

        /* "graph.pyx":1233
 *             for i in range(self.EidN):
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1 or Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:             # <<<<<<<<<<<<<<
 *                     continue
 *                 # possible new path
 */
      }

      /* "graph.pyx":1237
 *                 # possible new path
 *                 # new node?
 *                 EdgeC = self.edges[Eid]             # <<<<<<<<<<<<<<
 *                 if EdgeC.NidO == NodeCheck.Nid:
 *                     len = EdgeC.len
 */
      __pyx_v_EdgeC = (__pyx_v_self->edges[__pyx_v_Eid]);

      /* "graph.pyx":1238
 *                 # new node?
 *                 EdgeC = self.edges[Eid]
 *                 if EdgeC.NidO == NodeCheck.Nid:             # <<<<<<<<<<<<<<
 *                     len = EdgeC.len
 *                     NidF = EdgeC.NidD
 */
      __pyx_t_2 = (__pyx_v_EdgeC.NidO == __pyx_v_NodeCheck.Nid);
      if (__pyx_t_2) {

        /* "graph.pyx":1239
 *                 EdgeC = self.edges[Eid]
 *                 if EdgeC.NidO == NodeCheck.Nid:
 *                     len = EdgeC.len             # <<<<<<<<<<<<<<
 *                     NidF = EdgeC.NidD
 *                 else :
 */
        __pyx_t_1 = __pyx_v_EdgeC.len;
        __pyx_v_len = __pyx_t_1;

        /* "graph.pyx":1240
 *                 if EdgeC.NidO == NodeCheck.Nid:
 *                     len = EdgeC.len
 *                     NidF = EdgeC.NidD             # <<<<<<<<<<<<<<
 *                 else :
 *                     len = EdgeC.lenR
 */
        __pyx_t_9 = __pyx_v_EdgeC.NidD;
        __pyx_v_NidF = __pyx_t_9;

        /* "graph.pyx":1238
 *                 # new node?
 *                 EdgeC = self.edges[Eid]
 *                 if EdgeC.NidO == NodeCheck.Nid:             # <<<<<<<<<<<<<<
 *                     len = EdgeC.len
 *                     NidF = EdgeC.NidD
 */
        goto __pyx_L13;
      }

      /* "graph.pyx":1242
 *                     NidF = EdgeC.NidD
 *                 else :
 *                     len = EdgeC.lenR             # <<<<<<<<<<<<<<
 *                     NidF = EdgeC.NidO
 * 
 */
      /*else*/ {
        __pyx_t_1 = __pyx_v_EdgeC.lenR;
        __pyx_v_len = __pyx_t_1;

        /* "graph.pyx":1243
 *                 else :
 *                     len = EdgeC.lenR
 *                     NidF = EdgeC.NidO             # <<<<<<<<<<<<<<
 * 
 *                 if self._nodesIds[NidF] == -1:
 */
        __pyx_t_9 = __pyx_v_EdgeC.NidO;
        __pyx_v_NidF = __pyx_t_9;
      }
      __pyx_L13:;

      /* "graph.pyx":1245
 *                     NidF = EdgeC.NidO
 * 
 *                 if self._nodesIds[NidF] == -1:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      __pyx_t_2 = ((__pyx_v_self->_nodesIds[__pyx_v_NidF]) == -1L);
      if (__pyx_t_2) {

        /* "graph.pyx":1246
 * 
 *                 if self._nodesIds[NidF] == -1:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 len += NodeCheck.Dist + self.nodes[NidF].c
 */
        goto __pyx_L7_continue;

        /* "graph.pyx":1245
 *                     NidF = EdgeC.NidO
 * 
 *                 if self._nodesIds[NidF] == -1:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      }

      /* "graph.pyx":1248
 *                     continue
 * 
 *                 len += NodeCheck.Dist + self.nodes[NidF].c             # <<<<<<<<<<<<<<
 * 
 *                 if len > LimDist:
 */
      __pyx_v_len = (__pyx_v_len + (__pyx_v_NodeCheck.Dist + (__pyx_v_self->nodes[__pyx_v_NidF]).c));

      /* "graph.pyx":1250
 *                 len += NodeCheck.Dist + self.nodes[NidF].c
 * 
 *                 if len > LimDist:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      __pyx_t_2 = (__pyx_v_len > __pyx_v_LimDist);
      if (__pyx_t_2) {

        /* "graph.pyx":1251
 * 
 *                 if len > LimDist:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 NodeReach_T.Nid = NidF
 */
        goto __pyx_L7_continue;

        /* "graph.pyx":1250
 *                 len += NodeCheck.Dist + self.nodes[NidF].c
 * 
 *                 if len > LimDist:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      }

      /* "graph.pyx":1253
 *                     continue
 * 
 *                 NodeReach_T.Nid = NidF             # <<<<<<<<<<<<<<
 *                 NodeReach_T.Dist = len
 *                 NodeReach_T.Eid = Eid
 */
      __pyx_v_NodeReach_T.Nid = __pyx_v_NidF;

      /* "graph.pyx":1254
 * 
 *                 NodeReach_T.Nid = NidF
 *                 NodeReach_T.Dist = len             # <<<<<<<<<<<<<<
 *                 NodeReach_T.Eid = Eid
 *                 NodeReach_T.NidO = NodeCheck.Nid
 */
      __pyx_v_NodeReach_T.Dist = __pyx_v_len;

      /* "graph.pyx":1255
 *                 NodeReach_T.Nid = NidF
 *                 NodeReach_T.Dist = len
 *                 NodeReach_T.Eid = Eid             # <<<<<<<<<<<<<<
 *                 NodeReach_T.NidO = NodeCheck.Nid
 *                 NodeReach_T.Weight = len + (dist3d(self.nodes[NidF], NodeTarget)- BaseDist) * DistMul
 */
      __pyx_v_NodeReach_T.Eid = __pyx_v_Eid;

      /* "graph.pyx":1256
 *                 NodeReach_T.Dist = len
 *                 NodeReach_T.Eid = Eid
 *                 NodeReach_T.NidO = NodeCheck.Nid             # <<<<<<<<<<<<<<
 *                 NodeReach_T.Weight = len + (dist3d(self.nodes[NidF], NodeTarget)- BaseDist) * DistMul
 * 
 */
      __pyx_t_9 = __pyx_v_NodeCheck.Nid;
      __pyx_v_NodeReach_T.NidO = __pyx_t_9;

      /* "graph.pyx":1257
 *                 NodeReach_T.Eid = Eid
 *                 NodeReach_T.NidO = NodeCheck.Nid
 *                 NodeReach_T.Weight = len + (dist3d(self.nodes[NidF], NodeTarget)- BaseDist) * DistMul             # <<<<<<<<<<<<<<
 * 
 *                 # check to visited nodes
 */
      __pyx_t_1 = __pyx_f_5graph_dist3d((__pyx_v_self->nodes[__pyx_v_NidF]), __pyx_v_NodeTarget); if (unlikely(__pyx_t_1 == ((float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1257, __pyx_L1_error)
      __pyx_v_NodeReach_T.Weight = (__pyx_v_len + ((__pyx_t_1 - __pyx_v_BaseDist) * __pyx_v_DistMul));

      /* "graph.pyx":1260
 * 
 *                 # check to visited nodes
 *                 if self.nodeVisited[NidF].Nid == -1 : # if node havent been visited             # <<<<<<<<<<<<<<
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 */
      __pyx_t_2 = ((__pyx_v_self->nodeVisited[__pyx_v_NidF]).Nid == -1L);
      if (__pyx_t_2) {

        /* "graph.pyx":1261
 *                 # check to visited nodes
 *                 if self.nodeVisited[NidF].Nid == -1 : # if node havent been visited
 *                     self.nodeVisited[NidF] = NodeReach_T             # <<<<<<<<<<<<<<
 *                     OpenNodes.push(NodeReach_T)
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance
 */
        (__pyx_v_self->nodeVisited[__pyx_v_NidF]) = __pyx_v_NodeReach_T;

        /* "graph.pyx":1262
 *                 if self.nodeVisited[NidF].Nid == -1 : # if node havent been visited
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)             # <<<<<<<<<<<<<<
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance
 *                     self.nodeVisited[NidF] = NodeReach_T
 */
        ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_NodeReach_T); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1262, __pyx_L1_error)

        /* "graph.pyx":1260
 * 
 *                 # check to visited nodes
 *                 if self.nodeVisited[NidF].Nid == -1 : # if node havent been visited             # <<<<<<<<<<<<<<
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 */
        goto __pyx_L16;
      }

      /* "graph.pyx":1263
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance             # <<<<<<<<<<<<<<
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 */
      __pyx_t_2 = ((__pyx_v_self->nodeVisited[__pyx_v_NidF]).Dist > __pyx_v_len);
      if (__pyx_t_2) {

        /* "graph.pyx":1264
 *                     OpenNodes.push(NodeReach_T)
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance
 *                     self.nodeVisited[NidF] = NodeReach_T             # <<<<<<<<<<<<<<
 *                     OpenNodes.push(NodeReach_T)
 * 
 */
        (__pyx_v_self->nodeVisited[__pyx_v_NidF]) = __pyx_v_NodeReach_T;

        /* "graph.pyx":1265
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)             # <<<<<<<<<<<<<<
 * 
 *             if cycles > LimCycle or OpenNodes.top().Dist > LimDist:
 */
        ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_NodeReach_T); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1265, __pyx_L1_error)

        /* "graph.pyx":1263
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance             # <<<<<<<<<<<<<<
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 */
      }
      __pyx_L16:;
      __pyx_L7_continue:;
    }

    /* "graph.pyx":1267
 *                     OpenNodes.push(NodeReach_T)
 * 
 *             if cycles > LimCycle or OpenNodes.top().Dist > LimDist:             # <<<<<<<<<<<<<<
 *                 # if reaches cycle count limit
 *                 # if the minimum distance in open nodes is more than the distance limit
 */
    __pyx_t_8 = (__pyx_v_cycles > __pyx_v_LimCycle);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_2 = __pyx_t_8;
      goto __pyx_L18_bool_binop_done;
    }
    __pyx_t_4 = ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->top(__pyx_v_OpenNodes); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1267, __pyx_L1_error)
    __pyx_t_8 = (__pyx_t_4.Dist > __pyx_v_LimDist);
    __pyx_t_2 = __pyx_t_8;
    __pyx_L18_bool_binop_done:;
    if (__pyx_t_2) {

      /* "graph.pyx":1270
 *                 # if reaches cycle count limit
 *                 # if the minimum distance in open nodes is more than the distance limit
 *                 keepGoing = False             # <<<<<<<<<<<<<<
 *             elif OpenNodes.empty():
 *                 keepGoing = False
 */
      __pyx_v_keepGoing = 0;

      /* "graph.pyx":1267
 *                     OpenNodes.push(NodeReach_T)
 * 
 *             if cycles > LimCycle or OpenNodes.top().Dist > LimDist:             # <<<<<<<<<<<<<<
 *                 # if reaches cycle count limit
 *                 # if the minimum distance in open nodes is more than the distance limit
 */
      goto __pyx_L17;
    }

    /* "graph.pyx":1271
 *                 # if the minimum distance in open nodes is more than the distance limit
 *                 keepGoing = False
 *             elif OpenNodes.empty():             # <<<<<<<<<<<<<<
 *                 keepGoing = False
 * 
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->empty(__pyx_v_OpenNodes); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1271, __pyx_L1_error)
    if (__pyx_t_2) {

      /* "graph.pyx":1272
 *                 keepGoing = False
 *             elif OpenNodes.empty():
 *                 keepGoing = False             # <<<<<<<<<<<<<<
 * 
 *         if not keepGoing:
 */
      __pyx_v_keepGoing = 0;

      /* "graph.pyx":1271
 *                 # if the minimum distance in open nodes is more than the distance limit
 *                 keepGoing = False
 *             elif OpenNodes.empty():             # <<<<<<<<<<<<<<
 *                 keepGoing = False
 * 
 */
    }
    __pyx_L17:;
  }
  __pyx_L5_break:;

  /* "graph.pyx":1274
 *                 keepGoing = False
 * 
 *         if not keepGoing:             # <<<<<<<<<<<<<<
 *             return (-1.0,(-1,))
 *         else:
 */
  __pyx_t_2 = (!__pyx_v_keepGoing);
  if (__pyx_t_2) {

    /* "graph.pyx":1275
 * 
 *         if not keepGoing:
 *             return (-1.0,(-1,))             # <<<<<<<<<<<<<<
 *         else:
 *             # if found path, retracing steps
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_tuple__17);
    __pyx_r = __pyx_tuple__17;
    goto __pyx_L0;

    /* "graph.pyx":1274
 *                 keepGoing = False
 * 
 *         if not keepGoing:             # <<<<<<<<<<<<<<
 *             return (-1.0,(-1,))
 *         else:
 */
  }

  /* "graph.pyx":1278
 *         else:
 *             # if found path, retracing steps
 *             nlook = NidD             # <<<<<<<<<<<<<<
 *             while nlook != NidO:
 *                 pth.insert(pth.begin(),self.nodeVisited[nlook].Eid)
 */
  /*else*/ {
    __pyx_v_nlook = __pyx_v_NidD;

    /* "graph.pyx":1279
 *             # if found path, retracing steps
 *             nlook = NidD
 *             while nlook != NidO:             # <<<<<<<<<<<<<<
 *                 pth.insert(pth.begin(),self.nodeVisited[nlook].Eid)
 *                 nlook = self.nodeVisited[nlook].NidO
 */
    while (1) {
      __pyx_t_2 = (__pyx_v_nlook != __pyx_v_NidO);
      if (!__pyx_t_2) break;

      /* "graph.pyx":1280
 *             nlook = NidD
 *             while nlook != NidO:
 *                 pth.insert(pth.begin(),self.nodeVisited[nlook].Eid)             # <<<<<<<<<<<<<<
 *                 nlook = self.nodeVisited[nlook].NidO
 *             # pth.insert(pth.begin(),nlook) # inserting the NidO
 */
      try {
        __pyx_v_pth.insert(__pyx_v_pth.begin(), (__pyx_v_self->nodeVisited[__pyx_v_nlook]).Eid);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 1280, __pyx_L1_error)
      }

      /* "graph.pyx":1281
 *             while nlook != NidO:
 *                 pth.insert(pth.begin(),self.nodeVisited[nlook].Eid)
 *                 nlook = self.nodeVisited[nlook].NidO             # <<<<<<<<<<<<<<
 *             # pth.insert(pth.begin(),nlook) # inserting the NidO
 *             return (NodeCheck.Dist, tuple(pth))
 */
      __pyx_t_5 = (__pyx_v_self->nodeVisited[__pyx_v_nlook]).NidO;
      __pyx_v_nlook = __pyx_t_5;
    }

    /* "graph.pyx":1283
 *                 nlook = self.nodeVisited[nlook].NidO
 *             # pth.insert(pth.begin(),nlook) # inserting the NidO
 *             return (NodeCheck.Dist, tuple(pth))             # <<<<<<<<<<<<<<
 * 
 *     def PathFind_AStar_VirtuEntry(self,
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_NodeCheck.Dist); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = __pyx_convert_vector_to_py_int(__pyx_v_pth); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_11 = __Pyx_PySequence_Tuple(__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_3)) __PYX_ERR(0, 1283, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_11);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_11)) __PYX_ERR(0, 1283, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_t_11 = 0;
    __pyx_r = ((PyObject*)__pyx_t_10);
    __pyx_t_10 = 0;
    goto __pyx_L0;
  }

  /* "graph.pyx":1157
 *         return -1.0
 * 
 *     def PathFind_AStar(self, int NidO, int NidD, float LimDist = 10_000.0, int LimCycle = 10_000, float DistMul = 2.0) -> tuple[float, tuple[int]]:             # <<<<<<<<<<<<<<
 *         """
 *         Find smallest distance and edges traversed between two nodes in the graph. Using Astar principle from 3d location information.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("graph.GraphCy.PathFind_AStar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_OpenNodes);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":1285
 *             return (NodeCheck.Dist, tuple(pth))
 * 
 *     def PathFind_AStar_VirtuEntry(self,             # <<<<<<<<<<<<<<
 *             const int& EidO, tuple[float, float, float] PtO, const tuple[float, float] DstO,
 *             const int& EidD, tuple[float, float, float] PtD, const tuple[float, float] DstD,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5graph_7GraphCy_49PathFind_AStar_VirtuEntry(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5graph_7GraphCy_48PathFind_AStar_VirtuEntry, "\n        Find smallest distance and edges traversed between two nodes in the graph. Using Astar principle from 3d location information.\n        Virtual Entries, located on an edge, represented by edge id, node coordinate, and distance cost to each end\n\n        Parameters\n        ------------\n        EidO : int\n            Edge Id\n        EidD : int\n            Edge Destination\n        LimDist : float, default 10,000.0\n            distance limit before giving up the pathfinding process\n        LimCycle : int, default 10,000\n            number of cycles of priority_queue before giving up the pathfinding process\n        DistMul : float, default 1.0\n            A* weighting multiplier for the remaining cartesian distance\n        \n        Returns\n        -----------\n        length: float\n            if a path is found, it will return with the length of shortest possible distance of the path\n        \n        Edge IDs: tuple[int]\n            tuple of edge ids of found shortest path.\n        \n        if path is not found, it will return (-1.0,(-1,))\n        \n        Notes\n        -----------\n        The algorithm has bidirectional capability and also node cost added.\n        PriorityQueue weighting using:\n            minimum(distance_NetworkDistance + (distance_RemainingCartesianDistance x Distmul) )\n        ");
static PyMethodDef __pyx_mdef_5graph_7GraphCy_49PathFind_AStar_VirtuEntry = {"PathFind_AStar_VirtuEntry", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_49PathFind_AStar_VirtuEntry, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5graph_7GraphCy_48PathFind_AStar_VirtuEntry};
static PyObject *__pyx_pw_5graph_7GraphCy_49PathFind_AStar_VirtuEntry(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_EidO;
  __pyx_ctuple_float__and_float__and_float __pyx_v_PtO;
  __pyx_ctuple_float__and_float __pyx_v_DstO;
  int __pyx_v_EidD;
  __pyx_ctuple_float__and_float__and_float __pyx_v_PtD;
  __pyx_ctuple_float__and_float __pyx_v_DstD;
  float __pyx_v_LimDist;
  int __pyx_v_LimCycle;
  float __pyx_v_DistMul;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("PathFind_AStar_VirtuEntry (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_EidO,&__pyx_n_s_PtO,&__pyx_n_s_DstO,&__pyx_n_s_EidD,&__pyx_n_s_PtD,&__pyx_n_s_DstD,&__pyx_n_s_LimDist,&__pyx_n_s_LimCycle,&__pyx_n_s_DistMul,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  9: values[8] = __Pyx_Arg_FASTCALL(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = __Pyx_Arg_FASTCALL(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_EidO)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1285, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_PtO)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1285, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("PathFind_AStar_VirtuEntry", 0, 6, 9, 1); __PYX_ERR(0, 1285, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_DstO)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1285, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("PathFind_AStar_VirtuEntry", 0, 6, 9, 2); __PYX_ERR(0, 1285, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_EidD)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1285, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("PathFind_AStar_VirtuEntry", 0, 6, 9, 3); __PYX_ERR(0, 1285, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_PtD)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[4]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1285, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("PathFind_AStar_VirtuEntry", 0, 6, 9, 4); __PYX_ERR(0, 1285, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_DstD)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[5]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1285, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("PathFind_AStar_VirtuEntry", 0, 6, 9, 5); __PYX_ERR(0, 1285, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_LimDist);
          if (value) { values[6] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1285, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_LimCycle);
          if (value) { values[7] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1285, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_DistMul);
          if (value) { values[8] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1285, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "PathFind_AStar_VirtuEntry") < 0)) __PYX_ERR(0, 1285, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  9: values[8] = __Pyx_Arg_FASTCALL(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = __Pyx_Arg_FASTCALL(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_EidO = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_EidO == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1286, __pyx_L3_error)
    __pyx_v_PtO = __pyx_convert__from_py___pyx_ctuple_float__and_float__and_float(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1286, __pyx_L3_error)
    __pyx_v_DstO = __pyx_convert__from_py___pyx_ctuple_float__and_float(values[2]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1286, __pyx_L3_error)
    __pyx_v_EidD = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_EidD == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1287, __pyx_L3_error)
    __pyx_v_PtD = __pyx_convert__from_py___pyx_ctuple_float__and_float__and_float(values[4]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1287, __pyx_L3_error)
    __pyx_v_DstD = __pyx_convert__from_py___pyx_ctuple_float__and_float(values[5]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1287, __pyx_L3_error)
    if (values[6]) {
      __pyx_v_LimDist = __pyx_PyFloat_AsFloat(values[6]); if (unlikely((__pyx_v_LimDist == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1288, __pyx_L3_error)
    } else {
      __pyx_v_LimDist = ((float)10000.0);
    }
    if (values[7]) {
      __pyx_v_LimCycle = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_LimCycle == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1288, __pyx_L3_error)
    } else {
      __pyx_v_LimCycle = ((int)0x2710);
    }
    if (values[8]) {
      __pyx_v_DistMul = __pyx_PyFloat_AsFloat(values[8]); if (unlikely((__pyx_v_DistMul == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1288, __pyx_L3_error)
    } else {
      __pyx_v_DistMul = ((float)2.0);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("PathFind_AStar_VirtuEntry", 0, 6, 9, __pyx_nargs); __PYX_ERR(0, 1285, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("graph.GraphCy.PathFind_AStar_VirtuEntry", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5graph_7GraphCy_48PathFind_AStar_VirtuEntry(((struct __pyx_obj_5graph_GraphCy *)__pyx_v_self), __pyx_v_EidO, __pyx_v_PtO, __pyx_v_DstO, __pyx_v_EidD, __pyx_v_PtD, __pyx_v_DstD, __pyx_v_LimDist, __pyx_v_LimCycle, __pyx_v_DistMul);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5graph_7GraphCy_48PathFind_AStar_VirtuEntry(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, int __pyx_v_EidO, __pyx_ctuple_float__and_float__and_float __pyx_v_PtO, __pyx_ctuple_float__and_float __pyx_v_DstO, int __pyx_v_EidD, __pyx_ctuple_float__and_float__and_float __pyx_v_PtD, __pyx_ctuple_float__and_float __pyx_v_DstD, float __pyx_v_LimDist, int __pyx_v_LimCycle, float __pyx_v_DistMul) {
  float __pyx_v_PointD[3];
  float __pyx_v_PointO[3];
  float __pyx_v_BaseDist;
  int __pyx_v_cycles;
  int __pyx_v_keepGoing;
  struct __pyx_obj_5graph_PriorityQueue_NR *__pyx_v_OpenNodes = 0;
  struct __pyx_t_5graph_NodeReach __pyx_v_startNode;
  struct __pyx_t_5graph_NodeReach __pyx_v_NodeReach_T;
  int __pyx_v_NidF;
  float __pyx_v_len;
  struct __pyx_t_5graph_Edge __pyx_v_EdgeC;
  struct __pyx_t_5graph_NodeReach __pyx_v_NodeCheck;
  std::vector<int>  __pyx_v_pth;
  int __pyx_v_nlook;
  int __pyx_v_i;
  int __pyx_v_Eid;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  float *__pyx_t_3;
  float __pyx_t_4;
  float __pyx_t_5;
  float __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  struct __pyx_t_5graph_NodeReach __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PathFind_AStar_VirtuEntry", 1);

  /* "graph.pyx":1322
 *             minimum(distance_NetworkDistance + (distance_RemainingCartesianDistance x Distmul) )
 *         """
 *         if self._edgesIds[EidO] == -1 or self._edgesIds[EidD] == -1:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef float[3] PointD = (PtD[0], PtD[1], PtD[2])
 */
  __pyx_t_2 = ((__pyx_v_self->_edgesIds[__pyx_v_EidO]) == -1L);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_self->_edgesIds[__pyx_v_EidD]) == -1L);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "graph.pyx":1323
 *         """
 *         if self._edgesIds[EidO] == -1 or self._edgesIds[EidD] == -1:
 *             return None             # <<<<<<<<<<<<<<
 *         cdef float[3] PointD = (PtD[0], PtD[1], PtD[2])
 *         cdef float[3] PointO = (PtO[0], PtO[1], PtO[2])
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "graph.pyx":1322
 *             minimum(distance_NetworkDistance + (distance_RemainingCartesianDistance x Distmul) )
 *         """
 *         if self._edgesIds[EidO] == -1 or self._edgesIds[EidD] == -1:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef float[3] PointD = (PtD[0], PtD[1], PtD[2])
 */
  }

  /* "graph.pyx":1324
 *         if self._edgesIds[EidO] == -1 or self._edgesIds[EidD] == -1:
 *             return None
 *         cdef float[3] PointD = (PtD[0], PtD[1], PtD[2])             # <<<<<<<<<<<<<<
 *         cdef float[3] PointO = (PtO[0], PtO[1], PtO[2])
 *         cdef float BaseDist = dist3d_ar(PointO, PointD)
 */
  __pyx_t_3 = __pyx_v_PointD;
  __pyx_t_4 = __pyx_v_PtD.f0;
  __pyx_t_5 = __pyx_v_PtD.f1;
  __pyx_t_6 = __pyx_v_PtD.f2;
  (__pyx_t_3[0]) = __pyx_t_4;
  (__pyx_t_3[1]) = __pyx_t_5;
  (__pyx_t_3[2]) = __pyx_t_6;

  /* "graph.pyx":1325
 *             return None
 *         cdef float[3] PointD = (PtD[0], PtD[1], PtD[2])
 *         cdef float[3] PointO = (PtO[0], PtO[1], PtO[2])             # <<<<<<<<<<<<<<
 *         cdef float BaseDist = dist3d_ar(PointO, PointD)
 *         if BaseDist*0.9 > LimDist:
 */
  __pyx_t_3 = __pyx_v_PointO;
  __pyx_t_6 = __pyx_v_PtO.f0;
  __pyx_t_5 = __pyx_v_PtO.f1;
  __pyx_t_4 = __pyx_v_PtO.f2;
  (__pyx_t_3[0]) = __pyx_t_6;
  (__pyx_t_3[1]) = __pyx_t_5;
  (__pyx_t_3[2]) = __pyx_t_4;

  /* "graph.pyx":1326
 *         cdef float[3] PointD = (PtD[0], PtD[1], PtD[2])
 *         cdef float[3] PointO = (PtO[0], PtO[1], PtO[2])
 *         cdef float BaseDist = dist3d_ar(PointO, PointD)             # <<<<<<<<<<<<<<
 *         if BaseDist*0.9 > LimDist:
 *             return -1.0
 */
  __pyx_t_4 = __pyx_f_5graph_dist3d_ar(__pyx_v_PointO, __pyx_v_PointD); if (unlikely(__pyx_t_4 == ((float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1326, __pyx_L1_error)
  __pyx_v_BaseDist = __pyx_t_4;

  /* "graph.pyx":1327
 *         cdef float[3] PointO = (PtO[0], PtO[1], PtO[2])
 *         cdef float BaseDist = dist3d_ar(PointO, PointD)
 *         if BaseDist*0.9 > LimDist:             # <<<<<<<<<<<<<<
 *             return -1.0
 * 
 */
  __pyx_t_1 = ((__pyx_v_BaseDist * 0.9) > __pyx_v_LimDist);
  if (__pyx_t_1) {

    /* "graph.pyx":1328
 *         cdef float BaseDist = dist3d_ar(PointO, PointD)
 *         if BaseDist*0.9 > LimDist:
 *             return -1.0             # <<<<<<<<<<<<<<
 * 
 *         self.C_Reset_NodeVisited()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_neg_1_0);
    __pyx_r = ((PyObject*)__pyx_float_neg_1_0);
    goto __pyx_L0;

    /* "graph.pyx":1327
 *         cdef float[3] PointO = (PtO[0], PtO[1], PtO[2])
 *         cdef float BaseDist = dist3d_ar(PointO, PointD)
 *         if BaseDist*0.9 > LimDist:             # <<<<<<<<<<<<<<
 *             return -1.0
 * 
 */
  }

  /* "graph.pyx":1330
 *             return -1.0
 * 
 *         self.C_Reset_NodeVisited()             # <<<<<<<<<<<<<<
 * 
 *         cdef int cycles
 */
  __pyx_f_5graph_7GraphCy_C_Reset_NodeVisited(__pyx_v_self, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1330, __pyx_L1_error)

  /* "graph.pyx":1333
 * 
 *         cdef int cycles
 *         cycles = 1             # <<<<<<<<<<<<<<
 *         cdef bint keepGoing
 *         keepGoing = True
 */
  __pyx_v_cycles = 1;

  /* "graph.pyx":1335
 *         cycles = 1
 *         cdef bint keepGoing
 *         keepGoing = True             # <<<<<<<<<<<<<<
 * 
 *         # cdef vector[NodeReach] OpenNodes
 */
  __pyx_v_keepGoing = 1;

  /* "graph.pyx":1340
 *         cdef PriorityQueue_NR OpenNodes
 *         cdef NodeReach startNode
 *         OpenNodes = PriorityQueue_NR()             # <<<<<<<<<<<<<<
 * 
 *         # for Origin EdgeOrigin
 */
  __pyx_t_7 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5graph_PriorityQueue_NR)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_v_OpenNodes = ((struct __pyx_obj_5graph_PriorityQueue_NR *)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "graph.pyx":1343
 * 
 *         # for Origin EdgeOrigin
 *         startNode.Nid = self.edges[EidO].NidO             # <<<<<<<<<<<<<<
 *         startNode.Eid = EidO
 *         startNode.Dist = DstO[0]
 */
  __pyx_t_8 = (__pyx_v_self->edges[__pyx_v_EidO]).NidO;
  __pyx_v_startNode.Nid = __pyx_t_8;

  /* "graph.pyx":1344
 *         # for Origin EdgeOrigin
 *         startNode.Nid = self.edges[EidO].NidO
 *         startNode.Eid = EidO             # <<<<<<<<<<<<<<
 *         startNode.Dist = DstO[0]
 *         startNode.NidO = -1
 */
  __pyx_v_startNode.Eid = __pyx_v_EidO;

  /* "graph.pyx":1345
 *         startNode.Nid = self.edges[EidO].NidO
 *         startNode.Eid = EidO
 *         startNode.Dist = DstO[0]             # <<<<<<<<<<<<<<
 *         startNode.NidO = -1
 *         startNode.Weight = DstO[0] + (dist3d_ar(self.nodes[startNode.Nid].pt, PointD)- BaseDist) * DistMul
 */
  __pyx_v_startNode.Dist = __pyx_v_DstO.f0;

  /* "graph.pyx":1346
 *         startNode.Eid = EidO
 *         startNode.Dist = DstO[0]
 *         startNode.NidO = -1             # <<<<<<<<<<<<<<
 *         startNode.Weight = DstO[0] + (dist3d_ar(self.nodes[startNode.Nid].pt, PointD)- BaseDist) * DistMul
 *         OpenNodes.push(startNode)
 */
  __pyx_v_startNode.NidO = -1;

  /* "graph.pyx":1347
 *         startNode.Dist = DstO[0]
 *         startNode.NidO = -1
 *         startNode.Weight = DstO[0] + (dist3d_ar(self.nodes[startNode.Nid].pt, PointD)- BaseDist) * DistMul             # <<<<<<<<<<<<<<
 *         OpenNodes.push(startNode)
 *         # for destination edgeorigin
 */
  __pyx_t_4 = __pyx_f_5graph_dist3d_ar((__pyx_v_self->nodes[__pyx_v_startNode.Nid]).pt, __pyx_v_PointD); if (unlikely(__pyx_t_4 == ((float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1347, __pyx_L1_error)
  __pyx_v_startNode.Weight = (__pyx_v_DstO.f0 + ((__pyx_t_4 - __pyx_v_BaseDist) * __pyx_v_DistMul));

  /* "graph.pyx":1348
 *         startNode.NidO = -1
 *         startNode.Weight = DstO[0] + (dist3d_ar(self.nodes[startNode.Nid].pt, PointD)- BaseDist) * DistMul
 *         OpenNodes.push(startNode)             # <<<<<<<<<<<<<<
 *         # for destination edgeorigin
 *         startNode.Nid = self.edges[EidO].NidD
 */
  ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_startNode); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1348, __pyx_L1_error)

  /* "graph.pyx":1350
 *         OpenNodes.push(startNode)
 *         # for destination edgeorigin
 *         startNode.Nid = self.edges[EidO].NidD             # <<<<<<<<<<<<<<
 *         startNode.Eid = EidO
 *         startNode.Dist = DstO[1]
 */
  __pyx_t_8 = (__pyx_v_self->edges[__pyx_v_EidO]).NidD;
  __pyx_v_startNode.Nid = __pyx_t_8;

  /* "graph.pyx":1351
 *         # for destination edgeorigin
 *         startNode.Nid = self.edges[EidO].NidD
 *         startNode.Eid = EidO             # <<<<<<<<<<<<<<
 *         startNode.Dist = DstO[1]
 *         startNode.NidO = -1
 */
  __pyx_v_startNode.Eid = __pyx_v_EidO;

  /* "graph.pyx":1352
 *         startNode.Nid = self.edges[EidO].NidD
 *         startNode.Eid = EidO
 *         startNode.Dist = DstO[1]             # <<<<<<<<<<<<<<
 *         startNode.NidO = -1
 *         startNode.Weight = DstO[1] + (dist3d_ar(self.nodes[startNode.Nid].pt, PointD)- BaseDist) * DistMul
 */
  __pyx_v_startNode.Dist = __pyx_v_DstO.f1;

  /* "graph.pyx":1353
 *         startNode.Eid = EidO
 *         startNode.Dist = DstO[1]
 *         startNode.NidO = -1             # <<<<<<<<<<<<<<
 *         startNode.Weight = DstO[1] + (dist3d_ar(self.nodes[startNode.Nid].pt, PointD)- BaseDist) * DistMul
 *         OpenNodes.push(startNode)
 */
  __pyx_v_startNode.NidO = -1;

  /* "graph.pyx":1354
 *         startNode.Dist = DstO[1]
 *         startNode.NidO = -1
 *         startNode.Weight = DstO[1] + (dist3d_ar(self.nodes[startNode.Nid].pt, PointD)- BaseDist) * DistMul             # <<<<<<<<<<<<<<
 *         OpenNodes.push(startNode)
 * 
 */
  __pyx_t_4 = __pyx_f_5graph_dist3d_ar((__pyx_v_self->nodes[__pyx_v_startNode.Nid]).pt, __pyx_v_PointD); if (unlikely(__pyx_t_4 == ((float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1354, __pyx_L1_error)
  __pyx_v_startNode.Weight = (__pyx_v_DstO.f1 + ((__pyx_t_4 - __pyx_v_BaseDist) * __pyx_v_DistMul));

  /* "graph.pyx":1355
 *         startNode.NidO = -1
 *         startNode.Weight = DstO[1] + (dist3d_ar(self.nodes[startNode.Nid].pt, PointD)- BaseDist) * DistMul
 *         OpenNodes.push(startNode)             # <<<<<<<<<<<<<<
 * 
 *         cdef NodeReach NodeReach_T
 */
  ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_startNode); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1355, __pyx_L1_error)

  /* "graph.pyx":1366
 *         cdef int nlook
 * 
 *         while keepGoing:             # <<<<<<<<<<<<<<
 *             cycles += 1
 *             # check paths from OpenNodes
 */
  while (1) {
    if (!__pyx_v_keepGoing) break;

    /* "graph.pyx":1367
 * 
 *         while keepGoing:
 *             cycles += 1             # <<<<<<<<<<<<<<
 *             # check paths from OpenNodes
 *             NodeCheck = OpenNodes.pop_top()
 */
    __pyx_v_cycles = (__pyx_v_cycles + 1);

    /* "graph.pyx":1369
 *             cycles += 1
 *             # check paths from OpenNodes
 *             NodeCheck = OpenNodes.pop_top()             # <<<<<<<<<<<<<<
 * 
 *             if NodeCheck.Eid == EidD:
 */
    __pyx_t_9 = ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->pop_top(__pyx_v_OpenNodes); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1369, __pyx_L1_error)
    __pyx_v_NodeCheck = __pyx_t_9;

    /* "graph.pyx":1371
 *             NodeCheck = OpenNodes.pop_top()
 * 
 *             if NodeCheck.Eid == EidD:             # <<<<<<<<<<<<<<
 *                 if NodeCheck.Nid == self.edges[EidD].NidO:
 *                     NodeCheck.Dist += DstD[0]
 */
    __pyx_t_1 = (__pyx_v_NodeCheck.Eid == __pyx_v_EidD);
    if (__pyx_t_1) {

      /* "graph.pyx":1372
 * 
 *             if NodeCheck.Eid == EidD:
 *                 if NodeCheck.Nid == self.edges[EidD].NidO:             # <<<<<<<<<<<<<<
 *                     NodeCheck.Dist += DstD[0]
 *                 else:
 */
      __pyx_t_1 = (__pyx_v_NodeCheck.Nid == (__pyx_v_self->edges[__pyx_v_EidD]).NidO);
      if (__pyx_t_1) {

        /* "graph.pyx":1373
 *             if NodeCheck.Eid == EidD:
 *                 if NodeCheck.Nid == self.edges[EidD].NidO:
 *                     NodeCheck.Dist += DstD[0]             # <<<<<<<<<<<<<<
 *                 else:
 *                     NodeCheck.Dist += DstD[1]
 */
        __pyx_v_NodeCheck.Dist = (__pyx_v_NodeCheck.Dist + __pyx_v_DstD.f0);

        /* "graph.pyx":1372
 * 
 *             if NodeCheck.Eid == EidD:
 *                 if NodeCheck.Nid == self.edges[EidD].NidO:             # <<<<<<<<<<<<<<
 *                     NodeCheck.Dist += DstD[0]
 *                 else:
 */
        goto __pyx_L10;
      }

      /* "graph.pyx":1375
 *                     NodeCheck.Dist += DstD[0]
 *                 else:
 *                     NodeCheck.Dist += DstD[1]             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
      /*else*/ {
        __pyx_v_NodeCheck.Dist = (__pyx_v_NodeCheck.Dist + __pyx_v_DstD.f1);
      }
      __pyx_L10:;

      /* "graph.pyx":1376
 *                 else:
 *                     NodeCheck.Dist += DstD[1]
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             if NodeCheck.Eid == EidD:
 */
      goto __pyx_L8_break;

      /* "graph.pyx":1371
 *             NodeCheck = OpenNodes.pop_top()
 * 
 *             if NodeCheck.Eid == EidD:             # <<<<<<<<<<<<<<
 *                 if NodeCheck.Nid == self.edges[EidD].NidO:
 *                     NodeCheck.Dist += DstD[0]
 */
    }

    /* "graph.pyx":1378
 *                 break
 * 
 *             if NodeCheck.Eid == EidD:             # <<<<<<<<<<<<<<
 *                     if NodeCheck.Nid == self.edges[EidD].NidO:
 *                         NodeCheck.Dist -= self.edges[EidD].lenR - DstD[1]
 */
    __pyx_t_1 = (__pyx_v_NodeCheck.Eid == __pyx_v_EidD);
    if (__pyx_t_1) {

      /* "graph.pyx":1379
 * 
 *             if NodeCheck.Eid == EidD:
 *                     if NodeCheck.Nid == self.edges[EidD].NidO:             # <<<<<<<<<<<<<<
 *                         NodeCheck.Dist -= self.edges[EidD].lenR - DstD[1]
 *                     else:
 */
      __pyx_t_1 = (__pyx_v_NodeCheck.Nid == (__pyx_v_self->edges[__pyx_v_EidD]).NidO);
      if (__pyx_t_1) {

        /* "graph.pyx":1380
 *             if NodeCheck.Eid == EidD:
 *                     if NodeCheck.Nid == self.edges[EidD].NidO:
 *                         NodeCheck.Dist -= self.edges[EidD].lenR - DstD[1]             # <<<<<<<<<<<<<<
 *                     else:
 *                         NodeCheck.Dist -= self.edges[EidD].len - DstD[0]
 */
        __pyx_v_NodeCheck.Dist = (__pyx_v_NodeCheck.Dist - ((__pyx_v_self->edges[__pyx_v_EidD]).lenR - __pyx_v_DstD.f1));

        /* "graph.pyx":1379
 * 
 *             if NodeCheck.Eid == EidD:
 *                     if NodeCheck.Nid == self.edges[EidD].NidO:             # <<<<<<<<<<<<<<
 *                         NodeCheck.Dist -= self.edges[EidD].lenR - DstD[1]
 *                     else:
 */
        goto __pyx_L12;
      }

      /* "graph.pyx":1382
 *                         NodeCheck.Dist -= self.edges[EidD].lenR - DstD[1]
 *                     else:
 *                         NodeCheck.Dist -= self.edges[EidD].len - DstD[0]             # <<<<<<<<<<<<<<
 * 
 *             for i in range(self.EidN):
 */
      /*else*/ {
        __pyx_v_NodeCheck.Dist = (__pyx_v_NodeCheck.Dist - ((__pyx_v_self->edges[__pyx_v_EidD]).len - __pyx_v_DstD.f0));
      }
      __pyx_L12:;

      /* "graph.pyx":1378
 *                 break
 * 
 *             if NodeCheck.Eid == EidD:             # <<<<<<<<<<<<<<
 *                     if NodeCheck.Nid == self.edges[EidD].NidO:
 *                         NodeCheck.Dist -= self.edges[EidD].lenR - DstD[1]
 */
    }

    /* "graph.pyx":1384
 *                         NodeCheck.Dist -= self.edges[EidD].len - DstD[0]
 * 
 *             for i in range(self.EidN):             # <<<<<<<<<<<<<<
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1 or Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 */
    __pyx_t_8 = __pyx_v_self->EidN;
    __pyx_t_10 = __pyx_t_8;
    for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
      __pyx_v_i = __pyx_t_11;

      /* "graph.pyx":1385
 * 
 *             for i in range(self.EidN):
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]             # <<<<<<<<<<<<<<
 *                 if Eid == -1 or Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 *                     continue
 */
      __pyx_v_Eid = ((__pyx_v_self->nodes[__pyx_v_NodeCheck.Nid]).Eid[__pyx_v_i]);

      /* "graph.pyx":1386
 *             for i in range(self.EidN):
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1 or Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:             # <<<<<<<<<<<<<<
 *                     continue
 *                 # possible new path
 */
      __pyx_t_2 = (__pyx_v_Eid == -1L);
      if (!__pyx_t_2) {
      } else {
        __pyx_t_1 = __pyx_t_2;
        goto __pyx_L16_bool_binop_done;
      }
      __pyx_t_2 = (__pyx_v_Eid == __pyx_v_NodeCheck.Eid);
      if (!__pyx_t_2) {
      } else {
        __pyx_t_1 = __pyx_t_2;
        goto __pyx_L16_bool_binop_done;
      }
      __pyx_t_2 = ((__pyx_v_self->_edgesIds[__pyx_v_Eid]) == -1L);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L16_bool_binop_done:;
      if (__pyx_t_1) {

        /* "graph.pyx":1387
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1 or Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 *                     continue             # <<<<<<<<<<<<<<
 *                 # possible new path
 *                 # new node?
 */
        goto __pyx_L13_continue;

        /* "graph.pyx":1386
 *             for i in range(self.EidN):
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1 or Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:             # <<<<<<<<<<<<<<
 *                     continue
 *                 # possible new path
 */
      }

      /* "graph.pyx":1390
 *                 # possible new path
 *                 # new node?
 *                 EdgeC = self.edges[Eid]             # <<<<<<<<<<<<<<
 *                 if EdgeC.NidO == NodeCheck.Nid:
 *                     len = EdgeC.len
 */
      __pyx_v_EdgeC = (__pyx_v_self->edges[__pyx_v_Eid]);

      /* "graph.pyx":1391
 *                 # new node?
 *                 EdgeC = self.edges[Eid]
 *                 if EdgeC.NidO == NodeCheck.Nid:             # <<<<<<<<<<<<<<
 *                     len = EdgeC.len
 *                     NidF = EdgeC.NidD
 */
      __pyx_t_1 = (__pyx_v_EdgeC.NidO == __pyx_v_NodeCheck.Nid);
      if (__pyx_t_1) {

        /* "graph.pyx":1392
 *                 EdgeC = self.edges[Eid]
 *                 if EdgeC.NidO == NodeCheck.Nid:
 *                     len = EdgeC.len             # <<<<<<<<<<<<<<
 *                     NidF = EdgeC.NidD
 *                 else :
 */
        __pyx_t_4 = __pyx_v_EdgeC.len;
        __pyx_v_len = __pyx_t_4;

        /* "graph.pyx":1393
 *                 if EdgeC.NidO == NodeCheck.Nid:
 *                     len = EdgeC.len
 *                     NidF = EdgeC.NidD             # <<<<<<<<<<<<<<
 *                 else :
 *                     len = EdgeC.lenR
 */
        __pyx_t_12 = __pyx_v_EdgeC.NidD;
        __pyx_v_NidF = __pyx_t_12;

        /* "graph.pyx":1391
 *                 # new node?
 *                 EdgeC = self.edges[Eid]
 *                 if EdgeC.NidO == NodeCheck.Nid:             # <<<<<<<<<<<<<<
 *                     len = EdgeC.len
 *                     NidF = EdgeC.NidD
 */
        goto __pyx_L19;
      }

      /* "graph.pyx":1395
 *                     NidF = EdgeC.NidD
 *                 else :
 *                     len = EdgeC.lenR             # <<<<<<<<<<<<<<
 *                     NidF = EdgeC.NidO
 * 
 */
      /*else*/ {
        __pyx_t_4 = __pyx_v_EdgeC.lenR;
        __pyx_v_len = __pyx_t_4;

        /* "graph.pyx":1396
 *                 else :
 *                     len = EdgeC.lenR
 *                     NidF = EdgeC.NidO             # <<<<<<<<<<<<<<
 * 
 *                 if self._nodesIds[NidF] == -1:
 */
        __pyx_t_12 = __pyx_v_EdgeC.NidO;
        __pyx_v_NidF = __pyx_t_12;
      }
      __pyx_L19:;

      /* "graph.pyx":1398
 *                     NidF = EdgeC.NidO
 * 
 *                 if self._nodesIds[NidF] == -1:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      __pyx_t_1 = ((__pyx_v_self->_nodesIds[__pyx_v_NidF]) == -1L);
      if (__pyx_t_1) {

        /* "graph.pyx":1399
 * 
 *                 if self._nodesIds[NidF] == -1:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 len += NodeCheck.Dist + self.nodes[NidF].c
 */
        goto __pyx_L13_continue;

        /* "graph.pyx":1398
 *                     NidF = EdgeC.NidO
 * 
 *                 if self._nodesIds[NidF] == -1:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      }

      /* "graph.pyx":1401
 *                     continue
 * 
 *                 len += NodeCheck.Dist + self.nodes[NidF].c             # <<<<<<<<<<<<<<
 * 
 *                 if len > LimDist:
 */
      __pyx_v_len = (__pyx_v_len + (__pyx_v_NodeCheck.Dist + (__pyx_v_self->nodes[__pyx_v_NidF]).c));

      /* "graph.pyx":1403
 *                 len += NodeCheck.Dist + self.nodes[NidF].c
 * 
 *                 if len > LimDist:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      __pyx_t_1 = (__pyx_v_len > __pyx_v_LimDist);
      if (__pyx_t_1) {

        /* "graph.pyx":1404
 * 
 *                 if len > LimDist:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 NodeReach_T.Nid = NidF
 */
        goto __pyx_L13_continue;

        /* "graph.pyx":1403
 *                 len += NodeCheck.Dist + self.nodes[NidF].c
 * 
 *                 if len > LimDist:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      }

      /* "graph.pyx":1406
 *                     continue
 * 
 *                 NodeReach_T.Nid = NidF             # <<<<<<<<<<<<<<
 *                 NodeReach_T.Dist = len
 *                 NodeReach_T.Eid = Eid
 */
      __pyx_v_NodeReach_T.Nid = __pyx_v_NidF;

      /* "graph.pyx":1407
 * 
 *                 NodeReach_T.Nid = NidF
 *                 NodeReach_T.Dist = len             # <<<<<<<<<<<<<<
 *                 NodeReach_T.Eid = Eid
 *                 NodeReach_T.NidO = NodeCheck.Nid
 */
      __pyx_v_NodeReach_T.Dist = __pyx_v_len;

      /* "graph.pyx":1408
 *                 NodeReach_T.Nid = NidF
 *                 NodeReach_T.Dist = len
 *                 NodeReach_T.Eid = Eid             # <<<<<<<<<<<<<<
 *                 NodeReach_T.NidO = NodeCheck.Nid
 *                 NodeReach_T.Weight = len + (dist3d_ar(self.nodes[NidF].pt, PointD)- BaseDist) * DistMul
 */
      __pyx_v_NodeReach_T.Eid = __pyx_v_Eid;

      /* "graph.pyx":1409
 *                 NodeReach_T.Dist = len
 *                 NodeReach_T.Eid = Eid
 *                 NodeReach_T.NidO = NodeCheck.Nid             # <<<<<<<<<<<<<<
 *                 NodeReach_T.Weight = len + (dist3d_ar(self.nodes[NidF].pt, PointD)- BaseDist) * DistMul
 * 
 */
      __pyx_t_12 = __pyx_v_NodeCheck.Nid;
      __pyx_v_NodeReach_T.NidO = __pyx_t_12;

      /* "graph.pyx":1410
 *                 NodeReach_T.Eid = Eid
 *                 NodeReach_T.NidO = NodeCheck.Nid
 *                 NodeReach_T.Weight = len + (dist3d_ar(self.nodes[NidF].pt, PointD)- BaseDist) * DistMul             # <<<<<<<<<<<<<<
 * 
 *                 # check to visited nodes
 */
      __pyx_t_4 = __pyx_f_5graph_dist3d_ar((__pyx_v_self->nodes[__pyx_v_NidF]).pt, __pyx_v_PointD); if (unlikely(__pyx_t_4 == ((float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1410, __pyx_L1_error)
      __pyx_v_NodeReach_T.Weight = (__pyx_v_len + ((__pyx_t_4 - __pyx_v_BaseDist) * __pyx_v_DistMul));

      /* "graph.pyx":1413
 * 
 *                 # check to visited nodes
 *                 if self.nodeVisited[NidF].Nid == -1 : # if node havent been visited             # <<<<<<<<<<<<<<
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 */
      __pyx_t_1 = ((__pyx_v_self->nodeVisited[__pyx_v_NidF]).Nid == -1L);
      if (__pyx_t_1) {

        /* "graph.pyx":1414
 *                 # check to visited nodes
 *                 if self.nodeVisited[NidF].Nid == -1 : # if node havent been visited
 *                     self.nodeVisited[NidF] = NodeReach_T             # <<<<<<<<<<<<<<
 *                     OpenNodes.push(NodeReach_T)
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance
 */
        (__pyx_v_self->nodeVisited[__pyx_v_NidF]) = __pyx_v_NodeReach_T;

        /* "graph.pyx":1415
 *                 if self.nodeVisited[NidF].Nid == -1 : # if node havent been visited
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)             # <<<<<<<<<<<<<<
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance
 *                     self.nodeVisited[NidF] = NodeReach_T
 */
        ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_NodeReach_T); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1415, __pyx_L1_error)

        /* "graph.pyx":1413
 * 
 *                 # check to visited nodes
 *                 if self.nodeVisited[NidF].Nid == -1 : # if node havent been visited             # <<<<<<<<<<<<<<
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 */
        goto __pyx_L22;
      }

      /* "graph.pyx":1416
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance             # <<<<<<<<<<<<<<
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 */
      __pyx_t_1 = ((__pyx_v_self->nodeVisited[__pyx_v_NidF]).Dist > __pyx_v_len);
      if (__pyx_t_1) {

        /* "graph.pyx":1417
 *                     OpenNodes.push(NodeReach_T)
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance
 *                     self.nodeVisited[NidF] = NodeReach_T             # <<<<<<<<<<<<<<
 *                     OpenNodes.push(NodeReach_T)
 * 
 */
        (__pyx_v_self->nodeVisited[__pyx_v_NidF]) = __pyx_v_NodeReach_T;

        /* "graph.pyx":1418
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)             # <<<<<<<<<<<<<<
 * 
 *             if cycles > LimCycle or OpenNodes.top().Dist > LimDist:
 */
        ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_NodeReach_T); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1418, __pyx_L1_error)

        /* "graph.pyx":1416
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance             # <<<<<<<<<<<<<<
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 */
      }
      __pyx_L22:;
      __pyx_L13_continue:;
    }

    /* "graph.pyx":1420
 *                     OpenNodes.push(NodeReach_T)
 * 
 *             if cycles > LimCycle or OpenNodes.top().Dist > LimDist:             # <<<<<<<<<<<<<<
 *                 # if reaches cycle count limit
 *                 # if the minimum distance in open nodes is more than the distance limit
 */
    __pyx_t_2 = (__pyx_v_cycles > __pyx_v_LimCycle);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L24_bool_binop_done;
    }
    __pyx_t_9 = ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->top(__pyx_v_OpenNodes); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1420, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_9.Dist > __pyx_v_LimDist);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L24_bool_binop_done:;
    if (__pyx_t_1) {

      /* "graph.pyx":1423
 *                 # if reaches cycle count limit
 *                 # if the minimum distance in open nodes is more than the distance limit
 *                 keepGoing = False             # <<<<<<<<<<<<<<
 *             elif OpenNodes.empty():
 *                 keepGoing = False
 */
      __pyx_v_keepGoing = 0;

      /* "graph.pyx":1420
 *                     OpenNodes.push(NodeReach_T)
 * 
 *             if cycles > LimCycle or OpenNodes.top().Dist > LimDist:             # <<<<<<<<<<<<<<
 *                 # if reaches cycle count limit
 *                 # if the minimum distance in open nodes is more than the distance limit
 */
      goto __pyx_L23;
    }

    /* "graph.pyx":1424
 *                 # if the minimum distance in open nodes is more than the distance limit
 *                 keepGoing = False
 *             elif OpenNodes.empty():             # <<<<<<<<<<<<<<
 *                 keepGoing = False
 * 
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->empty(__pyx_v_OpenNodes); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1424, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "graph.pyx":1425
 *                 keepGoing = False
 *             elif OpenNodes.empty():
 *                 keepGoing = False             # <<<<<<<<<<<<<<
 * 
 *         if not keepGoing:
 */
      __pyx_v_keepGoing = 0;

      /* "graph.pyx":1424
 *                 # if the minimum distance in open nodes is more than the distance limit
 *                 keepGoing = False
 *             elif OpenNodes.empty():             # <<<<<<<<<<<<<<
 *                 keepGoing = False
 * 
 */
    }
    __pyx_L23:;
  }
  __pyx_L8_break:;

  /* "graph.pyx":1427
 *                 keepGoing = False
 * 
 *         if not keepGoing:             # <<<<<<<<<<<<<<
 *             return (-1.0,(-1,))
 *         else:
 */
  __pyx_t_1 = (!__pyx_v_keepGoing);
  if (__pyx_t_1) {

    /* "graph.pyx":1428
 * 
 *         if not keepGoing:
 *             return (-1.0,(-1,))             # <<<<<<<<<<<<<<
 *         else:
 *             # if found path, retracing steps
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_tuple__17);
    __pyx_r = __pyx_tuple__17;
    goto __pyx_L0;

    /* "graph.pyx":1427
 *                 keepGoing = False
 * 
 *         if not keepGoing:             # <<<<<<<<<<<<<<
 *             return (-1.0,(-1,))
 *         else:
 */
  }

  /* "graph.pyx":1431
 *         else:
 *             # if found path, retracing steps
 *             nlook = NodeCheck.Nid             # <<<<<<<<<<<<<<
 *             pth.push_back(EidD)
 *             while nlook != self.edges[Eid].NidO or nlook != self.edges[Eid].NidD:
 */
  /*else*/ {
    __pyx_t_8 = __pyx_v_NodeCheck.Nid;
    __pyx_v_nlook = __pyx_t_8;

    /* "graph.pyx":1432
 *             # if found path, retracing steps
 *             nlook = NodeCheck.Nid
 *             pth.push_back(EidD)             # <<<<<<<<<<<<<<
 *             while nlook != self.edges[Eid].NidO or nlook != self.edges[Eid].NidD:
 *                 pth.insert(pth.begin(),self.nodeVisited[nlook].Eid)
 */
    try {
      __pyx_v_pth.push_back(__pyx_v_EidD);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1432, __pyx_L1_error)
    }

    /* "graph.pyx":1433
 *             nlook = NodeCheck.Nid
 *             pth.push_back(EidD)
 *             while nlook != self.edges[Eid].NidO or nlook != self.edges[Eid].NidD:             # <<<<<<<<<<<<<<
 *                 pth.insert(pth.begin(),self.nodeVisited[nlook].Eid)
 *                 nlook = self.nodeVisited[nlook].NidO
 */
    while (1) {
      __pyx_t_2 = (__pyx_v_nlook != (__pyx_v_self->edges[__pyx_v_Eid]).NidO);
      if (!__pyx_t_2) {
      } else {
        __pyx_t_1 = __pyx_t_2;
        goto __pyx_L29_bool_binop_done;
      }
      __pyx_t_2 = (__pyx_v_nlook != (__pyx_v_self->edges[__pyx_v_Eid]).NidD);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L29_bool_binop_done:;
      if (!__pyx_t_1) break;

      /* "graph.pyx":1434
 *             pth.push_back(EidD)
 *             while nlook != self.edges[Eid].NidO or nlook != self.edges[Eid].NidD:
 *                 pth.insert(pth.begin(),self.nodeVisited[nlook].Eid)             # <<<<<<<<<<<<<<
 *                 nlook = self.nodeVisited[nlook].NidO
 *             # pth.insert(pth.begin(),nlook) # inserting the NidO
 */
      try {
        __pyx_v_pth.insert(__pyx_v_pth.begin(), (__pyx_v_self->nodeVisited[__pyx_v_nlook]).Eid);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 1434, __pyx_L1_error)
      }

      /* "graph.pyx":1435
 *             while nlook != self.edges[Eid].NidO or nlook != self.edges[Eid].NidD:
 *                 pth.insert(pth.begin(),self.nodeVisited[nlook].Eid)
 *                 nlook = self.nodeVisited[nlook].NidO             # <<<<<<<<<<<<<<
 *             # pth.insert(pth.begin(),nlook) # inserting the NidO
 *             pth.insert(pth.begin(), EidO)
 */
      __pyx_t_8 = (__pyx_v_self->nodeVisited[__pyx_v_nlook]).NidO;
      __pyx_v_nlook = __pyx_t_8;
    }

    /* "graph.pyx":1437
 *                 nlook = self.nodeVisited[nlook].NidO
 *             # pth.insert(pth.begin(),nlook) # inserting the NidO
 *             pth.insert(pth.begin(), EidO)             # <<<<<<<<<<<<<<
 *             return (NodeCheck.Dist, tuple(pth))
 * 
 */
    try {
      __pyx_v_pth.insert(__pyx_v_pth.begin(), __pyx_v_EidO);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1437, __pyx_L1_error)
    }

    /* "graph.pyx":1438
 *             # pth.insert(pth.begin(),nlook) # inserting the NidO
 *             pth.insert(pth.begin(), EidO)
 *             return (NodeCheck.Dist, tuple(pth))             # <<<<<<<<<<<<<<
 * 
 *     def PathDist_AStar(self, int NidO, int NidD, float LimDist = 10_000.0, int LimCycle = 10_000, float DistMul = 2.0) -> float:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_NodeCheck.Dist); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_13 = __pyx_convert_vector_to_py_int(__pyx_v_pth); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_14 = __Pyx_PySequence_Tuple(__pyx_t_13); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_t_13 = PyTuple_New(2); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_GIVEREF(__pyx_t_7);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_7)) __PYX_ERR(0, 1438, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_14);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_t_14)) __PYX_ERR(0, 1438, __pyx_L1_error);
    __pyx_t_7 = 0;
    __pyx_t_14 = 0;
    __pyx_r = ((PyObject*)__pyx_t_13);
    __pyx_t_13 = 0;
    goto __pyx_L0;
  }

  /* "graph.pyx":1285
 *             return (NodeCheck.Dist, tuple(pth))
 * 
 *     def PathFind_AStar_VirtuEntry(self,             # <<<<<<<<<<<<<<
 *             const int& EidO, tuple[float, float, float] PtO, const tuple[float, float] DstO,
 *             const int& EidD, tuple[float, float, float] PtD, const tuple[float, float] DstD,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("graph.GraphCy.PathFind_AStar_VirtuEntry", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_OpenNodes);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":1440
 *             return (NodeCheck.Dist, tuple(pth))
 * 
 *     def PathDist_AStar(self, int NidO, int NidD, float LimDist = 10_000.0, int LimCycle = 10_000, float DistMul = 2.0) -> float:             # <<<<<<<<<<<<<<
 *         """
 *         Find smallest distance between two nodes in the graph. Using Astar principle from 3d location information.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5graph_7GraphCy_51PathDist_AStar(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5graph_7GraphCy_50PathDist_AStar, "\n        Find smallest distance between two nodes in the graph. Using Astar principle from 3d location information.\n\n        Parameters\n        ------------\n        NidO : int\n            starting node ID\n        NidD : int\n            destination node ID\n        LimDist : float, default 10,000.0\n            distance limit before giving up the pathfinding process\n        LimCycle : int, default 10,000\n            number of cycles of priority_queue before giving up the pathfinding process\n        DistMul : float, default 1.0\n            A* weighting multiplier for the remaining cartesian distance\n        \n        Returns\n        -----------\n        length: float\n            if a path is found, it will return with the length of shortest possible distance of the path\n            if a path is not found, it will return -1.0\n        \n        Notes\n        -----------\n        The algorithm has bidirectional capability and also node cost added.\n        PriorityQueue weighting using:\n            minimum(distance_NetworkDistance + (distance_RemainingCartesianDistance x Distmul) )\n        ");
static PyMethodDef __pyx_mdef_5graph_7GraphCy_51PathDist_AStar = {"PathDist_AStar", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_51PathDist_AStar, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5graph_7GraphCy_50PathDist_AStar};
static PyObject *__pyx_pw_5graph_7GraphCy_51PathDist_AStar(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_NidO;
  int __pyx_v_NidD;
  float __pyx_v_LimDist;
  int __pyx_v_LimCycle;
  float __pyx_v_DistMul;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("PathDist_AStar (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_NidO,&__pyx_n_s_NidD,&__pyx_n_s_LimDist,&__pyx_n_s_LimCycle,&__pyx_n_s_DistMul,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_NidO)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1440, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_NidD)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1440, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("PathDist_AStar", 0, 2, 5, 1); __PYX_ERR(0, 1440, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_LimDist);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1440, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_LimCycle);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1440, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_DistMul);
          if (value) { values[4] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1440, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "PathDist_AStar") < 0)) __PYX_ERR(0, 1440, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_NidO = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_NidO == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1440, __pyx_L3_error)
    __pyx_v_NidD = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_NidD == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1440, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_LimDist = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_LimDist == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1440, __pyx_L3_error)
    } else {
      __pyx_v_LimDist = ((float)10000.0);
    }
    if (values[3]) {
      __pyx_v_LimCycle = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_LimCycle == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1440, __pyx_L3_error)
    } else {
      __pyx_v_LimCycle = ((int)0x2710);
    }
    if (values[4]) {
      __pyx_v_DistMul = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_DistMul == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1440, __pyx_L3_error)
    } else {
      __pyx_v_DistMul = ((float)2.0);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("PathDist_AStar", 0, 2, 5, __pyx_nargs); __PYX_ERR(0, 1440, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("graph.GraphCy.PathDist_AStar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5graph_7GraphCy_50PathDist_AStar(((struct __pyx_obj_5graph_GraphCy *)__pyx_v_self), __pyx_v_NidO, __pyx_v_NidD, __pyx_v_LimDist, __pyx_v_LimCycle, __pyx_v_DistMul);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5graph_7GraphCy_50PathDist_AStar(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, int __pyx_v_NidO, int __pyx_v_NidD, float __pyx_v_LimDist, int __pyx_v_LimCycle, float __pyx_v_DistMul) {
  float __pyx_v_BaseDist;
  int __pyx_v_cycles;
  int __pyx_v_keepGoing;
  struct __pyx_obj_5graph_PriorityQueue_NR *__pyx_v_OpenNodes = 0;
  struct __pyx_t_5graph_NodeReach __pyx_v_startNode;
  struct __pyx_t_5graph_NodeReach __pyx_v_NodeReach_T;
  int __pyx_v_NidF;
  float __pyx_v_len;
  struct __pyx_t_5graph_Edge __pyx_v_EdgeC;
  struct __pyx_t_5graph_NodeReach __pyx_v_NodeCheck;
  struct __pyx_t_5graph_Node __pyx_v_NodeTarget;
  int __pyx_v_i;
  int __pyx_v_Eid;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  struct __pyx_t_5graph_NodeReach __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PathDist_AStar", 1);

  /* "graph.pyx":1469
 *             minimum(distance_NetworkDistance + (distance_RemainingCartesianDistance x Distmul) )
 *         """
 *         cdef float BaseDist = dist3d(self.nodes[NidO], self.nodes[NidD])             # <<<<<<<<<<<<<<
 *         if BaseDist*0.9 > LimDist:
 *             return -1.0
 */
  __pyx_t_1 = __pyx_f_5graph_dist3d((__pyx_v_self->nodes[__pyx_v_NidO]), (__pyx_v_self->nodes[__pyx_v_NidD])); if (unlikely(__pyx_t_1 == ((float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1469, __pyx_L1_error)
  __pyx_v_BaseDist = __pyx_t_1;

  /* "graph.pyx":1470
 *         """
 *         cdef float BaseDist = dist3d(self.nodes[NidO], self.nodes[NidD])
 *         if BaseDist*0.9 > LimDist:             # <<<<<<<<<<<<<<
 *             return -1.0
 * 
 */
  __pyx_t_2 = ((__pyx_v_BaseDist * 0.9) > __pyx_v_LimDist);
  if (__pyx_t_2) {

    /* "graph.pyx":1471
 *         cdef float BaseDist = dist3d(self.nodes[NidO], self.nodes[NidD])
 *         if BaseDist*0.9 > LimDist:
 *             return -1.0             # <<<<<<<<<<<<<<
 * 
 *         self.C_Reset_NodeVisited()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_neg_1_0);
    __pyx_r = __pyx_float_neg_1_0;
    goto __pyx_L0;

    /* "graph.pyx":1470
 *         """
 *         cdef float BaseDist = dist3d(self.nodes[NidO], self.nodes[NidD])
 *         if BaseDist*0.9 > LimDist:             # <<<<<<<<<<<<<<
 *             return -1.0
 * 
 */
  }

  /* "graph.pyx":1473
 *             return -1.0
 * 
 *         self.C_Reset_NodeVisited()             # <<<<<<<<<<<<<<
 * 
 *         cdef int cycles
 */
  __pyx_f_5graph_7GraphCy_C_Reset_NodeVisited(__pyx_v_self, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1473, __pyx_L1_error)

  /* "graph.pyx":1476
 * 
 *         cdef int cycles
 *         cycles = 1             # <<<<<<<<<<<<<<
 *         cdef bint keepGoing
 *         keepGoing = True
 */
  __pyx_v_cycles = 1;

  /* "graph.pyx":1478
 *         cycles = 1
 *         cdef bint keepGoing
 *         keepGoing = True             # <<<<<<<<<<<<<<
 * 
 *         cdef PriorityQueue_NR OpenNodes
 */
  __pyx_v_keepGoing = 1;

  /* "graph.pyx":1482
 *         cdef PriorityQueue_NR OpenNodes
 *         cdef NodeReach startNode
 *         startNode.Nid = NidO             # <<<<<<<<<<<<<<
 *         startNode.Eid = -1
 *         startNode.Dist = 0.0
 */
  __pyx_v_startNode.Nid = __pyx_v_NidO;

  /* "graph.pyx":1483
 *         cdef NodeReach startNode
 *         startNode.Nid = NidO
 *         startNode.Eid = -1             # <<<<<<<<<<<<<<
 *         startNode.Dist = 0.0
 *         startNode.NidO = -1
 */
  __pyx_v_startNode.Eid = -1;

  /* "graph.pyx":1484
 *         startNode.Nid = NidO
 *         startNode.Eid = -1
 *         startNode.Dist = 0.0             # <<<<<<<<<<<<<<
 *         startNode.NidO = -1
 *         startNode.Weight = 0.0
 */
  __pyx_v_startNode.Dist = 0.0;

  /* "graph.pyx":1485
 *         startNode.Eid = -1
 *         startNode.Dist = 0.0
 *         startNode.NidO = -1             # <<<<<<<<<<<<<<
 *         startNode.Weight = 0.0
 *         OpenNodes = PriorityQueue_NR()
 */
  __pyx_v_startNode.NidO = -1;

  /* "graph.pyx":1486
 *         startNode.Dist = 0.0
 *         startNode.NidO = -1
 *         startNode.Weight = 0.0             # <<<<<<<<<<<<<<
 *         OpenNodes = PriorityQueue_NR()
 *         OpenNodes.push(startNode)
 */
  __pyx_v_startNode.Weight = 0.0;

  /* "graph.pyx":1487
 *         startNode.NidO = -1
 *         startNode.Weight = 0.0
 *         OpenNodes = PriorityQueue_NR()             # <<<<<<<<<<<<<<
 *         OpenNodes.push(startNode)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5graph_PriorityQueue_NR)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_OpenNodes = ((struct __pyx_obj_5graph_PriorityQueue_NR *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "graph.pyx":1488
 *         startNode.Weight = 0.0
 *         OpenNodes = PriorityQueue_NR()
 *         OpenNodes.push(startNode)             # <<<<<<<<<<<<<<
 * 
 *         cdef NodeReach NodeReach_T
 */
  ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_startNode); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1488, __pyx_L1_error)

  /* "graph.pyx":1496
 *         cdef NodeReach NodeCheck
 *         cdef Node NodeTarget
 *         NodeTarget = self.nodes[NidD]             # <<<<<<<<<<<<<<
 * 
 *         while keepGoing:
 */
  __pyx_v_NodeTarget = (__pyx_v_self->nodes[__pyx_v_NidD]);

  /* "graph.pyx":1498
 *         NodeTarget = self.nodes[NidD]
 * 
 *         while keepGoing:             # <<<<<<<<<<<<<<
 *             cycles += 1
 *             # check paths from OpenNodes
 */
  while (1) {
    if (!__pyx_v_keepGoing) break;

    /* "graph.pyx":1499
 * 
 *         while keepGoing:
 *             cycles += 1             # <<<<<<<<<<<<<<
 *             # check paths from OpenNodes
 *             NodeCheck = OpenNodes.pop_top()
 */
    __pyx_v_cycles = (__pyx_v_cycles + 1);

    /* "graph.pyx":1501
 *             cycles += 1
 *             # check paths from OpenNodes
 *             NodeCheck = OpenNodes.pop_top()             # <<<<<<<<<<<<<<
 * 
 *             if NodeCheck.Nid == NidD:
 */
    __pyx_t_4 = ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->pop_top(__pyx_v_OpenNodes); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1501, __pyx_L1_error)
    __pyx_v_NodeCheck = __pyx_t_4;

    /* "graph.pyx":1503
 *             NodeCheck = OpenNodes.pop_top()
 * 
 *             if NodeCheck.Nid == NidD:             # <<<<<<<<<<<<<<
 *                 return NodeCheck.Dist
 * 
 */
    __pyx_t_2 = (__pyx_v_NodeCheck.Nid == __pyx_v_NidD);
    if (__pyx_t_2) {

      /* "graph.pyx":1504
 * 
 *             if NodeCheck.Nid == NidD:
 *                 return NodeCheck.Dist             # <<<<<<<<<<<<<<
 * 
 *             for i in range(self.EidN):
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = PyFloat_FromDouble(__pyx_v_NodeCheck.Dist); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1504, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "graph.pyx":1503
 *             NodeCheck = OpenNodes.pop_top()
 * 
 *             if NodeCheck.Nid == NidD:             # <<<<<<<<<<<<<<
 *                 return NodeCheck.Dist
 * 
 */
    }

    /* "graph.pyx":1506
 *                 return NodeCheck.Dist
 * 
 *             for i in range(self.EidN):             # <<<<<<<<<<<<<<
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1 or Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 */
    __pyx_t_5 = __pyx_v_self->EidN;
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_i = __pyx_t_7;

      /* "graph.pyx":1507
 * 
 *             for i in range(self.EidN):
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]             # <<<<<<<<<<<<<<
 *                 if Eid == -1 or Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 *                     continue
 */
      __pyx_v_Eid = ((__pyx_v_self->nodes[__pyx_v_NodeCheck.Nid]).Eid[__pyx_v_i]);

      /* "graph.pyx":1508
 *             for i in range(self.EidN):
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1 or Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:             # <<<<<<<<<<<<<<
 *                     continue
 *                 # possible new path
 */
      __pyx_t_8 = (__pyx_v_Eid == -1L);
      if (!__pyx_t_8) {
      } else {
        __pyx_t_2 = __pyx_t_8;
        goto __pyx_L10_bool_binop_done;
      }
      __pyx_t_8 = (__pyx_v_Eid == __pyx_v_NodeCheck.Eid);
      if (!__pyx_t_8) {
      } else {
        __pyx_t_2 = __pyx_t_8;
        goto __pyx_L10_bool_binop_done;
      }
      __pyx_t_8 = ((__pyx_v_self->_edgesIds[__pyx_v_Eid]) == -1L);
      __pyx_t_2 = __pyx_t_8;
      __pyx_L10_bool_binop_done:;
      if (__pyx_t_2) {

        /* "graph.pyx":1509
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1 or Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 *                     continue             # <<<<<<<<<<<<<<
 *                 # possible new path
 *                 # new node?
 */
        goto __pyx_L7_continue;

        /* "graph.pyx":1508
 *             for i in range(self.EidN):
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1 or Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:             # <<<<<<<<<<<<<<
 *                     continue
 *                 # possible new path
 */
      }

      /* "graph.pyx":1512
 *                 # possible new path
 *                 # new node?
 *                 EdgeC = self.edges[Eid]             # <<<<<<<<<<<<<<
 *                 if EdgeC.NidO == NodeCheck.Nid:
 *                     len = EdgeC.len
 */
      __pyx_v_EdgeC = (__pyx_v_self->edges[__pyx_v_Eid]);

      /* "graph.pyx":1513
 *                 # new node?
 *                 EdgeC = self.edges[Eid]
 *                 if EdgeC.NidO == NodeCheck.Nid:             # <<<<<<<<<<<<<<
 *                     len = EdgeC.len
 *                     NidF = EdgeC.NidD
 */
      __pyx_t_2 = (__pyx_v_EdgeC.NidO == __pyx_v_NodeCheck.Nid);
      if (__pyx_t_2) {

        /* "graph.pyx":1514
 *                 EdgeC = self.edges[Eid]
 *                 if EdgeC.NidO == NodeCheck.Nid:
 *                     len = EdgeC.len             # <<<<<<<<<<<<<<
 *                     NidF = EdgeC.NidD
 *                 else :
 */
        __pyx_t_1 = __pyx_v_EdgeC.len;
        __pyx_v_len = __pyx_t_1;

        /* "graph.pyx":1515
 *                 if EdgeC.NidO == NodeCheck.Nid:
 *                     len = EdgeC.len
 *                     NidF = EdgeC.NidD             # <<<<<<<<<<<<<<
 *                 else :
 *                     len = EdgeC.lenR
 */
        __pyx_t_9 = __pyx_v_EdgeC.NidD;
        __pyx_v_NidF = __pyx_t_9;

        /* "graph.pyx":1513
 *                 # new node?
 *                 EdgeC = self.edges[Eid]
 *                 if EdgeC.NidO == NodeCheck.Nid:             # <<<<<<<<<<<<<<
 *                     len = EdgeC.len
 *                     NidF = EdgeC.NidD
 */
        goto __pyx_L13;
      }

      /* "graph.pyx":1517
 *                     NidF = EdgeC.NidD
 *                 else :
 *                     len = EdgeC.lenR             # <<<<<<<<<<<<<<
 *                     NidF = EdgeC.NidO
 * 
 */
      /*else*/ {
        __pyx_t_1 = __pyx_v_EdgeC.lenR;
        __pyx_v_len = __pyx_t_1;

        /* "graph.pyx":1518
 *                 else :
 *                     len = EdgeC.lenR
 *                     NidF = EdgeC.NidO             # <<<<<<<<<<<<<<
 * 
 *                 if self._nodesIds[NidF] == -1:
 */
        __pyx_t_9 = __pyx_v_EdgeC.NidO;
        __pyx_v_NidF = __pyx_t_9;
      }
      __pyx_L13:;

      /* "graph.pyx":1520
 *                     NidF = EdgeC.NidO
 * 
 *                 if self._nodesIds[NidF] == -1:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      __pyx_t_2 = ((__pyx_v_self->_nodesIds[__pyx_v_NidF]) == -1L);
      if (__pyx_t_2) {

        /* "graph.pyx":1521
 * 
 *                 if self._nodesIds[NidF] == -1:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 len += NodeCheck.Dist + self.nodes[NidF].c
 */
        goto __pyx_L7_continue;

        /* "graph.pyx":1520
 *                     NidF = EdgeC.NidO
 * 
 *                 if self._nodesIds[NidF] == -1:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      }

      /* "graph.pyx":1523
 *                     continue
 * 
 *                 len += NodeCheck.Dist + self.nodes[NidF].c             # <<<<<<<<<<<<<<
 * 
 *                 if len > LimDist:
 */
      __pyx_v_len = (__pyx_v_len + (__pyx_v_NodeCheck.Dist + (__pyx_v_self->nodes[__pyx_v_NidF]).c));

      /* "graph.pyx":1525
 *                 len += NodeCheck.Dist + self.nodes[NidF].c
 * 
 *                 if len > LimDist:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      __pyx_t_2 = (__pyx_v_len > __pyx_v_LimDist);
      if (__pyx_t_2) {

        /* "graph.pyx":1526
 * 
 *                 if len > LimDist:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 NodeReach_T.Nid = NidF
 */
        goto __pyx_L7_continue;

        /* "graph.pyx":1525
 *                 len += NodeCheck.Dist + self.nodes[NidF].c
 * 
 *                 if len > LimDist:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      }

      /* "graph.pyx":1528
 *                     continue
 * 
 *                 NodeReach_T.Nid = NidF             # <<<<<<<<<<<<<<
 *                 NodeReach_T.Dist = len
 *                 NodeReach_T.Eid = Eid
 */
      __pyx_v_NodeReach_T.Nid = __pyx_v_NidF;

      /* "graph.pyx":1529
 * 
 *                 NodeReach_T.Nid = NidF
 *                 NodeReach_T.Dist = len             # <<<<<<<<<<<<<<
 *                 NodeReach_T.Eid = Eid
 *                 NodeReach_T.NidO = NodeCheck.Nid
 */
      __pyx_v_NodeReach_T.Dist = __pyx_v_len;

      /* "graph.pyx":1530
 *                 NodeReach_T.Nid = NidF
 *                 NodeReach_T.Dist = len
 *                 NodeReach_T.Eid = Eid             # <<<<<<<<<<<<<<
 *                 NodeReach_T.NidO = NodeCheck.Nid
 *                 NodeReach_T.Weight = len + (dist3d(self.nodes[NidF], NodeTarget)- BaseDist) * DistMul
 */
      __pyx_v_NodeReach_T.Eid = __pyx_v_Eid;

      /* "graph.pyx":1531
 *                 NodeReach_T.Dist = len
 *                 NodeReach_T.Eid = Eid
 *                 NodeReach_T.NidO = NodeCheck.Nid             # <<<<<<<<<<<<<<
 *                 NodeReach_T.Weight = len + (dist3d(self.nodes[NidF], NodeTarget)- BaseDist) * DistMul
 * 
 */
      __pyx_t_9 = __pyx_v_NodeCheck.Nid;
      __pyx_v_NodeReach_T.NidO = __pyx_t_9;

      /* "graph.pyx":1532
 *                 NodeReach_T.Eid = Eid
 *                 NodeReach_T.NidO = NodeCheck.Nid
 *                 NodeReach_T.Weight = len + (dist3d(self.nodes[NidF], NodeTarget)- BaseDist) * DistMul             # <<<<<<<<<<<<<<
 * 
 *                 # check to visited nodes
 */
      __pyx_t_1 = __pyx_f_5graph_dist3d((__pyx_v_self->nodes[__pyx_v_NidF]), __pyx_v_NodeTarget); if (unlikely(__pyx_t_1 == ((float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1532, __pyx_L1_error)
      __pyx_v_NodeReach_T.Weight = (__pyx_v_len + ((__pyx_t_1 - __pyx_v_BaseDist) * __pyx_v_DistMul));

      /* "graph.pyx":1535
 * 
 *                 # check to visited nodes
 *                 if self.nodeVisited[NidF].Nid == -1 : # if node havent been visited             # <<<<<<<<<<<<<<
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 */
      __pyx_t_2 = ((__pyx_v_self->nodeVisited[__pyx_v_NidF]).Nid == -1L);
      if (__pyx_t_2) {

        /* "graph.pyx":1536
 *                 # check to visited nodes
 *                 if self.nodeVisited[NidF].Nid == -1 : # if node havent been visited
 *                     self.nodeVisited[NidF] = NodeReach_T             # <<<<<<<<<<<<<<
 *                     OpenNodes.push(NodeReach_T)
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance
 */
        (__pyx_v_self->nodeVisited[__pyx_v_NidF]) = __pyx_v_NodeReach_T;

        /* "graph.pyx":1537
 *                 if self.nodeVisited[NidF].Nid == -1 : # if node havent been visited
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)             # <<<<<<<<<<<<<<
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance
 *                     self.nodeVisited[NidF] = NodeReach_T
 */
        ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_NodeReach_T); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1537, __pyx_L1_error)

        /* "graph.pyx":1535
 * 
 *                 # check to visited nodes
 *                 if self.nodeVisited[NidF].Nid == -1 : # if node havent been visited             # <<<<<<<<<<<<<<
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 */
        goto __pyx_L16;
      }

      /* "graph.pyx":1538
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance             # <<<<<<<<<<<<<<
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 */
      __pyx_t_2 = ((__pyx_v_self->nodeVisited[__pyx_v_NidF]).Dist > __pyx_v_len);
      if (__pyx_t_2) {

        /* "graph.pyx":1539
 *                     OpenNodes.push(NodeReach_T)
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance
 *                     self.nodeVisited[NidF] = NodeReach_T             # <<<<<<<<<<<<<<
 *                     OpenNodes.push(NodeReach_T)
 * 
 */
        (__pyx_v_self->nodeVisited[__pyx_v_NidF]) = __pyx_v_NodeReach_T;

        /* "graph.pyx":1540
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)             # <<<<<<<<<<<<<<
 * 
 *             if cycles > LimCycle or OpenNodes.top().Dist > LimDist:
 */
        ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_NodeReach_T); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1540, __pyx_L1_error)

        /* "graph.pyx":1538
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance             # <<<<<<<<<<<<<<
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 */
      }
      __pyx_L16:;
      __pyx_L7_continue:;
    }

    /* "graph.pyx":1542
 *                     OpenNodes.push(NodeReach_T)
 * 
 *             if cycles > LimCycle or OpenNodes.top().Dist > LimDist:             # <<<<<<<<<<<<<<
 *                 # if reaches cycle count limit
 *                 # if the minimum distance in open nodes is more than the distance limit
 */
    __pyx_t_8 = (__pyx_v_cycles > __pyx_v_LimCycle);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_2 = __pyx_t_8;
      goto __pyx_L18_bool_binop_done;
    }
    __pyx_t_4 = ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->top(__pyx_v_OpenNodes); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1542, __pyx_L1_error)
    __pyx_t_8 = (__pyx_t_4.Dist > __pyx_v_LimDist);
    __pyx_t_2 = __pyx_t_8;
    __pyx_L18_bool_binop_done:;
    if (__pyx_t_2) {

      /* "graph.pyx":1545
 *                 # if reaches cycle count limit
 *                 # if the minimum distance in open nodes is more than the distance limit
 *                 keepGoing = False             # <<<<<<<<<<<<<<
 *             elif OpenNodes.empty():
 *                 keepGoing = False
 */
      __pyx_v_keepGoing = 0;

      /* "graph.pyx":1542
 *                     OpenNodes.push(NodeReach_T)
 * 
 *             if cycles > LimCycle or OpenNodes.top().Dist > LimDist:             # <<<<<<<<<<<<<<
 *                 # if reaches cycle count limit
 *                 # if the minimum distance in open nodes is more than the distance limit
 */
      goto __pyx_L17;
    }

    /* "graph.pyx":1546
 *                 # if the minimum distance in open nodes is more than the distance limit
 *                 keepGoing = False
 *             elif OpenNodes.empty():             # <<<<<<<<<<<<<<
 *                 keepGoing = False
 * 
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->empty(__pyx_v_OpenNodes); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1546, __pyx_L1_error)
    if (__pyx_t_2) {

      /* "graph.pyx":1547
 *                 keepGoing = False
 *             elif OpenNodes.empty():
 *                 keepGoing = False             # <<<<<<<<<<<<<<
 * 
 *         return -1.0
 */
      __pyx_v_keepGoing = 0;

      /* "graph.pyx":1546
 *                 # if the minimum distance in open nodes is more than the distance limit
 *                 keepGoing = False
 *             elif OpenNodes.empty():             # <<<<<<<<<<<<<<
 *                 keepGoing = False
 * 
 */
    }
    __pyx_L17:;
  }

  /* "graph.pyx":1549
 *                 keepGoing = False
 * 
 *         return -1.0             # <<<<<<<<<<<<<<
 * 
 *     def PathDist_AStar_VirtuEntry(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_float_neg_1_0);
  __pyx_r = __pyx_float_neg_1_0;
  goto __pyx_L0;

  /* "graph.pyx":1440
 *             return (NodeCheck.Dist, tuple(pth))
 * 
 *     def PathDist_AStar(self, int NidO, int NidD, float LimDist = 10_000.0, int LimCycle = 10_000, float DistMul = 2.0) -> float:             # <<<<<<<<<<<<<<
 *         """
 *         Find smallest distance between two nodes in the graph. Using Astar principle from 3d location information.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("graph.GraphCy.PathDist_AStar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_OpenNodes);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":1551
 *         return -1.0
 * 
 *     def PathDist_AStar_VirtuEntry(self,             # <<<<<<<<<<<<<<
 *             const int& EidO, tuple[float, float, float] PtO, const tuple[float, float] DstO,
 *             const int& EidD, tuple[float, float, float] PtD, const tuple[float, float] DstD,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5graph_7GraphCy_53PathDist_AStar_VirtuEntry(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5graph_7GraphCy_52PathDist_AStar_VirtuEntry, "\n        Find smallest distance between two nodes in the graph. Using Astar principle from 3d location information.\n\n        Parameters\n        ------------\n        NidO : int\n            starting node ID\n        NidD : int\n            destination node ID\n        LimDist : float, default 10,000.0\n            distance limit before giving up the pathfinding process\n        LimCycle : int, default 10,000\n            number of cycles of priority_queue before giving up the pathfinding process\n        DistMul : float, default 1.0\n            A* weighting multiplier for the remaining cartesian distance\n        \n        Returns\n        -----------\n        length: float\n            if a path is found, it will return with the length of shortest possible distance of the path\n            if a path is not found, it will return -1.0\n        \n        Notes\n        -----------\n        The algorithm has bidirectional capability and also node cost added.\n        PriorityQueue weighting using:\n            minimum(distance_NetworkDistance + (distance_RemainingCartesianDistance x Distmul) )\n        ");
static PyMethodDef __pyx_mdef_5graph_7GraphCy_53PathDist_AStar_VirtuEntry = {"PathDist_AStar_VirtuEntry", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_53PathDist_AStar_VirtuEntry, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5graph_7GraphCy_52PathDist_AStar_VirtuEntry};
static PyObject *__pyx_pw_5graph_7GraphCy_53PathDist_AStar_VirtuEntry(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_EidO;
  __pyx_ctuple_float__and_float__and_float __pyx_v_PtO;
  __pyx_ctuple_float__and_float __pyx_v_DstO;
  int __pyx_v_EidD;
  __pyx_ctuple_float__and_float__and_float __pyx_v_PtD;
  __pyx_ctuple_float__and_float __pyx_v_DstD;
  float __pyx_v_LimDist;
  int __pyx_v_LimCycle;
  float __pyx_v_DistMul;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("PathDist_AStar_VirtuEntry (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_EidO,&__pyx_n_s_PtO,&__pyx_n_s_DstO,&__pyx_n_s_EidD,&__pyx_n_s_PtD,&__pyx_n_s_DstD,&__pyx_n_s_LimDist,&__pyx_n_s_LimCycle,&__pyx_n_s_DistMul,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  9: values[8] = __Pyx_Arg_FASTCALL(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = __Pyx_Arg_FASTCALL(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_EidO)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1551, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_PtO)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1551, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("PathDist_AStar_VirtuEntry", 0, 6, 9, 1); __PYX_ERR(0, 1551, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_DstO)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1551, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("PathDist_AStar_VirtuEntry", 0, 6, 9, 2); __PYX_ERR(0, 1551, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_EidD)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1551, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("PathDist_AStar_VirtuEntry", 0, 6, 9, 3); __PYX_ERR(0, 1551, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_PtD)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[4]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1551, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("PathDist_AStar_VirtuEntry", 0, 6, 9, 4); __PYX_ERR(0, 1551, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_DstD)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[5]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1551, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("PathDist_AStar_VirtuEntry", 0, 6, 9, 5); __PYX_ERR(0, 1551, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_LimDist);
          if (value) { values[6] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1551, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_LimCycle);
          if (value) { values[7] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1551, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_DistMul);
          if (value) { values[8] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1551, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "PathDist_AStar_VirtuEntry") < 0)) __PYX_ERR(0, 1551, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  9: values[8] = __Pyx_Arg_FASTCALL(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = __Pyx_Arg_FASTCALL(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_EidO = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_EidO == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1552, __pyx_L3_error)
    __pyx_v_PtO = __pyx_convert__from_py___pyx_ctuple_float__and_float__and_float(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1552, __pyx_L3_error)
    __pyx_v_DstO = __pyx_convert__from_py___pyx_ctuple_float__and_float(values[2]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1552, __pyx_L3_error)
    __pyx_v_EidD = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_EidD == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1553, __pyx_L3_error)
    __pyx_v_PtD = __pyx_convert__from_py___pyx_ctuple_float__and_float__and_float(values[4]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1553, __pyx_L3_error)
    __pyx_v_DstD = __pyx_convert__from_py___pyx_ctuple_float__and_float(values[5]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1553, __pyx_L3_error)
    if (values[6]) {
      __pyx_v_LimDist = __pyx_PyFloat_AsFloat(values[6]); if (unlikely((__pyx_v_LimDist == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1554, __pyx_L3_error)
    } else {
      __pyx_v_LimDist = ((float)10000.0);
    }
    if (values[7]) {
      __pyx_v_LimCycle = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_LimCycle == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1555, __pyx_L3_error)
    } else {
      __pyx_v_LimCycle = ((int)0x2710);
    }
    if (values[8]) {
      __pyx_v_DistMul = __pyx_PyFloat_AsFloat(values[8]); if (unlikely((__pyx_v_DistMul == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1556, __pyx_L3_error)
    } else {
      __pyx_v_DistMul = ((float)2.0);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("PathDist_AStar_VirtuEntry", 0, 6, 9, __pyx_nargs); __PYX_ERR(0, 1551, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("graph.GraphCy.PathDist_AStar_VirtuEntry", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5graph_7GraphCy_52PathDist_AStar_VirtuEntry(((struct __pyx_obj_5graph_GraphCy *)__pyx_v_self), __pyx_v_EidO, __pyx_v_PtO, __pyx_v_DstO, __pyx_v_EidD, __pyx_v_PtD, __pyx_v_DstD, __pyx_v_LimDist, __pyx_v_LimCycle, __pyx_v_DistMul);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5graph_7GraphCy_52PathDist_AStar_VirtuEntry(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, int __pyx_v_EidO, __pyx_ctuple_float__and_float__and_float __pyx_v_PtO, __pyx_ctuple_float__and_float __pyx_v_DstO, int __pyx_v_EidD, __pyx_ctuple_float__and_float__and_float __pyx_v_PtD, __pyx_ctuple_float__and_float __pyx_v_DstD, float __pyx_v_LimDist, int __pyx_v_LimCycle, float __pyx_v_DistMul) {
  float __pyx_v_PointD[3];
  float __pyx_v_PointO[3];
  float __pyx_v_BaseDist;
  int __pyx_v_cycles;
  int __pyx_v_keepGoing;
  struct __pyx_obj_5graph_PriorityQueue_NR *__pyx_v_OpenNodes = 0;
  struct __pyx_t_5graph_NodeReach __pyx_v_startNode;
  struct __pyx_t_5graph_NodeReach __pyx_v_NodeReach_T;
  int __pyx_v_NidF;
  float __pyx_v_len;
  struct __pyx_t_5graph_Edge __pyx_v_EdgeC;
  struct __pyx_t_5graph_NodeReach __pyx_v_NodeCheck;
  int __pyx_v_i;
  int __pyx_v_Eid;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  float *__pyx_t_3;
  float __pyx_t_4;
  float __pyx_t_5;
  float __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  struct __pyx_t_5graph_NodeReach __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PathDist_AStar_VirtuEntry", 1);

  /* "graph.pyx":1586
 *         """
 *         # checking edges exists
 *         if self._edgesIds[EidO] == -1 or self._edgesIds[EidD] == -1:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef float[3] PointD = (PtD[0], PtD[1], PtD[2])
 */
  __pyx_t_2 = ((__pyx_v_self->_edgesIds[__pyx_v_EidO]) == -1L);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_self->_edgesIds[__pyx_v_EidD]) == -1L);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "graph.pyx":1587
 *         # checking edges exists
 *         if self._edgesIds[EidO] == -1 or self._edgesIds[EidD] == -1:
 *             return None             # <<<<<<<<<<<<<<
 *         cdef float[3] PointD = (PtD[0], PtD[1], PtD[2])
 *         cdef float[3] PointO = (PtO[0], PtO[1], PtO[2])
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "graph.pyx":1586
 *         """
 *         # checking edges exists
 *         if self._edgesIds[EidO] == -1 or self._edgesIds[EidD] == -1:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef float[3] PointD = (PtD[0], PtD[1], PtD[2])
 */
  }

  /* "graph.pyx":1588
 *         if self._edgesIds[EidO] == -1 or self._edgesIds[EidD] == -1:
 *             return None
 *         cdef float[3] PointD = (PtD[0], PtD[1], PtD[2])             # <<<<<<<<<<<<<<
 *         cdef float[3] PointO = (PtO[0], PtO[1], PtO[2])
 *         cdef float BaseDist = dist3d_ar(PointO, PointD)
 */
  __pyx_t_3 = __pyx_v_PointD;
  __pyx_t_4 = __pyx_v_PtD.f0;
  __pyx_t_5 = __pyx_v_PtD.f1;
  __pyx_t_6 = __pyx_v_PtD.f2;
  (__pyx_t_3[0]) = __pyx_t_4;
  (__pyx_t_3[1]) = __pyx_t_5;
  (__pyx_t_3[2]) = __pyx_t_6;

  /* "graph.pyx":1589
 *             return None
 *         cdef float[3] PointD = (PtD[0], PtD[1], PtD[2])
 *         cdef float[3] PointO = (PtO[0], PtO[1], PtO[2])             # <<<<<<<<<<<<<<
 *         cdef float BaseDist = dist3d_ar(PointO, PointD)
 *         if BaseDist*0.9 > LimDist:
 */
  __pyx_t_3 = __pyx_v_PointO;
  __pyx_t_6 = __pyx_v_PtO.f0;
  __pyx_t_5 = __pyx_v_PtO.f1;
  __pyx_t_4 = __pyx_v_PtO.f2;
  (__pyx_t_3[0]) = __pyx_t_6;
  (__pyx_t_3[1]) = __pyx_t_5;
  (__pyx_t_3[2]) = __pyx_t_4;

  /* "graph.pyx":1590
 *         cdef float[3] PointD = (PtD[0], PtD[1], PtD[2])
 *         cdef float[3] PointO = (PtO[0], PtO[1], PtO[2])
 *         cdef float BaseDist = dist3d_ar(PointO, PointD)             # <<<<<<<<<<<<<<
 *         if BaseDist*0.9 > LimDist:
 *             return -1.0
 */
  __pyx_t_4 = __pyx_f_5graph_dist3d_ar(__pyx_v_PointO, __pyx_v_PointD); if (unlikely(__pyx_t_4 == ((float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1590, __pyx_L1_error)
  __pyx_v_BaseDist = __pyx_t_4;

  /* "graph.pyx":1591
 *         cdef float[3] PointO = (PtO[0], PtO[1], PtO[2])
 *         cdef float BaseDist = dist3d_ar(PointO, PointD)
 *         if BaseDist*0.9 > LimDist:             # <<<<<<<<<<<<<<
 *             return -1.0
 * 
 */
  __pyx_t_1 = ((__pyx_v_BaseDist * 0.9) > __pyx_v_LimDist);
  if (__pyx_t_1) {

    /* "graph.pyx":1592
 *         cdef float BaseDist = dist3d_ar(PointO, PointD)
 *         if BaseDist*0.9 > LimDist:
 *             return -1.0             # <<<<<<<<<<<<<<
 * 
 *         if EidD == EidO:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_float_neg_1_0);
    __pyx_r = __pyx_float_neg_1_0;
    goto __pyx_L0;

    /* "graph.pyx":1591
 *         cdef float[3] PointO = (PtO[0], PtO[1], PtO[2])
 *         cdef float BaseDist = dist3d_ar(PointO, PointD)
 *         if BaseDist*0.9 > LimDist:             # <<<<<<<<<<<<<<
 *             return -1.0
 * 
 */
  }

  /* "graph.pyx":1594
 *             return -1.0
 * 
 *         if EidD == EidO:             # <<<<<<<<<<<<<<
 *             return abs(DstD[0] - DstO[1])
 * 
 */
  __pyx_t_1 = (__pyx_v_EidD == __pyx_v_EidO);
  if (__pyx_t_1) {

    /* "graph.pyx":1595
 * 
 *         if EidD == EidO:
 *             return abs(DstD[0] - DstO[1])             # <<<<<<<<<<<<<<
 * 
 *         self.C_Reset_NodeVisited()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_7 = PyFloat_FromDouble(fabsf((__pyx_v_DstD.f0 - __pyx_v_DstO.f1))); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1595, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_r = __pyx_t_7;
    __pyx_t_7 = 0;
    goto __pyx_L0;

    /* "graph.pyx":1594
 *             return -1.0
 * 
 *         if EidD == EidO:             # <<<<<<<<<<<<<<
 *             return abs(DstD[0] - DstO[1])
 * 
 */
  }

  /* "graph.pyx":1597
 *             return abs(DstD[0] - DstO[1])
 * 
 *         self.C_Reset_NodeVisited()             # <<<<<<<<<<<<<<
 * 
 *         cdef int cycles
 */
  __pyx_f_5graph_7GraphCy_C_Reset_NodeVisited(__pyx_v_self, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1597, __pyx_L1_error)

  /* "graph.pyx":1600
 * 
 *         cdef int cycles
 *         cycles = 1             # <<<<<<<<<<<<<<
 *         cdef bint keepGoing
 *         keepGoing = True
 */
  __pyx_v_cycles = 1;

  /* "graph.pyx":1602
 *         cycles = 1
 *         cdef bint keepGoing
 *         keepGoing = True             # <<<<<<<<<<<<<<
 * 
 *         # cdef vector[NodeReach] OpenNodes
 */
  __pyx_v_keepGoing = 1;

  /* "graph.pyx":1607
 *         cdef PriorityQueue_NR OpenNodes
 *         cdef NodeReach startNode
 *         OpenNodes = PriorityQueue_NR()             # <<<<<<<<<<<<<<
 * 
 *         # for Origin EdgeOrigin
 */
  __pyx_t_7 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5graph_PriorityQueue_NR)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_v_OpenNodes = ((struct __pyx_obj_5graph_PriorityQueue_NR *)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "graph.pyx":1610
 * 
 *         # for Origin EdgeOrigin
 *         startNode.Nid = self.edges[EidO].NidO             # <<<<<<<<<<<<<<
 *         startNode.Eid = EidO
 *         startNode.Dist = DstO[0]
 */
  __pyx_t_8 = (__pyx_v_self->edges[__pyx_v_EidO]).NidO;
  __pyx_v_startNode.Nid = __pyx_t_8;

  /* "graph.pyx":1611
 *         # for Origin EdgeOrigin
 *         startNode.Nid = self.edges[EidO].NidO
 *         startNode.Eid = EidO             # <<<<<<<<<<<<<<
 *         startNode.Dist = DstO[0]
 *         startNode.NidO = -1
 */
  __pyx_v_startNode.Eid = __pyx_v_EidO;

  /* "graph.pyx":1612
 *         startNode.Nid = self.edges[EidO].NidO
 *         startNode.Eid = EidO
 *         startNode.Dist = DstO[0]             # <<<<<<<<<<<<<<
 *         startNode.NidO = -1
 *         startNode.Weight = DstO[0] + (dist3d_ar(self.nodes[startNode.Nid].pt, PointD)- BaseDist) * DistMul
 */
  __pyx_v_startNode.Dist = __pyx_v_DstO.f0;

  /* "graph.pyx":1613
 *         startNode.Eid = EidO
 *         startNode.Dist = DstO[0]
 *         startNode.NidO = -1             # <<<<<<<<<<<<<<
 *         startNode.Weight = DstO[0] + (dist3d_ar(self.nodes[startNode.Nid].pt, PointD)- BaseDist) * DistMul
 *         OpenNodes.push(startNode)
 */
  __pyx_v_startNode.NidO = -1;

  /* "graph.pyx":1614
 *         startNode.Dist = DstO[0]
 *         startNode.NidO = -1
 *         startNode.Weight = DstO[0] + (dist3d_ar(self.nodes[startNode.Nid].pt, PointD)- BaseDist) * DistMul             # <<<<<<<<<<<<<<
 *         OpenNodes.push(startNode)
 *         # for destination edgeorigin
 */
  __pyx_t_4 = __pyx_f_5graph_dist3d_ar((__pyx_v_self->nodes[__pyx_v_startNode.Nid]).pt, __pyx_v_PointD); if (unlikely(__pyx_t_4 == ((float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1614, __pyx_L1_error)
  __pyx_v_startNode.Weight = (__pyx_v_DstO.f0 + ((__pyx_t_4 - __pyx_v_BaseDist) * __pyx_v_DistMul));

  /* "graph.pyx":1615
 *         startNode.NidO = -1
 *         startNode.Weight = DstO[0] + (dist3d_ar(self.nodes[startNode.Nid].pt, PointD)- BaseDist) * DistMul
 *         OpenNodes.push(startNode)             # <<<<<<<<<<<<<<
 *         # for destination edgeorigin
 *         startNode.Nid = self.edges[EidO].NidD
 */
  ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_startNode); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1615, __pyx_L1_error)

  /* "graph.pyx":1617
 *         OpenNodes.push(startNode)
 *         # for destination edgeorigin
 *         startNode.Nid = self.edges[EidO].NidD             # <<<<<<<<<<<<<<
 *         startNode.Eid = EidO
 *         startNode.Dist = DstO[1]
 */
  __pyx_t_8 = (__pyx_v_self->edges[__pyx_v_EidO]).NidD;
  __pyx_v_startNode.Nid = __pyx_t_8;

  /* "graph.pyx":1618
 *         # for destination edgeorigin
 *         startNode.Nid = self.edges[EidO].NidD
 *         startNode.Eid = EidO             # <<<<<<<<<<<<<<
 *         startNode.Dist = DstO[1]
 *         startNode.NidO = -1
 */
  __pyx_v_startNode.Eid = __pyx_v_EidO;

  /* "graph.pyx":1619
 *         startNode.Nid = self.edges[EidO].NidD
 *         startNode.Eid = EidO
 *         startNode.Dist = DstO[1]             # <<<<<<<<<<<<<<
 *         startNode.NidO = -1
 *         startNode.Weight = DstO[1] + (dist3d_ar(self.nodes[startNode.Nid].pt, PointD)- BaseDist) * DistMul
 */
  __pyx_v_startNode.Dist = __pyx_v_DstO.f1;

  /* "graph.pyx":1620
 *         startNode.Eid = EidO
 *         startNode.Dist = DstO[1]
 *         startNode.NidO = -1             # <<<<<<<<<<<<<<
 *         startNode.Weight = DstO[1] + (dist3d_ar(self.nodes[startNode.Nid].pt, PointD)- BaseDist) * DistMul
 *         OpenNodes.push(startNode)
 */
  __pyx_v_startNode.NidO = -1;

  /* "graph.pyx":1621
 *         startNode.Dist = DstO[1]
 *         startNode.NidO = -1
 *         startNode.Weight = DstO[1] + (dist3d_ar(self.nodes[startNode.Nid].pt, PointD)- BaseDist) * DistMul             # <<<<<<<<<<<<<<
 *         OpenNodes.push(startNode)
 * 
 */
  __pyx_t_4 = __pyx_f_5graph_dist3d_ar((__pyx_v_self->nodes[__pyx_v_startNode.Nid]).pt, __pyx_v_PointD); if (unlikely(__pyx_t_4 == ((float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1621, __pyx_L1_error)
  __pyx_v_startNode.Weight = (__pyx_v_DstO.f1 + ((__pyx_t_4 - __pyx_v_BaseDist) * __pyx_v_DistMul));

  /* "graph.pyx":1622
 *         startNode.NidO = -1
 *         startNode.Weight = DstO[1] + (dist3d_ar(self.nodes[startNode.Nid].pt, PointD)- BaseDist) * DistMul
 *         OpenNodes.push(startNode)             # <<<<<<<<<<<<<<
 * 
 *         cdef NodeReach NodeReach_T
 */
  ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_startNode); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1622, __pyx_L1_error)

  /* "graph.pyx":1630
 *         cdef NodeReach NodeCheck
 * 
 *         while keepGoing:             # <<<<<<<<<<<<<<
 *             cycles += 1
 *             # check paths from OpenNodes
 */
  while (1) {
    if (!__pyx_v_keepGoing) break;

    /* "graph.pyx":1631
 * 
 *         while keepGoing:
 *             cycles += 1             # <<<<<<<<<<<<<<
 *             # check paths from OpenNodes
 *             NodeCheck = OpenNodes.pop_top()
 */
    __pyx_v_cycles = (__pyx_v_cycles + 1);

    /* "graph.pyx":1633
 *             cycles += 1
 *             # check paths from OpenNodes
 *             NodeCheck = OpenNodes.pop_top()             # <<<<<<<<<<<<<<
 * 
 *             if NodeCheck.Eid == EidD:
 */
    __pyx_t_9 = ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->pop_top(__pyx_v_OpenNodes); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1633, __pyx_L1_error)
    __pyx_v_NodeCheck = __pyx_t_9;

    /* "graph.pyx":1635
 *             NodeCheck = OpenNodes.pop_top()
 * 
 *             if NodeCheck.Eid == EidD:             # <<<<<<<<<<<<<<
 *                     if NodeCheck.Nid == self.edges[EidD].NidO:
 *                         return NodeCheck.Dist - self.edges[EidD].lenR + DstD[1]
 */
    __pyx_t_1 = (__pyx_v_NodeCheck.Eid == __pyx_v_EidD);
    if (__pyx_t_1) {

      /* "graph.pyx":1636
 * 
 *             if NodeCheck.Eid == EidD:
 *                     if NodeCheck.Nid == self.edges[EidD].NidO:             # <<<<<<<<<<<<<<
 *                         return NodeCheck.Dist - self.edges[EidD].lenR + DstD[1]
 *                     else:
 */
      __pyx_t_1 = (__pyx_v_NodeCheck.Nid == (__pyx_v_self->edges[__pyx_v_EidD]).NidO);
      if (__pyx_t_1) {

        /* "graph.pyx":1637
 *             if NodeCheck.Eid == EidD:
 *                     if NodeCheck.Nid == self.edges[EidD].NidO:
 *                         return NodeCheck.Dist - self.edges[EidD].lenR + DstD[1]             # <<<<<<<<<<<<<<
 *                     else:
 *                         return NodeCheck.Dist - self.edges[EidD].len + DstD[0]
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_7 = PyFloat_FromDouble(((__pyx_v_NodeCheck.Dist - (__pyx_v_self->edges[__pyx_v_EidD]).lenR) + __pyx_v_DstD.f1)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1637, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_r = __pyx_t_7;
        __pyx_t_7 = 0;
        goto __pyx_L0;

        /* "graph.pyx":1636
 * 
 *             if NodeCheck.Eid == EidD:
 *                     if NodeCheck.Nid == self.edges[EidD].NidO:             # <<<<<<<<<<<<<<
 *                         return NodeCheck.Dist - self.edges[EidD].lenR + DstD[1]
 *                     else:
 */
      }

      /* "graph.pyx":1639
 *                         return NodeCheck.Dist - self.edges[EidD].lenR + DstD[1]
 *                     else:
 *                         return NodeCheck.Dist - self.edges[EidD].len + DstD[0]             # <<<<<<<<<<<<<<
 * 
 *             for i in range(self.EidN):
 */
      /*else*/ {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_7 = PyFloat_FromDouble(((__pyx_v_NodeCheck.Dist - (__pyx_v_self->edges[__pyx_v_EidD]).len) + __pyx_v_DstD.f0)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1639, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_r = __pyx_t_7;
        __pyx_t_7 = 0;
        goto __pyx_L0;
      }

      /* "graph.pyx":1635
 *             NodeCheck = OpenNodes.pop_top()
 * 
 *             if NodeCheck.Eid == EidD:             # <<<<<<<<<<<<<<
 *                     if NodeCheck.Nid == self.edges[EidD].NidO:
 *                         return NodeCheck.Dist - self.edges[EidD].lenR + DstD[1]
 */
    }

    /* "graph.pyx":1641
 *                         return NodeCheck.Dist - self.edges[EidD].len + DstD[0]
 * 
 *             for i in range(self.EidN):             # <<<<<<<<<<<<<<
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1 or Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 */
    __pyx_t_8 = __pyx_v_self->EidN;
    __pyx_t_10 = __pyx_t_8;
    for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
      __pyx_v_i = __pyx_t_11;

      /* "graph.pyx":1642
 * 
 *             for i in range(self.EidN):
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]             # <<<<<<<<<<<<<<
 *                 if Eid == -1 or Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 *                     continue
 */
      __pyx_v_Eid = ((__pyx_v_self->nodes[__pyx_v_NodeCheck.Nid]).Eid[__pyx_v_i]);

      /* "graph.pyx":1643
 *             for i in range(self.EidN):
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1 or Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      __pyx_t_2 = (__pyx_v_Eid == -1L);
      if (!__pyx_t_2) {
      } else {
        __pyx_t_1 = __pyx_t_2;
        goto __pyx_L15_bool_binop_done;
      }
      __pyx_t_2 = (__pyx_v_Eid == __pyx_v_NodeCheck.Eid);
      if (!__pyx_t_2) {
      } else {
        __pyx_t_1 = __pyx_t_2;
        goto __pyx_L15_bool_binop_done;
      }
      __pyx_t_2 = ((__pyx_v_self->_edgesIds[__pyx_v_Eid]) == -1L);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L15_bool_binop_done:;
      if (__pyx_t_1) {

        /* "graph.pyx":1644
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1 or Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 # possible new path
 */
        goto __pyx_L12_continue;

        /* "graph.pyx":1643
 *             for i in range(self.EidN):
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1 or Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      }

      /* "graph.pyx":1648
 *                 # possible new path
 *                 # new node?
 *                 EdgeC = self.edges[Eid]             # <<<<<<<<<<<<<<
 *                 if EdgeC.NidO == NodeCheck.Nid:
 *                     len = EdgeC.len
 */
      __pyx_v_EdgeC = (__pyx_v_self->edges[__pyx_v_Eid]);

      /* "graph.pyx":1649
 *                 # new node?
 *                 EdgeC = self.edges[Eid]
 *                 if EdgeC.NidO == NodeCheck.Nid:             # <<<<<<<<<<<<<<
 *                     len = EdgeC.len
 *                     NidF = EdgeC.NidD
 */
      __pyx_t_1 = (__pyx_v_EdgeC.NidO == __pyx_v_NodeCheck.Nid);
      if (__pyx_t_1) {

        /* "graph.pyx":1650
 *                 EdgeC = self.edges[Eid]
 *                 if EdgeC.NidO == NodeCheck.Nid:
 *                     len = EdgeC.len             # <<<<<<<<<<<<<<
 *                     NidF = EdgeC.NidD
 *                 else :
 */
        __pyx_t_4 = __pyx_v_EdgeC.len;
        __pyx_v_len = __pyx_t_4;

        /* "graph.pyx":1651
 *                 if EdgeC.NidO == NodeCheck.Nid:
 *                     len = EdgeC.len
 *                     NidF = EdgeC.NidD             # <<<<<<<<<<<<<<
 *                 else :
 *                     len = EdgeC.lenR
 */
        __pyx_t_12 = __pyx_v_EdgeC.NidD;
        __pyx_v_NidF = __pyx_t_12;

        /* "graph.pyx":1649
 *                 # new node?
 *                 EdgeC = self.edges[Eid]
 *                 if EdgeC.NidO == NodeCheck.Nid:             # <<<<<<<<<<<<<<
 *                     len = EdgeC.len
 *                     NidF = EdgeC.NidD
 */
        goto __pyx_L18;
      }

      /* "graph.pyx":1653
 *                     NidF = EdgeC.NidD
 *                 else :
 *                     len = EdgeC.lenR             # <<<<<<<<<<<<<<
 *                     NidF = EdgeC.NidO
 * 
 */
      /*else*/ {
        __pyx_t_4 = __pyx_v_EdgeC.lenR;
        __pyx_v_len = __pyx_t_4;

        /* "graph.pyx":1654
 *                 else :
 *                     len = EdgeC.lenR
 *                     NidF = EdgeC.NidO             # <<<<<<<<<<<<<<
 * 
 *                 if self._nodesIds[NidF] == -1:
 */
        __pyx_t_12 = __pyx_v_EdgeC.NidO;
        __pyx_v_NidF = __pyx_t_12;
      }
      __pyx_L18:;

      /* "graph.pyx":1656
 *                     NidF = EdgeC.NidO
 * 
 *                 if self._nodesIds[NidF] == -1:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      __pyx_t_1 = ((__pyx_v_self->_nodesIds[__pyx_v_NidF]) == -1L);
      if (__pyx_t_1) {

        /* "graph.pyx":1657
 * 
 *                 if self._nodesIds[NidF] == -1:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 len += NodeCheck.Dist + self.nodes[NidF].c
 */
        goto __pyx_L12_continue;

        /* "graph.pyx":1656
 *                     NidF = EdgeC.NidO
 * 
 *                 if self._nodesIds[NidF] == -1:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      }

      /* "graph.pyx":1659
 *                     continue
 * 
 *                 len += NodeCheck.Dist + self.nodes[NidF].c             # <<<<<<<<<<<<<<
 * 
 *                 if len > LimDist:
 */
      __pyx_v_len = (__pyx_v_len + (__pyx_v_NodeCheck.Dist + (__pyx_v_self->nodes[__pyx_v_NidF]).c));

      /* "graph.pyx":1661
 *                 len += NodeCheck.Dist + self.nodes[NidF].c
 * 
 *                 if len > LimDist:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      __pyx_t_1 = (__pyx_v_len > __pyx_v_LimDist);
      if (__pyx_t_1) {

        /* "graph.pyx":1662
 * 
 *                 if len > LimDist:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 NodeReach_T.Nid = NidF
 */
        goto __pyx_L12_continue;

        /* "graph.pyx":1661
 *                 len += NodeCheck.Dist + self.nodes[NidF].c
 * 
 *                 if len > LimDist:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      }

      /* "graph.pyx":1664
 *                     continue
 * 
 *                 NodeReach_T.Nid = NidF             # <<<<<<<<<<<<<<
 *                 NodeReach_T.Dist = len
 *                 NodeReach_T.Eid = Eid
 */
      __pyx_v_NodeReach_T.Nid = __pyx_v_NidF;

      /* "graph.pyx":1665
 * 
 *                 NodeReach_T.Nid = NidF
 *                 NodeReach_T.Dist = len             # <<<<<<<<<<<<<<
 *                 NodeReach_T.Eid = Eid
 *                 NodeReach_T.NidO = NodeCheck.Nid
 */
      __pyx_v_NodeReach_T.Dist = __pyx_v_len;

      /* "graph.pyx":1666
 *                 NodeReach_T.Nid = NidF
 *                 NodeReach_T.Dist = len
 *                 NodeReach_T.Eid = Eid             # <<<<<<<<<<<<<<
 *                 NodeReach_T.NidO = NodeCheck.Nid
 *                 NodeReach_T.Weight = len + (dist3d_ar(self.nodes[NidF].pt, PointD)- BaseDist) * DistMul
 */
      __pyx_v_NodeReach_T.Eid = __pyx_v_Eid;

      /* "graph.pyx":1667
 *                 NodeReach_T.Dist = len
 *                 NodeReach_T.Eid = Eid
 *                 NodeReach_T.NidO = NodeCheck.Nid             # <<<<<<<<<<<<<<
 *                 NodeReach_T.Weight = len + (dist3d_ar(self.nodes[NidF].pt, PointD)- BaseDist) * DistMul
 * 
 */
      __pyx_t_12 = __pyx_v_NodeCheck.Nid;
      __pyx_v_NodeReach_T.NidO = __pyx_t_12;

      /* "graph.pyx":1668
 *                 NodeReach_T.Eid = Eid
 *                 NodeReach_T.NidO = NodeCheck.Nid
 *                 NodeReach_T.Weight = len + (dist3d_ar(self.nodes[NidF].pt, PointD)- BaseDist) * DistMul             # <<<<<<<<<<<<<<
 * 
 *                 # check to visited nodes
 */
      __pyx_t_4 = __pyx_f_5graph_dist3d_ar((__pyx_v_self->nodes[__pyx_v_NidF]).pt, __pyx_v_PointD); if (unlikely(__pyx_t_4 == ((float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1668, __pyx_L1_error)
      __pyx_v_NodeReach_T.Weight = (__pyx_v_len + ((__pyx_t_4 - __pyx_v_BaseDist) * __pyx_v_DistMul));

      /* "graph.pyx":1671
 * 
 *                 # check to visited nodes
 *                 if self.nodeVisited[NidF].Nid == -1 : # if node havent been visited             # <<<<<<<<<<<<<<
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 */
      __pyx_t_1 = ((__pyx_v_self->nodeVisited[__pyx_v_NidF]).Nid == -1L);
      if (__pyx_t_1) {

        /* "graph.pyx":1672
 *                 # check to visited nodes
 *                 if self.nodeVisited[NidF].Nid == -1 : # if node havent been visited
 *                     self.nodeVisited[NidF] = NodeReach_T             # <<<<<<<<<<<<<<
 *                     OpenNodes.push(NodeReach_T)
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance
 */
        (__pyx_v_self->nodeVisited[__pyx_v_NidF]) = __pyx_v_NodeReach_T;

        /* "graph.pyx":1673
 *                 if self.nodeVisited[NidF].Nid == -1 : # if node havent been visited
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)             # <<<<<<<<<<<<<<
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance
 *                     self.nodeVisited[NidF] = NodeReach_T
 */
        ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_NodeReach_T); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1673, __pyx_L1_error)

        /* "graph.pyx":1671
 * 
 *                 # check to visited nodes
 *                 if self.nodeVisited[NidF].Nid == -1 : # if node havent been visited             # <<<<<<<<<<<<<<
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 */
        goto __pyx_L21;
      }

      /* "graph.pyx":1674
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance             # <<<<<<<<<<<<<<
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 */
      __pyx_t_1 = ((__pyx_v_self->nodeVisited[__pyx_v_NidF]).Dist > __pyx_v_len);
      if (__pyx_t_1) {

        /* "graph.pyx":1675
 *                     OpenNodes.push(NodeReach_T)
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance
 *                     self.nodeVisited[NidF] = NodeReach_T             # <<<<<<<<<<<<<<
 *                     OpenNodes.push(NodeReach_T)
 * 
 */
        (__pyx_v_self->nodeVisited[__pyx_v_NidF]) = __pyx_v_NodeReach_T;

        /* "graph.pyx":1676
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)             # <<<<<<<<<<<<<<
 * 
 *             if cycles > LimCycle or OpenNodes.top().Dist > LimDist:
 */
        ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_NodeReach_T); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1676, __pyx_L1_error)

        /* "graph.pyx":1674
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance             # <<<<<<<<<<<<<<
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 */
      }
      __pyx_L21:;
      __pyx_L12_continue:;
    }

    /* "graph.pyx":1678
 *                     OpenNodes.push(NodeReach_T)
 * 
 *             if cycles > LimCycle or OpenNodes.top().Dist > LimDist:             # <<<<<<<<<<<<<<
 *                 # if reaches cycle count limit
 *                 # if the minimum distance in open nodes is more than the distance limit
 */
    __pyx_t_2 = (__pyx_v_cycles > __pyx_v_LimCycle);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L23_bool_binop_done;
    }
    __pyx_t_9 = ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->top(__pyx_v_OpenNodes); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1678, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_9.Dist > __pyx_v_LimDist);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L23_bool_binop_done:;
    if (__pyx_t_1) {

      /* "graph.pyx":1681
 *                 # if reaches cycle count limit
 *                 # if the minimum distance in open nodes is more than the distance limit
 *                 keepGoing = False             # <<<<<<<<<<<<<<
 *             elif OpenNodes.empty():
 *                 keepGoing = False
 */
      __pyx_v_keepGoing = 0;

      /* "graph.pyx":1678
 *                     OpenNodes.push(NodeReach_T)
 * 
 *             if cycles > LimCycle or OpenNodes.top().Dist > LimDist:             # <<<<<<<<<<<<<<
 *                 # if reaches cycle count limit
 *                 # if the minimum distance in open nodes is more than the distance limit
 */
      goto __pyx_L22;
    }

    /* "graph.pyx":1682
 *                 # if the minimum distance in open nodes is more than the distance limit
 *                 keepGoing = False
 *             elif OpenNodes.empty():             # <<<<<<<<<<<<<<
 *                 keepGoing = False
 * 
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->empty(__pyx_v_OpenNodes); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1682, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "graph.pyx":1683
 *                 keepGoing = False
 *             elif OpenNodes.empty():
 *                 keepGoing = False             # <<<<<<<<<<<<<<
 * 
 *         return -1.0
 */
      __pyx_v_keepGoing = 0;

      /* "graph.pyx":1682
 *                 # if the minimum distance in open nodes is more than the distance limit
 *                 keepGoing = False
 *             elif OpenNodes.empty():             # <<<<<<<<<<<<<<
 *                 keepGoing = False
 * 
 */
    }
    __pyx_L22:;
  }

  /* "graph.pyx":1685
 *                 keepGoing = False
 * 
 *         return -1.0             # <<<<<<<<<<<<<<
 * 
 *     def PathDistComp_AStar_VirtuEntry(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_float_neg_1_0);
  __pyx_r = __pyx_float_neg_1_0;
  goto __pyx_L0;

  /* "graph.pyx":1551
 *         return -1.0
 * 
 *     def PathDist_AStar_VirtuEntry(self,             # <<<<<<<<<<<<<<
 *             const int& EidO, tuple[float, float, float] PtO, const tuple[float, float] DstO,
 *             const int& EidD, tuple[float, float, float] PtD, const tuple[float, float] DstD,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("graph.GraphCy.PathDist_AStar_VirtuEntry", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_OpenNodes);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":1687
 *         return -1.0
 * 
 *     def PathDistComp_AStar_VirtuEntry(self,             # <<<<<<<<<<<<<<
 *             const int& EidO, tuple[float, float, float] PtO, const tuple[float, float] DstO,
 *             const int& EidD, tuple[float, float, float] PtD, const tuple[float, float] DstD,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5graph_7GraphCy_55PathDistComp_AStar_VirtuEntry(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5graph_7GraphCy_54PathDistComp_AStar_VirtuEntry, "\n        Find smallest distance between two nodes in the graph. Using Astar principle from 3d location information.\n\n        Parameters\n        ------------\n        NidO : int\n            starting node ID\n        NidD : int\n            destination node ID\n        LimDist : float, default 10,000.0\n            distance limit before giving up the pathfinding process\n        LimCycle : int, default 10,000\n            number of cycles of priority_queue before giving up the pathfinding process\n        DistMul : float, default 1.0\n            A* weighting multiplier for the remaining cartesian distance\n        \n        Returns\n        -----------\n        length: float\n            if a path is found, it will return with the length of shortest possible distance of the path\n            if a path is not found, it will return -1.0\n        \n        Notes\n        -----------\n        The algorithm has bidirectional capability and also node cost added.\n        PriorityQueue weighting using:\n            minimum(distance_NetworkDistance + (distance_RemainingCartesianDistance x Distmul) )\n        ");
static PyMethodDef __pyx_mdef_5graph_7GraphCy_55PathDistComp_AStar_VirtuEntry = {"PathDistComp_AStar_VirtuEntry", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_55PathDistComp_AStar_VirtuEntry, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5graph_7GraphCy_54PathDistComp_AStar_VirtuEntry};
static PyObject *__pyx_pw_5graph_7GraphCy_55PathDistComp_AStar_VirtuEntry(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_EidO;
  __pyx_ctuple_float__and_float__and_float __pyx_v_PtO;
  __pyx_ctuple_float__and_float __pyx_v_DstO;
  int __pyx_v_EidD;
  __pyx_ctuple_float__and_float__and_float __pyx_v_PtD;
  __pyx_ctuple_float__and_float __pyx_v_DstD;
  float __pyx_v_LimDist;
  int __pyx_v_LimCycle;
  float __pyx_v_DistMul;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("PathDistComp_AStar_VirtuEntry (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_EidO,&__pyx_n_s_PtO,&__pyx_n_s_DstO,&__pyx_n_s_EidD,&__pyx_n_s_PtD,&__pyx_n_s_DstD,&__pyx_n_s_LimDist,&__pyx_n_s_LimCycle,&__pyx_n_s_DistMul,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  9: values[8] = __Pyx_Arg_FASTCALL(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = __Pyx_Arg_FASTCALL(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_EidO)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1687, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_PtO)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1687, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("PathDistComp_AStar_VirtuEntry", 0, 6, 9, 1); __PYX_ERR(0, 1687, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_DstO)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1687, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("PathDistComp_AStar_VirtuEntry", 0, 6, 9, 2); __PYX_ERR(0, 1687, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_EidD)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1687, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("PathDistComp_AStar_VirtuEntry", 0, 6, 9, 3); __PYX_ERR(0, 1687, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_PtD)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[4]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1687, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("PathDistComp_AStar_VirtuEntry", 0, 6, 9, 4); __PYX_ERR(0, 1687, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_DstD)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[5]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1687, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("PathDistComp_AStar_VirtuEntry", 0, 6, 9, 5); __PYX_ERR(0, 1687, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_LimDist);
          if (value) { values[6] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1687, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_LimCycle);
          if (value) { values[7] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1687, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_DistMul);
          if (value) { values[8] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1687, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "PathDistComp_AStar_VirtuEntry") < 0)) __PYX_ERR(0, 1687, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  9: values[8] = __Pyx_Arg_FASTCALL(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = __Pyx_Arg_FASTCALL(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_EidO = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_EidO == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1688, __pyx_L3_error)
    __pyx_v_PtO = __pyx_convert__from_py___pyx_ctuple_float__and_float__and_float(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1688, __pyx_L3_error)
    __pyx_v_DstO = __pyx_convert__from_py___pyx_ctuple_float__and_float(values[2]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1688, __pyx_L3_error)
    __pyx_v_EidD = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_EidD == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1689, __pyx_L3_error)
    __pyx_v_PtD = __pyx_convert__from_py___pyx_ctuple_float__and_float__and_float(values[4]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1689, __pyx_L3_error)
    __pyx_v_DstD = __pyx_convert__from_py___pyx_ctuple_float__and_float(values[5]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1689, __pyx_L3_error)
    if (values[6]) {
      __pyx_v_LimDist = __pyx_PyFloat_AsFloat(values[6]); if (unlikely((__pyx_v_LimDist == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1690, __pyx_L3_error)
    } else {
      __pyx_v_LimDist = ((float)10000.0);
    }
    if (values[7]) {
      __pyx_v_LimCycle = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_LimCycle == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1691, __pyx_L3_error)
    } else {
      __pyx_v_LimCycle = ((int)0x2710);
    }
    if (values[8]) {
      __pyx_v_DistMul = __pyx_PyFloat_AsFloat(values[8]); if (unlikely((__pyx_v_DistMul == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1692, __pyx_L3_error)
    } else {
      __pyx_v_DistMul = ((float)2.0);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("PathDistComp_AStar_VirtuEntry", 0, 6, 9, __pyx_nargs); __PYX_ERR(0, 1687, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("graph.GraphCy.PathDistComp_AStar_VirtuEntry", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5graph_7GraphCy_54PathDistComp_AStar_VirtuEntry(((struct __pyx_obj_5graph_GraphCy *)__pyx_v_self), __pyx_v_EidO, __pyx_v_PtO, __pyx_v_DstO, __pyx_v_EidD, __pyx_v_PtD, __pyx_v_DstD, __pyx_v_LimDist, __pyx_v_LimCycle, __pyx_v_DistMul);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5graph_7GraphCy_54PathDistComp_AStar_VirtuEntry(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, int __pyx_v_EidO, __pyx_ctuple_float__and_float__and_float __pyx_v_PtO, __pyx_ctuple_float__and_float __pyx_v_DstO, int __pyx_v_EidD, __pyx_ctuple_float__and_float__and_float __pyx_v_PtD, __pyx_ctuple_float__and_float __pyx_v_DstD, float __pyx_v_LimDist, int __pyx_v_LimCycle, float __pyx_v_DistMul) {
  float __pyx_v_PointD[3];
  float __pyx_v_PointO[3];
  float __pyx_v_BaseDist;
  int __pyx_v_cycles;
  int __pyx_v_keepGoing;
  struct __pyx_obj_5graph_PriorityQueue_NR *__pyx_v_OpenNodes = 0;
  struct __pyx_t_5graph_NodeReach __pyx_v_startNode;
  struct __pyx_t_5graph_NodeReach __pyx_v_NodeReach_T;
  int __pyx_v_NidF;
  float __pyx_v_len;
  struct __pyx_t_5graph_Edge __pyx_v_EdgeC;
  struct __pyx_t_5graph_NodeReach __pyx_v_NodeCheck;
  int __pyx_v_i;
  int __pyx_v_Eid;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  float *__pyx_t_3;
  float __pyx_t_4;
  float __pyx_t_5;
  float __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  struct __pyx_t_5graph_NodeReach __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PathDistComp_AStar_VirtuEntry", 1);

  /* "graph.pyx":1722
 *         """
 *         # checking edges exists
 *         if self._edgesIds[EidO] == -1 or self._edgesIds[EidD] == -1:             # <<<<<<<<<<<<<<
 *             return (None, None)
 *         cdef float[3] PointD = (PtD[0], PtD[1], PtD[2])
 */
  __pyx_t_2 = ((__pyx_v_self->_edgesIds[__pyx_v_EidO]) == -1L);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_self->_edgesIds[__pyx_v_EidD]) == -1L);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "graph.pyx":1723
 *         # checking edges exists
 *         if self._edgesIds[EidO] == -1 or self._edgesIds[EidD] == -1:
 *             return (None, None)             # <<<<<<<<<<<<<<
 *         cdef float[3] PointD = (PtD[0], PtD[1], PtD[2])
 *         cdef float[3] PointO = (PtO[0], PtO[1], PtO[2])
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_tuple__18);
    __pyx_r = __pyx_tuple__18;
    goto __pyx_L0;

    /* "graph.pyx":1722
 *         """
 *         # checking edges exists
 *         if self._edgesIds[EidO] == -1 or self._edgesIds[EidD] == -1:             # <<<<<<<<<<<<<<
 *             return (None, None)
 *         cdef float[3] PointD = (PtD[0], PtD[1], PtD[2])
 */
  }

  /* "graph.pyx":1724
 *         if self._edgesIds[EidO] == -1 or self._edgesIds[EidD] == -1:
 *             return (None, None)
 *         cdef float[3] PointD = (PtD[0], PtD[1], PtD[2])             # <<<<<<<<<<<<<<
 *         cdef float[3] PointO = (PtO[0], PtO[1], PtO[2])
 *         cdef float BaseDist = dist3d_ar(PointO, PointD)
 */
  __pyx_t_3 = __pyx_v_PointD;
  __pyx_t_4 = __pyx_v_PtD.f0;
  __pyx_t_5 = __pyx_v_PtD.f1;
  __pyx_t_6 = __pyx_v_PtD.f2;
  (__pyx_t_3[0]) = __pyx_t_4;
  (__pyx_t_3[1]) = __pyx_t_5;
  (__pyx_t_3[2]) = __pyx_t_6;

  /* "graph.pyx":1725
 *             return (None, None)
 *         cdef float[3] PointD = (PtD[0], PtD[1], PtD[2])
 *         cdef float[3] PointO = (PtO[0], PtO[1], PtO[2])             # <<<<<<<<<<<<<<
 *         cdef float BaseDist = dist3d_ar(PointO, PointD)
 *         if BaseDist*0.9 > LimDist:
 */
  __pyx_t_3 = __pyx_v_PointO;
  __pyx_t_6 = __pyx_v_PtO.f0;
  __pyx_t_5 = __pyx_v_PtO.f1;
  __pyx_t_4 = __pyx_v_PtO.f2;
  (__pyx_t_3[0]) = __pyx_t_6;
  (__pyx_t_3[1]) = __pyx_t_5;
  (__pyx_t_3[2]) = __pyx_t_4;

  /* "graph.pyx":1726
 *         cdef float[3] PointD = (PtD[0], PtD[1], PtD[2])
 *         cdef float[3] PointO = (PtO[0], PtO[1], PtO[2])
 *         cdef float BaseDist = dist3d_ar(PointO, PointD)             # <<<<<<<<<<<<<<
 *         if BaseDist*0.9 > LimDist:
 *             return (-1.0, -1.0)
 */
  __pyx_t_4 = __pyx_f_5graph_dist3d_ar(__pyx_v_PointO, __pyx_v_PointD); if (unlikely(__pyx_t_4 == ((float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1726, __pyx_L1_error)
  __pyx_v_BaseDist = __pyx_t_4;

  /* "graph.pyx":1727
 *         cdef float[3] PointO = (PtO[0], PtO[1], PtO[2])
 *         cdef float BaseDist = dist3d_ar(PointO, PointD)
 *         if BaseDist*0.9 > LimDist:             # <<<<<<<<<<<<<<
 *             return (-1.0, -1.0)
 * 
 */
  __pyx_t_1 = ((__pyx_v_BaseDist * 0.9) > __pyx_v_LimDist);
  if (__pyx_t_1) {

    /* "graph.pyx":1728
 *         cdef float BaseDist = dist3d_ar(PointO, PointD)
 *         if BaseDist*0.9 > LimDist:
 *             return (-1.0, -1.0)             # <<<<<<<<<<<<<<
 * 
 *         if EidD == EidO:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_tuple__19);
    __pyx_r = __pyx_tuple__19;
    goto __pyx_L0;

    /* "graph.pyx":1727
 *         cdef float[3] PointO = (PtO[0], PtO[1], PtO[2])
 *         cdef float BaseDist = dist3d_ar(PointO, PointD)
 *         if BaseDist*0.9 > LimDist:             # <<<<<<<<<<<<<<
 *             return (-1.0, -1.0)
 * 
 */
  }

  /* "graph.pyx":1730
 *             return (-1.0, -1.0)
 * 
 *         if EidD == EidO:             # <<<<<<<<<<<<<<
 *             return (abs(DstD[0] - DstO[1]), BaseDist)
 * 
 */
  __pyx_t_1 = (__pyx_v_EidD == __pyx_v_EidO);
  if (__pyx_t_1) {

    /* "graph.pyx":1731
 * 
 *         if EidD == EidO:
 *             return (abs(DstD[0] - DstO[1]), BaseDist)             # <<<<<<<<<<<<<<
 * 
 *         self.C_Reset_NodeVisited()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_7 = PyFloat_FromDouble(fabsf((__pyx_v_DstD.f0 - __pyx_v_DstO.f1))); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1731, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyFloat_FromDouble(__pyx_v_BaseDist); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1731, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1731, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_7);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7)) __PYX_ERR(0, 1731, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_8);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_8)) __PYX_ERR(0, 1731, __pyx_L1_error);
    __pyx_t_7 = 0;
    __pyx_t_8 = 0;
    __pyx_r = __pyx_t_9;
    __pyx_t_9 = 0;
    goto __pyx_L0;

    /* "graph.pyx":1730
 *             return (-1.0, -1.0)
 * 
 *         if EidD == EidO:             # <<<<<<<<<<<<<<
 *             return (abs(DstD[0] - DstO[1]), BaseDist)
 * 
 */
  }

  /* "graph.pyx":1733
 *             return (abs(DstD[0] - DstO[1]), BaseDist)
 * 
 *         self.C_Reset_NodeVisited()             # <<<<<<<<<<<<<<
 * 
 *         cdef int cycles
 */
  __pyx_f_5graph_7GraphCy_C_Reset_NodeVisited(__pyx_v_self, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1733, __pyx_L1_error)

  /* "graph.pyx":1736
 * 
 *         cdef int cycles
 *         cycles = 1             # <<<<<<<<<<<<<<
 *         cdef bint keepGoing
 *         keepGoing = True
 */
  __pyx_v_cycles = 1;

  /* "graph.pyx":1738
 *         cycles = 1
 *         cdef bint keepGoing
 *         keepGoing = True             # <<<<<<<<<<<<<<
 * 
 *         # cdef vector[NodeReach] OpenNodes
 */
  __pyx_v_keepGoing = 1;

  /* "graph.pyx":1743
 *         cdef PriorityQueue_NR OpenNodes
 *         cdef NodeReach startNode
 *         OpenNodes = PriorityQueue_NR()             # <<<<<<<<<<<<<<
 * 
 *         # for Origin EdgeOrigin
 */
  __pyx_t_9 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5graph_PriorityQueue_NR)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_v_OpenNodes = ((struct __pyx_obj_5graph_PriorityQueue_NR *)__pyx_t_9);
  __pyx_t_9 = 0;

  /* "graph.pyx":1746
 * 
 *         # for Origin EdgeOrigin
 *         startNode.Nid = self.edges[EidO].NidO             # <<<<<<<<<<<<<<
 *         startNode.Eid = EidO
 *         startNode.Dist = DstO[0]
 */
  __pyx_t_10 = (__pyx_v_self->edges[__pyx_v_EidO]).NidO;
  __pyx_v_startNode.Nid = __pyx_t_10;

  /* "graph.pyx":1747
 *         # for Origin EdgeOrigin
 *         startNode.Nid = self.edges[EidO].NidO
 *         startNode.Eid = EidO             # <<<<<<<<<<<<<<
 *         startNode.Dist = DstO[0]
 *         startNode.NidO = -1
 */
  __pyx_v_startNode.Eid = __pyx_v_EidO;

  /* "graph.pyx":1748
 *         startNode.Nid = self.edges[EidO].NidO
 *         startNode.Eid = EidO
 *         startNode.Dist = DstO[0]             # <<<<<<<<<<<<<<
 *         startNode.NidO = -1
 *         startNode.Weight = DstO[0] + (dist3d_ar(self.nodes[startNode.Nid].pt, PointD)- BaseDist) * DistMul
 */
  __pyx_v_startNode.Dist = __pyx_v_DstO.f0;

  /* "graph.pyx":1749
 *         startNode.Eid = EidO
 *         startNode.Dist = DstO[0]
 *         startNode.NidO = -1             # <<<<<<<<<<<<<<
 *         startNode.Weight = DstO[0] + (dist3d_ar(self.nodes[startNode.Nid].pt, PointD)- BaseDist) * DistMul
 *         OpenNodes.push(startNode)
 */
  __pyx_v_startNode.NidO = -1;

  /* "graph.pyx":1750
 *         startNode.Dist = DstO[0]
 *         startNode.NidO = -1
 *         startNode.Weight = DstO[0] + (dist3d_ar(self.nodes[startNode.Nid].pt, PointD)- BaseDist) * DistMul             # <<<<<<<<<<<<<<
 *         OpenNodes.push(startNode)
 *         # for destination edgeorigin
 */
  __pyx_t_4 = __pyx_f_5graph_dist3d_ar((__pyx_v_self->nodes[__pyx_v_startNode.Nid]).pt, __pyx_v_PointD); if (unlikely(__pyx_t_4 == ((float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1750, __pyx_L1_error)
  __pyx_v_startNode.Weight = (__pyx_v_DstO.f0 + ((__pyx_t_4 - __pyx_v_BaseDist) * __pyx_v_DistMul));

  /* "graph.pyx":1751
 *         startNode.NidO = -1
 *         startNode.Weight = DstO[0] + (dist3d_ar(self.nodes[startNode.Nid].pt, PointD)- BaseDist) * DistMul
 *         OpenNodes.push(startNode)             # <<<<<<<<<<<<<<
 *         # for destination edgeorigin
 *         startNode.Nid = self.edges[EidO].NidD
 */
  ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_startNode); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1751, __pyx_L1_error)

  /* "graph.pyx":1753
 *         OpenNodes.push(startNode)
 *         # for destination edgeorigin
 *         startNode.Nid = self.edges[EidO].NidD             # <<<<<<<<<<<<<<
 *         startNode.Eid = EidO
 *         startNode.Dist = DstO[1]
 */
  __pyx_t_10 = (__pyx_v_self->edges[__pyx_v_EidO]).NidD;
  __pyx_v_startNode.Nid = __pyx_t_10;

  /* "graph.pyx":1754
 *         # for destination edgeorigin
 *         startNode.Nid = self.edges[EidO].NidD
 *         startNode.Eid = EidO             # <<<<<<<<<<<<<<
 *         startNode.Dist = DstO[1]
 *         startNode.NidO = -1
 */
  __pyx_v_startNode.Eid = __pyx_v_EidO;

  /* "graph.pyx":1755
 *         startNode.Nid = self.edges[EidO].NidD
 *         startNode.Eid = EidO
 *         startNode.Dist = DstO[1]             # <<<<<<<<<<<<<<
 *         startNode.NidO = -1
 *         startNode.Weight = DstO[1] + (dist3d_ar(self.nodes[startNode.Nid].pt, PointD)- BaseDist) * DistMul
 */
  __pyx_v_startNode.Dist = __pyx_v_DstO.f1;

  /* "graph.pyx":1756
 *         startNode.Eid = EidO
 *         startNode.Dist = DstO[1]
 *         startNode.NidO = -1             # <<<<<<<<<<<<<<
 *         startNode.Weight = DstO[1] + (dist3d_ar(self.nodes[startNode.Nid].pt, PointD)- BaseDist) * DistMul
 *         OpenNodes.push(startNode)
 */
  __pyx_v_startNode.NidO = -1;

  /* "graph.pyx":1757
 *         startNode.Dist = DstO[1]
 *         startNode.NidO = -1
 *         startNode.Weight = DstO[1] + (dist3d_ar(self.nodes[startNode.Nid].pt, PointD)- BaseDist) * DistMul             # <<<<<<<<<<<<<<
 *         OpenNodes.push(startNode)
 * 
 */
  __pyx_t_4 = __pyx_f_5graph_dist3d_ar((__pyx_v_self->nodes[__pyx_v_startNode.Nid]).pt, __pyx_v_PointD); if (unlikely(__pyx_t_4 == ((float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1757, __pyx_L1_error)
  __pyx_v_startNode.Weight = (__pyx_v_DstO.f1 + ((__pyx_t_4 - __pyx_v_BaseDist) * __pyx_v_DistMul));

  /* "graph.pyx":1758
 *         startNode.NidO = -1
 *         startNode.Weight = DstO[1] + (dist3d_ar(self.nodes[startNode.Nid].pt, PointD)- BaseDist) * DistMul
 *         OpenNodes.push(startNode)             # <<<<<<<<<<<<<<
 * 
 *         cdef NodeReach NodeReach_T
 */
  ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_startNode); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1758, __pyx_L1_error)

  /* "graph.pyx":1766
 *         cdef NodeReach NodeCheck
 * 
 *         while keepGoing:             # <<<<<<<<<<<<<<
 *             cycles += 1
 *             # check paths from OpenNodes
 */
  while (1) {
    if (!__pyx_v_keepGoing) break;

    /* "graph.pyx":1767
 * 
 *         while keepGoing:
 *             cycles += 1             # <<<<<<<<<<<<<<
 *             # check paths from OpenNodes
 *             NodeCheck = OpenNodes.pop_top()
 */
    __pyx_v_cycles = (__pyx_v_cycles + 1);

    /* "graph.pyx":1769
 *             cycles += 1
 *             # check paths from OpenNodes
 *             NodeCheck = OpenNodes.pop_top()             # <<<<<<<<<<<<<<
 * 
 *             if NodeCheck.Eid == EidD:
 */
    __pyx_t_11 = ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->pop_top(__pyx_v_OpenNodes); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1769, __pyx_L1_error)
    __pyx_v_NodeCheck = __pyx_t_11;

    /* "graph.pyx":1771
 *             NodeCheck = OpenNodes.pop_top()
 * 
 *             if NodeCheck.Eid == EidD:             # <<<<<<<<<<<<<<
 *                     if NodeCheck.Nid == self.edges[EidD].NidO:
 *                         return ((NodeCheck.Dist - self.edges[EidD].lenR + DstD[1]), BaseDist)
 */
    __pyx_t_1 = (__pyx_v_NodeCheck.Eid == __pyx_v_EidD);
    if (__pyx_t_1) {

      /* "graph.pyx":1772
 * 
 *             if NodeCheck.Eid == EidD:
 *                     if NodeCheck.Nid == self.edges[EidD].NidO:             # <<<<<<<<<<<<<<
 *                         return ((NodeCheck.Dist - self.edges[EidD].lenR + DstD[1]), BaseDist)
 *                     else:
 */
      __pyx_t_1 = (__pyx_v_NodeCheck.Nid == (__pyx_v_self->edges[__pyx_v_EidD]).NidO);
      if (__pyx_t_1) {

        /* "graph.pyx":1773
 *             if NodeCheck.Eid == EidD:
 *                     if NodeCheck.Nid == self.edges[EidD].NidO:
 *                         return ((NodeCheck.Dist - self.edges[EidD].lenR + DstD[1]), BaseDist)             # <<<<<<<<<<<<<<
 *                     else:
 *                         return ((NodeCheck.Dist - self.edges[EidD].len + DstD[0]), BaseDist)
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_9 = PyFloat_FromDouble(((__pyx_v_NodeCheck.Dist - (__pyx_v_self->edges[__pyx_v_EidD]).lenR) + __pyx_v_DstD.f1)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1773, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_8 = PyFloat_FromDouble(__pyx_v_BaseDist); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1773, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1773, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_9);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_9)) __PYX_ERR(0, 1773, __pyx_L1_error);
        __Pyx_GIVEREF(__pyx_t_8);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8)) __PYX_ERR(0, 1773, __pyx_L1_error);
        __pyx_t_9 = 0;
        __pyx_t_8 = 0;
        __pyx_r = __pyx_t_7;
        __pyx_t_7 = 0;
        goto __pyx_L0;

        /* "graph.pyx":1772
 * 
 *             if NodeCheck.Eid == EidD:
 *                     if NodeCheck.Nid == self.edges[EidD].NidO:             # <<<<<<<<<<<<<<
 *                         return ((NodeCheck.Dist - self.edges[EidD].lenR + DstD[1]), BaseDist)
 *                     else:
 */
      }

      /* "graph.pyx":1775
 *                         return ((NodeCheck.Dist - self.edges[EidD].lenR + DstD[1]), BaseDist)
 *                     else:
 *                         return ((NodeCheck.Dist - self.edges[EidD].len + DstD[0]), BaseDist)             # <<<<<<<<<<<<<<
 * 
 *             for i in range(self.EidN):
 */
      /*else*/ {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_7 = PyFloat_FromDouble(((__pyx_v_NodeCheck.Dist - (__pyx_v_self->edges[__pyx_v_EidD]).len) + __pyx_v_DstD.f0)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1775, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = PyFloat_FromDouble(__pyx_v_BaseDist); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1775, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1775, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_7);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7)) __PYX_ERR(0, 1775, __pyx_L1_error);
        __Pyx_GIVEREF(__pyx_t_8);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_8)) __PYX_ERR(0, 1775, __pyx_L1_error);
        __pyx_t_7 = 0;
        __pyx_t_8 = 0;
        __pyx_r = __pyx_t_9;
        __pyx_t_9 = 0;
        goto __pyx_L0;
      }

      /* "graph.pyx":1771
 *             NodeCheck = OpenNodes.pop_top()
 * 
 *             if NodeCheck.Eid == EidD:             # <<<<<<<<<<<<<<
 *                     if NodeCheck.Nid == self.edges[EidD].NidO:
 *                         return ((NodeCheck.Dist - self.edges[EidD].lenR + DstD[1]), BaseDist)
 */
    }

    /* "graph.pyx":1777
 *                         return ((NodeCheck.Dist - self.edges[EidD].len + DstD[0]), BaseDist)
 * 
 *             for i in range(self.EidN):             # <<<<<<<<<<<<<<
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1 or Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 */
    __pyx_t_10 = __pyx_v_self->EidN;
    __pyx_t_12 = __pyx_t_10;
    for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
      __pyx_v_i = __pyx_t_13;

      /* "graph.pyx":1778
 * 
 *             for i in range(self.EidN):
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]             # <<<<<<<<<<<<<<
 *                 if Eid == -1 or Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 *                     continue
 */
      __pyx_v_Eid = ((__pyx_v_self->nodes[__pyx_v_NodeCheck.Nid]).Eid[__pyx_v_i]);

      /* "graph.pyx":1779
 *             for i in range(self.EidN):
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1 or Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      __pyx_t_2 = (__pyx_v_Eid == -1L);
      if (!__pyx_t_2) {
      } else {
        __pyx_t_1 = __pyx_t_2;
        goto __pyx_L15_bool_binop_done;
      }
      __pyx_t_2 = (__pyx_v_Eid == __pyx_v_NodeCheck.Eid);
      if (!__pyx_t_2) {
      } else {
        __pyx_t_1 = __pyx_t_2;
        goto __pyx_L15_bool_binop_done;
      }
      __pyx_t_2 = ((__pyx_v_self->_edgesIds[__pyx_v_Eid]) == -1L);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L15_bool_binop_done:;
      if (__pyx_t_1) {

        /* "graph.pyx":1780
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1 or Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 # possible new path
 */
        goto __pyx_L12_continue;

        /* "graph.pyx":1779
 *             for i in range(self.EidN):
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1 or Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      }

      /* "graph.pyx":1784
 *                 # possible new path
 *                 # new node?
 *                 EdgeC = self.edges[Eid]             # <<<<<<<<<<<<<<
 *                 if EdgeC.NidO == NodeCheck.Nid:
 *                     len = EdgeC.len
 */
      __pyx_v_EdgeC = (__pyx_v_self->edges[__pyx_v_Eid]);

      /* "graph.pyx":1785
 *                 # new node?
 *                 EdgeC = self.edges[Eid]
 *                 if EdgeC.NidO == NodeCheck.Nid:             # <<<<<<<<<<<<<<
 *                     len = EdgeC.len
 *                     NidF = EdgeC.NidD
 */
      __pyx_t_1 = (__pyx_v_EdgeC.NidO == __pyx_v_NodeCheck.Nid);
      if (__pyx_t_1) {

        /* "graph.pyx":1786
 *                 EdgeC = self.edges[Eid]
 *                 if EdgeC.NidO == NodeCheck.Nid:
 *                     len = EdgeC.len             # <<<<<<<<<<<<<<
 *                     NidF = EdgeC.NidD
 *                 else :
 */
        __pyx_t_4 = __pyx_v_EdgeC.len;
        __pyx_v_len = __pyx_t_4;

        /* "graph.pyx":1787
 *                 if EdgeC.NidO == NodeCheck.Nid:
 *                     len = EdgeC.len
 *                     NidF = EdgeC.NidD             # <<<<<<<<<<<<<<
 *                 else :
 *                     len = EdgeC.lenR
 */
        __pyx_t_14 = __pyx_v_EdgeC.NidD;
        __pyx_v_NidF = __pyx_t_14;

        /* "graph.pyx":1785
 *                 # new node?
 *                 EdgeC = self.edges[Eid]
 *                 if EdgeC.NidO == NodeCheck.Nid:             # <<<<<<<<<<<<<<
 *                     len = EdgeC.len
 *                     NidF = EdgeC.NidD
 */
        goto __pyx_L18;
      }

      /* "graph.pyx":1789
 *                     NidF = EdgeC.NidD
 *                 else :
 *                     len = EdgeC.lenR             # <<<<<<<<<<<<<<
 *                     NidF = EdgeC.NidO
 * 
 */
      /*else*/ {
        __pyx_t_4 = __pyx_v_EdgeC.lenR;
        __pyx_v_len = __pyx_t_4;

        /* "graph.pyx":1790
 *                 else :
 *                     len = EdgeC.lenR
 *                     NidF = EdgeC.NidO             # <<<<<<<<<<<<<<
 * 
 *                 if self._nodesIds[NidF] == -1:
 */
        __pyx_t_14 = __pyx_v_EdgeC.NidO;
        __pyx_v_NidF = __pyx_t_14;
      }
      __pyx_L18:;

      /* "graph.pyx":1792
 *                     NidF = EdgeC.NidO
 * 
 *                 if self._nodesIds[NidF] == -1:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      __pyx_t_1 = ((__pyx_v_self->_nodesIds[__pyx_v_NidF]) == -1L);
      if (__pyx_t_1) {

        /* "graph.pyx":1793
 * 
 *                 if self._nodesIds[NidF] == -1:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 len += NodeCheck.Dist + self.nodes[NidF].c
 */
        goto __pyx_L12_continue;

        /* "graph.pyx":1792
 *                     NidF = EdgeC.NidO
 * 
 *                 if self._nodesIds[NidF] == -1:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      }

      /* "graph.pyx":1795
 *                     continue
 * 
 *                 len += NodeCheck.Dist + self.nodes[NidF].c             # <<<<<<<<<<<<<<
 * 
 *                 if len > LimDist:
 */
      __pyx_v_len = (__pyx_v_len + (__pyx_v_NodeCheck.Dist + (__pyx_v_self->nodes[__pyx_v_NidF]).c));

      /* "graph.pyx":1797
 *                 len += NodeCheck.Dist + self.nodes[NidF].c
 * 
 *                 if len > LimDist:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      __pyx_t_1 = (__pyx_v_len > __pyx_v_LimDist);
      if (__pyx_t_1) {

        /* "graph.pyx":1798
 * 
 *                 if len > LimDist:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 NodeReach_T.Nid = NidF
 */
        goto __pyx_L12_continue;

        /* "graph.pyx":1797
 *                 len += NodeCheck.Dist + self.nodes[NidF].c
 * 
 *                 if len > LimDist:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      }

      /* "graph.pyx":1800
 *                     continue
 * 
 *                 NodeReach_T.Nid = NidF             # <<<<<<<<<<<<<<
 *                 NodeReach_T.Dist = len
 *                 NodeReach_T.Eid = Eid
 */
      __pyx_v_NodeReach_T.Nid = __pyx_v_NidF;

      /* "graph.pyx":1801
 * 
 *                 NodeReach_T.Nid = NidF
 *                 NodeReach_T.Dist = len             # <<<<<<<<<<<<<<
 *                 NodeReach_T.Eid = Eid
 *                 NodeReach_T.NidO = NodeCheck.Nid
 */
      __pyx_v_NodeReach_T.Dist = __pyx_v_len;

      /* "graph.pyx":1802
 *                 NodeReach_T.Nid = NidF
 *                 NodeReach_T.Dist = len
 *                 NodeReach_T.Eid = Eid             # <<<<<<<<<<<<<<
 *                 NodeReach_T.NidO = NodeCheck.Nid
 *                 NodeReach_T.Weight = len + (dist3d_ar(self.nodes[NidF].pt, PointD)- BaseDist) * DistMul
 */
      __pyx_v_NodeReach_T.Eid = __pyx_v_Eid;

      /* "graph.pyx":1803
 *                 NodeReach_T.Dist = len
 *                 NodeReach_T.Eid = Eid
 *                 NodeReach_T.NidO = NodeCheck.Nid             # <<<<<<<<<<<<<<
 *                 NodeReach_T.Weight = len + (dist3d_ar(self.nodes[NidF].pt, PointD)- BaseDist) * DistMul
 * 
 */
      __pyx_t_14 = __pyx_v_NodeCheck.Nid;
      __pyx_v_NodeReach_T.NidO = __pyx_t_14;

      /* "graph.pyx":1804
 *                 NodeReach_T.Eid = Eid
 *                 NodeReach_T.NidO = NodeCheck.Nid
 *                 NodeReach_T.Weight = len + (dist3d_ar(self.nodes[NidF].pt, PointD)- BaseDist) * DistMul             # <<<<<<<<<<<<<<
 * 
 *                 # check to visited nodes
 */
      __pyx_t_4 = __pyx_f_5graph_dist3d_ar((__pyx_v_self->nodes[__pyx_v_NidF]).pt, __pyx_v_PointD); if (unlikely(__pyx_t_4 == ((float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1804, __pyx_L1_error)
      __pyx_v_NodeReach_T.Weight = (__pyx_v_len + ((__pyx_t_4 - __pyx_v_BaseDist) * __pyx_v_DistMul));

      /* "graph.pyx":1807
 * 
 *                 # check to visited nodes
 *                 if self.nodeVisited[NidF].Nid == -1 : # if node havent been visited             # <<<<<<<<<<<<<<
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 */
      __pyx_t_1 = ((__pyx_v_self->nodeVisited[__pyx_v_NidF]).Nid == -1L);
      if (__pyx_t_1) {

        /* "graph.pyx":1808
 *                 # check to visited nodes
 *                 if self.nodeVisited[NidF].Nid == -1 : # if node havent been visited
 *                     self.nodeVisited[NidF] = NodeReach_T             # <<<<<<<<<<<<<<
 *                     OpenNodes.push(NodeReach_T)
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance
 */
        (__pyx_v_self->nodeVisited[__pyx_v_NidF]) = __pyx_v_NodeReach_T;

        /* "graph.pyx":1809
 *                 if self.nodeVisited[NidF].Nid == -1 : # if node havent been visited
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)             # <<<<<<<<<<<<<<
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance
 *                     self.nodeVisited[NidF] = NodeReach_T
 */
        ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_NodeReach_T); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1809, __pyx_L1_error)

        /* "graph.pyx":1807
 * 
 *                 # check to visited nodes
 *                 if self.nodeVisited[NidF].Nid == -1 : # if node havent been visited             # <<<<<<<<<<<<<<
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 */
        goto __pyx_L21;
      }

      /* "graph.pyx":1810
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance             # <<<<<<<<<<<<<<
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 */
      __pyx_t_1 = ((__pyx_v_self->nodeVisited[__pyx_v_NidF]).Dist > __pyx_v_len);
      if (__pyx_t_1) {

        /* "graph.pyx":1811
 *                     OpenNodes.push(NodeReach_T)
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance
 *                     self.nodeVisited[NidF] = NodeReach_T             # <<<<<<<<<<<<<<
 *                     OpenNodes.push(NodeReach_T)
 * 
 */
        (__pyx_v_self->nodeVisited[__pyx_v_NidF]) = __pyx_v_NodeReach_T;

        /* "graph.pyx":1812
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)             # <<<<<<<<<<<<<<
 * 
 *             if cycles > LimCycle or OpenNodes.top().Dist > LimDist:
 */
        ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_NodeReach_T); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1812, __pyx_L1_error)

        /* "graph.pyx":1810
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance             # <<<<<<<<<<<<<<
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 */
      }
      __pyx_L21:;
      __pyx_L12_continue:;
    }

    /* "graph.pyx":1814
 *                     OpenNodes.push(NodeReach_T)
 * 
 *             if cycles > LimCycle or OpenNodes.top().Dist > LimDist:             # <<<<<<<<<<<<<<
 *                 # if reaches cycle count limit
 *                 # if the minimum distance in open nodes is more than the distance limit
 */
    __pyx_t_2 = (__pyx_v_cycles > __pyx_v_LimCycle);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L23_bool_binop_done;
    }
    __pyx_t_11 = ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->top(__pyx_v_OpenNodes); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1814, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_11.Dist > __pyx_v_LimDist);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L23_bool_binop_done:;
    if (__pyx_t_1) {

      /* "graph.pyx":1817
 *                 # if reaches cycle count limit
 *                 # if the minimum distance in open nodes is more than the distance limit
 *                 keepGoing = False             # <<<<<<<<<<<<<<
 *             elif OpenNodes.empty():
 *                 keepGoing = False
 */
      __pyx_v_keepGoing = 0;

      /* "graph.pyx":1814
 *                     OpenNodes.push(NodeReach_T)
 * 
 *             if cycles > LimCycle or OpenNodes.top().Dist > LimDist:             # <<<<<<<<<<<<<<
 *                 # if reaches cycle count limit
 *                 # if the minimum distance in open nodes is more than the distance limit
 */
      goto __pyx_L22;
    }

    /* "graph.pyx":1818
 *                 # if the minimum distance in open nodes is more than the distance limit
 *                 keepGoing = False
 *             elif OpenNodes.empty():             # <<<<<<<<<<<<<<
 *                 keepGoing = False
 * 
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->empty(__pyx_v_OpenNodes); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1818, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "graph.pyx":1819
 *                 keepGoing = False
 *             elif OpenNodes.empty():
 *                 keepGoing = False             # <<<<<<<<<<<<<<
 * 
 *         return (-1.0, -1.0)
 */
      __pyx_v_keepGoing = 0;

      /* "graph.pyx":1818
 *                 # if the minimum distance in open nodes is more than the distance limit
 *                 keepGoing = False
 *             elif OpenNodes.empty():             # <<<<<<<<<<<<<<
 *                 keepGoing = False
 * 
 */
    }
    __pyx_L22:;
  }

  /* "graph.pyx":1821
 *                 keepGoing = False
 * 
 *         return (-1.0, -1.0)             # <<<<<<<<<<<<<<
 * 
 *     def PathReach(self, int NidO, float LimDist = 1_000.0, int LimCycle = 10_000) -> tuple[tuple[int, float]]:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_tuple__19);
  __pyx_r = __pyx_tuple__19;
  goto __pyx_L0;

  /* "graph.pyx":1687
 *         return -1.0
 * 
 *     def PathDistComp_AStar_VirtuEntry(self,             # <<<<<<<<<<<<<<
 *             const int& EidO, tuple[float, float, float] PtO, const tuple[float, float] DstO,
 *             const int& EidD, tuple[float, float, float] PtD, const tuple[float, float] DstD,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("graph.GraphCy.PathDistComp_AStar_VirtuEntry", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_OpenNodes);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":1823
 *         return (-1.0, -1.0)
 * 
 *     def PathReach(self, int NidO, float LimDist = 1_000.0, int LimCycle = 10_000) -> tuple[tuple[int, float]]:             # <<<<<<<<<<<<<<
 *         """
 *         Finds Edges within reach
 */

/* Python wrapper */
static PyObject *__pyx_pw_5graph_7GraphCy_57PathReach(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5graph_7GraphCy_56PathReach, "\n        Finds Edges within reach\n\n        Parameters\n        ------------\n        NidO : int\n            starting node ID\n        LimDist : float, default 10,000.0\n            distance limit before giving up the pathfinding process\n        LimCycle : int, default 10,000\n            number of cycles of priority_queue before giving up the pathfinding process\n        \n        Returns\n        -----------\n        length: float\n            if a path is found, it will return with the length of shortest possible distance of the path\n        \n        Edge IDs: tuple[int]\n            tuple of edge ids of found shortest path.\n        \n        if path is not found, it will return (-1.0,(-1,))\n        \n        Notes\n        -----------\n        The algorithm has bidirectional capability and also node cost added.\n        ");
static PyMethodDef __pyx_mdef_5graph_7GraphCy_57PathReach = {"PathReach", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_57PathReach, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5graph_7GraphCy_56PathReach};
static PyObject *__pyx_pw_5graph_7GraphCy_57PathReach(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_NidO;
  float __pyx_v_LimDist;
  int __pyx_v_LimCycle;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("PathReach (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_NidO,&__pyx_n_s_LimDist,&__pyx_n_s_LimCycle,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_NidO)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1823, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_LimDist);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1823, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_LimCycle);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1823, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "PathReach") < 0)) __PYX_ERR(0, 1823, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_NidO = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_NidO == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1823, __pyx_L3_error)
    if (values[1]) {
      __pyx_v_LimDist = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_LimDist == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1823, __pyx_L3_error)
    } else {
      __pyx_v_LimDist = ((float)1000.0);
    }
    if (values[2]) {
      __pyx_v_LimCycle = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_LimCycle == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1823, __pyx_L3_error)
    } else {
      __pyx_v_LimCycle = ((int)0x2710);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("PathReach", 0, 1, 3, __pyx_nargs); __PYX_ERR(0, 1823, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("graph.GraphCy.PathReach", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5graph_7GraphCy_56PathReach(((struct __pyx_obj_5graph_GraphCy *)__pyx_v_self), __pyx_v_NidO, __pyx_v_LimDist, __pyx_v_LimCycle);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5graph_7GraphCy_9PathReach_2generator5(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "graph.pyx":2024
 *             EdgesReachSize += 1
 *             EdgesReach.push_back(pair[int, float](NodeReach_T.Eid, edgeVector))
 *         outtup = tuple(EdgesReach[n] for n in range(EdgesReach.size()))             # <<<<<<<<<<<<<<
 * 
 *         EdgesReach.insert(EdgesReach.end(), EdgesFringe.begin(), EdgesFringe.end())
 */

static PyObject *__pyx_pf_5graph_7GraphCy_9PathReach_genexpr(PyObject *__pyx_self, std::vector<std::pair<int,float> > ::size_type __pyx_genexpr_arg_0) {
  struct __pyx_obj_5graph___pyx_scope_struct_10_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5graph___pyx_scope_struct_10_genexpr *)__pyx_tp_new_5graph___pyx_scope_struct_10_genexpr(__pyx_ptype_5graph___pyx_scope_struct_10_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5graph___pyx_scope_struct_10_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 2024, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_5graph___pyx_scope_struct_9_PathReach *) __pyx_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  __pyx_cur_scope->__pyx_genexpr_arg_0 = __pyx_genexpr_arg_0;
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5graph_7GraphCy_9PathReach_2generator5, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_PathReach_locals_genexpr, __pyx_n_s_graph); if (unlikely(!gen)) __PYX_ERR(0, 2024, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("graph.GraphCy.PathReach.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5graph_7GraphCy_9PathReach_2generator5(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5graph___pyx_scope_struct_10_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5graph___pyx_scope_struct_10_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  std::vector<std::pair<int,float> > ::size_type __pyx_t_1;
  std::vector<std::pair<int,float> > ::size_type __pyx_t_2;
  std::vector<std::pair<int,float> > ::size_type __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2024, __pyx_L1_error)
  __pyx_t_1 = __pyx_cur_scope->__pyx_genexpr_arg_0;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_cur_scope->__pyx_v_n = __pyx_t_3;
    __pyx_t_4 = __pyx_convert_pair_to_py_int____float((__pyx_cur_scope->__pyx_outer_scope->__pyx_v_EdgesReach[__pyx_cur_scope->__pyx_v_n])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2024, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2024, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5graph_7GraphCy_9PathReach_5generator6(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "graph.pyx":2028
 *         EdgesReach.insert(EdgesReach.end(), EdgesFringe.begin(), EdgesFringe.end())
 * 
 *         outtup = tuple((v.first, v.second) for v in EdgesReach)             # <<<<<<<<<<<<<<
 *         EdgesReach.clear()
 *         return outtup
 */

static PyObject *__pyx_pf_5graph_7GraphCy_9PathReach_3genexpr(CYTHON_UNUSED PyObject *__pyx_self, std::vector<std::pair<int,float> >  __pyx_genexpr_arg_0) {
  struct __pyx_obj_5graph___pyx_scope_struct_11_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5graph___pyx_scope_struct_11_genexpr *)__pyx_tp_new_5graph___pyx_scope_struct_11_genexpr(__pyx_ptype_5graph___pyx_scope_struct_11_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5graph___pyx_scope_struct_11_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 2028, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_genexpr_arg_0 = __pyx_genexpr_arg_0;
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5graph_7GraphCy_9PathReach_5generator6, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_PathReach_locals_genexpr, __pyx_n_s_graph); if (unlikely(!gen)) __PYX_ERR(0, 2028, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("graph.GraphCy.PathReach.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5graph_7GraphCy_9PathReach_5generator6(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5graph___pyx_scope_struct_11_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5graph___pyx_scope_struct_11_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  std::vector<std::pair<int,float> > ::iterator __pyx_t_1;
  std::pair<int,float>  __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2028, __pyx_L1_error)
  __pyx_t_1 = __pyx_cur_scope->__pyx_genexpr_arg_0.begin();
  for (;;) {
    if (!(__pyx_t_1 != __pyx_cur_scope->__pyx_genexpr_arg_0.end())) break;
    __pyx_t_2 = *__pyx_t_1;
    ++__pyx_t_1;
    __pyx_cur_scope->__pyx_v_v = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v_v.first); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2028, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_v.second); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2028, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2028, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3)) __PYX_ERR(0, 2028, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4)) __PYX_ERR(0, 2028, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    __pyx_cur_scope->__pyx_t_0 = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_cur_scope->__pyx_t_0);
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2028, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":1823
 *         return (-1.0, -1.0)
 * 
 *     def PathReach(self, int NidO, float LimDist = 1_000.0, int LimCycle = 10_000) -> tuple[tuple[int, float]]:             # <<<<<<<<<<<<<<
 *         """
 *         Finds Edges within reach
 */

static PyObject *__pyx_pf_5graph_7GraphCy_56PathReach(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, int __pyx_v_NidO, float __pyx_v_LimDist, int __pyx_v_LimCycle) {
  struct __pyx_obj_5graph___pyx_scope_struct_9_PathReach *__pyx_cur_scope;
  int __pyx_v_cycles;
  int __pyx_v_keepGoing;
  struct __pyx_obj_5graph_PriorityQueue_NR *__pyx_v_OpenNodes = 0;
  struct __pyx_t_5graph_NodeReach __pyx_v_startNode;
  struct __pyx_t_5graph_NodeReach __pyx_v_NodeReach_T;
  int __pyx_v_NidF;
  float __pyx_v_len;
  struct __pyx_t_5graph_Edge __pyx_v_EdgeC;
  struct __pyx_t_5graph_NodeReach __pyx_v_NodeCheck;
  int __pyx_v_i;
  std::vector<std::pair<int,float> >  __pyx_v_EdgesFringe;
  float __pyx_v_edgeVector;
  float __pyx_v_remainingDist;
  size_t __pyx_v_Eididx;
  std::vector<int>  __pyx_v_EdgesReach_EidVec;
  int __pyx_v_Eid;
  float __pyx_v_lenE;
  int __pyx_v_EdgesReachSize;
  PyObject *__pyx_v_outtup = NULL;
  PyObject *__pyx_gb_5graph_7GraphCy_9PathReach_2generator5 = 0;
  PyObject *__pyx_gb_5graph_7GraphCy_9PathReach_5generator6 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_t_5graph_NodeReach __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  int __pyx_t_9;
  std::vector<int>  __pyx_t_10;
  std::pair<int,float>  __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PathReach", 0);
  __pyx_cur_scope = (struct __pyx_obj_5graph___pyx_scope_struct_9_PathReach *)__pyx_tp_new_5graph___pyx_scope_struct_9_PathReach(__pyx_ptype_5graph___pyx_scope_struct_9_PathReach, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5graph___pyx_scope_struct_9_PathReach *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1823, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }

  /* "graph.pyx":1851
 *         """
 * 
 *         self.C_Reset_NodeVisited()             # <<<<<<<<<<<<<<
 * 
 *         cdef int cycles
 */
  __pyx_f_5graph_7GraphCy_C_Reset_NodeVisited(__pyx_v_self, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1851, __pyx_L1_error)

  /* "graph.pyx":1854
 * 
 *         cdef int cycles
 *         cycles = 1             # <<<<<<<<<<<<<<
 *         cdef bint keepGoing
 *         keepGoing = True
 */
  __pyx_v_cycles = 1;

  /* "graph.pyx":1856
 *         cycles = 1
 *         cdef bint keepGoing
 *         keepGoing = True             # <<<<<<<<<<<<<<
 * 
 *         cdef PriorityQueue_NR OpenNodes
 */
  __pyx_v_keepGoing = 1;

  /* "graph.pyx":1860
 *         cdef PriorityQueue_NR OpenNodes
 *         cdef NodeReach startNode
 *         startNode.Nid = NidO             # <<<<<<<<<<<<<<
 *         startNode.Eid = -1
 *         startNode.Dist = 0.0
 */
  __pyx_v_startNode.Nid = __pyx_v_NidO;

  /* "graph.pyx":1861
 *         cdef NodeReach startNode
 *         startNode.Nid = NidO
 *         startNode.Eid = -1             # <<<<<<<<<<<<<<
 *         startNode.Dist = 0.0
 *         startNode.NidO = -1
 */
  __pyx_v_startNode.Eid = -1;

  /* "graph.pyx":1862
 *         startNode.Nid = NidO
 *         startNode.Eid = -1
 *         startNode.Dist = 0.0             # <<<<<<<<<<<<<<
 *         startNode.NidO = -1
 *         startNode.Weight = 0.0
 */
  __pyx_v_startNode.Dist = 0.0;

  /* "graph.pyx":1863
 *         startNode.Eid = -1
 *         startNode.Dist = 0.0
 *         startNode.NidO = -1             # <<<<<<<<<<<<<<
 *         startNode.Weight = 0.0
 *         OpenNodes = PriorityQueue_NR()
 */
  __pyx_v_startNode.NidO = -1;

  /* "graph.pyx":1864
 *         startNode.Dist = 0.0
 *         startNode.NidO = -1
 *         startNode.Weight = 0.0             # <<<<<<<<<<<<<<
 *         OpenNodes = PriorityQueue_NR()
 *         OpenNodes.push(startNode)
 */
  __pyx_v_startNode.Weight = 0.0;

  /* "graph.pyx":1865
 *         startNode.NidO = -1
 *         startNode.Weight = 0.0
 *         OpenNodes = PriorityQueue_NR()             # <<<<<<<<<<<<<<
 *         OpenNodes.push(startNode)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5graph_PriorityQueue_NR)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1865, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_OpenNodes = ((struct __pyx_obj_5graph_PriorityQueue_NR *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "graph.pyx":1866
 *         startNode.Weight = 0.0
 *         OpenNodes = PriorityQueue_NR()
 *         OpenNodes.push(startNode)             # <<<<<<<<<<<<<<
 * 
 *         cdef NodeReach NodeReach_T
 */
  ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_startNode); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1866, __pyx_L1_error)

  /* "graph.pyx":1885
 *         cdef float lenE
 * 
 *         while keepGoing:             # <<<<<<<<<<<<<<
 *             cycles += 1
 *             # check paths from OpenNodes
 */
  while (1) {
    if (!__pyx_v_keepGoing) break;

    /* "graph.pyx":1886
 * 
 *         while keepGoing:
 *             cycles += 1             # <<<<<<<<<<<<<<
 *             # check paths from OpenNodes
 *             NodeCheck = OpenNodes.pop_top()
 */
    __pyx_v_cycles = (__pyx_v_cycles + 1);

    /* "graph.pyx":1888
 *             cycles += 1
 *             # check paths from OpenNodes
 *             NodeCheck = OpenNodes.pop_top()             # <<<<<<<<<<<<<<
 *             for i in range(self.EidN):
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->pop_top(__pyx_v_OpenNodes); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1888, __pyx_L1_error)
    __pyx_v_NodeCheck = __pyx_t_2;

    /* "graph.pyx":1889
 *             # check paths from OpenNodes
 *             NodeCheck = OpenNodes.pop_top()
 *             for i in range(self.EidN):             # <<<<<<<<<<<<<<
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1:
 */
    __pyx_t_3 = __pyx_v_self->EidN;
    __pyx_t_4 = __pyx_t_3;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "graph.pyx":1890
 *             NodeCheck = OpenNodes.pop_top()
 *             for i in range(self.EidN):
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]             # <<<<<<<<<<<<<<
 *                 if Eid == -1:
 *                     break
 */
      __pyx_v_Eid = ((__pyx_v_self->nodes[__pyx_v_NodeCheck.Nid]).Eid[__pyx_v_i]);

      /* "graph.pyx":1891
 *             for i in range(self.EidN):
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1:             # <<<<<<<<<<<<<<
 *                     break
 *                 if Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 */
      __pyx_t_6 = (__pyx_v_Eid == -1L);
      if (__pyx_t_6) {

        /* "graph.pyx":1892
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1:
 *                     break             # <<<<<<<<<<<<<<
 *                 if Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 *                     continue
 */
        goto __pyx_L6_break;

        /* "graph.pyx":1891
 *             for i in range(self.EidN):
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1:             # <<<<<<<<<<<<<<
 *                     break
 *                 if Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 */
      }

      /* "graph.pyx":1893
 *                 if Eid == -1:
 *                     break
 *                 if Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:             # <<<<<<<<<<<<<<
 *                     continue
 *                 # possible new path
 */
      __pyx_t_7 = (__pyx_v_Eid == __pyx_v_NodeCheck.Eid);
      if (!__pyx_t_7) {
      } else {
        __pyx_t_6 = __pyx_t_7;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_7 = ((__pyx_v_self->_edgesIds[__pyx_v_Eid]) == -1L);
      __pyx_t_6 = __pyx_t_7;
      __pyx_L9_bool_binop_done:;
      if (__pyx_t_6) {

        /* "graph.pyx":1894
 *                     break
 *                 if Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 *                     continue             # <<<<<<<<<<<<<<
 *                 # possible new path
 *                 # new node?
 */
        goto __pyx_L5_continue;

        /* "graph.pyx":1893
 *                 if Eid == -1:
 *                     break
 *                 if Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:             # <<<<<<<<<<<<<<
 *                     continue
 *                 # possible new path
 */
      }

      /* "graph.pyx":1897
 *                 # possible new path
 *                 # new node?
 *                 EdgeC = self.edges[Eid]             # <<<<<<<<<<<<<<
 *                 if EdgeC.NidO == NodeCheck.Nid:
 *                     lenE = EdgeC.len
 */
      __pyx_v_EdgeC = (__pyx_v_self->edges[__pyx_v_Eid]);

      /* "graph.pyx":1898
 *                 # new node?
 *                 EdgeC = self.edges[Eid]
 *                 if EdgeC.NidO == NodeCheck.Nid:             # <<<<<<<<<<<<<<
 *                     lenE = EdgeC.len
 *                     NidF = EdgeC.NidD
 */
      __pyx_t_6 = (__pyx_v_EdgeC.NidO == __pyx_v_NodeCheck.Nid);
      if (__pyx_t_6) {

        /* "graph.pyx":1899
 *                 EdgeC = self.edges[Eid]
 *                 if EdgeC.NidO == NodeCheck.Nid:
 *                     lenE = EdgeC.len             # <<<<<<<<<<<<<<
 *                     NidF = EdgeC.NidD
 *                     edgeVector = 1.0
 */
        __pyx_t_8 = __pyx_v_EdgeC.len;
        __pyx_v_lenE = __pyx_t_8;

        /* "graph.pyx":1900
 *                 if EdgeC.NidO == NodeCheck.Nid:
 *                     lenE = EdgeC.len
 *                     NidF = EdgeC.NidD             # <<<<<<<<<<<<<<
 *                     edgeVector = 1.0
 *                 else :
 */
        __pyx_t_9 = __pyx_v_EdgeC.NidD;
        __pyx_v_NidF = __pyx_t_9;

        /* "graph.pyx":1901
 *                     lenE = EdgeC.len
 *                     NidF = EdgeC.NidD
 *                     edgeVector = 1.0             # <<<<<<<<<<<<<<
 *                 else :
 *                     lenE = EdgeC.lenR
 */
        __pyx_v_edgeVector = 1.0;

        /* "graph.pyx":1898
 *                 # new node?
 *                 EdgeC = self.edges[Eid]
 *                 if EdgeC.NidO == NodeCheck.Nid:             # <<<<<<<<<<<<<<
 *                     lenE = EdgeC.len
 *                     NidF = EdgeC.NidD
 */
        goto __pyx_L11;
      }

      /* "graph.pyx":1903
 *                     edgeVector = 1.0
 *                 else :
 *                     lenE = EdgeC.lenR             # <<<<<<<<<<<<<<
 *                     NidF = EdgeC.NidO
 *                     edgeVector = -1.0
 */
      /*else*/ {
        __pyx_t_8 = __pyx_v_EdgeC.lenR;
        __pyx_v_lenE = __pyx_t_8;

        /* "graph.pyx":1904
 *                 else :
 *                     lenE = EdgeC.lenR
 *                     NidF = EdgeC.NidO             # <<<<<<<<<<<<<<
 *                     edgeVector = -1.0
 * 
 */
        __pyx_t_9 = __pyx_v_EdgeC.NidO;
        __pyx_v_NidF = __pyx_t_9;

        /* "graph.pyx":1905
 *                     lenE = EdgeC.lenR
 *                     NidF = EdgeC.NidO
 *                     edgeVector = -1.0             # <<<<<<<<<<<<<<
 * 
 *                 if self._nodesIds[NidF] == -1:
 */
        __pyx_v_edgeVector = -1.0;
      }
      __pyx_L11:;

      /* "graph.pyx":1907
 *                     edgeVector = -1.0
 * 
 *                 if self._nodesIds[NidF] == -1:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      __pyx_t_6 = ((__pyx_v_self->_nodesIds[__pyx_v_NidF]) == -1L);
      if (__pyx_t_6) {

        /* "graph.pyx":1908
 * 
 *                 if self._nodesIds[NidF] == -1:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 len = lenE + NodeCheck.Dist + self.nodes[NidF].c
 */
        goto __pyx_L5_continue;

        /* "graph.pyx":1907
 *                     edgeVector = -1.0
 * 
 *                 if self._nodesIds[NidF] == -1:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      }

      /* "graph.pyx":1910
 *                     continue
 * 
 *                 len = lenE + NodeCheck.Dist + self.nodes[NidF].c             # <<<<<<<<<<<<<<
 * 
 *                 if len > LimDist:
 */
      __pyx_v_len = ((__pyx_v_lenE + __pyx_v_NodeCheck.Dist) + (__pyx_v_self->nodes[__pyx_v_NidF]).c);

      /* "graph.pyx":1912
 *                 len = lenE + NodeCheck.Dist + self.nodes[NidF].c
 * 
 *                 if len > LimDist:             # <<<<<<<<<<<<<<
 *                     remainingDist = (LimDist - NodeCheck.Dist) / lenE
 *                     if remainingDist > <float>1.0:
 */
      __pyx_t_6 = (__pyx_v_len > __pyx_v_LimDist);
      if (__pyx_t_6) {

        /* "graph.pyx":1913
 * 
 *                 if len > LimDist:
 *                     remainingDist = (LimDist - NodeCheck.Dist) / lenE             # <<<<<<<<<<<<<<
 *                     if remainingDist > <float>1.0:
 *                         remainingDist = <float>1.0
 */
        __pyx_t_8 = (__pyx_v_LimDist - __pyx_v_NodeCheck.Dist);
        if (unlikely(__pyx_v_lenE == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 1913, __pyx_L1_error)
        }
        __pyx_v_remainingDist = (__pyx_t_8 / __pyx_v_lenE);

        /* "graph.pyx":1914
 *                 if len > LimDist:
 *                     remainingDist = (LimDist - NodeCheck.Dist) / lenE
 *                     if remainingDist > <float>1.0:             # <<<<<<<<<<<<<<
 *                         remainingDist = <float>1.0
 * 
 */
        __pyx_t_6 = (__pyx_v_remainingDist > ((float)1.0));
        if (__pyx_t_6) {

          /* "graph.pyx":1915
 *                     remainingDist = (LimDist - NodeCheck.Dist) / lenE
 *                     if remainingDist > <float>1.0:
 *                         remainingDist = <float>1.0             # <<<<<<<<<<<<<<
 * 
 *                     # I'm sorry this section have so much brances and confusing variable names.
 */
          __pyx_v_remainingDist = ((float)1.0);

          /* "graph.pyx":1914
 *                 if len > LimDist:
 *                     remainingDist = (LimDist - NodeCheck.Dist) / lenE
 *                     if remainingDist > <float>1.0:             # <<<<<<<<<<<<<<
 *                         remainingDist = <float>1.0
 * 
 */
        }

        /* "graph.pyx":1920
 *                     # theres just so many particular cases that cant be untangled
 * 
 *                     remainingDist = remainingDist * edgeVector             # <<<<<<<<<<<<<<
 *                     EdgesReach_EidVec = EdgesReach_Eididx(EdgesFringe, Eid)
 *                     if EdgesReach_EidVec.size() == 0:
 */
        __pyx_v_remainingDist = (__pyx_v_remainingDist * __pyx_v_edgeVector);

        /* "graph.pyx":1921
 * 
 *                     remainingDist = remainingDist * edgeVector
 *                     EdgesReach_EidVec = EdgesReach_Eididx(EdgesFringe, Eid)             # <<<<<<<<<<<<<<
 *                     if EdgesReach_EidVec.size() == 0:
 *                         EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 */
        __pyx_t_10 = __pyx_f_5graph_EdgesReach_Eididx(__pyx_v_EdgesFringe, __pyx_v_Eid); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1921, __pyx_L1_error)
        __pyx_v_EdgesReach_EidVec = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_10);

        /* "graph.pyx":1922
 *                     remainingDist = remainingDist * edgeVector
 *                     EdgesReach_EidVec = EdgesReach_Eididx(EdgesFringe, Eid)
 *                     if EdgesReach_EidVec.size() == 0:             # <<<<<<<<<<<<<<
 *                         EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 *                     elif EdgesReach_EidVec.size() == 1:
 */
        __pyx_t_6 = (__pyx_v_EdgesReach_EidVec.size() == 0);
        if (__pyx_t_6) {

          /* "graph.pyx":1923
 *                     EdgesReach_EidVec = EdgesReach_Eididx(EdgesFringe, Eid)
 *                     if EdgesReach_EidVec.size() == 0:
 *                         EdgesFringe.push_back(pair[int, float](Eid, remainingDist))             # <<<<<<<<<<<<<<
 *                     elif EdgesReach_EidVec.size() == 1:
 *                         Eididx = EdgesReach_EidVec[0]
 */
          try {
            __pyx_t_11 = std::pair<int,float> (__pyx_v_Eid, __pyx_v_remainingDist);
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(0, 1923, __pyx_L1_error)
          }
          try {
            __pyx_v_EdgesFringe.push_back(__pyx_t_11);
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(0, 1923, __pyx_L1_error)
          }

          /* "graph.pyx":1922
 *                     remainingDist = remainingDist * edgeVector
 *                     EdgesReach_EidVec = EdgesReach_Eididx(EdgesFringe, Eid)
 *                     if EdgesReach_EidVec.size() == 0:             # <<<<<<<<<<<<<<
 *                         EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 *                     elif EdgesReach_EidVec.size() == 1:
 */
          goto __pyx_L15;
        }

        /* "graph.pyx":1924
 *                     if EdgesReach_EidVec.size() == 0:
 *                         EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 *                     elif EdgesReach_EidVec.size() == 1:             # <<<<<<<<<<<<<<
 *                         Eididx = EdgesReach_EidVec[0]
 *                         if EdgesFringe[Eididx].second != 1.0 and EdgesFringe[Eididx].second != -1.0:
 */
        __pyx_t_6 = (__pyx_v_EdgesReach_EidVec.size() == 1);
        if (__pyx_t_6) {

          /* "graph.pyx":1925
 *                         EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 *                     elif EdgesReach_EidVec.size() == 1:
 *                         Eididx = EdgesReach_EidVec[0]             # <<<<<<<<<<<<<<
 *                         if EdgesFringe[Eididx].second != 1.0 and EdgesFringe[Eididx].second != -1.0:
 *                             if remainingDist == -1.0 or remainingDist == 1.0:
 */
          __pyx_v_Eididx = (__pyx_v_EdgesReach_EidVec[0]);

          /* "graph.pyx":1926
 *                     elif EdgesReach_EidVec.size() == 1:
 *                         Eididx = EdgesReach_EidVec[0]
 *                         if EdgesFringe[Eididx].second != 1.0 and EdgesFringe[Eididx].second != -1.0:             # <<<<<<<<<<<<<<
 *                             if remainingDist == -1.0 or remainingDist == 1.0:
 *                                 EdgesFringe.erase(EdgesFringe.begin()+Eididx)
 */
          __pyx_t_7 = ((__pyx_v_EdgesFringe[__pyx_v_Eididx]).second != 1.0);
          if (__pyx_t_7) {
          } else {
            __pyx_t_6 = __pyx_t_7;
            goto __pyx_L17_bool_binop_done;
          }
          __pyx_t_7 = ((__pyx_v_EdgesFringe[__pyx_v_Eididx]).second != -1.0);
          __pyx_t_6 = __pyx_t_7;
          __pyx_L17_bool_binop_done:;
          if (__pyx_t_6) {

            /* "graph.pyx":1927
 *                         Eididx = EdgesReach_EidVec[0]
 *                         if EdgesFringe[Eididx].second != 1.0 and EdgesFringe[Eididx].second != -1.0:
 *                             if remainingDist == -1.0 or remainingDist == 1.0:             # <<<<<<<<<<<<<<
 *                                 EdgesFringe.erase(EdgesFringe.begin()+Eididx)
 *                                 EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 */
            __pyx_t_7 = (__pyx_v_remainingDist == -1.0);
            if (!__pyx_t_7) {
            } else {
              __pyx_t_6 = __pyx_t_7;
              goto __pyx_L20_bool_binop_done;
            }
            __pyx_t_7 = (__pyx_v_remainingDist == 1.0);
            __pyx_t_6 = __pyx_t_7;
            __pyx_L20_bool_binop_done:;
            if (__pyx_t_6) {

              /* "graph.pyx":1928
 *                         if EdgesFringe[Eididx].second != 1.0 and EdgesFringe[Eididx].second != -1.0:
 *                             if remainingDist == -1.0 or remainingDist == 1.0:
 *                                 EdgesFringe.erase(EdgesFringe.begin()+Eididx)             # <<<<<<<<<<<<<<
 *                                 EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 *                             elif remainingDist > 0.0:
 */
              (void)(__pyx_v_EdgesFringe.erase((__pyx_v_EdgesFringe.begin() + __pyx_v_Eididx)));

              /* "graph.pyx":1929
 *                             if remainingDist == -1.0 or remainingDist == 1.0:
 *                                 EdgesFringe.erase(EdgesFringe.begin()+Eididx)
 *                                 EdgesFringe.push_back(pair[int, float](Eid, remainingDist))             # <<<<<<<<<<<<<<
 *                             elif remainingDist > 0.0:
 *                                 if EdgesFringe[Eididx].second > 0.0 and remainingDist > EdgesFringe[Eididx].second:
 */
              try {
                __pyx_t_11 = std::pair<int,float> (__pyx_v_Eid, __pyx_v_remainingDist);
              } catch(...) {
                __Pyx_CppExn2PyErr();
                __PYX_ERR(0, 1929, __pyx_L1_error)
              }
              try {
                __pyx_v_EdgesFringe.push_back(__pyx_t_11);
              } catch(...) {
                __Pyx_CppExn2PyErr();
                __PYX_ERR(0, 1929, __pyx_L1_error)
              }

              /* "graph.pyx":1927
 *                         Eididx = EdgesReach_EidVec[0]
 *                         if EdgesFringe[Eididx].second != 1.0 and EdgesFringe[Eididx].second != -1.0:
 *                             if remainingDist == -1.0 or remainingDist == 1.0:             # <<<<<<<<<<<<<<
 *                                 EdgesFringe.erase(EdgesFringe.begin()+Eididx)
 *                                 EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 */
              goto __pyx_L19;
            }

            /* "graph.pyx":1930
 *                                 EdgesFringe.erase(EdgesFringe.begin()+Eididx)
 *                                 EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 *                             elif remainingDist > 0.0:             # <<<<<<<<<<<<<<
 *                                 if EdgesFringe[Eididx].second > 0.0 and remainingDist > EdgesFringe[Eididx].second:
 *                                     EdgesFringe.erase(EdgesFringe.begin()+Eididx) # popping out shorter
 */
            __pyx_t_6 = (__pyx_v_remainingDist > 0.0);
            if (__pyx_t_6) {

              /* "graph.pyx":1931
 *                                 EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 *                             elif remainingDist > 0.0:
 *                                 if EdgesFringe[Eididx].second > 0.0 and remainingDist > EdgesFringe[Eididx].second:             # <<<<<<<<<<<<<<
 *                                     EdgesFringe.erase(EdgesFringe.begin()+Eididx) # popping out shorter
 *                                     EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 */
              __pyx_t_7 = ((__pyx_v_EdgesFringe[__pyx_v_Eididx]).second > 0.0);
              if (__pyx_t_7) {
              } else {
                __pyx_t_6 = __pyx_t_7;
                goto __pyx_L23_bool_binop_done;
              }
              __pyx_t_7 = (__pyx_v_remainingDist > (__pyx_v_EdgesFringe[__pyx_v_Eididx]).second);
              __pyx_t_6 = __pyx_t_7;
              __pyx_L23_bool_binop_done:;
              if (__pyx_t_6) {

                /* "graph.pyx":1932
 *                             elif remainingDist > 0.0:
 *                                 if EdgesFringe[Eididx].second > 0.0 and remainingDist > EdgesFringe[Eididx].second:
 *                                     EdgesFringe.erase(EdgesFringe.begin()+Eididx) # popping out shorter             # <<<<<<<<<<<<<<
 *                                     EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 *                                 elif EdgesFringe[Eididx].second < 0.0:
 */
                (void)(__pyx_v_EdgesFringe.erase((__pyx_v_EdgesFringe.begin() + __pyx_v_Eididx)));

                /* "graph.pyx":1933
 *                                 if EdgesFringe[Eididx].second > 0.0 and remainingDist > EdgesFringe[Eididx].second:
 *                                     EdgesFringe.erase(EdgesFringe.begin()+Eididx) # popping out shorter
 *                                     EdgesFringe.push_back(pair[int, float](Eid, remainingDist))             # <<<<<<<<<<<<<<
 *                                 elif EdgesFringe[Eididx].second < 0.0:
 *                                     if (remainingDist - EdgesFringe[Eididx].second) > 1.0:
 */
                try {
                  __pyx_t_11 = std::pair<int,float> (__pyx_v_Eid, __pyx_v_remainingDist);
                } catch(...) {
                  __Pyx_CppExn2PyErr();
                  __PYX_ERR(0, 1933, __pyx_L1_error)
                }
                try {
                  __pyx_v_EdgesFringe.push_back(__pyx_t_11);
                } catch(...) {
                  __Pyx_CppExn2PyErr();
                  __PYX_ERR(0, 1933, __pyx_L1_error)
                }

                /* "graph.pyx":1931
 *                                 EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 *                             elif remainingDist > 0.0:
 *                                 if EdgesFringe[Eididx].second > 0.0 and remainingDist > EdgesFringe[Eididx].second:             # <<<<<<<<<<<<<<
 *                                     EdgesFringe.erase(EdgesFringe.begin()+Eididx) # popping out shorter
 *                                     EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 */
                goto __pyx_L22;
              }

              /* "graph.pyx":1934
 *                                     EdgesFringe.erase(EdgesFringe.begin()+Eididx) # popping out shorter
 *                                     EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 *                                 elif EdgesFringe[Eididx].second < 0.0:             # <<<<<<<<<<<<<<
 *                                     if (remainingDist - EdgesFringe[Eididx].second) > 1.0:
 *                                         EdgesFringe.erase(EdgesFringe.begin()+Eididx)
 */
              __pyx_t_6 = ((__pyx_v_EdgesFringe[__pyx_v_Eididx]).second < 0.0);
              if (__pyx_t_6) {

                /* "graph.pyx":1935
 *                                     EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 *                                 elif EdgesFringe[Eididx].second < 0.0:
 *                                     if (remainingDist - EdgesFringe[Eididx].second) > 1.0:             # <<<<<<<<<<<<<<
 *                                         EdgesFringe.erase(EdgesFringe.begin()+Eididx)
 *                                         EdgesFringe.push_back(pair[int, float](Eid, edgeVector))
 */
                __pyx_t_6 = ((__pyx_v_remainingDist - (__pyx_v_EdgesFringe[__pyx_v_Eididx]).second) > 1.0);
                if (__pyx_t_6) {

                  /* "graph.pyx":1936
 *                                 elif EdgesFringe[Eididx].second < 0.0:
 *                                     if (remainingDist - EdgesFringe[Eididx].second) > 1.0:
 *                                         EdgesFringe.erase(EdgesFringe.begin()+Eididx)             # <<<<<<<<<<<<<<
 *                                         EdgesFringe.push_back(pair[int, float](Eid, edgeVector))
 *                                     else:
 */
                  (void)(__pyx_v_EdgesFringe.erase((__pyx_v_EdgesFringe.begin() + __pyx_v_Eididx)));

                  /* "graph.pyx":1937
 *                                     if (remainingDist - EdgesFringe[Eididx].second) > 1.0:
 *                                         EdgesFringe.erase(EdgesFringe.begin()+Eididx)
 *                                         EdgesFringe.push_back(pair[int, float](Eid, edgeVector))             # <<<<<<<<<<<<<<
 *                                     else:
 *                                         EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 */
                  try {
                    __pyx_t_11 = std::pair<int,float> (__pyx_v_Eid, __pyx_v_edgeVector);
                  } catch(...) {
                    __Pyx_CppExn2PyErr();
                    __PYX_ERR(0, 1937, __pyx_L1_error)
                  }
                  try {
                    __pyx_v_EdgesFringe.push_back(__pyx_t_11);
                  } catch(...) {
                    __Pyx_CppExn2PyErr();
                    __PYX_ERR(0, 1937, __pyx_L1_error)
                  }

                  /* "graph.pyx":1935
 *                                     EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 *                                 elif EdgesFringe[Eididx].second < 0.0:
 *                                     if (remainingDist - EdgesFringe[Eididx].second) > 1.0:             # <<<<<<<<<<<<<<
 *                                         EdgesFringe.erase(EdgesFringe.begin()+Eididx)
 *                                         EdgesFringe.push_back(pair[int, float](Eid, edgeVector))
 */
                  goto __pyx_L25;
                }

                /* "graph.pyx":1939
 *                                         EdgesFringe.push_back(pair[int, float](Eid, edgeVector))
 *                                     else:
 *                                         EdgesFringe.push_back(pair[int, float](Eid, remainingDist))             # <<<<<<<<<<<<<<
 *                             else:
 *                                 if EdgesFringe[Eididx].second > 0.0:
 */
                /*else*/ {
                  try {
                    __pyx_t_11 = std::pair<int,float> (__pyx_v_Eid, __pyx_v_remainingDist);
                  } catch(...) {
                    __Pyx_CppExn2PyErr();
                    __PYX_ERR(0, 1939, __pyx_L1_error)
                  }
                  try {
                    __pyx_v_EdgesFringe.push_back(__pyx_t_11);
                  } catch(...) {
                    __Pyx_CppExn2PyErr();
                    __PYX_ERR(0, 1939, __pyx_L1_error)
                  }
                }
                __pyx_L25:;

                /* "graph.pyx":1934
 *                                     EdgesFringe.erase(EdgesFringe.begin()+Eididx) # popping out shorter
 *                                     EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 *                                 elif EdgesFringe[Eididx].second < 0.0:             # <<<<<<<<<<<<<<
 *                                     if (remainingDist - EdgesFringe[Eididx].second) > 1.0:
 *                                         EdgesFringe.erase(EdgesFringe.begin()+Eididx)
 */
              }
              __pyx_L22:;

              /* "graph.pyx":1930
 *                                 EdgesFringe.erase(EdgesFringe.begin()+Eididx)
 *                                 EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 *                             elif remainingDist > 0.0:             # <<<<<<<<<<<<<<
 *                                 if EdgesFringe[Eididx].second > 0.0 and remainingDist > EdgesFringe[Eididx].second:
 *                                     EdgesFringe.erase(EdgesFringe.begin()+Eididx) # popping out shorter
 */
              goto __pyx_L19;
            }

            /* "graph.pyx":1941
 *                                         EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 *                             else:
 *                                 if EdgesFringe[Eididx].second > 0.0:             # <<<<<<<<<<<<<<
 *                                     if (EdgesFringe[Eididx].second - remainingDist) > 1.0:
 *                                         EdgesFringe.erase(EdgesFringe.begin()+Eididx)
 */
            /*else*/ {
              __pyx_t_6 = ((__pyx_v_EdgesFringe[__pyx_v_Eididx]).second > 0.0);
              if (__pyx_t_6) {

                /* "graph.pyx":1942
 *                             else:
 *                                 if EdgesFringe[Eididx].second > 0.0:
 *                                     if (EdgesFringe[Eididx].second - remainingDist) > 1.0:             # <<<<<<<<<<<<<<
 *                                         EdgesFringe.erase(EdgesFringe.begin()+Eididx)
 *                                         EdgesFringe.push_back(pair[int, float](Eid, edgeVector))
 */
                __pyx_t_6 = (((__pyx_v_EdgesFringe[__pyx_v_Eididx]).second - __pyx_v_remainingDist) > 1.0);
                if (__pyx_t_6) {

                  /* "graph.pyx":1943
 *                                 if EdgesFringe[Eididx].second > 0.0:
 *                                     if (EdgesFringe[Eididx].second - remainingDist) > 1.0:
 *                                         EdgesFringe.erase(EdgesFringe.begin()+Eididx)             # <<<<<<<<<<<<<<
 *                                         EdgesFringe.push_back(pair[int, float](Eid, edgeVector))
 *                                     else:
 */
                  (void)(__pyx_v_EdgesFringe.erase((__pyx_v_EdgesFringe.begin() + __pyx_v_Eididx)));

                  /* "graph.pyx":1944
 *                                     if (EdgesFringe[Eididx].second - remainingDist) > 1.0:
 *                                         EdgesFringe.erase(EdgesFringe.begin()+Eididx)
 *                                         EdgesFringe.push_back(pair[int, float](Eid, edgeVector))             # <<<<<<<<<<<<<<
 *                                     else:
 *                                         EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 */
                  try {
                    __pyx_t_11 = std::pair<int,float> (__pyx_v_Eid, __pyx_v_edgeVector);
                  } catch(...) {
                    __Pyx_CppExn2PyErr();
                    __PYX_ERR(0, 1944, __pyx_L1_error)
                  }
                  try {
                    __pyx_v_EdgesFringe.push_back(__pyx_t_11);
                  } catch(...) {
                    __Pyx_CppExn2PyErr();
                    __PYX_ERR(0, 1944, __pyx_L1_error)
                  }

                  /* "graph.pyx":1942
 *                             else:
 *                                 if EdgesFringe[Eididx].second > 0.0:
 *                                     if (EdgesFringe[Eididx].second - remainingDist) > 1.0:             # <<<<<<<<<<<<<<
 *                                         EdgesFringe.erase(EdgesFringe.begin()+Eididx)
 *                                         EdgesFringe.push_back(pair[int, float](Eid, edgeVector))
 */
                  goto __pyx_L27;
                }

                /* "graph.pyx":1946
 *                                         EdgesFringe.push_back(pair[int, float](Eid, edgeVector))
 *                                     else:
 *                                         EdgesFringe.push_back(pair[int, float](Eid, remainingDist))             # <<<<<<<<<<<<<<
 *                                 elif EdgesFringe[Eididx].second < 0.0 and remainingDist < EdgesFringe[Eididx].second:
 *                                     EdgesFringe.erase(EdgesFringe.begin()+Eididx)
 */
                /*else*/ {
                  try {
                    __pyx_t_11 = std::pair<int,float> (__pyx_v_Eid, __pyx_v_remainingDist);
                  } catch(...) {
                    __Pyx_CppExn2PyErr();
                    __PYX_ERR(0, 1946, __pyx_L1_error)
                  }
                  try {
                    __pyx_v_EdgesFringe.push_back(__pyx_t_11);
                  } catch(...) {
                    __Pyx_CppExn2PyErr();
                    __PYX_ERR(0, 1946, __pyx_L1_error)
                  }
                }
                __pyx_L27:;

                /* "graph.pyx":1941
 *                                         EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 *                             else:
 *                                 if EdgesFringe[Eididx].second > 0.0:             # <<<<<<<<<<<<<<
 *                                     if (EdgesFringe[Eididx].second - remainingDist) > 1.0:
 *                                         EdgesFringe.erase(EdgesFringe.begin()+Eididx)
 */
                goto __pyx_L26;
              }

              /* "graph.pyx":1947
 *                                     else:
 *                                         EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 *                                 elif EdgesFringe[Eididx].second < 0.0 and remainingDist < EdgesFringe[Eididx].second:             # <<<<<<<<<<<<<<
 *                                     EdgesFringe.erase(EdgesFringe.begin()+Eididx)
 *                                     EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 */
              __pyx_t_7 = ((__pyx_v_EdgesFringe[__pyx_v_Eididx]).second < 0.0);
              if (__pyx_t_7) {
              } else {
                __pyx_t_6 = __pyx_t_7;
                goto __pyx_L28_bool_binop_done;
              }
              __pyx_t_7 = (__pyx_v_remainingDist < (__pyx_v_EdgesFringe[__pyx_v_Eididx]).second);
              __pyx_t_6 = __pyx_t_7;
              __pyx_L28_bool_binop_done:;
              if (__pyx_t_6) {

                /* "graph.pyx":1948
 *                                         EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 *                                 elif EdgesFringe[Eididx].second < 0.0 and remainingDist < EdgesFringe[Eididx].second:
 *                                     EdgesFringe.erase(EdgesFringe.begin()+Eididx)             # <<<<<<<<<<<<<<
 *                                     EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 *                     else: # elif EdgesReach_EidVec.size() == 2, should not be possible more than 2
 */
                (void)(__pyx_v_EdgesFringe.erase((__pyx_v_EdgesFringe.begin() + __pyx_v_Eididx)));

                /* "graph.pyx":1949
 *                                 elif EdgesFringe[Eididx].second < 0.0 and remainingDist < EdgesFringe[Eididx].second:
 *                                     EdgesFringe.erase(EdgesFringe.begin()+Eididx)
 *                                     EdgesFringe.push_back(pair[int, float](Eid, remainingDist))             # <<<<<<<<<<<<<<
 *                     else: # elif EdgesReach_EidVec.size() == 2, should not be possible more than 2
 *                         if remainingDist == -1.0 or remainingDist == 1.0:
 */
                try {
                  __pyx_t_11 = std::pair<int,float> (__pyx_v_Eid, __pyx_v_remainingDist);
                } catch(...) {
                  __Pyx_CppExn2PyErr();
                  __PYX_ERR(0, 1949, __pyx_L1_error)
                }
                try {
                  __pyx_v_EdgesFringe.push_back(__pyx_t_11);
                } catch(...) {
                  __Pyx_CppExn2PyErr();
                  __PYX_ERR(0, 1949, __pyx_L1_error)
                }

                /* "graph.pyx":1947
 *                                     else:
 *                                         EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 *                                 elif EdgesFringe[Eididx].second < 0.0 and remainingDist < EdgesFringe[Eididx].second:             # <<<<<<<<<<<<<<
 *                                     EdgesFringe.erase(EdgesFringe.begin()+Eididx)
 *                                     EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 */
              }
              __pyx_L26:;
            }
            __pyx_L19:;

            /* "graph.pyx":1926
 *                     elif EdgesReach_EidVec.size() == 1:
 *                         Eididx = EdgesReach_EidVec[0]
 *                         if EdgesFringe[Eididx].second != 1.0 and EdgesFringe[Eididx].second != -1.0:             # <<<<<<<<<<<<<<
 *                             if remainingDist == -1.0 or remainingDist == 1.0:
 *                                 EdgesFringe.erase(EdgesFringe.begin()+Eididx)
 */
          }

          /* "graph.pyx":1924
 *                     if EdgesReach_EidVec.size() == 0:
 *                         EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 *                     elif EdgesReach_EidVec.size() == 1:             # <<<<<<<<<<<<<<
 *                         Eididx = EdgesReach_EidVec[0]
 *                         if EdgesFringe[Eididx].second != 1.0 and EdgesFringe[Eididx].second != -1.0:
 */
          goto __pyx_L15;
        }

        /* "graph.pyx":1951
 *                                     EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 *                     else: # elif EdgesReach_EidVec.size() == 2, should not be possible more than 2
 *                         if remainingDist == -1.0 or remainingDist == 1.0:             # <<<<<<<<<<<<<<
 *                             EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_EidVec[0])
 *                             EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_Eididx(EdgesFringe, Eid)[0])
 */
        /*else*/ {
          __pyx_t_7 = (__pyx_v_remainingDist == -1.0);
          if (!__pyx_t_7) {
          } else {
            __pyx_t_6 = __pyx_t_7;
            goto __pyx_L31_bool_binop_done;
          }
          __pyx_t_7 = (__pyx_v_remainingDist == 1.0);
          __pyx_t_6 = __pyx_t_7;
          __pyx_L31_bool_binop_done:;
          if (__pyx_t_6) {

            /* "graph.pyx":1952
 *                     else: # elif EdgesReach_EidVec.size() == 2, should not be possible more than 2
 *                         if remainingDist == -1.0 or remainingDist == 1.0:
 *                             EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_EidVec[0])             # <<<<<<<<<<<<<<
 *                             EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_Eididx(EdgesFringe, Eid)[0])
 *                             EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 */
            (void)(__pyx_v_EdgesFringe.erase((__pyx_v_EdgesFringe.begin() + (__pyx_v_EdgesReach_EidVec[0]))));

            /* "graph.pyx":1953
 *                         if remainingDist == -1.0 or remainingDist == 1.0:
 *                             EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_EidVec[0])
 *                             EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_Eididx(EdgesFringe, Eid)[0])             # <<<<<<<<<<<<<<
 *                             EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 *                         elif edgeVector == 1.0:
 */
            __pyx_t_10 = __pyx_f_5graph_EdgesReach_Eididx(__pyx_v_EdgesFringe, __pyx_v_Eid); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1953, __pyx_L1_error)
            (void)(__pyx_v_EdgesFringe.erase((__pyx_v_EdgesFringe.begin() + (__pyx_t_10[0]))));

            /* "graph.pyx":1954
 *                             EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_EidVec[0])
 *                             EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_Eididx(EdgesFringe, Eid)[0])
 *                             EdgesFringe.push_back(pair[int, float](Eid, remainingDist))             # <<<<<<<<<<<<<<
 *                         elif edgeVector == 1.0:
 *                             if EdgesFringe[EdgesReach_EidVec[0]].second > 0.0:
 */
            try {
              __pyx_t_11 = std::pair<int,float> (__pyx_v_Eid, __pyx_v_remainingDist);
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(0, 1954, __pyx_L1_error)
            }
            try {
              __pyx_v_EdgesFringe.push_back(__pyx_t_11);
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(0, 1954, __pyx_L1_error)
            }

            /* "graph.pyx":1951
 *                                     EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 *                     else: # elif EdgesReach_EidVec.size() == 2, should not be possible more than 2
 *                         if remainingDist == -1.0 or remainingDist == 1.0:             # <<<<<<<<<<<<<<
 *                             EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_EidVec[0])
 *                             EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_Eididx(EdgesFringe, Eid)[0])
 */
            goto __pyx_L30;
          }

          /* "graph.pyx":1955
 *                             EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_Eididx(EdgesFringe, Eid)[0])
 *                             EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 *                         elif edgeVector == 1.0:             # <<<<<<<<<<<<<<
 *                             if EdgesFringe[EdgesReach_EidVec[0]].second > 0.0:
 *                                 if (remainingDist - EdgesFringe[EdgesReach_EidVec[1]].second) > 1.0:
 */
          __pyx_t_6 = (__pyx_v_edgeVector == 1.0);
          if (__pyx_t_6) {

            /* "graph.pyx":1956
 *                             EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 *                         elif edgeVector == 1.0:
 *                             if EdgesFringe[EdgesReach_EidVec[0]].second > 0.0:             # <<<<<<<<<<<<<<
 *                                 if (remainingDist - EdgesFringe[EdgesReach_EidVec[1]].second) > 1.0:
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_EidVec[0])
 */
            __pyx_t_6 = ((__pyx_v_EdgesFringe[(__pyx_v_EdgesReach_EidVec[0])]).second > 0.0);
            if (__pyx_t_6) {

              /* "graph.pyx":1957
 *                         elif edgeVector == 1.0:
 *                             if EdgesFringe[EdgesReach_EidVec[0]].second > 0.0:
 *                                 if (remainingDist - EdgesFringe[EdgesReach_EidVec[1]].second) > 1.0:             # <<<<<<<<<<<<<<
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_EidVec[0])
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_Eididx(EdgesFringe, Eid)[0])
 */
              __pyx_t_6 = ((__pyx_v_remainingDist - (__pyx_v_EdgesFringe[(__pyx_v_EdgesReach_EidVec[1])]).second) > 1.0);
              if (__pyx_t_6) {

                /* "graph.pyx":1958
 *                             if EdgesFringe[EdgesReach_EidVec[0]].second > 0.0:
 *                                 if (remainingDist - EdgesFringe[EdgesReach_EidVec[1]].second) > 1.0:
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_EidVec[0])             # <<<<<<<<<<<<<<
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_Eididx(EdgesFringe, Eid)[0])
 *                                     EdgesFringe.push_back(pair[int, float](Eid, edgeVector))
 */
                (void)(__pyx_v_EdgesFringe.erase((__pyx_v_EdgesFringe.begin() + (__pyx_v_EdgesReach_EidVec[0]))));

                /* "graph.pyx":1959
 *                                 if (remainingDist - EdgesFringe[EdgesReach_EidVec[1]].second) > 1.0:
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_EidVec[0])
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_Eididx(EdgesFringe, Eid)[0])             # <<<<<<<<<<<<<<
 *                                     EdgesFringe.push_back(pair[int, float](Eid, edgeVector))
 *                                 elif remainingDist > EdgesFringe[EdgesReach_EidVec[0]].second:
 */
                __pyx_t_10 = __pyx_f_5graph_EdgesReach_Eididx(__pyx_v_EdgesFringe, __pyx_v_Eid); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1959, __pyx_L1_error)
                (void)(__pyx_v_EdgesFringe.erase((__pyx_v_EdgesFringe.begin() + (__pyx_t_10[0]))));

                /* "graph.pyx":1960
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_EidVec[0])
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_Eididx(EdgesFringe, Eid)[0])
 *                                     EdgesFringe.push_back(pair[int, float](Eid, edgeVector))             # <<<<<<<<<<<<<<
 *                                 elif remainingDist > EdgesFringe[EdgesReach_EidVec[0]].second:
 *                                     EdgesFringe.erase(EdgesFringe.begin()+ EdgesReach_EidVec[0])
 */
                try {
                  __pyx_t_11 = std::pair<int,float> (__pyx_v_Eid, __pyx_v_edgeVector);
                } catch(...) {
                  __Pyx_CppExn2PyErr();
                  __PYX_ERR(0, 1960, __pyx_L1_error)
                }
                try {
                  __pyx_v_EdgesFringe.push_back(__pyx_t_11);
                } catch(...) {
                  __Pyx_CppExn2PyErr();
                  __PYX_ERR(0, 1960, __pyx_L1_error)
                }

                /* "graph.pyx":1957
 *                         elif edgeVector == 1.0:
 *                             if EdgesFringe[EdgesReach_EidVec[0]].second > 0.0:
 *                                 if (remainingDist - EdgesFringe[EdgesReach_EidVec[1]].second) > 1.0:             # <<<<<<<<<<<<<<
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_EidVec[0])
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_Eididx(EdgesFringe, Eid)[0])
 */
                goto __pyx_L34;
              }

              /* "graph.pyx":1961
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_Eididx(EdgesFringe, Eid)[0])
 *                                     EdgesFringe.push_back(pair[int, float](Eid, edgeVector))
 *                                 elif remainingDist > EdgesFringe[EdgesReach_EidVec[0]].second:             # <<<<<<<<<<<<<<
 *                                     EdgesFringe.erase(EdgesFringe.begin()+ EdgesReach_EidVec[0])
 *                                     EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 */
              __pyx_t_6 = (__pyx_v_remainingDist > (__pyx_v_EdgesFringe[(__pyx_v_EdgesReach_EidVec[0])]).second);
              if (__pyx_t_6) {

                /* "graph.pyx":1962
 *                                     EdgesFringe.push_back(pair[int, float](Eid, edgeVector))
 *                                 elif remainingDist > EdgesFringe[EdgesReach_EidVec[0]].second:
 *                                     EdgesFringe.erase(EdgesFringe.begin()+ EdgesReach_EidVec[0])             # <<<<<<<<<<<<<<
 *                                     EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 *                             else:
 */
                (void)(__pyx_v_EdgesFringe.erase((__pyx_v_EdgesFringe.begin() + (__pyx_v_EdgesReach_EidVec[0]))));

                /* "graph.pyx":1963
 *                                 elif remainingDist > EdgesFringe[EdgesReach_EidVec[0]].second:
 *                                     EdgesFringe.erase(EdgesFringe.begin()+ EdgesReach_EidVec[0])
 *                                     EdgesFringe.push_back(pair[int, float](Eid, remainingDist))             # <<<<<<<<<<<<<<
 *                             else:
 *                                 if (remainingDist - EdgesFringe[EdgesReach_EidVec[0]].second) > 1.0:
 */
                try {
                  __pyx_t_11 = std::pair<int,float> (__pyx_v_Eid, __pyx_v_remainingDist);
                } catch(...) {
                  __Pyx_CppExn2PyErr();
                  __PYX_ERR(0, 1963, __pyx_L1_error)
                }
                try {
                  __pyx_v_EdgesFringe.push_back(__pyx_t_11);
                } catch(...) {
                  __Pyx_CppExn2PyErr();
                  __PYX_ERR(0, 1963, __pyx_L1_error)
                }

                /* "graph.pyx":1961
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_Eididx(EdgesFringe, Eid)[0])
 *                                     EdgesFringe.push_back(pair[int, float](Eid, edgeVector))
 *                                 elif remainingDist > EdgesFringe[EdgesReach_EidVec[0]].second:             # <<<<<<<<<<<<<<
 *                                     EdgesFringe.erase(EdgesFringe.begin()+ EdgesReach_EidVec[0])
 *                                     EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 */
              }
              __pyx_L34:;

              /* "graph.pyx":1956
 *                             EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 *                         elif edgeVector == 1.0:
 *                             if EdgesFringe[EdgesReach_EidVec[0]].second > 0.0:             # <<<<<<<<<<<<<<
 *                                 if (remainingDist - EdgesFringe[EdgesReach_EidVec[1]].second) > 1.0:
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_EidVec[0])
 */
              goto __pyx_L33;
            }

            /* "graph.pyx":1965
 *                                     EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 *                             else:
 *                                 if (remainingDist - EdgesFringe[EdgesReach_EidVec[0]].second) > 1.0:             # <<<<<<<<<<<<<<
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_EidVec[0])
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_Eididx(EdgesFringe, Eid)[0])
 */
            /*else*/ {
              __pyx_t_6 = ((__pyx_v_remainingDist - (__pyx_v_EdgesFringe[(__pyx_v_EdgesReach_EidVec[0])]).second) > 1.0);
              if (__pyx_t_6) {

                /* "graph.pyx":1966
 *                             else:
 *                                 if (remainingDist - EdgesFringe[EdgesReach_EidVec[0]].second) > 1.0:
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_EidVec[0])             # <<<<<<<<<<<<<<
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_Eididx(EdgesFringe, Eid)[0])
 *                                     EdgesFringe.push_back(pair[int, float](Eid, edgeVector))
 */
                (void)(__pyx_v_EdgesFringe.erase((__pyx_v_EdgesFringe.begin() + (__pyx_v_EdgesReach_EidVec[0]))));

                /* "graph.pyx":1967
 *                                 if (remainingDist - EdgesFringe[EdgesReach_EidVec[0]].second) > 1.0:
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_EidVec[0])
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_Eididx(EdgesFringe, Eid)[0])             # <<<<<<<<<<<<<<
 *                                     EdgesFringe.push_back(pair[int, float](Eid, edgeVector))
 *                                 elif remainingDist > EdgesFringe[EdgesReach_EidVec[1]].second:
 */
                __pyx_t_10 = __pyx_f_5graph_EdgesReach_Eididx(__pyx_v_EdgesFringe, __pyx_v_Eid); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1967, __pyx_L1_error)
                (void)(__pyx_v_EdgesFringe.erase((__pyx_v_EdgesFringe.begin() + (__pyx_t_10[0]))));

                /* "graph.pyx":1968
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_EidVec[0])
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_Eididx(EdgesFringe, Eid)[0])
 *                                     EdgesFringe.push_back(pair[int, float](Eid, edgeVector))             # <<<<<<<<<<<<<<
 *                                 elif remainingDist > EdgesFringe[EdgesReach_EidVec[1]].second:
 *                                     EdgesFringe.erase(EdgesFringe.begin()+ EdgesReach_EidVec[1])
 */
                try {
                  __pyx_t_11 = std::pair<int,float> (__pyx_v_Eid, __pyx_v_edgeVector);
                } catch(...) {
                  __Pyx_CppExn2PyErr();
                  __PYX_ERR(0, 1968, __pyx_L1_error)
                }
                try {
                  __pyx_v_EdgesFringe.push_back(__pyx_t_11);
                } catch(...) {
                  __Pyx_CppExn2PyErr();
                  __PYX_ERR(0, 1968, __pyx_L1_error)
                }

                /* "graph.pyx":1965
 *                                     EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 *                             else:
 *                                 if (remainingDist - EdgesFringe[EdgesReach_EidVec[0]].second) > 1.0:             # <<<<<<<<<<<<<<
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_EidVec[0])
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_Eididx(EdgesFringe, Eid)[0])
 */
                goto __pyx_L35;
              }

              /* "graph.pyx":1969
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_Eididx(EdgesFringe, Eid)[0])
 *                                     EdgesFringe.push_back(pair[int, float](Eid, edgeVector))
 *                                 elif remainingDist > EdgesFringe[EdgesReach_EidVec[1]].second:             # <<<<<<<<<<<<<<
 *                                     EdgesFringe.erase(EdgesFringe.begin()+ EdgesReach_EidVec[1])
 *                                     EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 */
              __pyx_t_6 = (__pyx_v_remainingDist > (__pyx_v_EdgesFringe[(__pyx_v_EdgesReach_EidVec[1])]).second);
              if (__pyx_t_6) {

                /* "graph.pyx":1970
 *                                     EdgesFringe.push_back(pair[int, float](Eid, edgeVector))
 *                                 elif remainingDist > EdgesFringe[EdgesReach_EidVec[1]].second:
 *                                     EdgesFringe.erase(EdgesFringe.begin()+ EdgesReach_EidVec[1])             # <<<<<<<<<<<<<<
 *                                     EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 *                         else: # edgeVector == -1.0
 */
                (void)(__pyx_v_EdgesFringe.erase((__pyx_v_EdgesFringe.begin() + (__pyx_v_EdgesReach_EidVec[1]))));

                /* "graph.pyx":1971
 *                                 elif remainingDist > EdgesFringe[EdgesReach_EidVec[1]].second:
 *                                     EdgesFringe.erase(EdgesFringe.begin()+ EdgesReach_EidVec[1])
 *                                     EdgesFringe.push_back(pair[int, float](Eid, remainingDist))             # <<<<<<<<<<<<<<
 *                         else: # edgeVector == -1.0
 *                             if EdgesFringe[EdgesReach_EidVec[0]].second > 0.0:
 */
                try {
                  __pyx_t_11 = std::pair<int,float> (__pyx_v_Eid, __pyx_v_remainingDist);
                } catch(...) {
                  __Pyx_CppExn2PyErr();
                  __PYX_ERR(0, 1971, __pyx_L1_error)
                }
                try {
                  __pyx_v_EdgesFringe.push_back(__pyx_t_11);
                } catch(...) {
                  __Pyx_CppExn2PyErr();
                  __PYX_ERR(0, 1971, __pyx_L1_error)
                }

                /* "graph.pyx":1969
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_Eididx(EdgesFringe, Eid)[0])
 *                                     EdgesFringe.push_back(pair[int, float](Eid, edgeVector))
 *                                 elif remainingDist > EdgesFringe[EdgesReach_EidVec[1]].second:             # <<<<<<<<<<<<<<
 *                                     EdgesFringe.erase(EdgesFringe.begin()+ EdgesReach_EidVec[1])
 *                                     EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 */
              }
              __pyx_L35:;
            }
            __pyx_L33:;

            /* "graph.pyx":1955
 *                             EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_Eididx(EdgesFringe, Eid)[0])
 *                             EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 *                         elif edgeVector == 1.0:             # <<<<<<<<<<<<<<
 *                             if EdgesFringe[EdgesReach_EidVec[0]].second > 0.0:
 *                                 if (remainingDist - EdgesFringe[EdgesReach_EidVec[1]].second) > 1.0:
 */
            goto __pyx_L30;
          }

          /* "graph.pyx":1973
 *                                     EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 *                         else: # edgeVector == -1.0
 *                             if EdgesFringe[EdgesReach_EidVec[0]].second > 0.0:             # <<<<<<<<<<<<<<
 *                                 if (EdgesFringe[EdgesReach_EidVec[0]].second - remainingDist) > 1.0:
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_EidVec[0])
 */
          /*else*/ {
            __pyx_t_6 = ((__pyx_v_EdgesFringe[(__pyx_v_EdgesReach_EidVec[0])]).second > 0.0);
            if (__pyx_t_6) {

              /* "graph.pyx":1974
 *                         else: # edgeVector == -1.0
 *                             if EdgesFringe[EdgesReach_EidVec[0]].second > 0.0:
 *                                 if (EdgesFringe[EdgesReach_EidVec[0]].second - remainingDist) > 1.0:             # <<<<<<<<<<<<<<
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_EidVec[0])
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_Eididx(EdgesFringe, Eid)[0])
 */
              __pyx_t_6 = (((__pyx_v_EdgesFringe[(__pyx_v_EdgesReach_EidVec[0])]).second - __pyx_v_remainingDist) > 1.0);
              if (__pyx_t_6) {

                /* "graph.pyx":1975
 *                             if EdgesFringe[EdgesReach_EidVec[0]].second > 0.0:
 *                                 if (EdgesFringe[EdgesReach_EidVec[0]].second - remainingDist) > 1.0:
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_EidVec[0])             # <<<<<<<<<<<<<<
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_Eididx(EdgesFringe, Eid)[0])
 *                                     EdgesFringe.push_back(pair[int, float](Eid, edgeVector))
 */
                (void)(__pyx_v_EdgesFringe.erase((__pyx_v_EdgesFringe.begin() + (__pyx_v_EdgesReach_EidVec[0]))));

                /* "graph.pyx":1976
 *                                 if (EdgesFringe[EdgesReach_EidVec[0]].second - remainingDist) > 1.0:
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_EidVec[0])
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_Eididx(EdgesFringe, Eid)[0])             # <<<<<<<<<<<<<<
 *                                     EdgesFringe.push_back(pair[int, float](Eid, edgeVector))
 *                                 elif remainingDist < EdgesFringe[EdgesReach_EidVec[1]].second:
 */
                __pyx_t_10 = __pyx_f_5graph_EdgesReach_Eididx(__pyx_v_EdgesFringe, __pyx_v_Eid); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1976, __pyx_L1_error)
                (void)(__pyx_v_EdgesFringe.erase((__pyx_v_EdgesFringe.begin() + (__pyx_t_10[0]))));

                /* "graph.pyx":1977
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_EidVec[0])
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_Eididx(EdgesFringe, Eid)[0])
 *                                     EdgesFringe.push_back(pair[int, float](Eid, edgeVector))             # <<<<<<<<<<<<<<
 *                                 elif remainingDist < EdgesFringe[EdgesReach_EidVec[1]].second:
 *                                     EdgesFringe.erase(EdgesFringe.begin()+ EdgesReach_EidVec[1])
 */
                try {
                  __pyx_t_11 = std::pair<int,float> (__pyx_v_Eid, __pyx_v_edgeVector);
                } catch(...) {
                  __Pyx_CppExn2PyErr();
                  __PYX_ERR(0, 1977, __pyx_L1_error)
                }
                try {
                  __pyx_v_EdgesFringe.push_back(__pyx_t_11);
                } catch(...) {
                  __Pyx_CppExn2PyErr();
                  __PYX_ERR(0, 1977, __pyx_L1_error)
                }

                /* "graph.pyx":1974
 *                         else: # edgeVector == -1.0
 *                             if EdgesFringe[EdgesReach_EidVec[0]].second > 0.0:
 *                                 if (EdgesFringe[EdgesReach_EidVec[0]].second - remainingDist) > 1.0:             # <<<<<<<<<<<<<<
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_EidVec[0])
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_Eididx(EdgesFringe, Eid)[0])
 */
                goto __pyx_L37;
              }

              /* "graph.pyx":1978
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_Eididx(EdgesFringe, Eid)[0])
 *                                     EdgesFringe.push_back(pair[int, float](Eid, edgeVector))
 *                                 elif remainingDist < EdgesFringe[EdgesReach_EidVec[1]].second:             # <<<<<<<<<<<<<<
 *                                     EdgesFringe.erase(EdgesFringe.begin()+ EdgesReach_EidVec[1])
 *                                     EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 */
              __pyx_t_6 = (__pyx_v_remainingDist < (__pyx_v_EdgesFringe[(__pyx_v_EdgesReach_EidVec[1])]).second);
              if (__pyx_t_6) {

                /* "graph.pyx":1979
 *                                     EdgesFringe.push_back(pair[int, float](Eid, edgeVector))
 *                                 elif remainingDist < EdgesFringe[EdgesReach_EidVec[1]].second:
 *                                     EdgesFringe.erase(EdgesFringe.begin()+ EdgesReach_EidVec[1])             # <<<<<<<<<<<<<<
 *                                     EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 *                             else:
 */
                (void)(__pyx_v_EdgesFringe.erase((__pyx_v_EdgesFringe.begin() + (__pyx_v_EdgesReach_EidVec[1]))));

                /* "graph.pyx":1980
 *                                 elif remainingDist < EdgesFringe[EdgesReach_EidVec[1]].second:
 *                                     EdgesFringe.erase(EdgesFringe.begin()+ EdgesReach_EidVec[1])
 *                                     EdgesFringe.push_back(pair[int, float](Eid, remainingDist))             # <<<<<<<<<<<<<<
 *                             else:
 *                                 if (EdgesFringe[EdgesReach_EidVec[1]].second - remainingDist) > 1.0:
 */
                try {
                  __pyx_t_11 = std::pair<int,float> (__pyx_v_Eid, __pyx_v_remainingDist);
                } catch(...) {
                  __Pyx_CppExn2PyErr();
                  __PYX_ERR(0, 1980, __pyx_L1_error)
                }
                try {
                  __pyx_v_EdgesFringe.push_back(__pyx_t_11);
                } catch(...) {
                  __Pyx_CppExn2PyErr();
                  __PYX_ERR(0, 1980, __pyx_L1_error)
                }

                /* "graph.pyx":1978
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_Eididx(EdgesFringe, Eid)[0])
 *                                     EdgesFringe.push_back(pair[int, float](Eid, edgeVector))
 *                                 elif remainingDist < EdgesFringe[EdgesReach_EidVec[1]].second:             # <<<<<<<<<<<<<<
 *                                     EdgesFringe.erase(EdgesFringe.begin()+ EdgesReach_EidVec[1])
 *                                     EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 */
              }
              __pyx_L37:;

              /* "graph.pyx":1973
 *                                     EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 *                         else: # edgeVector == -1.0
 *                             if EdgesFringe[EdgesReach_EidVec[0]].second > 0.0:             # <<<<<<<<<<<<<<
 *                                 if (EdgesFringe[EdgesReach_EidVec[0]].second - remainingDist) > 1.0:
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_EidVec[0])
 */
              goto __pyx_L36;
            }

            /* "graph.pyx":1982
 *                                     EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 *                             else:
 *                                 if (EdgesFringe[EdgesReach_EidVec[1]].second - remainingDist) > 1.0:             # <<<<<<<<<<<<<<
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_EidVec[0])
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_Eididx(EdgesFringe, Eid)[0])
 */
            /*else*/ {
              __pyx_t_6 = (((__pyx_v_EdgesFringe[(__pyx_v_EdgesReach_EidVec[1])]).second - __pyx_v_remainingDist) > 1.0);
              if (__pyx_t_6) {

                /* "graph.pyx":1983
 *                             else:
 *                                 if (EdgesFringe[EdgesReach_EidVec[1]].second - remainingDist) > 1.0:
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_EidVec[0])             # <<<<<<<<<<<<<<
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_Eididx(EdgesFringe, Eid)[0])
 *                                     EdgesFringe.push_back(pair[int, float](Eid, edgeVector))
 */
                (void)(__pyx_v_EdgesFringe.erase((__pyx_v_EdgesFringe.begin() + (__pyx_v_EdgesReach_EidVec[0]))));

                /* "graph.pyx":1984
 *                                 if (EdgesFringe[EdgesReach_EidVec[1]].second - remainingDist) > 1.0:
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_EidVec[0])
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_Eididx(EdgesFringe, Eid)[0])             # <<<<<<<<<<<<<<
 *                                     EdgesFringe.push_back(pair[int, float](Eid, edgeVector))
 *                                 elif remainingDist < EdgesFringe[EdgesReach_EidVec[0]].second:
 */
                __pyx_t_10 = __pyx_f_5graph_EdgesReach_Eididx(__pyx_v_EdgesFringe, __pyx_v_Eid); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1984, __pyx_L1_error)
                (void)(__pyx_v_EdgesFringe.erase((__pyx_v_EdgesFringe.begin() + (__pyx_t_10[0]))));

                /* "graph.pyx":1985
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_EidVec[0])
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_Eididx(EdgesFringe, Eid)[0])
 *                                     EdgesFringe.push_back(pair[int, float](Eid, edgeVector))             # <<<<<<<<<<<<<<
 *                                 elif remainingDist < EdgesFringe[EdgesReach_EidVec[0]].second:
 *                                     EdgesFringe.erase(EdgesFringe.begin()+ EdgesReach_EidVec[0])
 */
                try {
                  __pyx_t_11 = std::pair<int,float> (__pyx_v_Eid, __pyx_v_edgeVector);
                } catch(...) {
                  __Pyx_CppExn2PyErr();
                  __PYX_ERR(0, 1985, __pyx_L1_error)
                }
                try {
                  __pyx_v_EdgesFringe.push_back(__pyx_t_11);
                } catch(...) {
                  __Pyx_CppExn2PyErr();
                  __PYX_ERR(0, 1985, __pyx_L1_error)
                }

                /* "graph.pyx":1982
 *                                     EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 *                             else:
 *                                 if (EdgesFringe[EdgesReach_EidVec[1]].second - remainingDist) > 1.0:             # <<<<<<<<<<<<<<
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_EidVec[0])
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_Eididx(EdgesFringe, Eid)[0])
 */
                goto __pyx_L38;
              }

              /* "graph.pyx":1986
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_Eididx(EdgesFringe, Eid)[0])
 *                                     EdgesFringe.push_back(pair[int, float](Eid, edgeVector))
 *                                 elif remainingDist < EdgesFringe[EdgesReach_EidVec[0]].second:             # <<<<<<<<<<<<<<
 *                                     EdgesFringe.erase(EdgesFringe.begin()+ EdgesReach_EidVec[0])
 *                                     EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 */
              __pyx_t_6 = (__pyx_v_remainingDist < (__pyx_v_EdgesFringe[(__pyx_v_EdgesReach_EidVec[0])]).second);
              if (__pyx_t_6) {

                /* "graph.pyx":1987
 *                                     EdgesFringe.push_back(pair[int, float](Eid, edgeVector))
 *                                 elif remainingDist < EdgesFringe[EdgesReach_EidVec[0]].second:
 *                                     EdgesFringe.erase(EdgesFringe.begin()+ EdgesReach_EidVec[0])             # <<<<<<<<<<<<<<
 *                                     EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 *                     continue
 */
                (void)(__pyx_v_EdgesFringe.erase((__pyx_v_EdgesFringe.begin() + (__pyx_v_EdgesReach_EidVec[0]))));

                /* "graph.pyx":1988
 *                                 elif remainingDist < EdgesFringe[EdgesReach_EidVec[0]].second:
 *                                     EdgesFringe.erase(EdgesFringe.begin()+ EdgesReach_EidVec[0])
 *                                     EdgesFringe.push_back(pair[int, float](Eid, remainingDist))             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
                try {
                  __pyx_t_11 = std::pair<int,float> (__pyx_v_Eid, __pyx_v_remainingDist);
                } catch(...) {
                  __Pyx_CppExn2PyErr();
                  __PYX_ERR(0, 1988, __pyx_L1_error)
                }
                try {
                  __pyx_v_EdgesFringe.push_back(__pyx_t_11);
                } catch(...) {
                  __Pyx_CppExn2PyErr();
                  __PYX_ERR(0, 1988, __pyx_L1_error)
                }

                /* "graph.pyx":1986
 *                                     EdgesFringe.erase(EdgesFringe.begin()+EdgesReach_Eididx(EdgesFringe, Eid)[0])
 *                                     EdgesFringe.push_back(pair[int, float](Eid, edgeVector))
 *                                 elif remainingDist < EdgesFringe[EdgesReach_EidVec[0]].second:             # <<<<<<<<<<<<<<
 *                                     EdgesFringe.erase(EdgesFringe.begin()+ EdgesReach_EidVec[0])
 *                                     EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 */
              }
              __pyx_L38:;
            }
            __pyx_L36:;
          }
          __pyx_L30:;
        }
        __pyx_L15:;

        /* "graph.pyx":1989
 *                                     EdgesFringe.erase(EdgesFringe.begin()+ EdgesReach_EidVec[0])
 *                                     EdgesFringe.push_back(pair[int, float](Eid, remainingDist))
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 NodeReach_T.Nid = NidF
 */
        goto __pyx_L5_continue;

        /* "graph.pyx":1912
 *                 len = lenE + NodeCheck.Dist + self.nodes[NidF].c
 * 
 *                 if len > LimDist:             # <<<<<<<<<<<<<<
 *                     remainingDist = (LimDist - NodeCheck.Dist) / lenE
 *                     if remainingDist > <float>1.0:
 */
      }

      /* "graph.pyx":1991
 *                     continue
 * 
 *                 NodeReach_T.Nid = NidF             # <<<<<<<<<<<<<<
 *                 NodeReach_T.Dist = len
 *                 NodeReach_T.Eid = Eid
 */
      __pyx_v_NodeReach_T.Nid = __pyx_v_NidF;

      /* "graph.pyx":1992
 * 
 *                 NodeReach_T.Nid = NidF
 *                 NodeReach_T.Dist = len             # <<<<<<<<<<<<<<
 *                 NodeReach_T.Eid = Eid
 *                 NodeReach_T.NidO = NodeCheck.Nid
 */
      __pyx_v_NodeReach_T.Dist = __pyx_v_len;

      /* "graph.pyx":1993
 *                 NodeReach_T.Nid = NidF
 *                 NodeReach_T.Dist = len
 *                 NodeReach_T.Eid = Eid             # <<<<<<<<<<<<<<
 *                 NodeReach_T.NidO = NodeCheck.Nid
 *                 NodeReach_T.Weight = len
 */
      __pyx_v_NodeReach_T.Eid = __pyx_v_Eid;

      /* "graph.pyx":1994
 *                 NodeReach_T.Dist = len
 *                 NodeReach_T.Eid = Eid
 *                 NodeReach_T.NidO = NodeCheck.Nid             # <<<<<<<<<<<<<<
 *                 NodeReach_T.Weight = len
 * 
 */
      __pyx_t_9 = __pyx_v_NodeCheck.Nid;
      __pyx_v_NodeReach_T.NidO = __pyx_t_9;

      /* "graph.pyx":1995
 *                 NodeReach_T.Eid = Eid
 *                 NodeReach_T.NidO = NodeCheck.Nid
 *                 NodeReach_T.Weight = len             # <<<<<<<<<<<<<<
 * 
 *                 # check to visited nodes
 */
      __pyx_v_NodeReach_T.Weight = __pyx_v_len;

      /* "graph.pyx":1998
 * 
 *                 # check to visited nodes
 *                 if self.nodeVisited[NidF].Nid == -1 : # if node havent been visited             # <<<<<<<<<<<<<<
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 */
      __pyx_t_6 = ((__pyx_v_self->nodeVisited[__pyx_v_NidF]).Nid == -1L);
      if (__pyx_t_6) {

        /* "graph.pyx":1999
 *                 # check to visited nodes
 *                 if self.nodeVisited[NidF].Nid == -1 : # if node havent been visited
 *                     self.nodeVisited[NidF] = NodeReach_T             # <<<<<<<<<<<<<<
 *                     OpenNodes.push(NodeReach_T)
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance
 */
        (__pyx_v_self->nodeVisited[__pyx_v_NidF]) = __pyx_v_NodeReach_T;

        /* "graph.pyx":2000
 *                 if self.nodeVisited[NidF].Nid == -1 : # if node havent been visited
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)             # <<<<<<<<<<<<<<
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance
 *                     self.nodeVisited[NidF] = NodeReach_T
 */
        ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_NodeReach_T); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2000, __pyx_L1_error)

        /* "graph.pyx":1998
 * 
 *                 # check to visited nodes
 *                 if self.nodeVisited[NidF].Nid == -1 : # if node havent been visited             # <<<<<<<<<<<<<<
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 */
        goto __pyx_L39;
      }

      /* "graph.pyx":2001
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance             # <<<<<<<<<<<<<<
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 */
      __pyx_t_6 = ((__pyx_v_self->nodeVisited[__pyx_v_NidF]).Dist > __pyx_v_len);
      if (__pyx_t_6) {

        /* "graph.pyx":2002
 *                     OpenNodes.push(NodeReach_T)
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance
 *                     self.nodeVisited[NidF] = NodeReach_T             # <<<<<<<<<<<<<<
 *                     OpenNodes.push(NodeReach_T)
 * 
 */
        (__pyx_v_self->nodeVisited[__pyx_v_NidF]) = __pyx_v_NodeReach_T;

        /* "graph.pyx":2003
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)             # <<<<<<<<<<<<<<
 * 
 *             if cycles > LimCycle:
 */
        ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_NodeReach_T); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2003, __pyx_L1_error)

        /* "graph.pyx":2001
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 *                 elif self.nodeVisited[NidF].Dist > len: # if visited node has a higher distance             # <<<<<<<<<<<<<<
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 */
      }
      __pyx_L39:;
      __pyx_L5_continue:;
    }
    __pyx_L6_break:;

    /* "graph.pyx":2005
 *                     OpenNodes.push(NodeReach_T)
 * 
 *             if cycles > LimCycle:             # <<<<<<<<<<<<<<
 *                 # if reaches cycle count limit
 *                 keepGoing = False
 */
    __pyx_t_6 = (__pyx_v_cycles > __pyx_v_LimCycle);
    if (__pyx_t_6) {

      /* "graph.pyx":2007
 *             if cycles > LimCycle:
 *                 # if reaches cycle count limit
 *                 keepGoing = False             # <<<<<<<<<<<<<<
 *             elif OpenNodes.empty():
 *                 keepGoing = False
 */
      __pyx_v_keepGoing = 0;

      /* "graph.pyx":2005
 *                     OpenNodes.push(NodeReach_T)
 * 
 *             if cycles > LimCycle:             # <<<<<<<<<<<<<<
 *                 # if reaches cycle count limit
 *                 keepGoing = False
 */
      goto __pyx_L40;
    }

    /* "graph.pyx":2008
 *                 # if reaches cycle count limit
 *                 keepGoing = False
 *             elif OpenNodes.empty():             # <<<<<<<<<<<<<<
 *                 keepGoing = False
 * 
 */
    __pyx_t_6 = ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->empty(__pyx_v_OpenNodes); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2008, __pyx_L1_error)
    if (__pyx_t_6) {

      /* "graph.pyx":2009
 *                 keepGoing = False
 *             elif OpenNodes.empty():
 *                 keepGoing = False             # <<<<<<<<<<<<<<
 * 
 *         cdef int EdgesReachSize = 0
 */
      __pyx_v_keepGoing = 0;

      /* "graph.pyx":2008
 *                 # if reaches cycle count limit
 *                 keepGoing = False
 *             elif OpenNodes.empty():             # <<<<<<<<<<<<<<
 *                 keepGoing = False
 * 
 */
    }
    __pyx_L40:;
  }

  /* "graph.pyx":2011
 *                 keepGoing = False
 * 
 *         cdef int EdgesReachSize = 0             # <<<<<<<<<<<<<<
 * 
 *         for i in range(self.Nnodes):
 */
  __pyx_v_EdgesReachSize = 0;

  /* "graph.pyx":2013
 *         cdef int EdgesReachSize = 0
 * 
 *         for i in range(self.Nnodes):             # <<<<<<<<<<<<<<
 *             if self.nodeVisited[i].Nid == -1:
 *                 continue
 */
  __pyx_t_3 = __pyx_v_self->Nnodes;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "graph.pyx":2014
 * 
 *         for i in range(self.Nnodes):
 *             if self.nodeVisited[i].Nid == -1:             # <<<<<<<<<<<<<<
 *                 continue
 *             NodeReach_T = self.nodeVisited[i]
 */
    __pyx_t_6 = ((__pyx_v_self->nodeVisited[__pyx_v_i]).Nid == -1L);
    if (__pyx_t_6) {

      /* "graph.pyx":2015
 *         for i in range(self.Nnodes):
 *             if self.nodeVisited[i].Nid == -1:
 *                 continue             # <<<<<<<<<<<<<<
 *             NodeReach_T = self.nodeVisited[i]
 * 
 */
      goto __pyx_L41_continue;

      /* "graph.pyx":2014
 * 
 *         for i in range(self.Nnodes):
 *             if self.nodeVisited[i].Nid == -1:             # <<<<<<<<<<<<<<
 *                 continue
 *             NodeReach_T = self.nodeVisited[i]
 */
    }

    /* "graph.pyx":2016
 *             if self.nodeVisited[i].Nid == -1:
 *                 continue
 *             NodeReach_T = self.nodeVisited[i]             # <<<<<<<<<<<<<<
 * 
 *             if self.edges[NodeReach_T.Eid].NidO == NodeReach_T.Nid:
 */
    __pyx_v_NodeReach_T = (__pyx_v_self->nodeVisited[__pyx_v_i]);

    /* "graph.pyx":2018
 *             NodeReach_T = self.nodeVisited[i]
 * 
 *             if self.edges[NodeReach_T.Eid].NidO == NodeReach_T.Nid:             # <<<<<<<<<<<<<<
 *                 edgeVector = 1.0
 *             else:
 */
    __pyx_t_6 = ((__pyx_v_self->edges[__pyx_v_NodeReach_T.Eid]).NidO == __pyx_v_NodeReach_T.Nid);
    if (__pyx_t_6) {

      /* "graph.pyx":2019
 * 
 *             if self.edges[NodeReach_T.Eid].NidO == NodeReach_T.Nid:
 *                 edgeVector = 1.0             # <<<<<<<<<<<<<<
 *             else:
 *                 edgeVector = -1.0
 */
      __pyx_v_edgeVector = 1.0;

      /* "graph.pyx":2018
 *             NodeReach_T = self.nodeVisited[i]
 * 
 *             if self.edges[NodeReach_T.Eid].NidO == NodeReach_T.Nid:             # <<<<<<<<<<<<<<
 *                 edgeVector = 1.0
 *             else:
 */
      goto __pyx_L44;
    }

    /* "graph.pyx":2021
 *                 edgeVector = 1.0
 *             else:
 *                 edgeVector = -1.0             # <<<<<<<<<<<<<<
 *             EdgesReachSize += 1
 *             EdgesReach.push_back(pair[int, float](NodeReach_T.Eid, edgeVector))
 */
    /*else*/ {
      __pyx_v_edgeVector = -1.0;
    }
    __pyx_L44:;

    /* "graph.pyx":2022
 *             else:
 *                 edgeVector = -1.0
 *             EdgesReachSize += 1             # <<<<<<<<<<<<<<
 *             EdgesReach.push_back(pair[int, float](NodeReach_T.Eid, edgeVector))
 *         outtup = tuple(EdgesReach[n] for n in range(EdgesReach.size()))
 */
    __pyx_v_EdgesReachSize = (__pyx_v_EdgesReachSize + 1);

    /* "graph.pyx":2023
 *                 edgeVector = -1.0
 *             EdgesReachSize += 1
 *             EdgesReach.push_back(pair[int, float](NodeReach_T.Eid, edgeVector))             # <<<<<<<<<<<<<<
 *         outtup = tuple(EdgesReach[n] for n in range(EdgesReach.size()))
 * 
 */
    try {
      __pyx_t_11 = std::pair<int,float> (__pyx_v_NodeReach_T.Eid, __pyx_v_edgeVector);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 2023, __pyx_L1_error)
    }
    try {
      __pyx_cur_scope->__pyx_v_EdgesReach.push_back(__pyx_t_11);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 2023, __pyx_L1_error)
    }
    __pyx_L41_continue:;
  }

  /* "graph.pyx":2024
 *             EdgesReachSize += 1
 *             EdgesReach.push_back(pair[int, float](NodeReach_T.Eid, edgeVector))
 *         outtup = tuple(EdgesReach[n] for n in range(EdgesReach.size()))             # <<<<<<<<<<<<<<
 * 
 *         EdgesReach.insert(EdgesReach.end(), EdgesFringe.begin(), EdgesFringe.end())
 */
  __pyx_t_1 = __pyx_pf_5graph_7GraphCy_9PathReach_genexpr(((PyObject*)__pyx_cur_scope), __pyx_cur_scope->__pyx_v_EdgesReach.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2024, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_12 = __Pyx_PySequence_Tuple(__pyx_t_1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2024, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_outtup = ((PyObject*)__pyx_t_12);
  __pyx_t_12 = 0;

  /* "graph.pyx":2026
 *         outtup = tuple(EdgesReach[n] for n in range(EdgesReach.size()))
 * 
 *         EdgesReach.insert(EdgesReach.end(), EdgesFringe.begin(), EdgesFringe.end())             # <<<<<<<<<<<<<<
 * 
 *         outtup = tuple((v.first, v.second) for v in EdgesReach)
 */
  try {
    __pyx_cur_scope->__pyx_v_EdgesReach.insert(__pyx_cur_scope->__pyx_v_EdgesReach.end(), __pyx_v_EdgesFringe.begin(), __pyx_v_EdgesFringe.end());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2026, __pyx_L1_error)
  }

  /* "graph.pyx":2028
 *         EdgesReach.insert(EdgesReach.end(), EdgesFringe.begin(), EdgesFringe.end())
 * 
 *         outtup = tuple((v.first, v.second) for v in EdgesReach)             # <<<<<<<<<<<<<<
 *         EdgesReach.clear()
 *         return outtup
 */
  __pyx_t_12 = __pyx_pf_5graph_7GraphCy_9PathReach_3genexpr(NULL, __pyx_cur_scope->__pyx_v_EdgesReach); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2028, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_1 = __Pyx_PySequence_Tuple(__pyx_t_12); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2028, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF_SET(__pyx_v_outtup, ((PyObject*)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "graph.pyx":2029
 * 
 *         outtup = tuple((v.first, v.second) for v in EdgesReach)
 *         EdgesReach.clear()             # <<<<<<<<<<<<<<
 *         return outtup
 * 
 */
  __pyx_cur_scope->__pyx_v_EdgesReach.clear();

  /* "graph.pyx":2030
 *         outtup = tuple((v.first, v.second) for v in EdgesReach)
 *         EdgesReach.clear()
 *         return outtup             # <<<<<<<<<<<<<<
 * 
 *     cdef void C_NodeMap_AStar(
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_outtup);
  __pyx_r = __pyx_v_outtup;
  goto __pyx_L0;

  /* "graph.pyx":1823
 *         return (-1.0, -1.0)
 * 
 *     def PathReach(self, int NidO, float LimDist = 1_000.0, int LimCycle = 10_000) -> tuple[tuple[int, float]]:             # <<<<<<<<<<<<<<
 *         """
 *         Finds Edges within reach
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("graph.GraphCy.PathReach", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_OpenNodes);
  __Pyx_XDECREF(__pyx_v_outtup);
  __Pyx_XDECREF(__pyx_gb_5graph_7GraphCy_9PathReach_2generator5);
  __Pyx_XDECREF(__pyx_gb_5graph_7GraphCy_9PathReach_5generator6);
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":2032
 *         return outtup
 * 
 *     cdef void C_NodeMap_AStar(             # <<<<<<<<<<<<<<
 *                 self,
 *                 const int& NidO, const int& NidD,
 */

static void __pyx_f_5graph_7GraphCy_C_NodeMap_AStar(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, int const &__pyx_v_NidO, int const &__pyx_v_NidD, struct __pyx_opt_args_5graph_7GraphCy_C_NodeMap_AStar *__pyx_optional_args) {
  float __pyx_v_DistMin = __pyx_k__20;
  float __pyx_v_DistMulLim = ((float)1.2);
  int __pyx_v_ReverseEdge = ((int)0);
  float __pyx_v_LimDist = ((float)10000.0);
  int __pyx_v_LimCycle = ((int)0x2710);
  float __pyx_v_DistMul = ((float)1.0);
  float __pyx_v_EdgeCmin = ((float)0.9);
  int __pyx_v_cycles;
  int __pyx_v_keepGoing;
  float __pyx_v_BaseDist;
  struct __pyx_obj_5graph_PriorityQueue_NR *__pyx_v_OpenNodes = 0;
  struct __pyx_t_5graph_NodeReach __pyx_v_startNode;
  struct __pyx_t_5graph_NodeReach __pyx_v_NodeReach_T;
  int __pyx_v_NidF;
  float __pyx_v_len;
  struct __pyx_t_5graph_Edge __pyx_v_EdgeC;
  struct __pyx_t_5graph_NodeReach __pyx_v_NodeCheck;
  struct __pyx_t_5graph_Node __pyx_v_NodeTarget;
  int __pyx_v_i;
  float __pyx_v_DistC_Target;
  int __pyx_v_Eid;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  struct __pyx_t_5graph_NodeReach __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("C_NodeMap_AStar", 1);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_DistMin = __pyx_optional_args->DistMin;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_DistMulLim = __pyx_optional_args->DistMulLim;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_ReverseEdge = __pyx_optional_args->ReverseEdge;
          if (__pyx_optional_args->__pyx_n > 3) {
            __pyx_v_LimDist = __pyx_optional_args->LimDist;
            if (__pyx_optional_args->__pyx_n > 4) {
              __pyx_v_LimCycle = __pyx_optional_args->LimCycle;
              if (__pyx_optional_args->__pyx_n > 5) {
                __pyx_v_DistMul = __pyx_optional_args->DistMul;
                if (__pyx_optional_args->__pyx_n > 6) {
                  __pyx_v_EdgeCmin = __pyx_optional_args->EdgeCmin;
                }
              }
            }
          }
        }
      }
    }
  }

  /* "graph.pyx":2077
 *         As a supporting function for multipath.
 *         """
 *         self.C_Reset_NodeVisited()             # <<<<<<<<<<<<<<
 * 
 *         # START
 */
  __pyx_f_5graph_7GraphCy_C_Reset_NodeVisited(__pyx_v_self, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2077, __pyx_L1_error)

  /* "graph.pyx":2081
 *         # START
 *         cdef int cycles
 *         cycles = 1             # <<<<<<<<<<<<<<
 *         cdef bint keepGoing
 *         keepGoing = True
 */
  __pyx_v_cycles = 1;

  /* "graph.pyx":2083
 *         cycles = 1
 *         cdef bint keepGoing
 *         keepGoing = True             # <<<<<<<<<<<<<<
 *         cdef float BaseDist = dist3d(self.nodes[NidO], self.nodes[NidD])
 *         # cdef vector[NodeReach] OpenNodes
 */
  __pyx_v_keepGoing = 1;

  /* "graph.pyx":2084
 *         cdef bint keepGoing
 *         keepGoing = True
 *         cdef float BaseDist = dist3d(self.nodes[NidO], self.nodes[NidD])             # <<<<<<<<<<<<<<
 *         # cdef vector[NodeReach] OpenNodes
 *         cdef PriorityQueue_NR OpenNodes
 */
  __pyx_t_1 = __pyx_f_5graph_dist3d((__pyx_v_self->nodes[__pyx_v_NidO]), (__pyx_v_self->nodes[__pyx_v_NidD])); if (unlikely(__pyx_t_1 == ((float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2084, __pyx_L1_error)
  __pyx_v_BaseDist = __pyx_t_1;

  /* "graph.pyx":2088
 *         cdef PriorityQueue_NR OpenNodes
 *         cdef NodeReach startNode
 *         startNode.Nid = NidO             # <<<<<<<<<<<<<<
 *         startNode.Eid = -1
 *         startNode.Dist = 0.0
 */
  __pyx_v_startNode.Nid = __pyx_v_NidO;

  /* "graph.pyx":2089
 *         cdef NodeReach startNode
 *         startNode.Nid = NidO
 *         startNode.Eid = -1             # <<<<<<<<<<<<<<
 *         startNode.Dist = 0.0
 *         startNode.NidO = -1
 */
  __pyx_v_startNode.Eid = -1;

  /* "graph.pyx":2090
 *         startNode.Nid = NidO
 *         startNode.Eid = -1
 *         startNode.Dist = 0.0             # <<<<<<<<<<<<<<
 *         startNode.NidO = -1
 *         startNode.Weight = 0.0
 */
  __pyx_v_startNode.Dist = 0.0;

  /* "graph.pyx":2091
 *         startNode.Eid = -1
 *         startNode.Dist = 0.0
 *         startNode.NidO = -1             # <<<<<<<<<<<<<<
 *         startNode.Weight = 0.0
 *         self.nodeVisited[NidO] = startNode
 */
  __pyx_v_startNode.NidO = -1;

  /* "graph.pyx":2092
 *         startNode.Dist = 0.0
 *         startNode.NidO = -1
 *         startNode.Weight = 0.0             # <<<<<<<<<<<<<<
 *         self.nodeVisited[NidO] = startNode
 *         OpenNodes = PriorityQueue_NR()
 */
  __pyx_v_startNode.Weight = 0.0;

  /* "graph.pyx":2093
 *         startNode.NidO = -1
 *         startNode.Weight = 0.0
 *         self.nodeVisited[NidO] = startNode             # <<<<<<<<<<<<<<
 *         OpenNodes = PriorityQueue_NR()
 *         OpenNodes.push(startNode)
 */
  (__pyx_v_self->nodeVisited[__pyx_v_NidO]) = __pyx_v_startNode;

  /* "graph.pyx":2094
 *         startNode.Weight = 0.0
 *         self.nodeVisited[NidO] = startNode
 *         OpenNodes = PriorityQueue_NR()             # <<<<<<<<<<<<<<
 *         OpenNodes.push(startNode)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5graph_PriorityQueue_NR)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2094, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_OpenNodes = ((struct __pyx_obj_5graph_PriorityQueue_NR *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "graph.pyx":2095
 *         self.nodeVisited[NidO] = startNode
 *         OpenNodes = PriorityQueue_NR()
 *         OpenNodes.push(startNode)             # <<<<<<<<<<<<<<
 * 
 *         cdef NodeReach NodeReach_T
 */
  ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_startNode); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2095, __pyx_L1_error)

  /* "graph.pyx":2103
 *         cdef NodeReach NodeCheck
 *         cdef Node NodeTarget
 *         NodeTarget = self.nodes[NidD]             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[int] pth
 */
  __pyx_v_NodeTarget = (__pyx_v_self->nodes[__pyx_v_NidD]);

  /* "graph.pyx":2111
 * 
 *         # check distmin
 *         if DistMin == -1.0:             # <<<<<<<<<<<<<<
 *             DistMin = self.PathDist_AStar(NidO, NidD, LimDist, LimCycle, DistMul)
 *             if DistMin == -1.0:
 */
  __pyx_t_3 = (__pyx_v_DistMin == -1.0);
  if (__pyx_t_3) {

    /* "graph.pyx":2112
 *         # check distmin
 *         if DistMin == -1.0:
 *             DistMin = self.PathDist_AStar(NidO, NidD, LimDist, LimCycle, DistMul)             # <<<<<<<<<<<<<<
 *             if DistMin == -1.0:
 *                 return
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_PathDist_AStar); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_NidO); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_NidD); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_LimDist); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_LimCycle); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = PyFloat_FromDouble(__pyx_v_DistMul); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = NULL;
    __pyx_t_11 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_11 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[6] = {__pyx_t_10, __pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_11, 5+__pyx_t_11);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2112, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_t_1 = __pyx_PyFloat_AsFloat(__pyx_t_2); if (unlikely((__pyx_t_1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2112, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_DistMin = __pyx_t_1;

    /* "graph.pyx":2113
 *         if DistMin == -1.0:
 *             DistMin = self.PathDist_AStar(NidO, NidD, LimDist, LimCycle, DistMul)
 *             if DistMin == -1.0:             # <<<<<<<<<<<<<<
 *                 return
 * 
 */
    __pyx_t_3 = (__pyx_v_DistMin == -1.0);
    if (__pyx_t_3) {

      /* "graph.pyx":2114
 *             DistMin = self.PathDist_AStar(NidO, NidD, LimDist, LimCycle, DistMul)
 *             if DistMin == -1.0:
 *                 return             # <<<<<<<<<<<<<<
 * 
 *         DistMin = DistMin * DistMulLim
 */
      goto __pyx_L0;

      /* "graph.pyx":2113
 *         if DistMin == -1.0:
 *             DistMin = self.PathDist_AStar(NidO, NidD, LimDist, LimCycle, DistMul)
 *             if DistMin == -1.0:             # <<<<<<<<<<<<<<
 *                 return
 * 
 */
    }

    /* "graph.pyx":2111
 * 
 *         # check distmin
 *         if DistMin == -1.0:             # <<<<<<<<<<<<<<
 *             DistMin = self.PathDist_AStar(NidO, NidD, LimDist, LimCycle, DistMul)
 *             if DistMin == -1.0:
 */
  }

  /* "graph.pyx":2116
 *                 return
 * 
 *         DistMin = DistMin * DistMulLim             # <<<<<<<<<<<<<<
 * 
 *         while keepGoing:
 */
  __pyx_v_DistMin = (__pyx_v_DistMin * __pyx_v_DistMulLim);

  /* "graph.pyx":2118
 *         DistMin = DistMin * DistMulLim
 * 
 *         while keepGoing:             # <<<<<<<<<<<<<<
 *             cycles += 1
 *             # check paths from OpenNodes
 */
  while (1) {
    if (!__pyx_v_keepGoing) break;

    /* "graph.pyx":2119
 * 
 *         while keepGoing:
 *             cycles += 1             # <<<<<<<<<<<<<<
 *             # check paths from OpenNodes
 *             NodeCheck = OpenNodes.pop_top()
 */
    __pyx_v_cycles = (__pyx_v_cycles + 1);

    /* "graph.pyx":2121
 *             cycles += 1
 *             # check paths from OpenNodes
 *             NodeCheck = OpenNodes.pop_top()             # <<<<<<<<<<<<<<
 * 
 *             for i in range(self.EidN):
 */
    __pyx_t_12 = ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->pop_top(__pyx_v_OpenNodes); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2121, __pyx_L1_error)
    __pyx_v_NodeCheck = __pyx_t_12;

    /* "graph.pyx":2123
 *             NodeCheck = OpenNodes.pop_top()
 * 
 *             for i in range(self.EidN):             # <<<<<<<<<<<<<<
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1:
 */
    __pyx_t_11 = __pyx_v_self->EidN;
    __pyx_t_13 = __pyx_t_11;
    for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
      __pyx_v_i = __pyx_t_14;

      /* "graph.pyx":2124
 * 
 *             for i in range(self.EidN):
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]             # <<<<<<<<<<<<<<
 *                 if Eid == -1:
 *                     break
 */
      __pyx_v_Eid = ((__pyx_v_self->nodes[__pyx_v_NodeCheck.Nid]).Eid[__pyx_v_i]);

      /* "graph.pyx":2125
 *             for i in range(self.EidN):
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1:             # <<<<<<<<<<<<<<
 *                     break
 *                 if Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 */
      __pyx_t_3 = (__pyx_v_Eid == -1L);
      if (__pyx_t_3) {

        /* "graph.pyx":2126
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1:
 *                     break             # <<<<<<<<<<<<<<
 *                 if Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 *                     continue
 */
        goto __pyx_L8_break;

        /* "graph.pyx":2125
 *             for i in range(self.EidN):
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1:             # <<<<<<<<<<<<<<
 *                     break
 *                 if Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 */
      }

      /* "graph.pyx":2127
 *                 if Eid == -1:
 *                     break
 *                 if Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:             # <<<<<<<<<<<<<<
 *                     continue
 *                 # possible new path
 */
      __pyx_t_15 = (__pyx_v_Eid == __pyx_v_NodeCheck.Eid);
      if (!__pyx_t_15) {
      } else {
        __pyx_t_3 = __pyx_t_15;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_15 = ((__pyx_v_self->_edgesIds[__pyx_v_Eid]) == -1L);
      __pyx_t_3 = __pyx_t_15;
      __pyx_L11_bool_binop_done:;
      if (__pyx_t_3) {

        /* "graph.pyx":2128
 *                     break
 *                 if Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 *                     continue             # <<<<<<<<<<<<<<
 *                 # possible new path
 *                 # new node?
 */
        goto __pyx_L7_continue;

        /* "graph.pyx":2127
 *                 if Eid == -1:
 *                     break
 *                 if Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:             # <<<<<<<<<<<<<<
 *                     continue
 *                 # possible new path
 */
      }

      /* "graph.pyx":2131
 *                 # possible new path
 *                 # new node?
 *                 EdgeC = self.edges[Eid]             # <<<<<<<<<<<<<<
 *                 if not ReverseEdge:
 *                     if EdgeC.NidO == NodeCheck.Nid:
 */
      __pyx_v_EdgeC = (__pyx_v_self->edges[__pyx_v_Eid]);

      /* "graph.pyx":2132
 *                 # new node?
 *                 EdgeC = self.edges[Eid]
 *                 if not ReverseEdge:             # <<<<<<<<<<<<<<
 *                     if EdgeC.NidO == NodeCheck.Nid:
 *                         len = EdgeC.len
 */
      __pyx_t_3 = (!__pyx_v_ReverseEdge);
      if (__pyx_t_3) {

        /* "graph.pyx":2133
 *                 EdgeC = self.edges[Eid]
 *                 if not ReverseEdge:
 *                     if EdgeC.NidO == NodeCheck.Nid:             # <<<<<<<<<<<<<<
 *                         len = EdgeC.len
 *                         NidF = EdgeC.NidD
 */
        __pyx_t_3 = (__pyx_v_EdgeC.NidO == __pyx_v_NodeCheck.Nid);
        if (__pyx_t_3) {

          /* "graph.pyx":2134
 *                 if not ReverseEdge:
 *                     if EdgeC.NidO == NodeCheck.Nid:
 *                         len = EdgeC.len             # <<<<<<<<<<<<<<
 *                         NidF = EdgeC.NidD
 *                     else :
 */
          __pyx_t_1 = __pyx_v_EdgeC.len;
          __pyx_v_len = __pyx_t_1;

          /* "graph.pyx":2135
 *                     if EdgeC.NidO == NodeCheck.Nid:
 *                         len = EdgeC.len
 *                         NidF = EdgeC.NidD             # <<<<<<<<<<<<<<
 *                     else :
 *                         len = EdgeC.lenR
 */
          __pyx_t_16 = __pyx_v_EdgeC.NidD;
          __pyx_v_NidF = __pyx_t_16;

          /* "graph.pyx":2133
 *                 EdgeC = self.edges[Eid]
 *                 if not ReverseEdge:
 *                     if EdgeC.NidO == NodeCheck.Nid:             # <<<<<<<<<<<<<<
 *                         len = EdgeC.len
 *                         NidF = EdgeC.NidD
 */
          goto __pyx_L14;
        }

        /* "graph.pyx":2137
 *                         NidF = EdgeC.NidD
 *                     else :
 *                         len = EdgeC.lenR             # <<<<<<<<<<<<<<
 *                         NidF = EdgeC.NidO
 *                 else:
 */
        /*else*/ {
          __pyx_t_1 = __pyx_v_EdgeC.lenR;
          __pyx_v_len = __pyx_t_1;

          /* "graph.pyx":2138
 *                     else :
 *                         len = EdgeC.lenR
 *                         NidF = EdgeC.NidO             # <<<<<<<<<<<<<<
 *                 else:
 *                     if EdgeC.NidO == NodeCheck.Nid:
 */
          __pyx_t_16 = __pyx_v_EdgeC.NidO;
          __pyx_v_NidF = __pyx_t_16;
        }
        __pyx_L14:;

        /* "graph.pyx":2132
 *                 # new node?
 *                 EdgeC = self.edges[Eid]
 *                 if not ReverseEdge:             # <<<<<<<<<<<<<<
 *                     if EdgeC.NidO == NodeCheck.Nid:
 *                         len = EdgeC.len
 */
        goto __pyx_L13;
      }

      /* "graph.pyx":2140
 *                         NidF = EdgeC.NidO
 *                 else:
 *                     if EdgeC.NidO == NodeCheck.Nid:             # <<<<<<<<<<<<<<
 *                         len = EdgeC.lenR
 *                         NidF = EdgeC.NidD
 */
      /*else*/ {
        __pyx_t_3 = (__pyx_v_EdgeC.NidO == __pyx_v_NodeCheck.Nid);
        if (__pyx_t_3) {

          /* "graph.pyx":2141
 *                 else:
 *                     if EdgeC.NidO == NodeCheck.Nid:
 *                         len = EdgeC.lenR             # <<<<<<<<<<<<<<
 *                         NidF = EdgeC.NidD
 *                     else :
 */
          __pyx_t_1 = __pyx_v_EdgeC.lenR;
          __pyx_v_len = __pyx_t_1;

          /* "graph.pyx":2142
 *                     if EdgeC.NidO == NodeCheck.Nid:
 *                         len = EdgeC.lenR
 *                         NidF = EdgeC.NidD             # <<<<<<<<<<<<<<
 *                     else :
 *                         len = EdgeC.len
 */
          __pyx_t_16 = __pyx_v_EdgeC.NidD;
          __pyx_v_NidF = __pyx_t_16;

          /* "graph.pyx":2140
 *                         NidF = EdgeC.NidO
 *                 else:
 *                     if EdgeC.NidO == NodeCheck.Nid:             # <<<<<<<<<<<<<<
 *                         len = EdgeC.lenR
 *                         NidF = EdgeC.NidD
 */
          goto __pyx_L15;
        }

        /* "graph.pyx":2144
 *                         NidF = EdgeC.NidD
 *                     else :
 *                         len = EdgeC.len             # <<<<<<<<<<<<<<
 *                         NidF = EdgeC.NidO
 * 
 */
        /*else*/ {
          __pyx_t_1 = __pyx_v_EdgeC.len;
          __pyx_v_len = __pyx_t_1;

          /* "graph.pyx":2145
 *                     else :
 *                         len = EdgeC.len
 *                         NidF = EdgeC.NidO             # <<<<<<<<<<<<<<
 * 
 *                 len += NodeCheck.Dist + self.nodes[NidF].c
 */
          __pyx_t_16 = __pyx_v_EdgeC.NidO;
          __pyx_v_NidF = __pyx_t_16;
        }
        __pyx_L15:;
      }
      __pyx_L13:;

      /* "graph.pyx":2147
 *                         NidF = EdgeC.NidO
 * 
 *                 len += NodeCheck.Dist + self.nodes[NidF].c             # <<<<<<<<<<<<<<
 *                 DistC_Target = dist3d(self.nodes[NidF], NodeTarget)
 * 
 */
      __pyx_v_len = (__pyx_v_len + (__pyx_v_NodeCheck.Dist + (__pyx_v_self->nodes[__pyx_v_NidF]).c));

      /* "graph.pyx":2148
 * 
 *                 len += NodeCheck.Dist + self.nodes[NidF].c
 *                 DistC_Target = dist3d(self.nodes[NidF], NodeTarget)             # <<<<<<<<<<<<<<
 * 
 *                 if (len + DistC_Target*EdgeCmin) > DistMin: # check if there is still a propable remaining distance to target
 */
      __pyx_t_1 = __pyx_f_5graph_dist3d((__pyx_v_self->nodes[__pyx_v_NidF]), __pyx_v_NodeTarget); if (unlikely(__pyx_t_1 == ((float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2148, __pyx_L1_error)
      __pyx_v_DistC_Target = __pyx_t_1;

      /* "graph.pyx":2150
 *                 DistC_Target = dist3d(self.nodes[NidF], NodeTarget)
 * 
 *                 if (len + DistC_Target*EdgeCmin) > DistMin: # check if there is still a propable remaining distance to target             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      __pyx_t_3 = ((__pyx_v_len + (__pyx_v_DistC_Target * __pyx_v_EdgeCmin)) > __pyx_v_DistMin);
      if (__pyx_t_3) {

        /* "graph.pyx":2151
 * 
 *                 if (len + DistC_Target*EdgeCmin) > DistMin: # check if there is still a propable remaining distance to target
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 NodeReach_T.Nid = NidF
 */
        goto __pyx_L7_continue;

        /* "graph.pyx":2150
 *                 DistC_Target = dist3d(self.nodes[NidF], NodeTarget)
 * 
 *                 if (len + DistC_Target*EdgeCmin) > DistMin: # check if there is still a propable remaining distance to target             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      }

      /* "graph.pyx":2153
 *                     continue
 * 
 *                 NodeReach_T.Nid = NidF             # <<<<<<<<<<<<<<
 *                 NodeReach_T.Dist = len
 *                 NodeReach_T.Eid = Eid
 */
      __pyx_v_NodeReach_T.Nid = __pyx_v_NidF;

      /* "graph.pyx":2154
 * 
 *                 NodeReach_T.Nid = NidF
 *                 NodeReach_T.Dist = len             # <<<<<<<<<<<<<<
 *                 NodeReach_T.Eid = Eid
 *                 NodeReach_T.NidO = NodeCheck.Nid
 */
      __pyx_v_NodeReach_T.Dist = __pyx_v_len;

      /* "graph.pyx":2155
 *                 NodeReach_T.Nid = NidF
 *                 NodeReach_T.Dist = len
 *                 NodeReach_T.Eid = Eid             # <<<<<<<<<<<<<<
 *                 NodeReach_T.NidO = NodeCheck.Nid
 *                 NodeReach_T.Weight = len + (DistC_Target - BaseDist) * DistMul
 */
      __pyx_v_NodeReach_T.Eid = __pyx_v_Eid;

      /* "graph.pyx":2156
 *                 NodeReach_T.Dist = len
 *                 NodeReach_T.Eid = Eid
 *                 NodeReach_T.NidO = NodeCheck.Nid             # <<<<<<<<<<<<<<
 *                 NodeReach_T.Weight = len + (DistC_Target - BaseDist) * DistMul
 * 
 */
      __pyx_t_16 = __pyx_v_NodeCheck.Nid;
      __pyx_v_NodeReach_T.NidO = __pyx_t_16;

      /* "graph.pyx":2157
 *                 NodeReach_T.Eid = Eid
 *                 NodeReach_T.NidO = NodeCheck.Nid
 *                 NodeReach_T.Weight = len + (DistC_Target - BaseDist) * DistMul             # <<<<<<<<<<<<<<
 * 
 *                 # check to visited nodes
 */
      __pyx_v_NodeReach_T.Weight = (__pyx_v_len + ((__pyx_v_DistC_Target - __pyx_v_BaseDist) * __pyx_v_DistMul));

      /* "graph.pyx":2160
 * 
 *                 # check to visited nodes
 *                 if self.nodeVisited[NidF].Nid == -1 or self.nodeVisited[NidF].Dist > len: # if node havent been visited             # <<<<<<<<<<<<<<
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 */
      __pyx_t_15 = ((__pyx_v_self->nodeVisited[__pyx_v_NidF]).Nid == -1L);
      if (!__pyx_t_15) {
      } else {
        __pyx_t_3 = __pyx_t_15;
        goto __pyx_L18_bool_binop_done;
      }
      __pyx_t_15 = ((__pyx_v_self->nodeVisited[__pyx_v_NidF]).Dist > __pyx_v_len);
      __pyx_t_3 = __pyx_t_15;
      __pyx_L18_bool_binop_done:;
      if (__pyx_t_3) {

        /* "graph.pyx":2161
 *                 # check to visited nodes
 *                 if self.nodeVisited[NidF].Nid == -1 or self.nodeVisited[NidF].Dist > len: # if node havent been visited
 *                     self.nodeVisited[NidF] = NodeReach_T             # <<<<<<<<<<<<<<
 *                     OpenNodes.push(NodeReach_T)
 *             if OpenNodes.empty():
 */
        (__pyx_v_self->nodeVisited[__pyx_v_NidF]) = __pyx_v_NodeReach_T;

        /* "graph.pyx":2162
 *                 if self.nodeVisited[NidF].Nid == -1 or self.nodeVisited[NidF].Dist > len: # if node havent been visited
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)             # <<<<<<<<<<<<<<
 *             if OpenNodes.empty():
 *                 break
 */
        ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_NodeReach_T); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2162, __pyx_L1_error)

        /* "graph.pyx":2160
 * 
 *                 # check to visited nodes
 *                 if self.nodeVisited[NidF].Nid == -1 or self.nodeVisited[NidF].Dist > len: # if node havent been visited             # <<<<<<<<<<<<<<
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 */
      }
      __pyx_L7_continue:;
    }
    __pyx_L8_break:;

    /* "graph.pyx":2163
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 *             if OpenNodes.empty():             # <<<<<<<<<<<<<<
 *                 break
 *             elif cycles > LimCycle or OpenNodes.top().Dist > LimDist:
 */
    __pyx_t_3 = ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->empty(__pyx_v_OpenNodes); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2163, __pyx_L1_error)
    if (__pyx_t_3) {

      /* "graph.pyx":2164
 *                     OpenNodes.push(NodeReach_T)
 *             if OpenNodes.empty():
 *                 break             # <<<<<<<<<<<<<<
 *             elif cycles > LimCycle or OpenNodes.top().Dist > LimDist:
 *                 # if reaches cycle count limit
 */
      goto __pyx_L6_break;

      /* "graph.pyx":2163
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 *             if OpenNodes.empty():             # <<<<<<<<<<<<<<
 *                 break
 *             elif cycles > LimCycle or OpenNodes.top().Dist > LimDist:
 */
    }

    /* "graph.pyx":2165
 *             if OpenNodes.empty():
 *                 break
 *             elif cycles > LimCycle or OpenNodes.top().Dist > LimDist:             # <<<<<<<<<<<<<<
 *                 # if reaches cycle count limit
 *                 # if the minimum distance in open nodes is more than the distance limit
 */
    __pyx_t_15 = (__pyx_v_cycles > __pyx_v_LimCycle);
    if (!__pyx_t_15) {
    } else {
      __pyx_t_3 = __pyx_t_15;
      goto __pyx_L21_bool_binop_done;
    }
    __pyx_t_12 = ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->top(__pyx_v_OpenNodes); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2165, __pyx_L1_error)
    __pyx_t_15 = (__pyx_t_12.Dist > __pyx_v_LimDist);
    __pyx_t_3 = __pyx_t_15;
    __pyx_L21_bool_binop_done:;
    if (__pyx_t_3) {

      /* "graph.pyx":2168
 *                 # if reaches cycle count limit
 *                 # if the minimum distance in open nodes is more than the distance limit
 *                 break             # <<<<<<<<<<<<<<
 *         return
 * 
 */
      goto __pyx_L6_break;

      /* "graph.pyx":2165
 *             if OpenNodes.empty():
 *                 break
 *             elif cycles > LimCycle or OpenNodes.top().Dist > LimDist:             # <<<<<<<<<<<<<<
 *                 # if reaches cycle count limit
 *                 # if the minimum distance in open nodes is more than the distance limit
 */
    }
  }
  __pyx_L6_break:;

  /* "graph.pyx":2169
 *                 # if the minimum distance in open nodes is more than the distance limit
 *                 break
 *         return             # <<<<<<<<<<<<<<
 * 
 *     cdef void C_NodeMap_AStar_VirtuEntry(
 */
  goto __pyx_L0;

  /* "graph.pyx":2032
 *         return outtup
 * 
 *     cdef void C_NodeMap_AStar(             # <<<<<<<<<<<<<<
 *                 self,
 *                 const int& NidO, const int& NidD,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("graph.GraphCy.C_NodeMap_AStar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_OpenNodes);
  __Pyx_RefNannyFinishContext();
}

/* "graph.pyx":2171
 *         return
 * 
 *     cdef void C_NodeMap_AStar_VirtuEntry(             # <<<<<<<<<<<<<<
 *                 self,
 *                 const int& EidO, const float[3]& PtO, const float[2]& DstO,
 */

static void __pyx_f_5graph_7GraphCy_C_NodeMap_AStar_VirtuEntry(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, int const &__pyx_v_EidO, float *__pyx_v_PtO, float *__pyx_v_DstO, int const &__pyx_v_EidD, float *__pyx_v_PtD, float *__pyx_v_DstD, struct __pyx_opt_args_5graph_7GraphCy_C_NodeMap_AStar_VirtuEntry *__pyx_optional_args) {
  float __pyx_v_DistMin = __pyx_k__21;
  float __pyx_v_DistMulLim = ((float)1.2);
  int __pyx_v_ReverseEdge = ((int)0);
  float __pyx_v_LimDist = ((float)10000.0);
  int __pyx_v_LimCycle = ((int)0x2710);
  float __pyx_v_DistMul = ((float)2.0);
  float __pyx_v_EdgeCmin = ((float)0.9);
  int __pyx_v_cycles;
  int __pyx_v_keepGoing;
  float __pyx_v_DistC_Target;
  struct __pyx_obj_5graph_PriorityQueue_NR *__pyx_v_OpenNodes = 0;
  struct __pyx_t_5graph_NodeReach __pyx_v_startNode;
  float __pyx_v_BaseDist;
  struct __pyx_t_5graph_NodeReach __pyx_v_NodeReach_T;
  int __pyx_v_NidF;
  float __pyx_v_len;
  struct __pyx_t_5graph_Edge __pyx_v_EdgeC;
  struct __pyx_t_5graph_NodeReach __pyx_v_NodeCheck;
  int __pyx_v_i;
  int __pyx_v_Eid;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  float __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  struct __pyx_t_5graph_NodeReach __pyx_t_16;
  int __pyx_t_17;
  int __pyx_t_18;
  int __pyx_t_19;
  int __pyx_t_20;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("C_NodeMap_AStar_VirtuEntry", 1);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_DistMin = __pyx_optional_args->DistMin;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_DistMulLim = __pyx_optional_args->DistMulLim;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_ReverseEdge = __pyx_optional_args->ReverseEdge;
          if (__pyx_optional_args->__pyx_n > 3) {
            __pyx_v_LimDist = __pyx_optional_args->LimDist;
            if (__pyx_optional_args->__pyx_n > 4) {
              __pyx_v_LimCycle = __pyx_optional_args->LimCycle;
              if (__pyx_optional_args->__pyx_n > 5) {
                __pyx_v_DistMul = __pyx_optional_args->DistMul;
                if (__pyx_optional_args->__pyx_n > 6) {
                  __pyx_v_EdgeCmin = __pyx_optional_args->EdgeCmin;
                }
              }
            }
          }
        }
      }
    }
  }

  /* "graph.pyx":2217
 *         As a supporting function for multipath.
 *         """
 *         self.C_Reset_NodeVisited()             # <<<<<<<<<<<<<<
 * 
 *         # START
 */
  __pyx_f_5graph_7GraphCy_C_Reset_NodeVisited(__pyx_v_self, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2217, __pyx_L1_error)

  /* "graph.pyx":2221
 *         # START
 *         cdef int cycles
 *         cycles = 1             # <<<<<<<<<<<<<<
 *         cdef bint keepGoing
 *         keepGoing = True
 */
  __pyx_v_cycles = 1;

  /* "graph.pyx":2223
 *         cycles = 1
 *         cdef bint keepGoing
 *         keepGoing = True             # <<<<<<<<<<<<<<
 * 
 *         # cdef vector[NodeReach] OpenNodes
 */
  __pyx_v_keepGoing = 1;

  /* "graph.pyx":2229
 *         cdef PriorityQueue_NR OpenNodes
 *         cdef NodeReach startNode
 *         OpenNodes = PriorityQueue_NR()             # <<<<<<<<<<<<<<
 * 
 *         cdef float BaseDist = dist3d_ar(PtO, PtD)
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5graph_PriorityQueue_NR)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_OpenNodes = ((struct __pyx_obj_5graph_PriorityQueue_NR *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "graph.pyx":2231
 *         OpenNodes = PriorityQueue_NR()
 * 
 *         cdef float BaseDist = dist3d_ar(PtO, PtD)             # <<<<<<<<<<<<<<
 * 
 *         # for Oriding edgeorigin
 */
  __pyx_t_2 = __pyx_f_5graph_dist3d_ar(__pyx_v_PtO, __pyx_v_PtD); if (unlikely(__pyx_t_2 == ((float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2231, __pyx_L1_error)
  __pyx_v_BaseDist = __pyx_t_2;

  /* "graph.pyx":2234
 * 
 *         # for Oriding edgeorigin
 *         startNode.Nid = self.edges[EidO].NidO             # <<<<<<<<<<<<<<
 *         startNode.Eid = EidO
 *         startNode.Dist = DstO[0]
 */
  __pyx_t_3 = (__pyx_v_self->edges[__pyx_v_EidO]).NidO;
  __pyx_v_startNode.Nid = __pyx_t_3;

  /* "graph.pyx":2235
 *         # for Oriding edgeorigin
 *         startNode.Nid = self.edges[EidO].NidO
 *         startNode.Eid = EidO             # <<<<<<<<<<<<<<
 *         startNode.Dist = DstO[0]
 *         startNode.NidO = -1
 */
  __pyx_v_startNode.Eid = __pyx_v_EidO;

  /* "graph.pyx":2236
 *         startNode.Nid = self.edges[EidO].NidO
 *         startNode.Eid = EidO
 *         startNode.Dist = DstO[0]             # <<<<<<<<<<<<<<
 *         startNode.NidO = -1
 *         startNode.Weight = DstO[0] + (dist3d_ar(self.nodes[startNode.Nid].pt, PtO)-BaseDist) * DistMul
 */
  __pyx_v_startNode.Dist = (__pyx_v_DstO[0]);

  /* "graph.pyx":2237
 *         startNode.Eid = EidO
 *         startNode.Dist = DstO[0]
 *         startNode.NidO = -1             # <<<<<<<<<<<<<<
 *         startNode.Weight = DstO[0] + (dist3d_ar(self.nodes[startNode.Nid].pt, PtO)-BaseDist) * DistMul
 *         self.nodeVisited[startNode.Nid] = startNode
 */
  __pyx_v_startNode.NidO = -1;

  /* "graph.pyx":2238
 *         startNode.Dist = DstO[0]
 *         startNode.NidO = -1
 *         startNode.Weight = DstO[0] + (dist3d_ar(self.nodes[startNode.Nid].pt, PtO)-BaseDist) * DistMul             # <<<<<<<<<<<<<<
 *         self.nodeVisited[startNode.Nid] = startNode
 *         OpenNodes.push(startNode)
 */
  __pyx_t_2 = __pyx_f_5graph_dist3d_ar((__pyx_v_self->nodes[__pyx_v_startNode.Nid]).pt, __pyx_v_PtO); if (unlikely(__pyx_t_2 == ((float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2238, __pyx_L1_error)
  __pyx_v_startNode.Weight = ((__pyx_v_DstO[0]) + ((__pyx_t_2 - __pyx_v_BaseDist) * __pyx_v_DistMul));

  /* "graph.pyx":2239
 *         startNode.NidO = -1
 *         startNode.Weight = DstO[0] + (dist3d_ar(self.nodes[startNode.Nid].pt, PtO)-BaseDist) * DistMul
 *         self.nodeVisited[startNode.Nid] = startNode             # <<<<<<<<<<<<<<
 *         OpenNodes.push(startNode)
 *         # for destination edgeorigin
 */
  (__pyx_v_self->nodeVisited[__pyx_v_startNode.Nid]) = __pyx_v_startNode;

  /* "graph.pyx":2240
 *         startNode.Weight = DstO[0] + (dist3d_ar(self.nodes[startNode.Nid].pt, PtO)-BaseDist) * DistMul
 *         self.nodeVisited[startNode.Nid] = startNode
 *         OpenNodes.push(startNode)             # <<<<<<<<<<<<<<
 *         # for destination edgeorigin
 *         startNode.Nid = self.edges[EidO].NidD
 */
  ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_startNode); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2240, __pyx_L1_error)

  /* "graph.pyx":2242
 *         OpenNodes.push(startNode)
 *         # for destination edgeorigin
 *         startNode.Nid = self.edges[EidO].NidD             # <<<<<<<<<<<<<<
 *         startNode.Eid = EidO
 *         startNode.Dist = DstO[1]
 */
  __pyx_t_3 = (__pyx_v_self->edges[__pyx_v_EidO]).NidD;
  __pyx_v_startNode.Nid = __pyx_t_3;

  /* "graph.pyx":2243
 *         # for destination edgeorigin
 *         startNode.Nid = self.edges[EidO].NidD
 *         startNode.Eid = EidO             # <<<<<<<<<<<<<<
 *         startNode.Dist = DstO[1]
 *         startNode.NidO = -1
 */
  __pyx_v_startNode.Eid = __pyx_v_EidO;

  /* "graph.pyx":2244
 *         startNode.Nid = self.edges[EidO].NidD
 *         startNode.Eid = EidO
 *         startNode.Dist = DstO[1]             # <<<<<<<<<<<<<<
 *         startNode.NidO = -1
 *         startNode.Weight = DstO[1] + (dist3d_ar(self.nodes[startNode.Nid].pt, PtD)-BaseDist) * DistMul
 */
  __pyx_v_startNode.Dist = (__pyx_v_DstO[1]);

  /* "graph.pyx":2245
 *         startNode.Eid = EidO
 *         startNode.Dist = DstO[1]
 *         startNode.NidO = -1             # <<<<<<<<<<<<<<
 *         startNode.Weight = DstO[1] + (dist3d_ar(self.nodes[startNode.Nid].pt, PtD)-BaseDist) * DistMul
 *         self.nodeVisited[startNode.Nid] = startNode
 */
  __pyx_v_startNode.NidO = -1;

  /* "graph.pyx":2246
 *         startNode.Dist = DstO[1]
 *         startNode.NidO = -1
 *         startNode.Weight = DstO[1] + (dist3d_ar(self.nodes[startNode.Nid].pt, PtD)-BaseDist) * DistMul             # <<<<<<<<<<<<<<
 *         self.nodeVisited[startNode.Nid] = startNode
 *         OpenNodes.push(startNode)
 */
  __pyx_t_2 = __pyx_f_5graph_dist3d_ar((__pyx_v_self->nodes[__pyx_v_startNode.Nid]).pt, __pyx_v_PtD); if (unlikely(__pyx_t_2 == ((float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2246, __pyx_L1_error)
  __pyx_v_startNode.Weight = ((__pyx_v_DstO[1]) + ((__pyx_t_2 - __pyx_v_BaseDist) * __pyx_v_DistMul));

  /* "graph.pyx":2247
 *         startNode.NidO = -1
 *         startNode.Weight = DstO[1] + (dist3d_ar(self.nodes[startNode.Nid].pt, PtD)-BaseDist) * DistMul
 *         self.nodeVisited[startNode.Nid] = startNode             # <<<<<<<<<<<<<<
 *         OpenNodes.push(startNode)
 * 
 */
  (__pyx_v_self->nodeVisited[__pyx_v_startNode.Nid]) = __pyx_v_startNode;

  /* "graph.pyx":2248
 *         startNode.Weight = DstO[1] + (dist3d_ar(self.nodes[startNode.Nid].pt, PtD)-BaseDist) * DistMul
 *         self.nodeVisited[startNode.Nid] = startNode
 *         OpenNodes.push(startNode)             # <<<<<<<<<<<<<<
 * 
 *         cdef NodeReach NodeReach_T
 */
  ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_startNode); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2248, __pyx_L1_error)

  /* "graph.pyx":2260
 * 
 *         # check distmin
 *         if DistMin == -1.0:             # <<<<<<<<<<<<<<
 *             DistMin = self.PathDist_AStar_VirtuEntry(EidO, (PtO[0], PtO[1], PtO[2]), (DstO[0], DstO[1]),
 *                                                     EidD, (PtD[0], PtD[1], PtD[2]), (DstD[0], DstD[1]),
 */
  __pyx_t_4 = (__pyx_v_DistMin == -1.0);
  if (__pyx_t_4) {

    /* "graph.pyx":2261
 *         # check distmin
 *         if DistMin == -1.0:
 *             DistMin = self.PathDist_AStar_VirtuEntry(EidO, (PtO[0], PtO[1], PtO[2]), (DstO[0], DstO[1]),             # <<<<<<<<<<<<<<
 *                                                     EidD, (PtD[0], PtD[1], PtD[2]), (DstD[0], DstD[1]),
 *                                                     LimDist, LimCycle, DistMul)
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_PathDist_AStar_VirtuEntry); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_EidO); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyFloat_FromDouble((__pyx_v_PtO[0])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyFloat_FromDouble((__pyx_v_PtO[1])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = PyFloat_FromDouble((__pyx_v_PtO[2])); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = PyTuple_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_7);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_7)) __PYX_ERR(0, 2261, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_8);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_8)) __PYX_ERR(0, 2261, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_9);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_9)) __PYX_ERR(0, 2261, __pyx_L1_error);
    __pyx_t_7 = 0;
    __pyx_t_8 = 0;
    __pyx_t_9 = 0;
    __pyx_t_9 = PyFloat_FromDouble((__pyx_v_DstO[0])); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_8 = PyFloat_FromDouble((__pyx_v_DstO[1])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_9);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_9)) __PYX_ERR(0, 2261, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_8);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8)) __PYX_ERR(0, 2261, __pyx_L1_error);
    __pyx_t_9 = 0;
    __pyx_t_8 = 0;

    /* "graph.pyx":2262
 *         if DistMin == -1.0:
 *             DistMin = self.PathDist_AStar_VirtuEntry(EidO, (PtO[0], PtO[1], PtO[2]), (DstO[0], DstO[1]),
 *                                                     EidD, (PtD[0], PtD[1], PtD[2]), (DstD[0], DstD[1]),             # <<<<<<<<<<<<<<
 *                                                     LimDist, LimCycle, DistMul)
 *             if DistMin == -1.0:
 */
    __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_EidD); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = PyFloat_FromDouble((__pyx_v_PtD[0])); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_11 = PyFloat_FromDouble((__pyx_v_PtD[1])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_12 = PyFloat_FromDouble((__pyx_v_PtD[2])); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_13 = PyTuple_New(3); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_GIVEREF(__pyx_t_9);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_9)) __PYX_ERR(0, 2262, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_11);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_t_11)) __PYX_ERR(0, 2262, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_12);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_13, 2, __pyx_t_12)) __PYX_ERR(0, 2262, __pyx_L1_error);
    __pyx_t_9 = 0;
    __pyx_t_11 = 0;
    __pyx_t_12 = 0;
    __pyx_t_12 = PyFloat_FromDouble((__pyx_v_DstD[0])); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_11 = PyFloat_FromDouble((__pyx_v_DstD[1])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_12);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_12)) __PYX_ERR(0, 2262, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_11);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_11)) __PYX_ERR(0, 2262, __pyx_L1_error);
    __pyx_t_12 = 0;
    __pyx_t_11 = 0;

    /* "graph.pyx":2263
 *             DistMin = self.PathDist_AStar_VirtuEntry(EidO, (PtO[0], PtO[1], PtO[2]), (DstO[0], DstO[1]),
 *                                                     EidD, (PtD[0], PtD[1], PtD[2]), (DstD[0], DstD[1]),
 *                                                     LimDist, LimCycle, DistMul)             # <<<<<<<<<<<<<<
 *             if DistMin == -1.0:
 *                 return
 */
    __pyx_t_11 = PyFloat_FromDouble(__pyx_v_LimDist); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_12 = __Pyx_PyInt_From_int(__pyx_v_LimCycle); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_14 = PyFloat_FromDouble(__pyx_v_DistMul); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_15 = NULL;
    __pyx_t_3 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_15)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_15);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_3 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[10] = {__pyx_t_15, __pyx_t_6, __pyx_t_10, __pyx_t_7, __pyx_t_8, __pyx_t_13, __pyx_t_9, __pyx_t_11, __pyx_t_12, __pyx_t_14};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_3, 9+__pyx_t_3);
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2261, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }

    /* "graph.pyx":2261
 *         # check distmin
 *         if DistMin == -1.0:
 *             DistMin = self.PathDist_AStar_VirtuEntry(EidO, (PtO[0], PtO[1], PtO[2]), (DstO[0], DstO[1]),             # <<<<<<<<<<<<<<
 *                                                     EidD, (PtD[0], PtD[1], PtD[2]), (DstD[0], DstD[1]),
 *                                                     LimDist, LimCycle, DistMul)
 */
    __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2261, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_DistMin = __pyx_t_2;

    /* "graph.pyx":2264
 *                                                     EidD, (PtD[0], PtD[1], PtD[2]), (DstD[0], DstD[1]),
 *                                                     LimDist, LimCycle, DistMul)
 *             if DistMin == -1.0:             # <<<<<<<<<<<<<<
 *                 return
 * 
 */
    __pyx_t_4 = (__pyx_v_DistMin == -1.0);
    if (__pyx_t_4) {

      /* "graph.pyx":2265
 *                                                     LimDist, LimCycle, DistMul)
 *             if DistMin == -1.0:
 *                 return             # <<<<<<<<<<<<<<
 * 
 *         DistMin = DistMin * DistMulLim
 */
      goto __pyx_L0;

      /* "graph.pyx":2264
 *                                                     EidD, (PtD[0], PtD[1], PtD[2]), (DstD[0], DstD[1]),
 *                                                     LimDist, LimCycle, DistMul)
 *             if DistMin == -1.0:             # <<<<<<<<<<<<<<
 *                 return
 * 
 */
    }

    /* "graph.pyx":2260
 * 
 *         # check distmin
 *         if DistMin == -1.0:             # <<<<<<<<<<<<<<
 *             DistMin = self.PathDist_AStar_VirtuEntry(EidO, (PtO[0], PtO[1], PtO[2]), (DstO[0], DstO[1]),
 *                                                     EidD, (PtD[0], PtD[1], PtD[2]), (DstD[0], DstD[1]),
 */
  }

  /* "graph.pyx":2267
 *                 return
 * 
 *         DistMin = DistMin * DistMulLim             # <<<<<<<<<<<<<<
 * 
 *         while keepGoing:
 */
  __pyx_v_DistMin = (__pyx_v_DistMin * __pyx_v_DistMulLim);

  /* "graph.pyx":2269
 *         DistMin = DistMin * DistMulLim
 * 
 *         while keepGoing:             # <<<<<<<<<<<<<<
 *             cycles += 1
 *             # check paths from OpenNodes
 */
  while (1) {
    if (!__pyx_v_keepGoing) break;

    /* "graph.pyx":2270
 * 
 *         while keepGoing:
 *             cycles += 1             # <<<<<<<<<<<<<<
 *             # check paths from OpenNodes
 *             NodeCheck = OpenNodes.pop_top()
 */
    __pyx_v_cycles = (__pyx_v_cycles + 1);

    /* "graph.pyx":2272
 *             cycles += 1
 *             # check paths from OpenNodes
 *             NodeCheck = OpenNodes.pop_top()             # <<<<<<<<<<<<<<
 * 
 *             for i in range(self.EidN):
 */
    __pyx_t_16 = ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->pop_top(__pyx_v_OpenNodes); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2272, __pyx_L1_error)
    __pyx_v_NodeCheck = __pyx_t_16;

    /* "graph.pyx":2274
 *             NodeCheck = OpenNodes.pop_top()
 * 
 *             for i in range(self.EidN):             # <<<<<<<<<<<<<<
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1:
 */
    __pyx_t_3 = __pyx_v_self->EidN;
    __pyx_t_17 = __pyx_t_3;
    for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
      __pyx_v_i = __pyx_t_18;

      /* "graph.pyx":2275
 * 
 *             for i in range(self.EidN):
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]             # <<<<<<<<<<<<<<
 *                 if Eid == -1:
 *                     break
 */
      __pyx_v_Eid = ((__pyx_v_self->nodes[__pyx_v_NodeCheck.Nid]).Eid[__pyx_v_i]);

      /* "graph.pyx":2276
 *             for i in range(self.EidN):
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1:             # <<<<<<<<<<<<<<
 *                     break
 *                 if Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 */
      __pyx_t_4 = (__pyx_v_Eid == -1L);
      if (__pyx_t_4) {

        /* "graph.pyx":2277
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1:
 *                     break             # <<<<<<<<<<<<<<
 *                 if Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 *                     continue
 */
        goto __pyx_L8_break;

        /* "graph.pyx":2276
 *             for i in range(self.EidN):
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1:             # <<<<<<<<<<<<<<
 *                     break
 *                 if Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 */
      }

      /* "graph.pyx":2278
 *                 if Eid == -1:
 *                     break
 *                 if Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:             # <<<<<<<<<<<<<<
 *                     continue
 *                 # possible new path
 */
      __pyx_t_19 = (__pyx_v_Eid == __pyx_v_NodeCheck.Eid);
      if (!__pyx_t_19) {
      } else {
        __pyx_t_4 = __pyx_t_19;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_19 = ((__pyx_v_self->_edgesIds[__pyx_v_Eid]) == -1L);
      __pyx_t_4 = __pyx_t_19;
      __pyx_L11_bool_binop_done:;
      if (__pyx_t_4) {

        /* "graph.pyx":2279
 *                     break
 *                 if Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 *                     continue             # <<<<<<<<<<<<<<
 *                 # possible new path
 *                 # new node?
 */
        goto __pyx_L7_continue;

        /* "graph.pyx":2278
 *                 if Eid == -1:
 *                     break
 *                 if Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:             # <<<<<<<<<<<<<<
 *                     continue
 *                 # possible new path
 */
      }

      /* "graph.pyx":2282
 *                 # possible new path
 *                 # new node?
 *                 EdgeC = self.edges[Eid]             # <<<<<<<<<<<<<<
 *                 if not ReverseEdge:
 *                     if EdgeC.NidO == NodeCheck.Nid:
 */
      __pyx_v_EdgeC = (__pyx_v_self->edges[__pyx_v_Eid]);

      /* "graph.pyx":2283
 *                 # new node?
 *                 EdgeC = self.edges[Eid]
 *                 if not ReverseEdge:             # <<<<<<<<<<<<<<
 *                     if EdgeC.NidO == NodeCheck.Nid:
 *                         len = EdgeC.len
 */
      __pyx_t_4 = (!__pyx_v_ReverseEdge);
      if (__pyx_t_4) {

        /* "graph.pyx":2284
 *                 EdgeC = self.edges[Eid]
 *                 if not ReverseEdge:
 *                     if EdgeC.NidO == NodeCheck.Nid:             # <<<<<<<<<<<<<<
 *                         len = EdgeC.len
 *                         NidF = EdgeC.NidD
 */
        __pyx_t_4 = (__pyx_v_EdgeC.NidO == __pyx_v_NodeCheck.Nid);
        if (__pyx_t_4) {

          /* "graph.pyx":2285
 *                 if not ReverseEdge:
 *                     if EdgeC.NidO == NodeCheck.Nid:
 *                         len = EdgeC.len             # <<<<<<<<<<<<<<
 *                         NidF = EdgeC.NidD
 *                     else :
 */
          __pyx_t_2 = __pyx_v_EdgeC.len;
          __pyx_v_len = __pyx_t_2;

          /* "graph.pyx":2286
 *                     if EdgeC.NidO == NodeCheck.Nid:
 *                         len = EdgeC.len
 *                         NidF = EdgeC.NidD             # <<<<<<<<<<<<<<
 *                     else :
 *                         len = EdgeC.lenR
 */
          __pyx_t_20 = __pyx_v_EdgeC.NidD;
          __pyx_v_NidF = __pyx_t_20;

          /* "graph.pyx":2284
 *                 EdgeC = self.edges[Eid]
 *                 if not ReverseEdge:
 *                     if EdgeC.NidO == NodeCheck.Nid:             # <<<<<<<<<<<<<<
 *                         len = EdgeC.len
 *                         NidF = EdgeC.NidD
 */
          goto __pyx_L14;
        }

        /* "graph.pyx":2288
 *                         NidF = EdgeC.NidD
 *                     else :
 *                         len = EdgeC.lenR             # <<<<<<<<<<<<<<
 *                         NidF = EdgeC.NidO
 *                 else:
 */
        /*else*/ {
          __pyx_t_2 = __pyx_v_EdgeC.lenR;
          __pyx_v_len = __pyx_t_2;

          /* "graph.pyx":2289
 *                     else :
 *                         len = EdgeC.lenR
 *                         NidF = EdgeC.NidO             # <<<<<<<<<<<<<<
 *                 else:
 *                     if EdgeC.NidO == NodeCheck.Nid:
 */
          __pyx_t_20 = __pyx_v_EdgeC.NidO;
          __pyx_v_NidF = __pyx_t_20;
        }
        __pyx_L14:;

        /* "graph.pyx":2283
 *                 # new node?
 *                 EdgeC = self.edges[Eid]
 *                 if not ReverseEdge:             # <<<<<<<<<<<<<<
 *                     if EdgeC.NidO == NodeCheck.Nid:
 *                         len = EdgeC.len
 */
        goto __pyx_L13;
      }

      /* "graph.pyx":2291
 *                         NidF = EdgeC.NidO
 *                 else:
 *                     if EdgeC.NidO == NodeCheck.Nid:             # <<<<<<<<<<<<<<
 *                         len = EdgeC.lenR
 *                         NidF = EdgeC.NidD
 */
      /*else*/ {
        __pyx_t_4 = (__pyx_v_EdgeC.NidO == __pyx_v_NodeCheck.Nid);
        if (__pyx_t_4) {

          /* "graph.pyx":2292
 *                 else:
 *                     if EdgeC.NidO == NodeCheck.Nid:
 *                         len = EdgeC.lenR             # <<<<<<<<<<<<<<
 *                         NidF = EdgeC.NidD
 *                     else :
 */
          __pyx_t_2 = __pyx_v_EdgeC.lenR;
          __pyx_v_len = __pyx_t_2;

          /* "graph.pyx":2293
 *                     if EdgeC.NidO == NodeCheck.Nid:
 *                         len = EdgeC.lenR
 *                         NidF = EdgeC.NidD             # <<<<<<<<<<<<<<
 *                     else :
 *                         len = EdgeC.len
 */
          __pyx_t_20 = __pyx_v_EdgeC.NidD;
          __pyx_v_NidF = __pyx_t_20;

          /* "graph.pyx":2291
 *                         NidF = EdgeC.NidO
 *                 else:
 *                     if EdgeC.NidO == NodeCheck.Nid:             # <<<<<<<<<<<<<<
 *                         len = EdgeC.lenR
 *                         NidF = EdgeC.NidD
 */
          goto __pyx_L15;
        }

        /* "graph.pyx":2295
 *                         NidF = EdgeC.NidD
 *                     else :
 *                         len = EdgeC.len             # <<<<<<<<<<<<<<
 *                         NidF = EdgeC.NidO
 * 
 */
        /*else*/ {
          __pyx_t_2 = __pyx_v_EdgeC.len;
          __pyx_v_len = __pyx_t_2;

          /* "graph.pyx":2296
 *                     else :
 *                         len = EdgeC.len
 *                         NidF = EdgeC.NidO             # <<<<<<<<<<<<<<
 * 
 *                 len += NodeCheck.Dist + self.nodes[NidF].c
 */
          __pyx_t_20 = __pyx_v_EdgeC.NidO;
          __pyx_v_NidF = __pyx_t_20;
        }
        __pyx_L15:;
      }
      __pyx_L13:;

      /* "graph.pyx":2298
 *                         NidF = EdgeC.NidO
 * 
 *                 len += NodeCheck.Dist + self.nodes[NidF].c             # <<<<<<<<<<<<<<
 *                 DistC_Target = dist3d_ar(self.nodes[NidF].pt, PtD)
 * 
 */
      __pyx_v_len = (__pyx_v_len + (__pyx_v_NodeCheck.Dist + (__pyx_v_self->nodes[__pyx_v_NidF]).c));

      /* "graph.pyx":2299
 * 
 *                 len += NodeCheck.Dist + self.nodes[NidF].c
 *                 DistC_Target = dist3d_ar(self.nodes[NidF].pt, PtD)             # <<<<<<<<<<<<<<
 * 
 *                 if (len + DistC_Target*EdgeCmin) > DistMin: # check if there is still a propable remaining distance to target
 */
      __pyx_t_2 = __pyx_f_5graph_dist3d_ar((__pyx_v_self->nodes[__pyx_v_NidF]).pt, __pyx_v_PtD); if (unlikely(__pyx_t_2 == ((float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2299, __pyx_L1_error)
      __pyx_v_DistC_Target = __pyx_t_2;

      /* "graph.pyx":2301
 *                 DistC_Target = dist3d_ar(self.nodes[NidF].pt, PtD)
 * 
 *                 if (len + DistC_Target*EdgeCmin) > DistMin: # check if there is still a propable remaining distance to target             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      __pyx_t_4 = ((__pyx_v_len + (__pyx_v_DistC_Target * __pyx_v_EdgeCmin)) > __pyx_v_DistMin);
      if (__pyx_t_4) {

        /* "graph.pyx":2302
 * 
 *                 if (len + DistC_Target*EdgeCmin) > DistMin: # check if there is still a propable remaining distance to target
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 NodeReach_T.Nid = NidF
 */
        goto __pyx_L7_continue;

        /* "graph.pyx":2301
 *                 DistC_Target = dist3d_ar(self.nodes[NidF].pt, PtD)
 * 
 *                 if (len + DistC_Target*EdgeCmin) > DistMin: # check if there is still a propable remaining distance to target             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      }

      /* "graph.pyx":2304
 *                     continue
 * 
 *                 NodeReach_T.Nid = NidF             # <<<<<<<<<<<<<<
 *                 NodeReach_T.Dist = len
 *                 NodeReach_T.Eid = Eid
 */
      __pyx_v_NodeReach_T.Nid = __pyx_v_NidF;

      /* "graph.pyx":2305
 * 
 *                 NodeReach_T.Nid = NidF
 *                 NodeReach_T.Dist = len             # <<<<<<<<<<<<<<
 *                 NodeReach_T.Eid = Eid
 *                 NodeReach_T.NidO = NodeCheck.Nid
 */
      __pyx_v_NodeReach_T.Dist = __pyx_v_len;

      /* "graph.pyx":2306
 *                 NodeReach_T.Nid = NidF
 *                 NodeReach_T.Dist = len
 *                 NodeReach_T.Eid = Eid             # <<<<<<<<<<<<<<
 *                 NodeReach_T.NidO = NodeCheck.Nid
 *                 NodeReach_T.Weight = len + (DistC_Target-BaseDist) * DistMul
 */
      __pyx_v_NodeReach_T.Eid = __pyx_v_Eid;

      /* "graph.pyx":2307
 *                 NodeReach_T.Dist = len
 *                 NodeReach_T.Eid = Eid
 *                 NodeReach_T.NidO = NodeCheck.Nid             # <<<<<<<<<<<<<<
 *                 NodeReach_T.Weight = len + (DistC_Target-BaseDist) * DistMul
 * 
 */
      __pyx_t_20 = __pyx_v_NodeCheck.Nid;
      __pyx_v_NodeReach_T.NidO = __pyx_t_20;

      /* "graph.pyx":2308
 *                 NodeReach_T.Eid = Eid
 *                 NodeReach_T.NidO = NodeCheck.Nid
 *                 NodeReach_T.Weight = len + (DistC_Target-BaseDist) * DistMul             # <<<<<<<<<<<<<<
 * 
 *                 # check to visited nodes
 */
      __pyx_v_NodeReach_T.Weight = (__pyx_v_len + ((__pyx_v_DistC_Target - __pyx_v_BaseDist) * __pyx_v_DistMul));

      /* "graph.pyx":2311
 * 
 *                 # check to visited nodes
 *                 if self.nodeVisited[NidF].Nid == -1 or self.nodeVisited[NidF].Dist > len: # if node havent been visited             # <<<<<<<<<<<<<<
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 */
      __pyx_t_19 = ((__pyx_v_self->nodeVisited[__pyx_v_NidF]).Nid == -1L);
      if (!__pyx_t_19) {
      } else {
        __pyx_t_4 = __pyx_t_19;
        goto __pyx_L18_bool_binop_done;
      }
      __pyx_t_19 = ((__pyx_v_self->nodeVisited[__pyx_v_NidF]).Dist > __pyx_v_len);
      __pyx_t_4 = __pyx_t_19;
      __pyx_L18_bool_binop_done:;
      if (__pyx_t_4) {

        /* "graph.pyx":2312
 *                 # check to visited nodes
 *                 if self.nodeVisited[NidF].Nid == -1 or self.nodeVisited[NidF].Dist > len: # if node havent been visited
 *                     self.nodeVisited[NidF] = NodeReach_T             # <<<<<<<<<<<<<<
 *                     OpenNodes.push(NodeReach_T)
 *             if OpenNodes.empty():
 */
        (__pyx_v_self->nodeVisited[__pyx_v_NidF]) = __pyx_v_NodeReach_T;

        /* "graph.pyx":2313
 *                 if self.nodeVisited[NidF].Nid == -1 or self.nodeVisited[NidF].Dist > len: # if node havent been visited
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)             # <<<<<<<<<<<<<<
 *             if OpenNodes.empty():
 *                 break
 */
        ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_NodeReach_T); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2313, __pyx_L1_error)

        /* "graph.pyx":2311
 * 
 *                 # check to visited nodes
 *                 if self.nodeVisited[NidF].Nid == -1 or self.nodeVisited[NidF].Dist > len: # if node havent been visited             # <<<<<<<<<<<<<<
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 */
      }
      __pyx_L7_continue:;
    }
    __pyx_L8_break:;

    /* "graph.pyx":2314
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 *             if OpenNodes.empty():             # <<<<<<<<<<<<<<
 *                 break
 *             elif cycles > LimCycle:
 */
    __pyx_t_4 = ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->empty(__pyx_v_OpenNodes); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2314, __pyx_L1_error)
    if (__pyx_t_4) {

      /* "graph.pyx":2315
 *                     OpenNodes.push(NodeReach_T)
 *             if OpenNodes.empty():
 *                 break             # <<<<<<<<<<<<<<
 *             elif cycles > LimCycle:
 *                 break
 */
      goto __pyx_L6_break;

      /* "graph.pyx":2314
 *                     self.nodeVisited[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 *             if OpenNodes.empty():             # <<<<<<<<<<<<<<
 *                 break
 *             elif cycles > LimCycle:
 */
    }

    /* "graph.pyx":2316
 *             if OpenNodes.empty():
 *                 break
 *             elif cycles > LimCycle:             # <<<<<<<<<<<<<<
 *                 break
 *         return
 */
    __pyx_t_4 = (__pyx_v_cycles > __pyx_v_LimCycle);
    if (__pyx_t_4) {

      /* "graph.pyx":2317
 *                 break
 *             elif cycles > LimCycle:
 *                 break             # <<<<<<<<<<<<<<
 *         return
 * 
 */
      goto __pyx_L6_break;

      /* "graph.pyx":2316
 *             if OpenNodes.empty():
 *                 break
 *             elif cycles > LimCycle:             # <<<<<<<<<<<<<<
 *                 break
 *         return
 */
    }
  }
  __pyx_L6_break:;

  /* "graph.pyx":2318
 *             elif cycles > LimCycle:
 *                 break
 *         return             # <<<<<<<<<<<<<<
 * 
 *     cdef NodeReach* C_NodeMap_VirtuEntry(
 */
  goto __pyx_L0;

  /* "graph.pyx":2171
 *         return
 * 
 *     cdef void C_NodeMap_AStar_VirtuEntry(             # <<<<<<<<<<<<<<
 *                 self,
 *                 const int& EidO, const float[3]& PtO, const float[2]& DstO,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("graph.GraphCy.C_NodeMap_AStar_VirtuEntry", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_OpenNodes);
  __Pyx_RefNannyFinishContext();
}

/* "graph.pyx":2320
 *         return
 * 
 *     cdef NodeReach* C_NodeMap_VirtuEntry(             # <<<<<<<<<<<<<<
 *                 self,
 *                 const int& EidO, const float[3]& PtO, const float[2]& DstO,
 */

static struct __pyx_t_5graph_NodeReach *__pyx_f_5graph_7GraphCy_C_NodeMap_VirtuEntry(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, int const &__pyx_v_EidO, CYTHON_UNUSED float *__pyx_v_PtO, float *__pyx_v_DstO, struct __pyx_opt_args_5graph_7GraphCy_C_NodeMap_VirtuEntry *__pyx_optional_args) {
  int __pyx_v_ReverseEdge = ((int)0);
  float __pyx_v_LimDist = ((float)10000.0);
  int __pyx_v_LimCycle = ((int)0x989680);
  struct __pyx_t_5graph_NodeReach *__pyx_v_nodeMapped;
  int __pyx_v_n;
  int __pyx_v_cycles;
  int __pyx_v_keepGoing;
  struct __pyx_obj_5graph_PriorityQueue_NR *__pyx_v_OpenNodes = 0;
  struct __pyx_t_5graph_NodeReach __pyx_v_startNode;
  struct __pyx_t_5graph_NodeReach __pyx_v_NodeReach_T;
  int __pyx_v_NidF;
  float __pyx_v_len;
  struct __pyx_t_5graph_Edge __pyx_v_EdgeC;
  struct __pyx_t_5graph_NodeReach __pyx_v_NodeCheck;
  int __pyx_v_i;
  int __pyx_v_Eid;
  struct __pyx_t_5graph_NodeReach *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  struct __pyx_t_5graph_NodeReach __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("C_NodeMap_VirtuEntry", 1);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_ReverseEdge = __pyx_optional_args->ReverseEdge;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_LimDist = __pyx_optional_args->LimDist;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_LimCycle = __pyx_optional_args->LimCycle;
        }
      }
    }
  }

  /* "graph.pyx":2362
 *         As a supporting function for multipath.
 *         """
 *         cdef NodeReach* nodeMapped = <NodeReach*>malloc(self.Nnodes * sizeof(NodeReach))             # <<<<<<<<<<<<<<
 *         for n in range(self.Nnodes):
 *             nodeMapped[n].Nid = -1
 */
  __pyx_v_nodeMapped = ((struct __pyx_t_5graph_NodeReach *)malloc((__pyx_v_self->Nnodes * (sizeof(struct __pyx_t_5graph_NodeReach)))));

  /* "graph.pyx":2363
 *         """
 *         cdef NodeReach* nodeMapped = <NodeReach*>malloc(self.Nnodes * sizeof(NodeReach))
 *         for n in range(self.Nnodes):             # <<<<<<<<<<<<<<
 *             nodeMapped[n].Nid = -1
 *             nodeMapped[n].Dist = 0.0
 */
  __pyx_t_1 = __pyx_v_self->Nnodes;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_n = __pyx_t_3;

    /* "graph.pyx":2364
 *         cdef NodeReach* nodeMapped = <NodeReach*>malloc(self.Nnodes * sizeof(NodeReach))
 *         for n in range(self.Nnodes):
 *             nodeMapped[n].Nid = -1             # <<<<<<<<<<<<<<
 *             nodeMapped[n].Dist = 0.0
 *         # START
 */
    (__pyx_v_nodeMapped[__pyx_v_n]).Nid = -1;

    /* "graph.pyx":2365
 *         for n in range(self.Nnodes):
 *             nodeMapped[n].Nid = -1
 *             nodeMapped[n].Dist = 0.0             # <<<<<<<<<<<<<<
 *         # START
 *         cdef int cycles
 */
    (__pyx_v_nodeMapped[__pyx_v_n]).Dist = 0.0;
  }

  /* "graph.pyx":2368
 *         # START
 *         cdef int cycles
 *         cycles = 1             # <<<<<<<<<<<<<<
 *         cdef bint keepGoing
 *         keepGoing = True
 */
  __pyx_v_cycles = 1;

  /* "graph.pyx":2370
 *         cycles = 1
 *         cdef bint keepGoing
 *         keepGoing = True             # <<<<<<<<<<<<<<
 * 
 *         cdef PriorityQueue_NR OpenNodes
 */
  __pyx_v_keepGoing = 1;

  /* "graph.pyx":2374
 *         cdef PriorityQueue_NR OpenNodes
 *         cdef NodeReach startNode
 *         OpenNodes = PriorityQueue_NR()             # <<<<<<<<<<<<<<
 * 
 *         # for Oriding edgeorigin
 */
  __pyx_t_4 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5graph_PriorityQueue_NR)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_OpenNodes = ((struct __pyx_obj_5graph_PriorityQueue_NR *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "graph.pyx":2377
 * 
 *         # for Oriding edgeorigin
 *         startNode.Nid = self.edges[EidO].NidO             # <<<<<<<<<<<<<<
 *         startNode.Eid = EidO
 *         startNode.Dist = DstO[0]
 */
  __pyx_t_1 = (__pyx_v_self->edges[__pyx_v_EidO]).NidO;
  __pyx_v_startNode.Nid = __pyx_t_1;

  /* "graph.pyx":2378
 *         # for Oriding edgeorigin
 *         startNode.Nid = self.edges[EidO].NidO
 *         startNode.Eid = EidO             # <<<<<<<<<<<<<<
 *         startNode.Dist = DstO[0]
 *         startNode.NidO = -1
 */
  __pyx_v_startNode.Eid = __pyx_v_EidO;

  /* "graph.pyx":2379
 *         startNode.Nid = self.edges[EidO].NidO
 *         startNode.Eid = EidO
 *         startNode.Dist = DstO[0]             # <<<<<<<<<<<<<<
 *         startNode.NidO = -1
 *         startNode.Weight = DstO[0]
 */
  __pyx_v_startNode.Dist = (__pyx_v_DstO[0]);

  /* "graph.pyx":2380
 *         startNode.Eid = EidO
 *         startNode.Dist = DstO[0]
 *         startNode.NidO = -1             # <<<<<<<<<<<<<<
 *         startNode.Weight = DstO[0]
 *         nodeMapped[startNode.Nid] = startNode
 */
  __pyx_v_startNode.NidO = -1;

  /* "graph.pyx":2381
 *         startNode.Dist = DstO[0]
 *         startNode.NidO = -1
 *         startNode.Weight = DstO[0]             # <<<<<<<<<<<<<<
 *         nodeMapped[startNode.Nid] = startNode
 *         OpenNodes.push(startNode)
 */
  __pyx_v_startNode.Weight = (__pyx_v_DstO[0]);

  /* "graph.pyx":2382
 *         startNode.NidO = -1
 *         startNode.Weight = DstO[0]
 *         nodeMapped[startNode.Nid] = startNode             # <<<<<<<<<<<<<<
 *         OpenNodes.push(startNode)
 *         # for destination edgeorigin
 */
  (__pyx_v_nodeMapped[__pyx_v_startNode.Nid]) = __pyx_v_startNode;

  /* "graph.pyx":2383
 *         startNode.Weight = DstO[0]
 *         nodeMapped[startNode.Nid] = startNode
 *         OpenNodes.push(startNode)             # <<<<<<<<<<<<<<
 *         # for destination edgeorigin
 *         startNode.Nid = self.edges[EidO].NidD
 */
  ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_startNode); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2383, __pyx_L1_error)

  /* "graph.pyx":2385
 *         OpenNodes.push(startNode)
 *         # for destination edgeorigin
 *         startNode.Nid = self.edges[EidO].NidD             # <<<<<<<<<<<<<<
 *         startNode.Eid = EidO
 *         startNode.Dist = DstO[1]
 */
  __pyx_t_1 = (__pyx_v_self->edges[__pyx_v_EidO]).NidD;
  __pyx_v_startNode.Nid = __pyx_t_1;

  /* "graph.pyx":2386
 *         # for destination edgeorigin
 *         startNode.Nid = self.edges[EidO].NidD
 *         startNode.Eid = EidO             # <<<<<<<<<<<<<<
 *         startNode.Dist = DstO[1]
 *         startNode.NidO = -1
 */
  __pyx_v_startNode.Eid = __pyx_v_EidO;

  /* "graph.pyx":2387
 *         startNode.Nid = self.edges[EidO].NidD
 *         startNode.Eid = EidO
 *         startNode.Dist = DstO[1]             # <<<<<<<<<<<<<<
 *         startNode.NidO = -1
 *         startNode.Weight = DstO[1]
 */
  __pyx_v_startNode.Dist = (__pyx_v_DstO[1]);

  /* "graph.pyx":2388
 *         startNode.Eid = EidO
 *         startNode.Dist = DstO[1]
 *         startNode.NidO = -1             # <<<<<<<<<<<<<<
 *         startNode.Weight = DstO[1]
 *         nodeMapped[startNode.Nid] = startNode
 */
  __pyx_v_startNode.NidO = -1;

  /* "graph.pyx":2389
 *         startNode.Dist = DstO[1]
 *         startNode.NidO = -1
 *         startNode.Weight = DstO[1]             # <<<<<<<<<<<<<<
 *         nodeMapped[startNode.Nid] = startNode
 *         OpenNodes.push(startNode)
 */
  __pyx_v_startNode.Weight = (__pyx_v_DstO[1]);

  /* "graph.pyx":2390
 *         startNode.NidO = -1
 *         startNode.Weight = DstO[1]
 *         nodeMapped[startNode.Nid] = startNode             # <<<<<<<<<<<<<<
 *         OpenNodes.push(startNode)
 * 
 */
  (__pyx_v_nodeMapped[__pyx_v_startNode.Nid]) = __pyx_v_startNode;

  /* "graph.pyx":2391
 *         startNode.Weight = DstO[1]
 *         nodeMapped[startNode.Nid] = startNode
 *         OpenNodes.push(startNode)             # <<<<<<<<<<<<<<
 * 
 *         cdef NodeReach NodeReach_T
 */
  ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_startNode); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2391, __pyx_L1_error)

  /* "graph.pyx":2402
 *         cdef int i
 * 
 *         while keepGoing:             # <<<<<<<<<<<<<<
 *             cycles += 1
 *             # check paths from OpenNodes
 */
  while (1) {
    if (!__pyx_v_keepGoing) break;

    /* "graph.pyx":2403
 * 
 *         while keepGoing:
 *             cycles += 1             # <<<<<<<<<<<<<<
 *             # check paths from OpenNodes
 *             NodeCheck = OpenNodes.pop_top()
 */
    __pyx_v_cycles = (__pyx_v_cycles + 1);

    /* "graph.pyx":2405
 *             cycles += 1
 *             # check paths from OpenNodes
 *             NodeCheck = OpenNodes.pop_top()             # <<<<<<<<<<<<<<
 * 
 *             for i in range(self.EidN):
 */
    __pyx_t_5 = ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->pop_top(__pyx_v_OpenNodes); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2405, __pyx_L1_error)
    __pyx_v_NodeCheck = __pyx_t_5;

    /* "graph.pyx":2407
 *             NodeCheck = OpenNodes.pop_top()
 * 
 *             for i in range(self.EidN):             # <<<<<<<<<<<<<<
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1:
 */
    __pyx_t_1 = __pyx_v_self->EidN;
    __pyx_t_2 = __pyx_t_1;
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "graph.pyx":2408
 * 
 *             for i in range(self.EidN):
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]             # <<<<<<<<<<<<<<
 *                 if Eid == -1:
 *                     break
 */
      __pyx_v_Eid = ((__pyx_v_self->nodes[__pyx_v_NodeCheck.Nid]).Eid[__pyx_v_i]);

      /* "graph.pyx":2409
 *             for i in range(self.EidN):
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1:             # <<<<<<<<<<<<<<
 *                     break
 *                 if Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 */
      __pyx_t_6 = (__pyx_v_Eid == -1L);
      if (__pyx_t_6) {

        /* "graph.pyx":2410
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1:
 *                     break             # <<<<<<<<<<<<<<
 *                 if Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 *                     continue
 */
        goto __pyx_L8_break;

        /* "graph.pyx":2409
 *             for i in range(self.EidN):
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1:             # <<<<<<<<<<<<<<
 *                     break
 *                 if Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 */
      }

      /* "graph.pyx":2411
 *                 if Eid == -1:
 *                     break
 *                 if Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:             # <<<<<<<<<<<<<<
 *                     continue
 *                 # possible new path
 */
      __pyx_t_7 = (__pyx_v_Eid == __pyx_v_NodeCheck.Eid);
      if (!__pyx_t_7) {
      } else {
        __pyx_t_6 = __pyx_t_7;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_7 = ((__pyx_v_self->_edgesIds[__pyx_v_Eid]) == -1L);
      __pyx_t_6 = __pyx_t_7;
      __pyx_L11_bool_binop_done:;
      if (__pyx_t_6) {

        /* "graph.pyx":2412
 *                     break
 *                 if Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 *                     continue             # <<<<<<<<<<<<<<
 *                 # possible new path
 *                 # new node?
 */
        goto __pyx_L7_continue;

        /* "graph.pyx":2411
 *                 if Eid == -1:
 *                     break
 *                 if Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:             # <<<<<<<<<<<<<<
 *                     continue
 *                 # possible new path
 */
      }

      /* "graph.pyx":2415
 *                 # possible new path
 *                 # new node?
 *                 EdgeC = self.edges[Eid]             # <<<<<<<<<<<<<<
 *                 if not ReverseEdge:
 *                     if EdgeC.NidO == NodeCheck.Nid:
 */
      __pyx_v_EdgeC = (__pyx_v_self->edges[__pyx_v_Eid]);

      /* "graph.pyx":2416
 *                 # new node?
 *                 EdgeC = self.edges[Eid]
 *                 if not ReverseEdge:             # <<<<<<<<<<<<<<
 *                     if EdgeC.NidO == NodeCheck.Nid:
 *                         len = EdgeC.len
 */
      __pyx_t_6 = (!__pyx_v_ReverseEdge);
      if (__pyx_t_6) {

        /* "graph.pyx":2417
 *                 EdgeC = self.edges[Eid]
 *                 if not ReverseEdge:
 *                     if EdgeC.NidO == NodeCheck.Nid:             # <<<<<<<<<<<<<<
 *                         len = EdgeC.len
 *                         NidF = EdgeC.NidD
 */
        __pyx_t_6 = (__pyx_v_EdgeC.NidO == __pyx_v_NodeCheck.Nid);
        if (__pyx_t_6) {

          /* "graph.pyx":2418
 *                 if not ReverseEdge:
 *                     if EdgeC.NidO == NodeCheck.Nid:
 *                         len = EdgeC.len             # <<<<<<<<<<<<<<
 *                         NidF = EdgeC.NidD
 *                     else :
 */
          __pyx_t_8 = __pyx_v_EdgeC.len;
          __pyx_v_len = __pyx_t_8;

          /* "graph.pyx":2419
 *                     if EdgeC.NidO == NodeCheck.Nid:
 *                         len = EdgeC.len
 *                         NidF = EdgeC.NidD             # <<<<<<<<<<<<<<
 *                     else :
 *                         len = EdgeC.lenR
 */
          __pyx_t_9 = __pyx_v_EdgeC.NidD;
          __pyx_v_NidF = __pyx_t_9;

          /* "graph.pyx":2417
 *                 EdgeC = self.edges[Eid]
 *                 if not ReverseEdge:
 *                     if EdgeC.NidO == NodeCheck.Nid:             # <<<<<<<<<<<<<<
 *                         len = EdgeC.len
 *                         NidF = EdgeC.NidD
 */
          goto __pyx_L14;
        }

        /* "graph.pyx":2421
 *                         NidF = EdgeC.NidD
 *                     else :
 *                         len = EdgeC.lenR             # <<<<<<<<<<<<<<
 *                         NidF = EdgeC.NidO
 *                 else:
 */
        /*else*/ {
          __pyx_t_8 = __pyx_v_EdgeC.lenR;
          __pyx_v_len = __pyx_t_8;

          /* "graph.pyx":2422
 *                     else :
 *                         len = EdgeC.lenR
 *                         NidF = EdgeC.NidO             # <<<<<<<<<<<<<<
 *                 else:
 *                     if EdgeC.NidO == NodeCheck.Nid:
 */
          __pyx_t_9 = __pyx_v_EdgeC.NidO;
          __pyx_v_NidF = __pyx_t_9;
        }
        __pyx_L14:;

        /* "graph.pyx":2416
 *                 # new node?
 *                 EdgeC = self.edges[Eid]
 *                 if not ReverseEdge:             # <<<<<<<<<<<<<<
 *                     if EdgeC.NidO == NodeCheck.Nid:
 *                         len = EdgeC.len
 */
        goto __pyx_L13;
      }

      /* "graph.pyx":2424
 *                         NidF = EdgeC.NidO
 *                 else:
 *                     if EdgeC.NidO == NodeCheck.Nid:             # <<<<<<<<<<<<<<
 *                         len = EdgeC.lenR
 *                         NidF = EdgeC.NidD
 */
      /*else*/ {
        __pyx_t_6 = (__pyx_v_EdgeC.NidO == __pyx_v_NodeCheck.Nid);
        if (__pyx_t_6) {

          /* "graph.pyx":2425
 *                 else:
 *                     if EdgeC.NidO == NodeCheck.Nid:
 *                         len = EdgeC.lenR             # <<<<<<<<<<<<<<
 *                         NidF = EdgeC.NidD
 *                     else :
 */
          __pyx_t_8 = __pyx_v_EdgeC.lenR;
          __pyx_v_len = __pyx_t_8;

          /* "graph.pyx":2426
 *                     if EdgeC.NidO == NodeCheck.Nid:
 *                         len = EdgeC.lenR
 *                         NidF = EdgeC.NidD             # <<<<<<<<<<<<<<
 *                     else :
 *                         len = EdgeC.len
 */
          __pyx_t_9 = __pyx_v_EdgeC.NidD;
          __pyx_v_NidF = __pyx_t_9;

          /* "graph.pyx":2424
 *                         NidF = EdgeC.NidO
 *                 else:
 *                     if EdgeC.NidO == NodeCheck.Nid:             # <<<<<<<<<<<<<<
 *                         len = EdgeC.lenR
 *                         NidF = EdgeC.NidD
 */
          goto __pyx_L15;
        }

        /* "graph.pyx":2428
 *                         NidF = EdgeC.NidD
 *                     else :
 *                         len = EdgeC.len             # <<<<<<<<<<<<<<
 *                         NidF = EdgeC.NidO
 * 
 */
        /*else*/ {
          __pyx_t_8 = __pyx_v_EdgeC.len;
          __pyx_v_len = __pyx_t_8;

          /* "graph.pyx":2429
 *                     else :
 *                         len = EdgeC.len
 *                         NidF = EdgeC.NidO             # <<<<<<<<<<<<<<
 * 
 *                 len += NodeCheck.Dist + self.nodes[NidF].c
 */
          __pyx_t_9 = __pyx_v_EdgeC.NidO;
          __pyx_v_NidF = __pyx_t_9;
        }
        __pyx_L15:;
      }
      __pyx_L13:;

      /* "graph.pyx":2431
 *                         NidF = EdgeC.NidO
 * 
 *                 len += NodeCheck.Dist + self.nodes[NidF].c             # <<<<<<<<<<<<<<
 * 
 *                 if len > LimDist: # check if there is still a propable remaining distance to target
 */
      __pyx_v_len = (__pyx_v_len + (__pyx_v_NodeCheck.Dist + (__pyx_v_self->nodes[__pyx_v_NidF]).c));

      /* "graph.pyx":2433
 *                 len += NodeCheck.Dist + self.nodes[NidF].c
 * 
 *                 if len > LimDist: # check if there is still a propable remaining distance to target             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      __pyx_t_6 = (__pyx_v_len > __pyx_v_LimDist);
      if (__pyx_t_6) {

        /* "graph.pyx":2434
 * 
 *                 if len > LimDist: # check if there is still a propable remaining distance to target
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 len += self.nodes[NidF].c
 */
        goto __pyx_L7_continue;

        /* "graph.pyx":2433
 *                 len += NodeCheck.Dist + self.nodes[NidF].c
 * 
 *                 if len > LimDist: # check if there is still a propable remaining distance to target             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      }

      /* "graph.pyx":2436
 *                     continue
 * 
 *                 len += self.nodes[NidF].c             # <<<<<<<<<<<<<<
 * 
 *                 NodeReach_T.Nid = NidF
 */
      __pyx_v_len = (__pyx_v_len + (__pyx_v_self->nodes[__pyx_v_NidF]).c);

      /* "graph.pyx":2438
 *                 len += self.nodes[NidF].c
 * 
 *                 NodeReach_T.Nid = NidF             # <<<<<<<<<<<<<<
 *                 NodeReach_T.Dist = len
 *                 NodeReach_T.Eid = Eid
 */
      __pyx_v_NodeReach_T.Nid = __pyx_v_NidF;

      /* "graph.pyx":2439
 * 
 *                 NodeReach_T.Nid = NidF
 *                 NodeReach_T.Dist = len             # <<<<<<<<<<<<<<
 *                 NodeReach_T.Eid = Eid
 *                 NodeReach_T.NidO = NodeCheck.Nid
 */
      __pyx_v_NodeReach_T.Dist = __pyx_v_len;

      /* "graph.pyx":2440
 *                 NodeReach_T.Nid = NidF
 *                 NodeReach_T.Dist = len
 *                 NodeReach_T.Eid = Eid             # <<<<<<<<<<<<<<
 *                 NodeReach_T.NidO = NodeCheck.Nid
 *                 NodeReach_T.Weight = len
 */
      __pyx_v_NodeReach_T.Eid = __pyx_v_Eid;

      /* "graph.pyx":2441
 *                 NodeReach_T.Dist = len
 *                 NodeReach_T.Eid = Eid
 *                 NodeReach_T.NidO = NodeCheck.Nid             # <<<<<<<<<<<<<<
 *                 NodeReach_T.Weight = len
 * 
 */
      __pyx_t_9 = __pyx_v_NodeCheck.Nid;
      __pyx_v_NodeReach_T.NidO = __pyx_t_9;

      /* "graph.pyx":2442
 *                 NodeReach_T.Eid = Eid
 *                 NodeReach_T.NidO = NodeCheck.Nid
 *                 NodeReach_T.Weight = len             # <<<<<<<<<<<<<<
 * 
 *                 # check to visited nodes
 */
      __pyx_v_NodeReach_T.Weight = __pyx_v_len;

      /* "graph.pyx":2445
 * 
 *                 # check to visited nodes
 *                 if nodeMapped[NidF].Nid == -1 or nodeMapped[NidF].Dist > len: # if node havent been visited             # <<<<<<<<<<<<<<
 *                     nodeMapped[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 */
      __pyx_t_7 = ((__pyx_v_nodeMapped[__pyx_v_NidF]).Nid == -1L);
      if (!__pyx_t_7) {
      } else {
        __pyx_t_6 = __pyx_t_7;
        goto __pyx_L18_bool_binop_done;
      }
      __pyx_t_7 = ((__pyx_v_nodeMapped[__pyx_v_NidF]).Dist > __pyx_v_len);
      __pyx_t_6 = __pyx_t_7;
      __pyx_L18_bool_binop_done:;
      if (__pyx_t_6) {

        /* "graph.pyx":2446
 *                 # check to visited nodes
 *                 if nodeMapped[NidF].Nid == -1 or nodeMapped[NidF].Dist > len: # if node havent been visited
 *                     nodeMapped[NidF] = NodeReach_T             # <<<<<<<<<<<<<<
 *                     OpenNodes.push(NodeReach_T)
 *             if OpenNodes.empty() or cycles > LimCycle:
 */
        (__pyx_v_nodeMapped[__pyx_v_NidF]) = __pyx_v_NodeReach_T;

        /* "graph.pyx":2447
 *                 if nodeMapped[NidF].Nid == -1 or nodeMapped[NidF].Dist > len: # if node havent been visited
 *                     nodeMapped[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)             # <<<<<<<<<<<<<<
 *             if OpenNodes.empty() or cycles > LimCycle:
 *                 break
 */
        ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_NodeReach_T); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2447, __pyx_L1_error)

        /* "graph.pyx":2445
 * 
 *                 # check to visited nodes
 *                 if nodeMapped[NidF].Nid == -1 or nodeMapped[NidF].Dist > len: # if node havent been visited             # <<<<<<<<<<<<<<
 *                     nodeMapped[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 */
      }
      __pyx_L7_continue:;
    }
    __pyx_L8_break:;

    /* "graph.pyx":2448
 *                     nodeMapped[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 *             if OpenNodes.empty() or cycles > LimCycle:             # <<<<<<<<<<<<<<
 *                 break
 *         return nodeMapped
 */
    __pyx_t_7 = ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->empty(__pyx_v_OpenNodes); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2448, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L21_bool_binop_done;
    }
    __pyx_t_7 = (__pyx_v_cycles > __pyx_v_LimCycle);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L21_bool_binop_done:;
    if (__pyx_t_6) {

      /* "graph.pyx":2449
 *                     OpenNodes.push(NodeReach_T)
 *             if OpenNodes.empty() or cycles > LimCycle:
 *                 break             # <<<<<<<<<<<<<<
 *         return nodeMapped
 * 
 */
      goto __pyx_L6_break;

      /* "graph.pyx":2448
 *                     nodeMapped[NidF] = NodeReach_T
 *                     OpenNodes.push(NodeReach_T)
 *             if OpenNodes.empty() or cycles > LimCycle:             # <<<<<<<<<<<<<<
 *                 break
 *         return nodeMapped
 */
    }
  }
  __pyx_L6_break:;

  /* "graph.pyx":2450
 *             if OpenNodes.empty() or cycles > LimCycle:
 *                 break
 *         return nodeMapped             # <<<<<<<<<<<<<<
 * 
 *     def PathFind_Multi(
 */
  __pyx_r = __pyx_v_nodeMapped;
  goto __pyx_L0;

  /* "graph.pyx":2320
 *         return
 * 
 *     cdef NodeReach* C_NodeMap_VirtuEntry(             # <<<<<<<<<<<<<<
 *                 self,
 *                 const int& EidO, const float[3]& PtO, const float[2]& DstO,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("graph.GraphCy.C_NodeMap_VirtuEntry", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_OpenNodes);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":2452
 *         return nodeMapped
 * 
 *     def PathFind_Multi(             # <<<<<<<<<<<<<<
 *             self,
 *             const int& NidO, const int& NidD,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5graph_7GraphCy_59PathFind_Multi(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5graph_7GraphCy_58PathFind_Multi, "\n        Find possible paths within\n\n        Parameters\n        ------------\n        NidO : int\n            starting node ID\n        NidD : int\n            destination node ID\n        DistMulLim : float, default 1.1\n            distance search limit multiplier for distance filter. i.e. if the minimum distance is 100m, it will propable nodes with propable paths up to 120m\n        LimDist : float, default 10,000.0\n            distance limit before giving up the pathfinding process\n        LimCycle : int, default 10,000\n            number of cycles of priority_queue before giving up the pathfinding process\n        DistMul : float, default 1.0\n            A* weighting multiplier for the remaining cartesian distance\n        EdgeCmin : float, default 0.9\n            minimum edge cost multiplier, important if there are costs smaller than 1.0\n        \n        Returns\n        -----------\n        set of alternative paths\n        tuple of sets of distance and edgeids (213.8, (1, 2, 3, 4))\n        \n        Notes\n        -----------\n        Modified alternative paths algorithm, with an operation cost near O(2K+?)\n        ");
static PyMethodDef __pyx_mdef_5graph_7GraphCy_59PathFind_Multi = {"PathFind_Multi", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_59PathFind_Multi, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5graph_7GraphCy_58PathFind_Multi};
static PyObject *__pyx_pw_5graph_7GraphCy_59PathFind_Multi(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_NidO;
  int __pyx_v_NidD;
  float __pyx_v_DistMulLim;
  float __pyx_v_LimDist;
  int __pyx_v_LimCycle;
  float __pyx_v_DistMul;
  float __pyx_v_EdgeCmin;
  int __pyx_v_ForceOri;
  int __pyx_v_ForceDst;
  int __pyx_v_PathLim;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("PathFind_Multi (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_NidO,&__pyx_n_s_NidD,&__pyx_n_s_DistMulLim,&__pyx_n_s_LimDist,&__pyx_n_s_LimCycle,&__pyx_n_s_DistMul,&__pyx_n_s_EdgeCmin,&__pyx_n_s_ForceOri,&__pyx_n_s_ForceDst,&__pyx_n_s_PathLim,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case 10: values[9] = __Pyx_Arg_FASTCALL(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = __Pyx_Arg_FASTCALL(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = __Pyx_Arg_FASTCALL(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_NidO)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2452, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_NidD)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2452, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("PathFind_Multi", 0, 2, 10, 1); __PYX_ERR(0, 2452, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_DistMulLim);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2452, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_LimDist);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2452, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_LimCycle);
          if (value) { values[4] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2452, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_DistMul);
          if (value) { values[5] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2452, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_EdgeCmin);
          if (value) { values[6] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2452, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ForceOri);
          if (value) { values[7] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2452, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ForceDst);
          if (value) { values[8] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2452, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_PathLim);
          if (value) { values[9] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2452, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "PathFind_Multi") < 0)) __PYX_ERR(0, 2452, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case 10: values[9] = __Pyx_Arg_FASTCALL(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = __Pyx_Arg_FASTCALL(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = __Pyx_Arg_FASTCALL(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_NidO = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_NidO == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2454, __pyx_L3_error)
    __pyx_v_NidD = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_NidD == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2454, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_DistMulLim = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_DistMulLim == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2455, __pyx_L3_error)
    } else {
      __pyx_v_DistMulLim = ((float)1.1);
    }
    if (values[3]) {
      __pyx_v_LimDist = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_LimDist == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2456, __pyx_L3_error)
    } else {
      __pyx_v_LimDist = ((float)10000.0);
    }
    if (values[4]) {
      __pyx_v_LimCycle = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_LimCycle == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2457, __pyx_L3_error)
    } else {
      __pyx_v_LimCycle = ((int)0x3B9ACA00);
    }
    if (values[5]) {
      __pyx_v_DistMul = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_DistMul == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2458, __pyx_L3_error)
    } else {
      __pyx_v_DistMul = ((float)2.0);
    }
    if (values[6]) {
      __pyx_v_EdgeCmin = __pyx_PyFloat_AsFloat(values[6]); if (unlikely((__pyx_v_EdgeCmin == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2459, __pyx_L3_error)
    } else {
      __pyx_v_EdgeCmin = ((float)0.9);
    }
    if (values[7]) {
      __pyx_v_ForceOri = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_ForceOri == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2460, __pyx_L3_error)
    } else {
      __pyx_v_ForceOri = ((int)-1);
    }
    if (values[8]) {
      __pyx_v_ForceDst = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_ForceDst == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2461, __pyx_L3_error)
    } else {
      __pyx_v_ForceDst = ((int)-1);
    }
    if (values[9]) {
      __pyx_v_PathLim = __Pyx_PyInt_As_int(values[9]); if (unlikely((__pyx_v_PathLim == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2462, __pyx_L3_error)
    } else {
      __pyx_v_PathLim = ((int)0x989680);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("PathFind_Multi", 0, 2, 10, __pyx_nargs); __PYX_ERR(0, 2452, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("graph.GraphCy.PathFind_Multi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5graph_7GraphCy_58PathFind_Multi(((struct __pyx_obj_5graph_GraphCy *)__pyx_v_self), __pyx_v_NidO, __pyx_v_NidD, __pyx_v_DistMulLim, __pyx_v_LimDist, __pyx_v_LimCycle, __pyx_v_DistMul, __pyx_v_EdgeCmin, __pyx_v_ForceOri, __pyx_v_ForceDst, __pyx_v_PathLim);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5graph_7GraphCy_58PathFind_Multi(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, int __pyx_v_NidO, int __pyx_v_NidD, float __pyx_v_DistMulLim, float __pyx_v_LimDist, int __pyx_v_LimCycle, float __pyx_v_DistMul, float __pyx_v_EdgeCmin, int __pyx_v_ForceOri, int __pyx_v_ForceDst, int __pyx_v_PathLim) {
  float __pyx_v_BaseDist;
  float __pyx_v_MinimumDistance;
  float __pyx_v_LimitDistance;
  std::vector<std::vector<int> >  __pyx_v_MappedPaths;
  std::vector<std::vector<int> >  __pyx_v_FoundPaths;
  std::vector<float>  __pyx_v_FoundDistance;
  int __pyx_v_keepGoing;
  struct __pyx_t_5graph_NodeReach __pyx_v_NodeCheck;
  struct __pyx_obj_5graph_PriorityQueue_NR *__pyx_v_OpenNodes = 0;
  struct __pyx_t_5graph_NodeReach __pyx_v_startNode;
  CYTHON_UNUSED struct __pyx_t_5graph_Node __pyx_v_NodeTarget;
  struct __pyx_t_5graph_NodeReach __pyx_v_NodeReach_T;
  float __pyx_v_pathlength;
  struct __pyx_t_5graph_Edge __pyx_v_EdgeC;
  std::vector<int>  __pyx_v_MappedPath_T;
  std::vector<int>  __pyx_v_MappedPath_T2;
  int __pyx_v_cycles;
  int __pyx_v_i;
  int __pyx_v_Eid;
  int __pyx_v_NidF;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_t_12;
  struct __pyx_opt_args_5graph_7GraphCy_C_NodeMap_AStar __pyx_t_13;
  struct __pyx_t_5graph_NodeReach __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_t_17;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PathFind_Multi", 1);

  /* "graph.pyx":2494
 *         """
 *         # checking minimum distance
 *         cdef float BaseDist = dist3d(self.nodes[NidO], self.nodes[NidD])             # <<<<<<<<<<<<<<
 *         if BaseDist*EdgeCmin > LimDist:
 *             return None
 */
  __pyx_t_1 = __pyx_f_5graph_dist3d((__pyx_v_self->nodes[__pyx_v_NidO]), (__pyx_v_self->nodes[__pyx_v_NidD])); if (unlikely(__pyx_t_1 == ((float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2494, __pyx_L1_error)
  __pyx_v_BaseDist = __pyx_t_1;

  /* "graph.pyx":2495
 *         # checking minimum distance
 *         cdef float BaseDist = dist3d(self.nodes[NidO], self.nodes[NidD])
 *         if BaseDist*EdgeCmin > LimDist:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  __pyx_t_2 = ((__pyx_v_BaseDist * __pyx_v_EdgeCmin) > __pyx_v_LimDist);
  if (__pyx_t_2) {

    /* "graph.pyx":2496
 *         cdef float BaseDist = dist3d(self.nodes[NidO], self.nodes[NidD])
 *         if BaseDist*EdgeCmin > LimDist:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *         cdef float MinimumDistance = self.PathDist_AStar(NidO, NidD, LimDist, LimCycle, DistMul)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "graph.pyx":2495
 *         # checking minimum distance
 *         cdef float BaseDist = dist3d(self.nodes[NidO], self.nodes[NidD])
 *         if BaseDist*EdgeCmin > LimDist:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  }

  /* "graph.pyx":2498
 *             return None
 * 
 *         cdef float MinimumDistance = self.PathDist_AStar(NidO, NidD, LimDist, LimCycle, DistMul)             # <<<<<<<<<<<<<<
 *         if MinimumDistance == -1.0 or MinimumDistance > LimDist:
 *             return None
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_PathDist_AStar); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_NidO); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_NidD); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyFloat_FromDouble(__pyx_v_LimDist); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_LimCycle); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyFloat_FromDouble(__pyx_v_DistMul); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = NULL;
  __pyx_t_11 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_11 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[6] = {__pyx_t_10, __pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_11, 5+__pyx_t_11);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_1 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2498, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_MinimumDistance = __pyx_t_1;

  /* "graph.pyx":2499
 * 
 *         cdef float MinimumDistance = self.PathDist_AStar(NidO, NidD, LimDist, LimCycle, DistMul)
 *         if MinimumDistance == -1.0 or MinimumDistance > LimDist:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  __pyx_t_12 = (__pyx_v_MinimumDistance == -1.0);
  if (!__pyx_t_12) {
  } else {
    __pyx_t_2 = __pyx_t_12;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_12 = (__pyx_v_MinimumDistance > __pyx_v_LimDist);
  __pyx_t_2 = __pyx_t_12;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_2) {

    /* "graph.pyx":2500
 *         cdef float MinimumDistance = self.PathDist_AStar(NidO, NidD, LimDist, LimCycle, DistMul)
 *         if MinimumDistance == -1.0 or MinimumDistance > LimDist:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *         # mapping pathcast
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "graph.pyx":2499
 * 
 *         cdef float MinimumDistance = self.PathDist_AStar(NidO, NidD, LimDist, LimCycle, DistMul)
 *         if MinimumDistance == -1.0 or MinimumDistance > LimDist:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  }

  /* "graph.pyx":2503
 * 
 *         # mapping pathcast
 *         cdef float LimitDistance = MinimumDistance * DistMulLim             # <<<<<<<<<<<<<<
 *         # cdef NodeReach* PathCast_To = self.C_NodeMap_AStar(NidD, NidO, MinimumDistance*1.5, DistMulLim, 1, LimDist, LimCycle, DistMul, EdgeCmin)
 *         self.C_NodeMap_AStar(NidD, NidO, LimitDistance, DistMulLim, 1, LimDist, LimCycle, DistMul, EdgeCmin)
 */
  __pyx_v_LimitDistance = (__pyx_v_MinimumDistance * __pyx_v_DistMulLim);

  /* "graph.pyx":2505
 *         cdef float LimitDistance = MinimumDistance * DistMulLim
 *         # cdef NodeReach* PathCast_To = self.C_NodeMap_AStar(NidD, NidO, MinimumDistance*1.5, DistMulLim, 1, LimDist, LimCycle, DistMul, EdgeCmin)
 *         self.C_NodeMap_AStar(NidD, NidO, LimitDistance, DistMulLim, 1, LimDist, LimCycle, DistMul, EdgeCmin)             # <<<<<<<<<<<<<<
 *         # collecting paths
 *         cdef vector[vector[int]] MappedPaths
 */
  __pyx_t_13.__pyx_n = 7;
  __pyx_t_13.DistMin = __pyx_v_LimitDistance;
  __pyx_t_13.DistMulLim = __pyx_v_DistMulLim;
  __pyx_t_13.ReverseEdge = 1;
  __pyx_t_13.LimDist = __pyx_v_LimDist;
  __pyx_t_13.LimCycle = __pyx_v_LimCycle;
  __pyx_t_13.DistMul = __pyx_v_DistMul;
  __pyx_t_13.EdgeCmin = __pyx_v_EdgeCmin;
  ((struct __pyx_vtabstruct_5graph_GraphCy *)__pyx_v_self->__pyx_vtab)->C_NodeMap_AStar(__pyx_v_self, __pyx_v_NidD, __pyx_v_NidO, &__pyx_t_13); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2505, __pyx_L1_error)

  /* "graph.pyx":2511
 *         cdef vector[float] FoundDistance
 * 
 *         cdef bint keepGoing = True             # <<<<<<<<<<<<<<
 *         cdef NodeReach NodeCheck
 *         cdef PriorityQueue_NR OpenNodes
 */
  __pyx_v_keepGoing = 1;

  /* "graph.pyx":2515
 *         cdef PriorityQueue_NR OpenNodes
 *         cdef NodeReach startNode
 *         startNode.Nid = NidO             # <<<<<<<<<<<<<<
 *         startNode.Eid = -1
 *         startNode.Dist = 0.0
 */
  __pyx_v_startNode.Nid = __pyx_v_NidO;

  /* "graph.pyx":2516
 *         cdef NodeReach startNode
 *         startNode.Nid = NidO
 *         startNode.Eid = -1             # <<<<<<<<<<<<<<
 *         startNode.Dist = 0.0
 *         startNode.NidO = -1
 */
  __pyx_v_startNode.Eid = -1;

  /* "graph.pyx":2517
 *         startNode.Nid = NidO
 *         startNode.Eid = -1
 *         startNode.Dist = 0.0             # <<<<<<<<<<<<<<
 *         startNode.NidO = -1
 *         startNode.Weight = 0.0
 */
  __pyx_v_startNode.Dist = 0.0;

  /* "graph.pyx":2518
 *         startNode.Eid = -1
 *         startNode.Dist = 0.0
 *         startNode.NidO = -1             # <<<<<<<<<<<<<<
 *         startNode.Weight = 0.0
 *         startNode.pathindex = 0
 */
  __pyx_v_startNode.NidO = -1;

  /* "graph.pyx":2519
 *         startNode.Dist = 0.0
 *         startNode.NidO = -1
 *         startNode.Weight = 0.0             # <<<<<<<<<<<<<<
 *         startNode.pathindex = 0
 *         OpenNodes = PriorityQueue_NR()
 */
  __pyx_v_startNode.Weight = 0.0;

  /* "graph.pyx":2520
 *         startNode.NidO = -1
 *         startNode.Weight = 0.0
 *         startNode.pathindex = 0             # <<<<<<<<<<<<<<
 *         OpenNodes = PriorityQueue_NR()
 *         OpenNodes.push(startNode)
 */
  __pyx_v_startNode.pathindex = 0;

  /* "graph.pyx":2521
 *         startNode.Weight = 0.0
 *         startNode.pathindex = 0
 *         OpenNodes = PriorityQueue_NR()             # <<<<<<<<<<<<<<
 *         OpenNodes.push(startNode)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5graph_PriorityQueue_NR)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_OpenNodes = ((struct __pyx_obj_5graph_PriorityQueue_NR *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "graph.pyx":2522
 *         startNode.pathindex = 0
 *         OpenNodes = PriorityQueue_NR()
 *         OpenNodes.push(startNode)             # <<<<<<<<<<<<<<
 * 
 *         cdef Node NodeTarget
 */
  ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_startNode); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2522, __pyx_L1_error)

  /* "graph.pyx":2533
 *         cdef int i
 * 
 *         cycles = 0             # <<<<<<<<<<<<<<
 *         MappedPath_T.push_back(-1)
 *         MappedPaths.push_back(MappedPath_T)
 */
  __pyx_v_cycles = 0;

  /* "graph.pyx":2534
 * 
 *         cycles = 0
 *         MappedPath_T.push_back(-1)             # <<<<<<<<<<<<<<
 *         MappedPaths.push_back(MappedPath_T)
 *         NodeTarget = self.nodes[NidD]
 */
  try {
    __pyx_v_MappedPath_T.push_back(-1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2534, __pyx_L1_error)
  }

  /* "graph.pyx":2535
 *         cycles = 0
 *         MappedPath_T.push_back(-1)
 *         MappedPaths.push_back(MappedPath_T)             # <<<<<<<<<<<<<<
 *         NodeTarget = self.nodes[NidD]
 *         cdef float RemainDist
 */
  try {
    __pyx_v_MappedPaths.push_back(__pyx_v_MappedPath_T);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2535, __pyx_L1_error)
  }

  /* "graph.pyx":2536
 *         MappedPath_T.push_back(-1)
 *         MappedPaths.push_back(MappedPath_T)
 *         NodeTarget = self.nodes[NidD]             # <<<<<<<<<<<<<<
 *         cdef float RemainDist
 * 
 */
  __pyx_v_NodeTarget = (__pyx_v_self->nodes[__pyx_v_NidD]);

  /* "graph.pyx":2539
 *         cdef float RemainDist
 * 
 *         while keepGoing:             # <<<<<<<<<<<<<<
 *             cycles += 1
 *             if OpenNodes.empty():
 */
  while (1) {
    if (!__pyx_v_keepGoing) break;

    /* "graph.pyx":2540
 * 
 *         while keepGoing:
 *             cycles += 1             # <<<<<<<<<<<<<<
 *             if OpenNodes.empty():
 *                 keepGoing = False
 */
    __pyx_v_cycles = (__pyx_v_cycles + 1);

    /* "graph.pyx":2541
 *         while keepGoing:
 *             cycles += 1
 *             if OpenNodes.empty():             # <<<<<<<<<<<<<<
 *                 keepGoing = False
 *                 break
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->empty(__pyx_v_OpenNodes); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2541, __pyx_L1_error)
    if (__pyx_t_2) {

      /* "graph.pyx":2542
 *             cycles += 1
 *             if OpenNodes.empty():
 *                 keepGoing = False             # <<<<<<<<<<<<<<
 *                 break
 *             NodeCheck = OpenNodes.pop_top()
 */
      __pyx_v_keepGoing = 0;

      /* "graph.pyx":2543
 *             if OpenNodes.empty():
 *                 keepGoing = False
 *                 break             # <<<<<<<<<<<<<<
 *             NodeCheck = OpenNodes.pop_top()
 *             if NodeCheck.Dist > LimitDistance:
 */
      goto __pyx_L8_break;

      /* "graph.pyx":2541
 *         while keepGoing:
 *             cycles += 1
 *             if OpenNodes.empty():             # <<<<<<<<<<<<<<
 *                 keepGoing = False
 *                 break
 */
    }

    /* "graph.pyx":2544
 *                 keepGoing = False
 *                 break
 *             NodeCheck = OpenNodes.pop_top()             # <<<<<<<<<<<<<<
 *             if NodeCheck.Dist > LimitDistance:
 *                 break
 */
    __pyx_t_14 = ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->pop_top(__pyx_v_OpenNodes); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2544, __pyx_L1_error)
    __pyx_v_NodeCheck = __pyx_t_14;

    /* "graph.pyx":2545
 *                 break
 *             NodeCheck = OpenNodes.pop_top()
 *             if NodeCheck.Dist > LimitDistance:             # <<<<<<<<<<<<<<
 *                 break
 *             if NodeCheck.Nid == NidD:
 */
    __pyx_t_2 = (__pyx_v_NodeCheck.Dist > __pyx_v_LimitDistance);
    if (__pyx_t_2) {

      /* "graph.pyx":2546
 *             NodeCheck = OpenNodes.pop_top()
 *             if NodeCheck.Dist > LimitDistance:
 *                 break             # <<<<<<<<<<<<<<
 *             if NodeCheck.Nid == NidD:
 *                 MappedPaths[NodeCheck.pathindex].erase(MappedPaths[NodeCheck.pathindex].begin()) # erases the first -1 value of path
 */
      goto __pyx_L8_break;

      /* "graph.pyx":2545
 *                 break
 *             NodeCheck = OpenNodes.pop_top()
 *             if NodeCheck.Dist > LimitDistance:             # <<<<<<<<<<<<<<
 *                 break
 *             if NodeCheck.Nid == NidD:
 */
    }

    /* "graph.pyx":2547
 *             if NodeCheck.Dist > LimitDistance:
 *                 break
 *             if NodeCheck.Nid == NidD:             # <<<<<<<<<<<<<<
 *                 MappedPaths[NodeCheck.pathindex].erase(MappedPaths[NodeCheck.pathindex].begin()) # erases the first -1 value of path
 *                 if ForceOri != -1:
 */
    __pyx_t_2 = (__pyx_v_NodeCheck.Nid == __pyx_v_NidD);
    if (__pyx_t_2) {

      /* "graph.pyx":2548
 *                 break
 *             if NodeCheck.Nid == NidD:
 *                 MappedPaths[NodeCheck.pathindex].erase(MappedPaths[NodeCheck.pathindex].begin()) # erases the first -1 value of path             # <<<<<<<<<<<<<<
 *                 if ForceOri != -1:
 *                     MappedPaths[NodeCheck.pathindex][0] = ForceOri
 */
      (void)((__pyx_v_MappedPaths[__pyx_v_NodeCheck.pathindex]).erase((__pyx_v_MappedPaths[__pyx_v_NodeCheck.pathindex]).begin()));

      /* "graph.pyx":2549
 *             if NodeCheck.Nid == NidD:
 *                 MappedPaths[NodeCheck.pathindex].erase(MappedPaths[NodeCheck.pathindex].begin()) # erases the first -1 value of path
 *                 if ForceOri != -1:             # <<<<<<<<<<<<<<
 *                     MappedPaths[NodeCheck.pathindex][0] = ForceOri
 *                 if ForceDst != -1:
 */
      __pyx_t_2 = (__pyx_v_ForceOri != -1L);
      if (__pyx_t_2) {

        /* "graph.pyx":2550
 *                 MappedPaths[NodeCheck.pathindex].erase(MappedPaths[NodeCheck.pathindex].begin()) # erases the first -1 value of path
 *                 if ForceOri != -1:
 *                     MappedPaths[NodeCheck.pathindex][0] = ForceOri             # <<<<<<<<<<<<<<
 *                 if ForceDst != -1:
 *                     i = <int>MappedPaths[NodeCheck.pathindex].size() - 1
 */
        ((__pyx_v_MappedPaths[__pyx_v_NodeCheck.pathindex])[0]) = __pyx_v_ForceOri;

        /* "graph.pyx":2549
 *             if NodeCheck.Nid == NidD:
 *                 MappedPaths[NodeCheck.pathindex].erase(MappedPaths[NodeCheck.pathindex].begin()) # erases the first -1 value of path
 *                 if ForceOri != -1:             # <<<<<<<<<<<<<<
 *                     MappedPaths[NodeCheck.pathindex][0] = ForceOri
 *                 if ForceDst != -1:
 */
      }

      /* "graph.pyx":2551
 *                 if ForceOri != -1:
 *                     MappedPaths[NodeCheck.pathindex][0] = ForceOri
 *                 if ForceDst != -1:             # <<<<<<<<<<<<<<
 *                     i = <int>MappedPaths[NodeCheck.pathindex].size() - 1
 *                     MappedPaths[NodeCheck.pathindex][i] = ForceDst
 */
      __pyx_t_2 = (__pyx_v_ForceDst != -1L);
      if (__pyx_t_2) {

        /* "graph.pyx":2552
 *                     MappedPaths[NodeCheck.pathindex][0] = ForceOri
 *                 if ForceDst != -1:
 *                     i = <int>MappedPaths[NodeCheck.pathindex].size() - 1             # <<<<<<<<<<<<<<
 *                     MappedPaths[NodeCheck.pathindex][i] = ForceDst
 *                 FoundPaths.push_back(MappedPaths[NodeCheck.pathindex])
 */
        __pyx_v_i = (((int)(__pyx_v_MappedPaths[__pyx_v_NodeCheck.pathindex]).size()) - 1);

        /* "graph.pyx":2553
 *                 if ForceDst != -1:
 *                     i = <int>MappedPaths[NodeCheck.pathindex].size() - 1
 *                     MappedPaths[NodeCheck.pathindex][i] = ForceDst             # <<<<<<<<<<<<<<
 *                 FoundPaths.push_back(MappedPaths[NodeCheck.pathindex])
 *                 FoundDistance.push_back(NodeCheck.Dist)
 */
        ((__pyx_v_MappedPaths[__pyx_v_NodeCheck.pathindex])[__pyx_v_i]) = __pyx_v_ForceDst;

        /* "graph.pyx":2551
 *                 if ForceOri != -1:
 *                     MappedPaths[NodeCheck.pathindex][0] = ForceOri
 *                 if ForceDst != -1:             # <<<<<<<<<<<<<<
 *                     i = <int>MappedPaths[NodeCheck.pathindex].size() - 1
 *                     MappedPaths[NodeCheck.pathindex][i] = ForceDst
 */
      }

      /* "graph.pyx":2554
 *                     i = <int>MappedPaths[NodeCheck.pathindex].size() - 1
 *                     MappedPaths[NodeCheck.pathindex][i] = ForceDst
 *                 FoundPaths.push_back(MappedPaths[NodeCheck.pathindex])             # <<<<<<<<<<<<<<
 *                 FoundDistance.push_back(NodeCheck.Dist)
 *                 PathLim -= 1
 */
      try {
        __pyx_v_FoundPaths.push_back((__pyx_v_MappedPaths[__pyx_v_NodeCheck.pathindex]));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 2554, __pyx_L1_error)
      }

      /* "graph.pyx":2555
 *                     MappedPaths[NodeCheck.pathindex][i] = ForceDst
 *                 FoundPaths.push_back(MappedPaths[NodeCheck.pathindex])
 *                 FoundDistance.push_back(NodeCheck.Dist)             # <<<<<<<<<<<<<<
 *                 PathLim -= 1
 *                 if PathLim == 0:
 */
      try {
        __pyx_v_FoundDistance.push_back(__pyx_v_NodeCheck.Dist);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 2555, __pyx_L1_error)
      }

      /* "graph.pyx":2556
 *                 FoundPaths.push_back(MappedPaths[NodeCheck.pathindex])
 *                 FoundDistance.push_back(NodeCheck.Dist)
 *                 PathLim -= 1             # <<<<<<<<<<<<<<
 *                 if PathLim == 0:
 *                     keepGoing = False
 */
      __pyx_v_PathLim = (__pyx_v_PathLim - 1);

      /* "graph.pyx":2557
 *                 FoundDistance.push_back(NodeCheck.Dist)
 *                 PathLim -= 1
 *                 if PathLim == 0:             # <<<<<<<<<<<<<<
 *                     keepGoing = False
 *                     break
 */
      __pyx_t_2 = (__pyx_v_PathLim == 0);
      if (__pyx_t_2) {

        /* "graph.pyx":2558
 *                 PathLim -= 1
 *                 if PathLim == 0:
 *                     keepGoing = False             # <<<<<<<<<<<<<<
 *                     break
 *                 continue
 */
        __pyx_v_keepGoing = 0;

        /* "graph.pyx":2559
 *                 if PathLim == 0:
 *                     keepGoing = False
 *                     break             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
        goto __pyx_L8_break;

        /* "graph.pyx":2557
 *                 FoundDistance.push_back(NodeCheck.Dist)
 *                 PathLim -= 1
 *                 if PathLim == 0:             # <<<<<<<<<<<<<<
 *                     keepGoing = False
 *                     break
 */
      }

      /* "graph.pyx":2560
 *                     keepGoing = False
 *                     break
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             MappedPath_T = MappedPaths[NodeCheck.pathindex] # getting mapped path from nodecheck index
 */
      goto __pyx_L7_continue;

      /* "graph.pyx":2547
 *             if NodeCheck.Dist > LimitDistance:
 *                 break
 *             if NodeCheck.Nid == NidD:             # <<<<<<<<<<<<<<
 *                 MappedPaths[NodeCheck.pathindex].erase(MappedPaths[NodeCheck.pathindex].begin()) # erases the first -1 value of path
 *                 if ForceOri != -1:
 */
    }

    /* "graph.pyx":2562
 *                 continue
 * 
 *             MappedPath_T = MappedPaths[NodeCheck.pathindex] # getting mapped path from nodecheck index             # <<<<<<<<<<<<<<
 * 
 *             for i in range(self.EidN):
 */
    __pyx_v_MappedPath_T = (__pyx_v_MappedPaths[__pyx_v_NodeCheck.pathindex]);

    /* "graph.pyx":2564
 *             MappedPath_T = MappedPaths[NodeCheck.pathindex] # getting mapped path from nodecheck index
 * 
 *             for i in range(self.EidN):             # <<<<<<<<<<<<<<
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1:
 */
    __pyx_t_11 = __pyx_v_self->EidN;
    __pyx_t_15 = __pyx_t_11;
    for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_15; __pyx_t_16+=1) {
      __pyx_v_i = __pyx_t_16;

      /* "graph.pyx":2565
 * 
 *             for i in range(self.EidN):
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]             # <<<<<<<<<<<<<<
 *                 if Eid == -1:
 *                     break
 */
      __pyx_v_Eid = ((__pyx_v_self->nodes[__pyx_v_NodeCheck.Nid]).Eid[__pyx_v_i]);

      /* "graph.pyx":2566
 *             for i in range(self.EidN):
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1:             # <<<<<<<<<<<<<<
 *                     break
 *                 if Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 */
      __pyx_t_2 = (__pyx_v_Eid == -1L);
      if (__pyx_t_2) {

        /* "graph.pyx":2567
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1:
 *                     break             # <<<<<<<<<<<<<<
 *                 if Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 *                     continue
 */
        goto __pyx_L16_break;

        /* "graph.pyx":2566
 *             for i in range(self.EidN):
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1:             # <<<<<<<<<<<<<<
 *                     break
 *                 if Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 */
      }

      /* "graph.pyx":2568
 *                 if Eid == -1:
 *                     break
 *                 if Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:             # <<<<<<<<<<<<<<
 *                     continue
 *                 if Find_IntVector(MappedPaths[NodeCheck.pathindex], Eid): # if Eid already in mapped paths
 */
      __pyx_t_12 = (__pyx_v_Eid == __pyx_v_NodeCheck.Eid);
      if (!__pyx_t_12) {
      } else {
        __pyx_t_2 = __pyx_t_12;
        goto __pyx_L19_bool_binop_done;
      }
      __pyx_t_12 = ((__pyx_v_self->_edgesIds[__pyx_v_Eid]) == -1L);
      __pyx_t_2 = __pyx_t_12;
      __pyx_L19_bool_binop_done:;
      if (__pyx_t_2) {

        /* "graph.pyx":2569
 *                     break
 *                 if Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 *                     continue             # <<<<<<<<<<<<<<
 *                 if Find_IntVector(MappedPaths[NodeCheck.pathindex], Eid): # if Eid already in mapped paths
 *                     continue
 */
        goto __pyx_L15_continue;

        /* "graph.pyx":2568
 *                 if Eid == -1:
 *                     break
 *                 if Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:             # <<<<<<<<<<<<<<
 *                     continue
 *                 if Find_IntVector(MappedPaths[NodeCheck.pathindex], Eid): # if Eid already in mapped paths
 */
      }

      /* "graph.pyx":2570
 *                 if Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 *                     continue
 *                 if Find_IntVector(MappedPaths[NodeCheck.pathindex], Eid): # if Eid already in mapped paths             # <<<<<<<<<<<<<<
 *                     continue
 *                 EdgeC = self.edges[Eid]
 */
      __pyx_t_2 = __pyx_f_5graph_Find_IntVector((__pyx_v_MappedPaths[__pyx_v_NodeCheck.pathindex]), __pyx_v_Eid); if (unlikely(__pyx_t_2 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2570, __pyx_L1_error)
      if (__pyx_t_2) {

        /* "graph.pyx":2571
 *                     continue
 *                 if Find_IntVector(MappedPaths[NodeCheck.pathindex], Eid): # if Eid already in mapped paths
 *                     continue             # <<<<<<<<<<<<<<
 *                 EdgeC = self.edges[Eid]
 *                 if EdgeC.NidO == NodeCheck.Nid:
 */
        goto __pyx_L15_continue;

        /* "graph.pyx":2570
 *                 if Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 *                     continue
 *                 if Find_IntVector(MappedPaths[NodeCheck.pathindex], Eid): # if Eid already in mapped paths             # <<<<<<<<<<<<<<
 *                     continue
 *                 EdgeC = self.edges[Eid]
 */
      }

      /* "graph.pyx":2572
 *                 if Find_IntVector(MappedPaths[NodeCheck.pathindex], Eid): # if Eid already in mapped paths
 *                     continue
 *                 EdgeC = self.edges[Eid]             # <<<<<<<<<<<<<<
 *                 if EdgeC.NidO == NodeCheck.Nid:
 *                     pathlength = EdgeC.len
 */
      __pyx_v_EdgeC = (__pyx_v_self->edges[__pyx_v_Eid]);

      /* "graph.pyx":2573
 *                     continue
 *                 EdgeC = self.edges[Eid]
 *                 if EdgeC.NidO == NodeCheck.Nid:             # <<<<<<<<<<<<<<
 *                     pathlength = EdgeC.len
 *                     NidF = EdgeC.NidD
 */
      __pyx_t_2 = (__pyx_v_EdgeC.NidO == __pyx_v_NodeCheck.Nid);
      if (__pyx_t_2) {

        /* "graph.pyx":2574
 *                 EdgeC = self.edges[Eid]
 *                 if EdgeC.NidO == NodeCheck.Nid:
 *                     pathlength = EdgeC.len             # <<<<<<<<<<<<<<
 *                     NidF = EdgeC.NidD
 *                 else:
 */
        __pyx_t_1 = __pyx_v_EdgeC.len;
        __pyx_v_pathlength = __pyx_t_1;

        /* "graph.pyx":2575
 *                 if EdgeC.NidO == NodeCheck.Nid:
 *                     pathlength = EdgeC.len
 *                     NidF = EdgeC.NidD             # <<<<<<<<<<<<<<
 *                 else:
 *                     pathlength = EdgeC.lenR
 */
        __pyx_t_17 = __pyx_v_EdgeC.NidD;
        __pyx_v_NidF = __pyx_t_17;

        /* "graph.pyx":2573
 *                     continue
 *                 EdgeC = self.edges[Eid]
 *                 if EdgeC.NidO == NodeCheck.Nid:             # <<<<<<<<<<<<<<
 *                     pathlength = EdgeC.len
 *                     NidF = EdgeC.NidD
 */
        goto __pyx_L22;
      }

      /* "graph.pyx":2577
 *                     NidF = EdgeC.NidD
 *                 else:
 *                     pathlength = EdgeC.lenR             # <<<<<<<<<<<<<<
 *                     NidF = EdgeC.NidO
 * 
 */
      /*else*/ {
        __pyx_t_1 = __pyx_v_EdgeC.lenR;
        __pyx_v_pathlength = __pyx_t_1;

        /* "graph.pyx":2578
 *                 else:
 *                     pathlength = EdgeC.lenR
 *                     NidF = EdgeC.NidO             # <<<<<<<<<<<<<<
 * 
 *                 pathlength += NodeCheck.Dist + self.nodes[NidF].c
 */
        __pyx_t_17 = __pyx_v_EdgeC.NidO;
        __pyx_v_NidF = __pyx_t_17;
      }
      __pyx_L22:;

      /* "graph.pyx":2580
 *                     NidF = EdgeC.NidO
 * 
 *                 pathlength += NodeCheck.Dist + self.nodes[NidF].c             # <<<<<<<<<<<<<<
 *                 if self.nodeVisited[NidF].Nid != -1:
 *                     if (pathlength + self.nodeVisited[NidF].Dist) > LimitDistance:
 */
      __pyx_v_pathlength = (__pyx_v_pathlength + (__pyx_v_NodeCheck.Dist + (__pyx_v_self->nodes[__pyx_v_NidF]).c));

      /* "graph.pyx":2581
 * 
 *                 pathlength += NodeCheck.Dist + self.nodes[NidF].c
 *                 if self.nodeVisited[NidF].Nid != -1:             # <<<<<<<<<<<<<<
 *                     if (pathlength + self.nodeVisited[NidF].Dist) > LimitDistance:
 *                         continue
 */
      __pyx_t_2 = ((__pyx_v_self->nodeVisited[__pyx_v_NidF]).Nid != -1L);
      if (__pyx_t_2) {

        /* "graph.pyx":2582
 *                 pathlength += NodeCheck.Dist + self.nodes[NidF].c
 *                 if self.nodeVisited[NidF].Nid != -1:
 *                     if (pathlength + self.nodeVisited[NidF].Dist) > LimitDistance:             # <<<<<<<<<<<<<<
 *                         continue
 *                     else:
 */
        __pyx_t_2 = ((__pyx_v_pathlength + (__pyx_v_self->nodeVisited[__pyx_v_NidF]).Dist) > __pyx_v_LimitDistance);
        if (__pyx_t_2) {

          /* "graph.pyx":2583
 *                 if self.nodeVisited[NidF].Nid != -1:
 *                     if (pathlength + self.nodeVisited[NidF].Dist) > LimitDistance:
 *                         continue             # <<<<<<<<<<<<<<
 *                     else:
 *                         NodeReach_T.Weight = pathlength + (self.nodeVisited[NidF].Dist-BaseDist) * DistMul
 */
          goto __pyx_L15_continue;

          /* "graph.pyx":2582
 *                 pathlength += NodeCheck.Dist + self.nodes[NidF].c
 *                 if self.nodeVisited[NidF].Nid != -1:
 *                     if (pathlength + self.nodeVisited[NidF].Dist) > LimitDistance:             # <<<<<<<<<<<<<<
 *                         continue
 *                     else:
 */
        }

        /* "graph.pyx":2585
 *                         continue
 *                     else:
 *                         NodeReach_T.Weight = pathlength + (self.nodeVisited[NidF].Dist-BaseDist) * DistMul             # <<<<<<<<<<<<<<
 *                 else:
 *                     continue
 */
        /*else*/ {
          __pyx_v_NodeReach_T.Weight = (__pyx_v_pathlength + (((__pyx_v_self->nodeVisited[__pyx_v_NidF]).Dist - __pyx_v_BaseDist) * __pyx_v_DistMul));
        }

        /* "graph.pyx":2581
 * 
 *                 pathlength += NodeCheck.Dist + self.nodes[NidF].c
 *                 if self.nodeVisited[NidF].Nid != -1:             # <<<<<<<<<<<<<<
 *                     if (pathlength + self.nodeVisited[NidF].Dist) > LimitDistance:
 *                         continue
 */
        goto __pyx_L23;
      }

      /* "graph.pyx":2587
 *                         NodeReach_T.Weight = pathlength + (self.nodeVisited[NidF].Dist-BaseDist) * DistMul
 *                 else:
 *                     continue             # <<<<<<<<<<<<<<
 *                 MappedPath_T2 = MappedPath_T
 *                 MappedPath_T2.push_back(Eid)
 */
      /*else*/ {
        goto __pyx_L15_continue;
      }
      __pyx_L23:;

      /* "graph.pyx":2588
 *                 else:
 *                     continue
 *                 MappedPath_T2 = MappedPath_T             # <<<<<<<<<<<<<<
 *                 MappedPath_T2.push_back(Eid)
 *                 NodeReach_T.Nid = NidF
 */
      __pyx_v_MappedPath_T2 = __pyx_v_MappedPath_T;

      /* "graph.pyx":2589
 *                     continue
 *                 MappedPath_T2 = MappedPath_T
 *                 MappedPath_T2.push_back(Eid)             # <<<<<<<<<<<<<<
 *                 NodeReach_T.Nid = NidF
 *                 NodeReach_T.Dist = pathlength
 */
      try {
        __pyx_v_MappedPath_T2.push_back(__pyx_v_Eid);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 2589, __pyx_L1_error)
      }

      /* "graph.pyx":2590
 *                 MappedPath_T2 = MappedPath_T
 *                 MappedPath_T2.push_back(Eid)
 *                 NodeReach_T.Nid = NidF             # <<<<<<<<<<<<<<
 *                 NodeReach_T.Dist = pathlength
 *                 NodeReach_T.Eid = Eid
 */
      __pyx_v_NodeReach_T.Nid = __pyx_v_NidF;

      /* "graph.pyx":2591
 *                 MappedPath_T2.push_back(Eid)
 *                 NodeReach_T.Nid = NidF
 *                 NodeReach_T.Dist = pathlength             # <<<<<<<<<<<<<<
 *                 NodeReach_T.Eid = Eid
 *                 # NodeReach_T.NidO = NodeCheck.Nid
 */
      __pyx_v_NodeReach_T.Dist = __pyx_v_pathlength;

      /* "graph.pyx":2592
 *                 NodeReach_T.Nid = NidF
 *                 NodeReach_T.Dist = pathlength
 *                 NodeReach_T.Eid = Eid             # <<<<<<<<<<<<<<
 *                 # NodeReach_T.NidO = NodeCheck.Nid
 * 
 */
      __pyx_v_NodeReach_T.Eid = __pyx_v_Eid;

      /* "graph.pyx":2595
 *                 # NodeReach_T.NidO = NodeCheck.Nid
 * 
 *                 if MappedPaths[NodeCheck.pathindex] == MappedPath_T:             # <<<<<<<<<<<<<<
 *                     NodeReach_T.pathindex = NodeCheck.pathindex
 *                     MappedPaths[NodeCheck.pathindex] = MappedPath_T2
 */
      __pyx_t_2 = ((__pyx_v_MappedPaths[__pyx_v_NodeCheck.pathindex]) == __pyx_v_MappedPath_T);
      if (__pyx_t_2) {

        /* "graph.pyx":2596
 * 
 *                 if MappedPaths[NodeCheck.pathindex] == MappedPath_T:
 *                     NodeReach_T.pathindex = NodeCheck.pathindex             # <<<<<<<<<<<<<<
 *                     MappedPaths[NodeCheck.pathindex] = MappedPath_T2
 *                 else:
 */
        __pyx_t_17 = __pyx_v_NodeCheck.pathindex;
        __pyx_v_NodeReach_T.pathindex = __pyx_t_17;

        /* "graph.pyx":2597
 *                 if MappedPaths[NodeCheck.pathindex] == MappedPath_T:
 *                     NodeReach_T.pathindex = NodeCheck.pathindex
 *                     MappedPaths[NodeCheck.pathindex] = MappedPath_T2             # <<<<<<<<<<<<<<
 *                 else:
 *                     NodeReach_T.pathindex = <int>MappedPaths.size()
 */
        (__pyx_v_MappedPaths[__pyx_v_NodeCheck.pathindex]) = __pyx_v_MappedPath_T2;

        /* "graph.pyx":2595
 *                 # NodeReach_T.NidO = NodeCheck.Nid
 * 
 *                 if MappedPaths[NodeCheck.pathindex] == MappedPath_T:             # <<<<<<<<<<<<<<
 *                     NodeReach_T.pathindex = NodeCheck.pathindex
 *                     MappedPaths[NodeCheck.pathindex] = MappedPath_T2
 */
        goto __pyx_L25;
      }

      /* "graph.pyx":2599
 *                     MappedPaths[NodeCheck.pathindex] = MappedPath_T2
 *                 else:
 *                     NodeReach_T.pathindex = <int>MappedPaths.size()             # <<<<<<<<<<<<<<
 *                     MappedPaths.push_back(MappedPath_T2)
 *                 OpenNodes.push(NodeReach_T)
 */
      /*else*/ {
        __pyx_v_NodeReach_T.pathindex = ((int)__pyx_v_MappedPaths.size());

        /* "graph.pyx":2600
 *                 else:
 *                     NodeReach_T.pathindex = <int>MappedPaths.size()
 *                     MappedPaths.push_back(MappedPath_T2)             # <<<<<<<<<<<<<<
 *                 OpenNodes.push(NodeReach_T)
 * 
 */
        try {
          __pyx_v_MappedPaths.push_back(__pyx_v_MappedPath_T2);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 2600, __pyx_L1_error)
        }
      }
      __pyx_L25:;

      /* "graph.pyx":2601
 *                     NodeReach_T.pathindex = <int>MappedPaths.size()
 *                     MappedPaths.push_back(MappedPath_T2)
 *                 OpenNodes.push(NodeReach_T)             # <<<<<<<<<<<<<<
 * 
 *             if cycles > LimCycle:
 */
      ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_NodeReach_T); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2601, __pyx_L1_error)
      __pyx_L15_continue:;
    }
    __pyx_L16_break:;

    /* "graph.pyx":2603
 *                 OpenNodes.push(NodeReach_T)
 * 
 *             if cycles > LimCycle:             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
    __pyx_t_2 = (__pyx_v_cycles > __pyx_v_LimCycle);
    if (__pyx_t_2) {

      /* "graph.pyx":2604
 * 
 *             if cycles > LimCycle:
 *                 break             # <<<<<<<<<<<<<<
 * 
 *         return tuple(FoundDistance), tuple(FoundPaths)
 */
      goto __pyx_L8_break;

      /* "graph.pyx":2603
 *                 OpenNodes.push(NodeReach_T)
 * 
 *             if cycles > LimCycle:             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
    }
    __pyx_L7_continue:;
  }
  __pyx_L8_break:;

  /* "graph.pyx":2606
 *                 break
 * 
 *         return tuple(FoundDistance), tuple(FoundPaths)             # <<<<<<<<<<<<<<
 * 
 *     def PathFind_Multi_VirtuEntry(
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_convert_vector_to_py_float(__pyx_v_FoundDistance); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(__pyx_v_FoundPaths); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = __Pyx_PySequence_Tuple(__pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4)) __PYX_ERR(0, 2606, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_9);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_9)) __PYX_ERR(0, 2606, __pyx_L1_error);
  __pyx_t_4 = 0;
  __pyx_t_9 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "graph.pyx":2452
 *         return nodeMapped
 * 
 *     def PathFind_Multi(             # <<<<<<<<<<<<<<
 *             self,
 *             const int& NidO, const int& NidD,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("graph.GraphCy.PathFind_Multi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_OpenNodes);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":2608
 *         return tuple(FoundDistance), tuple(FoundPaths)
 * 
 *     def PathFind_Multi_VirtuEntry(             # <<<<<<<<<<<<<<
 *             self,
 *             const int& EidO, tuple[float, float, float] PtO, tuple[float, float] DstO,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5graph_7GraphCy_61PathFind_Multi_VirtuEntry(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5graph_7GraphCy_60PathFind_Multi_VirtuEntry, "\n        Find possible paths within\n\n        Parameters\n        ------------\n        NidO : int\n            starting node ID\n        NidD : int\n            destination node ID\n        DistMulLim : float, default 1.1\n            distance search limit multiplier for distance filter. i.e. if the minimum distance is 100m, it will propable nodes with propable paths up to 120m\n        LimDist : float, default 10,000.0\n            distance limit before giving up the pathfinding process\n        LimCycle : int, default 10,000\n            number of cycles of priority_queue before giving up the pathfinding process\n        DistMul : float, default 1.0\n            A* weighting multiplier for the remaining cartesian distance\n        EdgeCmin : float, default 0.9\n            minimum edge cost multiplier, important if there are costs smaller than 1.0\n        \n        Returns\n        -----------\n        set of alternative paths\n        tuple of sets of distance and edgeids (213.8, (1, 2, 3, 4))\n        \n        Notes\n        -----------\n        Modified alternative paths algorithm, with an operation cost near O(2K+?)\n        ");
static PyMethodDef __pyx_mdef_5graph_7GraphCy_61PathFind_Multi_VirtuEntry = {"PathFind_Multi_VirtuEntry", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_61PathFind_Multi_VirtuEntry, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5graph_7GraphCy_60PathFind_Multi_VirtuEntry};
static PyObject *__pyx_pw_5graph_7GraphCy_61PathFind_Multi_VirtuEntry(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_EidO;
  __pyx_ctuple_float__and_float__and_float __pyx_v_PtO;
  __pyx_ctuple_float__and_float __pyx_v_DstO;
  int __pyx_v_EidD;
  __pyx_ctuple_float__and_float__and_float __pyx_v_PtD;
  __pyx_ctuple_float__and_float __pyx_v_DstD;
  float __pyx_v_DistMulLim;
  float __pyx_v_LimDist;
  int __pyx_v_LimCycle;
  float __pyx_v_DistMul;
  float __pyx_v_EdgeCmin;
  int __pyx_v_PathLim;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("PathFind_Multi_VirtuEntry (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_EidO,&__pyx_n_s_PtO,&__pyx_n_s_DstO,&__pyx_n_s_EidD,&__pyx_n_s_PtD,&__pyx_n_s_DstD,&__pyx_n_s_DistMulLim,&__pyx_n_s_LimDist,&__pyx_n_s_LimCycle,&__pyx_n_s_DistMul,&__pyx_n_s_EdgeCmin,&__pyx_n_s_PathLim,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case 12: values[11] = __Pyx_Arg_FASTCALL(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = __Pyx_Arg_FASTCALL(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = __Pyx_Arg_FASTCALL(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = __Pyx_Arg_FASTCALL(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = __Pyx_Arg_FASTCALL(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_EidO)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2608, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_PtO)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2608, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("PathFind_Multi_VirtuEntry", 0, 6, 12, 1); __PYX_ERR(0, 2608, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_DstO)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2608, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("PathFind_Multi_VirtuEntry", 0, 6, 12, 2); __PYX_ERR(0, 2608, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_EidD)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2608, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("PathFind_Multi_VirtuEntry", 0, 6, 12, 3); __PYX_ERR(0, 2608, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_PtD)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[4]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2608, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("PathFind_Multi_VirtuEntry", 0, 6, 12, 4); __PYX_ERR(0, 2608, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_DstD)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[5]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2608, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("PathFind_Multi_VirtuEntry", 0, 6, 12, 5); __PYX_ERR(0, 2608, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_DistMulLim);
          if (value) { values[6] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2608, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_LimDist);
          if (value) { values[7] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2608, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_LimCycle);
          if (value) { values[8] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2608, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_DistMul);
          if (value) { values[9] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2608, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_EdgeCmin);
          if (value) { values[10] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2608, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_PathLim);
          if (value) { values[11] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2608, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "PathFind_Multi_VirtuEntry") < 0)) __PYX_ERR(0, 2608, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case 12: values[11] = __Pyx_Arg_FASTCALL(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = __Pyx_Arg_FASTCALL(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = __Pyx_Arg_FASTCALL(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = __Pyx_Arg_FASTCALL(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = __Pyx_Arg_FASTCALL(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_EidO = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_EidO == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2610, __pyx_L3_error)
    __pyx_v_PtO = __pyx_convert__from_py___pyx_ctuple_float__and_float__and_float(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2610, __pyx_L3_error)
    __pyx_v_DstO = __pyx_convert__from_py___pyx_ctuple_float__and_float(values[2]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2610, __pyx_L3_error)
    __pyx_v_EidD = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_EidD == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2611, __pyx_L3_error)
    __pyx_v_PtD = __pyx_convert__from_py___pyx_ctuple_float__and_float__and_float(values[4]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2611, __pyx_L3_error)
    __pyx_v_DstD = __pyx_convert__from_py___pyx_ctuple_float__and_float(values[5]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2611, __pyx_L3_error)
    if (values[6]) {
      __pyx_v_DistMulLim = __pyx_PyFloat_AsFloat(values[6]); if (unlikely((__pyx_v_DistMulLim == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2612, __pyx_L3_error)
    } else {
      __pyx_v_DistMulLim = ((float)1.1);
    }
    if (values[7]) {
      __pyx_v_LimDist = __pyx_PyFloat_AsFloat(values[7]); if (unlikely((__pyx_v_LimDist == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2613, __pyx_L3_error)
    } else {
      __pyx_v_LimDist = ((float)10000.0);
    }
    if (values[8]) {
      __pyx_v_LimCycle = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_LimCycle == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2614, __pyx_L3_error)
    } else {
      __pyx_v_LimCycle = ((int)0x3B9ACA00);
    }
    if (values[9]) {
      __pyx_v_DistMul = __pyx_PyFloat_AsFloat(values[9]); if (unlikely((__pyx_v_DistMul == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2615, __pyx_L3_error)
    } else {
      __pyx_v_DistMul = ((float)1.0);
    }
    if (values[10]) {
      __pyx_v_EdgeCmin = __pyx_PyFloat_AsFloat(values[10]); if (unlikely((__pyx_v_EdgeCmin == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2616, __pyx_L3_error)
    } else {
      __pyx_v_EdgeCmin = ((float)0.9);
    }
    if (values[11]) {
      __pyx_v_PathLim = __Pyx_PyInt_As_int(values[11]); if (unlikely((__pyx_v_PathLim == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2617, __pyx_L3_error)
    } else {
      __pyx_v_PathLim = ((int)0x186A0);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("PathFind_Multi_VirtuEntry", 0, 6, 12, __pyx_nargs); __PYX_ERR(0, 2608, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("graph.GraphCy.PathFind_Multi_VirtuEntry", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5graph_7GraphCy_60PathFind_Multi_VirtuEntry(((struct __pyx_obj_5graph_GraphCy *)__pyx_v_self), __pyx_v_EidO, __pyx_v_PtO, __pyx_v_DstO, __pyx_v_EidD, __pyx_v_PtD, __pyx_v_DstD, __pyx_v_DistMulLim, __pyx_v_LimDist, __pyx_v_LimCycle, __pyx_v_DistMul, __pyx_v_EdgeCmin, __pyx_v_PathLim);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5graph_7GraphCy_60PathFind_Multi_VirtuEntry(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, int __pyx_v_EidO, __pyx_ctuple_float__and_float__and_float __pyx_v_PtO, __pyx_ctuple_float__and_float __pyx_v_DstO, int __pyx_v_EidD, __pyx_ctuple_float__and_float__and_float __pyx_v_PtD, __pyx_ctuple_float__and_float __pyx_v_DstD, float __pyx_v_DistMulLim, float __pyx_v_LimDist, int __pyx_v_LimCycle, float __pyx_v_DistMul, float __pyx_v_EdgeCmin, int __pyx_v_PathLim) {
  float __pyx_v_MinimumDistance;
  float __pyx_v_LimitDistance;
  float __pyx_v_PointO[3];
  float __pyx_v_PointD[3];
  float __pyx_v_DistO[2];
  float __pyx_v_DistD[2];
  CYTHON_UNUSED float __pyx_v_BaseDist;
  std::vector<std::vector<int> >  __pyx_v_MappedPaths;
  std::vector<std::vector<int> >  __pyx_v_FoundPaths;
  std::vector<float>  __pyx_v_FoundDistance;
  int __pyx_v_keepGoing;
  struct __pyx_t_5graph_NodeReach __pyx_v_NodeCheck;
  struct __pyx_obj_5graph_PriorityQueue_NR *__pyx_v_OpenNodes = 0;
  struct __pyx_t_5graph_NodeReach __pyx_v_startNode;
  struct __pyx_t_5graph_NodeReach __pyx_v_NodeReach_T;
  float __pyx_v_pathlength;
  struct __pyx_t_5graph_Edge __pyx_v_EdgeC;
  std::vector<int>  __pyx_v_MappedPath_T;
  std::vector<int>  __pyx_v_MappedPath_T2;
  int __pyx_v_cycles;
  int __pyx_v_i;
  int __pyx_v_pathN;
  int __pyx_v_Eid;
  int __pyx_v_NidF;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  float __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  float *__pyx_t_17;
  float __pyx_t_18;
  float __pyx_t_19;
  struct __pyx_opt_args_5graph_7GraphCy_C_NodeMap_AStar_VirtuEntry __pyx_t_20;
  struct __pyx_t_5graph_NodeReach __pyx_t_21;
  int __pyx_t_22;
  int __pyx_t_23;
  int __pyx_t_24;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PathFind_Multi_VirtuEntry", 1);

  /* "graph.pyx":2649
 *         Modified alternative paths algorithm, with an operation cost near O(2K+?)
 *         """
 *         cdef float MinimumDistance = self.PathDist_AStar_VirtuEntry(EidO, PtO, DstO,             # <<<<<<<<<<<<<<
 *                                                                     EidD, PtD, DstD,
 *                                                                     LimDist, LimCycle, DistMul)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_PathDist_AStar_VirtuEntry); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_EidO); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_convert__to_py___pyx_ctuple_float__and_float__and_float(__pyx_v_PtO); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __pyx_convert__to_py___pyx_ctuple_float__and_float(__pyx_v_DstO); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "graph.pyx":2650
 *         """
 *         cdef float MinimumDistance = self.PathDist_AStar_VirtuEntry(EidO, PtO, DstO,
 *                                                                     EidD, PtD, DstD,             # <<<<<<<<<<<<<<
 *                                                                     LimDist, LimCycle, DistMul)
 * 
 */
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_EidD); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __pyx_convert__to_py___pyx_ctuple_float__and_float__and_float(__pyx_v_PtD); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __pyx_convert__to_py___pyx_ctuple_float__and_float(__pyx_v_DstD); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);

  /* "graph.pyx":2651
 *         cdef float MinimumDistance = self.PathDist_AStar_VirtuEntry(EidO, PtO, DstO,
 *                                                                     EidD, PtD, DstD,
 *                                                                     LimDist, LimCycle, DistMul)             # <<<<<<<<<<<<<<
 * 
 *         if MinimumDistance == -1.0 or MinimumDistance > LimDist:
 */
  __pyx_t_9 = PyFloat_FromDouble(__pyx_v_LimDist); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_LimCycle); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_11 = PyFloat_FromDouble(__pyx_v_DistMul); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_12 = NULL;
  __pyx_t_13 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_12)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_13 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[10] = {__pyx_t_12, __pyx_t_3, __pyx_t_4, __pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_11};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_13, 9+__pyx_t_13);
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "graph.pyx":2649
 *         Modified alternative paths algorithm, with an operation cost near O(2K+?)
 *         """
 *         cdef float MinimumDistance = self.PathDist_AStar_VirtuEntry(EidO, PtO, DstO,             # <<<<<<<<<<<<<<
 *                                                                     EidD, PtD, DstD,
 *                                                                     LimDist, LimCycle, DistMul)
 */
  __pyx_t_14 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_14 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2649, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_MinimumDistance = __pyx_t_14;

  /* "graph.pyx":2653
 *                                                                     LimDist, LimCycle, DistMul)
 * 
 *         if MinimumDistance == -1.0 or MinimumDistance > LimDist:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  __pyx_t_16 = (__pyx_v_MinimumDistance == -1.0);
  if (!__pyx_t_16) {
  } else {
    __pyx_t_15 = __pyx_t_16;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_16 = (__pyx_v_MinimumDistance > __pyx_v_LimDist);
  __pyx_t_15 = __pyx_t_16;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_15) {

    /* "graph.pyx":2654
 * 
 *         if MinimumDistance == -1.0 or MinimumDistance > LimDist:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *         # mapping pathcast
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "graph.pyx":2653
 *                                                                     LimDist, LimCycle, DistMul)
 * 
 *         if MinimumDistance == -1.0 or MinimumDistance > LimDist:             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
  }

  /* "graph.pyx":2657
 * 
 *         # mapping pathcast
 *         cdef float LimitDistance = MinimumDistance * DistMulLim             # <<<<<<<<<<<<<<
 *         cdef float[3] PointO = (PtO[0], PtO[1], PtO[2])
 *         cdef float[3] PointD = (PtD[0], PtD[1], PtD[2])
 */
  __pyx_v_LimitDistance = (__pyx_v_MinimumDistance * __pyx_v_DistMulLim);

  /* "graph.pyx":2658
 *         # mapping pathcast
 *         cdef float LimitDistance = MinimumDistance * DistMulLim
 *         cdef float[3] PointO = (PtO[0], PtO[1], PtO[2])             # <<<<<<<<<<<<<<
 *         cdef float[3] PointD = (PtD[0], PtD[1], PtD[2])
 *         cdef float[2] DistO = (DstO[0], DstO[1])
 */
  __pyx_t_17 = __pyx_v_PointO;
  __pyx_t_14 = __pyx_v_PtO.f0;
  __pyx_t_18 = __pyx_v_PtO.f1;
  __pyx_t_19 = __pyx_v_PtO.f2;
  (__pyx_t_17[0]) = __pyx_t_14;
  (__pyx_t_17[1]) = __pyx_t_18;
  (__pyx_t_17[2]) = __pyx_t_19;

  /* "graph.pyx":2659
 *         cdef float LimitDistance = MinimumDistance * DistMulLim
 *         cdef float[3] PointO = (PtO[0], PtO[1], PtO[2])
 *         cdef float[3] PointD = (PtD[0], PtD[1], PtD[2])             # <<<<<<<<<<<<<<
 *         cdef float[2] DistO = (DstO[0], DstO[1])
 *         cdef float[2] DistD = (DstD[0], DstD[1])
 */
  __pyx_t_17 = __pyx_v_PointD;
  __pyx_t_19 = __pyx_v_PtD.f0;
  __pyx_t_18 = __pyx_v_PtD.f1;
  __pyx_t_14 = __pyx_v_PtD.f2;
  (__pyx_t_17[0]) = __pyx_t_19;
  (__pyx_t_17[1]) = __pyx_t_18;
  (__pyx_t_17[2]) = __pyx_t_14;

  /* "graph.pyx":2660
 *         cdef float[3] PointO = (PtO[0], PtO[1], PtO[2])
 *         cdef float[3] PointD = (PtD[0], PtD[1], PtD[2])
 *         cdef float[2] DistO = (DstO[0], DstO[1])             # <<<<<<<<<<<<<<
 *         cdef float[2] DistD = (DstD[0], DstD[1])
 *         cdef float BaseDist = dist3d_ar(PointO, PointD)
 */
  __pyx_t_17 = __pyx_v_DistO;
  __pyx_t_14 = __pyx_v_DstO.f0;
  __pyx_t_18 = __pyx_v_DstO.f1;
  (__pyx_t_17[0]) = __pyx_t_14;
  (__pyx_t_17[1]) = __pyx_t_18;

  /* "graph.pyx":2661
 *         cdef float[3] PointD = (PtD[0], PtD[1], PtD[2])
 *         cdef float[2] DistO = (DstO[0], DstO[1])
 *         cdef float[2] DistD = (DstD[0], DstD[1])             # <<<<<<<<<<<<<<
 *         cdef float BaseDist = dist3d_ar(PointO, PointD)
 *         self.C_NodeMap_AStar_VirtuEntry(
 */
  __pyx_t_17 = __pyx_v_DistD;
  __pyx_t_18 = __pyx_v_DstD.f0;
  __pyx_t_14 = __pyx_v_DstD.f1;
  (__pyx_t_17[0]) = __pyx_t_18;
  (__pyx_t_17[1]) = __pyx_t_14;

  /* "graph.pyx":2662
 *         cdef float[2] DistO = (DstO[0], DstO[1])
 *         cdef float[2] DistD = (DstD[0], DstD[1])
 *         cdef float BaseDist = dist3d_ar(PointO, PointD)             # <<<<<<<<<<<<<<
 *         self.C_NodeMap_AStar_VirtuEntry(
 *                             EidD, PointD, DistD,
 */
  __pyx_t_14 = __pyx_f_5graph_dist3d_ar(__pyx_v_PointO, __pyx_v_PointD); if (unlikely(__pyx_t_14 == ((float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2662, __pyx_L1_error)
  __pyx_v_BaseDist = __pyx_t_14;

  /* "graph.pyx":2663
 *         cdef float[2] DistD = (DstD[0], DstD[1])
 *         cdef float BaseDist = dist3d_ar(PointO, PointD)
 *         self.C_NodeMap_AStar_VirtuEntry(             # <<<<<<<<<<<<<<
 *                             EidD, PointD, DistD,
 *                             EidO, PointO, DistO,
 */
  __pyx_t_20.__pyx_n = 7;
  __pyx_t_20.DistMin = __pyx_v_MinimumDistance;
  __pyx_t_20.DistMulLim = __pyx_v_DistMulLim;
  __pyx_t_20.ReverseEdge = 1;
  __pyx_t_20.LimDist = __pyx_v_LimDist;
  __pyx_t_20.LimCycle = __pyx_v_LimCycle;
  __pyx_t_20.DistMul = __pyx_v_DistMul;
  __pyx_t_20.EdgeCmin = __pyx_v_EdgeCmin;
  ((struct __pyx_vtabstruct_5graph_GraphCy *)__pyx_v_self->__pyx_vtab)->C_NodeMap_AStar_VirtuEntry(__pyx_v_self, __pyx_v_EidD, __pyx_v_PointD, __pyx_v_DistD, __pyx_v_EidO, __pyx_v_PointO, __pyx_v_DistO, &__pyx_t_20); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2663, __pyx_L1_error)

  /* "graph.pyx":2672
 *         cdef vector[float] FoundDistance
 * 
 *         cdef bint keepGoing = True             # <<<<<<<<<<<<<<
 *         cdef NodeReach NodeCheck
 *         cdef PriorityQueue_NR OpenNodes
 */
  __pyx_v_keepGoing = 1;

  /* "graph.pyx":2676
 *         cdef PriorityQueue_NR OpenNodes
 *         cdef NodeReach startNode
 *         OpenNodes = PriorityQueue_NR()             # <<<<<<<<<<<<<<
 * 
 *         # for Origin EdgeOrigin
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5graph_PriorityQueue_NR)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_OpenNodes = ((struct __pyx_obj_5graph_PriorityQueue_NR *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "graph.pyx":2679
 * 
 *         # for Origin EdgeOrigin
 *         if self.nodeVisited[self.edges[EidO].NidO].Nid != -1:             # <<<<<<<<<<<<<<
 *             startNode.Nid = self.edges[EidO].NidO
 *             startNode.Eid = EidO
 */
  __pyx_t_15 = ((__pyx_v_self->nodeVisited[(__pyx_v_self->edges[__pyx_v_EidO]).NidO]).Nid != -1L);
  if (__pyx_t_15) {

    /* "graph.pyx":2680
 *         # for Origin EdgeOrigin
 *         if self.nodeVisited[self.edges[EidO].NidO].Nid != -1:
 *             startNode.Nid = self.edges[EidO].NidO             # <<<<<<<<<<<<<<
 *             startNode.Eid = EidO
 *             startNode.Dist = DstO[0]
 */
    __pyx_t_13 = (__pyx_v_self->edges[__pyx_v_EidO]).NidO;
    __pyx_v_startNode.Nid = __pyx_t_13;

    /* "graph.pyx":2681
 *         if self.nodeVisited[self.edges[EidO].NidO].Nid != -1:
 *             startNode.Nid = self.edges[EidO].NidO
 *             startNode.Eid = EidO             # <<<<<<<<<<<<<<
 *             startNode.Dist = DstO[0]
 *             startNode.NidO = -1
 */
    __pyx_v_startNode.Eid = __pyx_v_EidO;

    /* "graph.pyx":2682
 *             startNode.Nid = self.edges[EidO].NidO
 *             startNode.Eid = EidO
 *             startNode.Dist = DstO[0]             # <<<<<<<<<<<<<<
 *             startNode.NidO = -1
 *             startNode.pathindex = 0
 */
    __pyx_v_startNode.Dist = __pyx_v_DstO.f0;

    /* "graph.pyx":2683
 *             startNode.Eid = EidO
 *             startNode.Dist = DstO[0]
 *             startNode.NidO = -1             # <<<<<<<<<<<<<<
 *             startNode.pathindex = 0
 *             startNode.Weight = DstO[0] + (self.nodeVisited[startNode.Nid].Dist - MinimumDistance) * DistMul
 */
    __pyx_v_startNode.NidO = -1;

    /* "graph.pyx":2684
 *             startNode.Dist = DstO[0]
 *             startNode.NidO = -1
 *             startNode.pathindex = 0             # <<<<<<<<<<<<<<
 *             startNode.Weight = DstO[0] + (self.nodeVisited[startNode.Nid].Dist - MinimumDistance) * DistMul
 *             OpenNodes.push(startNode)
 */
    __pyx_v_startNode.pathindex = 0;

    /* "graph.pyx":2685
 *             startNode.NidO = -1
 *             startNode.pathindex = 0
 *             startNode.Weight = DstO[0] + (self.nodeVisited[startNode.Nid].Dist - MinimumDistance) * DistMul             # <<<<<<<<<<<<<<
 *             OpenNodes.push(startNode)
 *         # for destination edgeorigin
 */
    __pyx_v_startNode.Weight = (__pyx_v_DstO.f0 + (((__pyx_v_self->nodeVisited[__pyx_v_startNode.Nid]).Dist - __pyx_v_MinimumDistance) * __pyx_v_DistMul));

    /* "graph.pyx":2686
 *             startNode.pathindex = 0
 *             startNode.Weight = DstO[0] + (self.nodeVisited[startNode.Nid].Dist - MinimumDistance) * DistMul
 *             OpenNodes.push(startNode)             # <<<<<<<<<<<<<<
 *         # for destination edgeorigin
 *         if self.nodeVisited[self.edges[EidO].NidD].Nid != -1:
 */
    ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_startNode); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2686, __pyx_L1_error)

    /* "graph.pyx":2679
 * 
 *         # for Origin EdgeOrigin
 *         if self.nodeVisited[self.edges[EidO].NidO].Nid != -1:             # <<<<<<<<<<<<<<
 *             startNode.Nid = self.edges[EidO].NidO
 *             startNode.Eid = EidO
 */
  }

  /* "graph.pyx":2688
 *             OpenNodes.push(startNode)
 *         # for destination edgeorigin
 *         if self.nodeVisited[self.edges[EidO].NidD].Nid != -1:             # <<<<<<<<<<<<<<
 *             startNode.Nid = self.edges[EidO].NidD
 *             startNode.Eid = EidO
 */
  __pyx_t_15 = ((__pyx_v_self->nodeVisited[(__pyx_v_self->edges[__pyx_v_EidO]).NidD]).Nid != -1L);
  if (__pyx_t_15) {

    /* "graph.pyx":2689
 *         # for destination edgeorigin
 *         if self.nodeVisited[self.edges[EidO].NidD].Nid != -1:
 *             startNode.Nid = self.edges[EidO].NidD             # <<<<<<<<<<<<<<
 *             startNode.Eid = EidO
 *             startNode.Dist = DstO[1]
 */
    __pyx_t_13 = (__pyx_v_self->edges[__pyx_v_EidO]).NidD;
    __pyx_v_startNode.Nid = __pyx_t_13;

    /* "graph.pyx":2690
 *         if self.nodeVisited[self.edges[EidO].NidD].Nid != -1:
 *             startNode.Nid = self.edges[EidO].NidD
 *             startNode.Eid = EidO             # <<<<<<<<<<<<<<
 *             startNode.Dist = DstO[1]
 *             startNode.NidO = -1
 */
    __pyx_v_startNode.Eid = __pyx_v_EidO;

    /* "graph.pyx":2691
 *             startNode.Nid = self.edges[EidO].NidD
 *             startNode.Eid = EidO
 *             startNode.Dist = DstO[1]             # <<<<<<<<<<<<<<
 *             startNode.NidO = -1
 *             startNode.pathindex = 0
 */
    __pyx_v_startNode.Dist = __pyx_v_DstO.f1;

    /* "graph.pyx":2692
 *             startNode.Eid = EidO
 *             startNode.Dist = DstO[1]
 *             startNode.NidO = -1             # <<<<<<<<<<<<<<
 *             startNode.pathindex = 0
 *             startNode.Weight = DstO[1] + (self.nodeVisited[startNode.Nid].Dist - MinimumDistance) * DistMul
 */
    __pyx_v_startNode.NidO = -1;

    /* "graph.pyx":2693
 *             startNode.Dist = DstO[1]
 *             startNode.NidO = -1
 *             startNode.pathindex = 0             # <<<<<<<<<<<<<<
 *             startNode.Weight = DstO[1] + (self.nodeVisited[startNode.Nid].Dist - MinimumDistance) * DistMul
 *             OpenNodes.push(startNode)
 */
    __pyx_v_startNode.pathindex = 0;

    /* "graph.pyx":2694
 *             startNode.NidO = -1
 *             startNode.pathindex = 0
 *             startNode.Weight = DstO[1] + (self.nodeVisited[startNode.Nid].Dist - MinimumDistance) * DistMul             # <<<<<<<<<<<<<<
 *             OpenNodes.push(startNode)
 *         # print(f'\tstartB {startNode.Dist} || {self.nodeVisited[startNode.Nid].Dist} || {LimitDistance}')
 */
    __pyx_v_startNode.Weight = (__pyx_v_DstO.f1 + (((__pyx_v_self->nodeVisited[__pyx_v_startNode.Nid]).Dist - __pyx_v_MinimumDistance) * __pyx_v_DistMul));

    /* "graph.pyx":2695
 *             startNode.pathindex = 0
 *             startNode.Weight = DstO[1] + (self.nodeVisited[startNode.Nid].Dist - MinimumDistance) * DistMul
 *             OpenNodes.push(startNode)             # <<<<<<<<<<<<<<
 *         # print(f'\tstartB {startNode.Dist} || {self.nodeVisited[startNode.Nid].Dist} || {LimitDistance}')
 *         cdef NodeReach NodeReach_T
 */
    ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_startNode); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2695, __pyx_L1_error)

    /* "graph.pyx":2688
 *             OpenNodes.push(startNode)
 *         # for destination edgeorigin
 *         if self.nodeVisited[self.edges[EidO].NidD].Nid != -1:             # <<<<<<<<<<<<<<
 *             startNode.Nid = self.edges[EidO].NidD
 *             startNode.Eid = EidO
 */
  }

  /* "graph.pyx":2704
 *         cdef int cycles
 *         cdef int i
 *         cdef int pathN = 0             # <<<<<<<<<<<<<<
 * 
 *         cycles = 0
 */
  __pyx_v_pathN = 0;

  /* "graph.pyx":2706
 *         cdef int pathN = 0
 * 
 *         cycles = 0             # <<<<<<<<<<<<<<
 *         MappedPath_T.push_back(EidO)
 *         MappedPaths.push_back(MappedPath_T)
 */
  __pyx_v_cycles = 0;

  /* "graph.pyx":2707
 * 
 *         cycles = 0
 *         MappedPath_T.push_back(EidO)             # <<<<<<<<<<<<<<
 *         MappedPaths.push_back(MappedPath_T)
 *         # cdef float RemainDist
 */
  try {
    __pyx_v_MappedPath_T.push_back(__pyx_v_EidO);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2707, __pyx_L1_error)
  }

  /* "graph.pyx":2708
 *         cycles = 0
 *         MappedPath_T.push_back(EidO)
 *         MappedPaths.push_back(MappedPath_T)             # <<<<<<<<<<<<<<
 *         # cdef float RemainDist
 *         while keepGoing:
 */
  try {
    __pyx_v_MappedPaths.push_back(__pyx_v_MappedPath_T);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2708, __pyx_L1_error)
  }

  /* "graph.pyx":2710
 *         MappedPaths.push_back(MappedPath_T)
 *         # cdef float RemainDist
 *         while keepGoing:             # <<<<<<<<<<<<<<
 *             cycles += 1
 *             if OpenNodes.empty():
 */
  while (1) {
    if (!__pyx_v_keepGoing) break;

    /* "graph.pyx":2711
 *         # cdef float RemainDist
 *         while keepGoing:
 *             cycles += 1             # <<<<<<<<<<<<<<
 *             if OpenNodes.empty():
 *                 break
 */
    __pyx_v_cycles = (__pyx_v_cycles + 1);

    /* "graph.pyx":2712
 *         while keepGoing:
 *             cycles += 1
 *             if OpenNodes.empty():             # <<<<<<<<<<<<<<
 *                 break
 *             NodeCheck = OpenNodes.pop_top()
 */
    __pyx_t_15 = ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->empty(__pyx_v_OpenNodes); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2712, __pyx_L1_error)
    if (__pyx_t_15) {

      /* "graph.pyx":2713
 *             cycles += 1
 *             if OpenNodes.empty():
 *                 break             # <<<<<<<<<<<<<<
 *             NodeCheck = OpenNodes.pop_top()
 *             MappedPath_T = MappedPaths[NodeCheck.pathindex] # getting mapped path from nodecheck index
 */
      goto __pyx_L9_break;

      /* "graph.pyx":2712
 *         while keepGoing:
 *             cycles += 1
 *             if OpenNodes.empty():             # <<<<<<<<<<<<<<
 *                 break
 *             NodeCheck = OpenNodes.pop_top()
 */
    }

    /* "graph.pyx":2714
 *             if OpenNodes.empty():
 *                 break
 *             NodeCheck = OpenNodes.pop_top()             # <<<<<<<<<<<<<<
 *             MappedPath_T = MappedPaths[NodeCheck.pathindex] # getting mapped path from nodecheck index
 * 
 */
    __pyx_t_21 = ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->pop_top(__pyx_v_OpenNodes); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2714, __pyx_L1_error)
    __pyx_v_NodeCheck = __pyx_t_21;

    /* "graph.pyx":2715
 *                 break
 *             NodeCheck = OpenNodes.pop_top()
 *             MappedPath_T = MappedPaths[NodeCheck.pathindex] # getting mapped path from nodecheck index             # <<<<<<<<<<<<<<
 * 
 *             for i in range(self.EidN):
 */
    __pyx_v_MappedPath_T = (__pyx_v_MappedPaths[__pyx_v_NodeCheck.pathindex]);

    /* "graph.pyx":2717
 *             MappedPath_T = MappedPaths[NodeCheck.pathindex] # getting mapped path from nodecheck index
 * 
 *             for i in range(self.EidN):             # <<<<<<<<<<<<<<
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1:
 */
    __pyx_t_13 = __pyx_v_self->EidN;
    __pyx_t_22 = __pyx_t_13;
    for (__pyx_t_23 = 0; __pyx_t_23 < __pyx_t_22; __pyx_t_23+=1) {
      __pyx_v_i = __pyx_t_23;

      /* "graph.pyx":2718
 * 
 *             for i in range(self.EidN):
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]             # <<<<<<<<<<<<<<
 *                 if Eid == -1:
 *                     # print(f'\t\tOut Edge {cycles} {Eid}')
 */
      __pyx_v_Eid = ((__pyx_v_self->nodes[__pyx_v_NodeCheck.Nid]).Eid[__pyx_v_i]);

      /* "graph.pyx":2719
 *             for i in range(self.EidN):
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1:             # <<<<<<<<<<<<<<
 *                     # print(f'\t\tOut Edge {cycles} {Eid}')
 *                     break
 */
      __pyx_t_15 = (__pyx_v_Eid == -1L);
      if (__pyx_t_15) {

        /* "graph.pyx":2721
 *                 if Eid == -1:
 *                     # print(f'\t\tOut Edge {cycles} {Eid}')
 *                     break             # <<<<<<<<<<<<<<
 *                 if Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 *                     # print(f'\t\tOut similar Edge {cycles} {Eid}')
 */
        goto __pyx_L12_break;

        /* "graph.pyx":2719
 *             for i in range(self.EidN):
 *                 Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                 if Eid == -1:             # <<<<<<<<<<<<<<
 *                     # print(f'\t\tOut Edge {cycles} {Eid}')
 *                     break
 */
      }

      /* "graph.pyx":2722
 *                     # print(f'\t\tOut Edge {cycles} {Eid}')
 *                     break
 *                 if Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:             # <<<<<<<<<<<<<<
 *                     # print(f'\t\tOut similar Edge {cycles} {Eid}')
 *                     continue
 */
      __pyx_t_16 = (__pyx_v_Eid == __pyx_v_NodeCheck.Eid);
      if (!__pyx_t_16) {
      } else {
        __pyx_t_15 = __pyx_t_16;
        goto __pyx_L15_bool_binop_done;
      }
      __pyx_t_16 = ((__pyx_v_self->_edgesIds[__pyx_v_Eid]) == -1L);
      __pyx_t_15 = __pyx_t_16;
      __pyx_L15_bool_binop_done:;
      if (__pyx_t_15) {

        /* "graph.pyx":2724
 *                 if Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 *                     # print(f'\t\tOut similar Edge {cycles} {Eid}')
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 if Find_IntVector(MappedPaths[NodeCheck.pathindex], Eid): # if Eid already in mapped paths
 */
        goto __pyx_L11_continue;

        /* "graph.pyx":2722
 *                     # print(f'\t\tOut Edge {cycles} {Eid}')
 *                     break
 *                 if Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:             # <<<<<<<<<<<<<<
 *                     # print(f'\t\tOut similar Edge {cycles} {Eid}')
 *                     continue
 */
      }

      /* "graph.pyx":2726
 *                     continue
 * 
 *                 if Find_IntVector(MappedPaths[NodeCheck.pathindex], Eid): # if Eid already in mapped paths             # <<<<<<<<<<<<<<
 *                     # print(f'\t\tOut Dupe {cycles}')
 *                     continue
 */
      __pyx_t_15 = __pyx_f_5graph_Find_IntVector((__pyx_v_MappedPaths[__pyx_v_NodeCheck.pathindex]), __pyx_v_Eid); if (unlikely(__pyx_t_15 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2726, __pyx_L1_error)
      if (__pyx_t_15) {

        /* "graph.pyx":2728
 *                 if Find_IntVector(MappedPaths[NodeCheck.pathindex], Eid): # if Eid already in mapped paths
 *                     # print(f'\t\tOut Dupe {cycles}')
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 if Eid == EidD:
 */
        goto __pyx_L11_continue;

        /* "graph.pyx":2726
 *                     continue
 * 
 *                 if Find_IntVector(MappedPaths[NodeCheck.pathindex], Eid): # if Eid already in mapped paths             # <<<<<<<<<<<<<<
 *                     # print(f'\t\tOut Dupe {cycles}')
 *                     continue
 */
      }

      /* "graph.pyx":2730
 *                     continue
 * 
 *                 if Eid == EidD:             # <<<<<<<<<<<<<<
 *                     if NodeCheck.Nid == self.edges[EidD].NidO:
 *                         pathlength = NodeCheck.Dist + DstD[0]
 */
      __pyx_t_15 = (__pyx_v_Eid == __pyx_v_EidD);
      if (__pyx_t_15) {

        /* "graph.pyx":2731
 * 
 *                 if Eid == EidD:
 *                     if NodeCheck.Nid == self.edges[EidD].NidO:             # <<<<<<<<<<<<<<
 *                         pathlength = NodeCheck.Dist + DstD[0]
 *                     else:
 */
        __pyx_t_15 = (__pyx_v_NodeCheck.Nid == (__pyx_v_self->edges[__pyx_v_EidD]).NidO);
        if (__pyx_t_15) {

          /* "graph.pyx":2732
 *                 if Eid == EidD:
 *                     if NodeCheck.Nid == self.edges[EidD].NidO:
 *                         pathlength = NodeCheck.Dist + DstD[0]             # <<<<<<<<<<<<<<
 *                     else:
 *                         pathlength = NodeCheck.Dist + DstD[1]
 */
          __pyx_v_pathlength = (__pyx_v_NodeCheck.Dist + __pyx_v_DstD.f0);

          /* "graph.pyx":2731
 * 
 *                 if Eid == EidD:
 *                     if NodeCheck.Nid == self.edges[EidD].NidO:             # <<<<<<<<<<<<<<
 *                         pathlength = NodeCheck.Dist + DstD[0]
 *                     else:
 */
          goto __pyx_L19;
        }

        /* "graph.pyx":2734
 *                         pathlength = NodeCheck.Dist + DstD[0]
 *                     else:
 *                         pathlength = NodeCheck.Dist + DstD[1]             # <<<<<<<<<<<<<<
 *                     if pathlength < LimitDistance:
 *                         FoundDistance.push_back(pathlength)
 */
        /*else*/ {
          __pyx_v_pathlength = (__pyx_v_NodeCheck.Dist + __pyx_v_DstD.f1);
        }
        __pyx_L19:;

        /* "graph.pyx":2735
 *                     else:
 *                         pathlength = NodeCheck.Dist + DstD[1]
 *                     if pathlength < LimitDistance:             # <<<<<<<<<<<<<<
 *                         FoundDistance.push_back(pathlength)
 *                         MappedPaths[NodeCheck.pathindex].push_back(Eid)
 */
        __pyx_t_15 = (__pyx_v_pathlength < __pyx_v_LimitDistance);
        if (__pyx_t_15) {

          /* "graph.pyx":2736
 *                         pathlength = NodeCheck.Dist + DstD[1]
 *                     if pathlength < LimitDistance:
 *                         FoundDistance.push_back(pathlength)             # <<<<<<<<<<<<<<
 *                         MappedPaths[NodeCheck.pathindex].push_back(Eid)
 *                         FoundPaths.push_back(MappedPaths[NodeCheck.pathindex])
 */
          try {
            __pyx_v_FoundDistance.push_back(__pyx_v_pathlength);
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(0, 2736, __pyx_L1_error)
          }

          /* "graph.pyx":2737
 *                     if pathlength < LimitDistance:
 *                         FoundDistance.push_back(pathlength)
 *                         MappedPaths[NodeCheck.pathindex].push_back(Eid)             # <<<<<<<<<<<<<<
 *                         FoundPaths.push_back(MappedPaths[NodeCheck.pathindex])
 *                         pathN += 1
 */
          try {
            (__pyx_v_MappedPaths[__pyx_v_NodeCheck.pathindex]).push_back(__pyx_v_Eid);
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(0, 2737, __pyx_L1_error)
          }

          /* "graph.pyx":2738
 *                         FoundDistance.push_back(pathlength)
 *                         MappedPaths[NodeCheck.pathindex].push_back(Eid)
 *                         FoundPaths.push_back(MappedPaths[NodeCheck.pathindex])             # <<<<<<<<<<<<<<
 *                         pathN += 1
 *                         if PathLim <= pathN:
 */
          try {
            __pyx_v_FoundPaths.push_back((__pyx_v_MappedPaths[__pyx_v_NodeCheck.pathindex]));
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(0, 2738, __pyx_L1_error)
          }

          /* "graph.pyx":2739
 *                         MappedPaths[NodeCheck.pathindex].push_back(Eid)
 *                         FoundPaths.push_back(MappedPaths[NodeCheck.pathindex])
 *                         pathN += 1             # <<<<<<<<<<<<<<
 *                         if PathLim <= pathN:
 *                             keepGoing = False
 */
          __pyx_v_pathN = (__pyx_v_pathN + 1);

          /* "graph.pyx":2740
 *                         FoundPaths.push_back(MappedPaths[NodeCheck.pathindex])
 *                         pathN += 1
 *                         if PathLim <= pathN:             # <<<<<<<<<<<<<<
 *                             keepGoing = False
 *                             break
 */
          __pyx_t_15 = (__pyx_v_PathLim <= __pyx_v_pathN);
          if (__pyx_t_15) {

            /* "graph.pyx":2741
 *                         pathN += 1
 *                         if PathLim <= pathN:
 *                             keepGoing = False             # <<<<<<<<<<<<<<
 *                             break
 *                     # else: print(f'\t\tOut didnt quite made it {cycles} {pathlength}')
 */
            __pyx_v_keepGoing = 0;

            /* "graph.pyx":2742
 *                         if PathLim <= pathN:
 *                             keepGoing = False
 *                             break             # <<<<<<<<<<<<<<
 *                     # else: print(f'\t\tOut didnt quite made it {cycles} {pathlength}')
 *                     continue
 */
            goto __pyx_L12_break;

            /* "graph.pyx":2740
 *                         FoundPaths.push_back(MappedPaths[NodeCheck.pathindex])
 *                         pathN += 1
 *                         if PathLim <= pathN:             # <<<<<<<<<<<<<<
 *                             keepGoing = False
 *                             break
 */
          }

          /* "graph.pyx":2735
 *                     else:
 *                         pathlength = NodeCheck.Dist + DstD[1]
 *                     if pathlength < LimitDistance:             # <<<<<<<<<<<<<<
 *                         FoundDistance.push_back(pathlength)
 *                         MappedPaths[NodeCheck.pathindex].push_back(Eid)
 */
        }

        /* "graph.pyx":2744
 *                             break
 *                     # else: print(f'\t\tOut didnt quite made it {cycles} {pathlength}')
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 EdgeC = self.edges[Eid]
 */
        goto __pyx_L11_continue;

        /* "graph.pyx":2730
 *                     continue
 * 
 *                 if Eid == EidD:             # <<<<<<<<<<<<<<
 *                     if NodeCheck.Nid == self.edges[EidD].NidO:
 *                         pathlength = NodeCheck.Dist + DstD[0]
 */
      }

      /* "graph.pyx":2746
 *                     continue
 * 
 *                 EdgeC = self.edges[Eid]             # <<<<<<<<<<<<<<
 *                 if EdgeC.NidO == NodeCheck.Nid:
 *                     pathlength = EdgeC.len
 */
      __pyx_v_EdgeC = (__pyx_v_self->edges[__pyx_v_Eid]);

      /* "graph.pyx":2747
 * 
 *                 EdgeC = self.edges[Eid]
 *                 if EdgeC.NidO == NodeCheck.Nid:             # <<<<<<<<<<<<<<
 *                     pathlength = EdgeC.len
 *                     NidF = EdgeC.NidD
 */
      __pyx_t_15 = (__pyx_v_EdgeC.NidO == __pyx_v_NodeCheck.Nid);
      if (__pyx_t_15) {

        /* "graph.pyx":2748
 *                 EdgeC = self.edges[Eid]
 *                 if EdgeC.NidO == NodeCheck.Nid:
 *                     pathlength = EdgeC.len             # <<<<<<<<<<<<<<
 *                     NidF = EdgeC.NidD
 *                 else:
 */
        __pyx_t_14 = __pyx_v_EdgeC.len;
        __pyx_v_pathlength = __pyx_t_14;

        /* "graph.pyx":2749
 *                 if EdgeC.NidO == NodeCheck.Nid:
 *                     pathlength = EdgeC.len
 *                     NidF = EdgeC.NidD             # <<<<<<<<<<<<<<
 *                 else:
 *                     pathlength = EdgeC.lenR
 */
        __pyx_t_24 = __pyx_v_EdgeC.NidD;
        __pyx_v_NidF = __pyx_t_24;

        /* "graph.pyx":2747
 * 
 *                 EdgeC = self.edges[Eid]
 *                 if EdgeC.NidO == NodeCheck.Nid:             # <<<<<<<<<<<<<<
 *                     pathlength = EdgeC.len
 *                     NidF = EdgeC.NidD
 */
        goto __pyx_L22;
      }

      /* "graph.pyx":2751
 *                     NidF = EdgeC.NidD
 *                 else:
 *                     pathlength = EdgeC.lenR             # <<<<<<<<<<<<<<
 *                     NidF = EdgeC.NidO
 * 
 */
      /*else*/ {
        __pyx_t_14 = __pyx_v_EdgeC.lenR;
        __pyx_v_pathlength = __pyx_t_14;

        /* "graph.pyx":2752
 *                 else:
 *                     pathlength = EdgeC.lenR
 *                     NidF = EdgeC.NidO             # <<<<<<<<<<<<<<
 * 
 *                 pathlength += NodeCheck.Dist + self.nodes[NidF].c
 */
        __pyx_t_24 = __pyx_v_EdgeC.NidO;
        __pyx_v_NidF = __pyx_t_24;
      }
      __pyx_L22:;

      /* "graph.pyx":2754
 *                     NidF = EdgeC.NidO
 * 
 *                 pathlength += NodeCheck.Dist + self.nodes[NidF].c             # <<<<<<<<<<<<<<
 *                 if self.nodeVisited[NidF].Nid != -1:
 *                     if (pathlength + self.nodeVisited[NidF].Dist) > LimitDistance:
 */
      __pyx_v_pathlength = (__pyx_v_pathlength + (__pyx_v_NodeCheck.Dist + (__pyx_v_self->nodes[__pyx_v_NidF]).c));

      /* "graph.pyx":2755
 * 
 *                 pathlength += NodeCheck.Dist + self.nodes[NidF].c
 *                 if self.nodeVisited[NidF].Nid != -1:             # <<<<<<<<<<<<<<
 *                     if (pathlength + self.nodeVisited[NidF].Dist) > LimitDistance:
 *                         # print(f'\t\tOut {cycles} - {Eid} {pathlength} | {self.nodeVisited[NidF].Dist}')
 */
      __pyx_t_15 = ((__pyx_v_self->nodeVisited[__pyx_v_NidF]).Nid != -1L);
      if (__pyx_t_15) {

        /* "graph.pyx":2756
 *                 pathlength += NodeCheck.Dist + self.nodes[NidF].c
 *                 if self.nodeVisited[NidF].Nid != -1:
 *                     if (pathlength + self.nodeVisited[NidF].Dist) > LimitDistance:             # <<<<<<<<<<<<<<
 *                         # print(f'\t\tOut {cycles} - {Eid} {pathlength} | {self.nodeVisited[NidF].Dist}')
 *                         continue
 */
        __pyx_t_15 = ((__pyx_v_pathlength + (__pyx_v_self->nodeVisited[__pyx_v_NidF]).Dist) > __pyx_v_LimitDistance);
        if (__pyx_t_15) {

          /* "graph.pyx":2758
 *                     if (pathlength + self.nodeVisited[NidF].Dist) > LimitDistance:
 *                         # print(f'\t\tOut {cycles} - {Eid} {pathlength} | {self.nodeVisited[NidF].Dist}')
 *                         continue             # <<<<<<<<<<<<<<
 *                     else:
 *                         NodeReach_T.Weight = pathlength + (self.nodeVisited[NidF].Dist-MinimumDistance)* DistMul
 */
          goto __pyx_L11_continue;

          /* "graph.pyx":2756
 *                 pathlength += NodeCheck.Dist + self.nodes[NidF].c
 *                 if self.nodeVisited[NidF].Nid != -1:
 *                     if (pathlength + self.nodeVisited[NidF].Dist) > LimitDistance:             # <<<<<<<<<<<<<<
 *                         # print(f'\t\tOut {cycles} - {Eid} {pathlength} | {self.nodeVisited[NidF].Dist}')
 *                         continue
 */
        }

        /* "graph.pyx":2760
 *                         continue
 *                     else:
 *                         NodeReach_T.Weight = pathlength + (self.nodeVisited[NidF].Dist-MinimumDistance)* DistMul             # <<<<<<<<<<<<<<
 *                 else:
 *                     # print(f'\t\tOut {cycles} - Nid-1')
 */
        /*else*/ {
          __pyx_v_NodeReach_T.Weight = (__pyx_v_pathlength + (((__pyx_v_self->nodeVisited[__pyx_v_NidF]).Dist - __pyx_v_MinimumDistance) * __pyx_v_DistMul));
        }

        /* "graph.pyx":2755
 * 
 *                 pathlength += NodeCheck.Dist + self.nodes[NidF].c
 *                 if self.nodeVisited[NidF].Nid != -1:             # <<<<<<<<<<<<<<
 *                     if (pathlength + self.nodeVisited[NidF].Dist) > LimitDistance:
 *                         # print(f'\t\tOut {cycles} - {Eid} {pathlength} | {self.nodeVisited[NidF].Dist}')
 */
        goto __pyx_L23;
      }

      /* "graph.pyx":2763
 *                 else:
 *                     # print(f'\t\tOut {cycles} - Nid-1')
 *                     continue             # <<<<<<<<<<<<<<
 *                 MappedPath_T2 = MappedPath_T
 *                 MappedPath_T2.push_back(Eid)
 */
      /*else*/ {
        goto __pyx_L11_continue;
      }
      __pyx_L23:;

      /* "graph.pyx":2764
 *                     # print(f'\t\tOut {cycles} - Nid-1')
 *                     continue
 *                 MappedPath_T2 = MappedPath_T             # <<<<<<<<<<<<<<
 *                 MappedPath_T2.push_back(Eid)
 *                 NodeReach_T.Nid = NidF
 */
      __pyx_v_MappedPath_T2 = __pyx_v_MappedPath_T;

      /* "graph.pyx":2765
 *                     continue
 *                 MappedPath_T2 = MappedPath_T
 *                 MappedPath_T2.push_back(Eid)             # <<<<<<<<<<<<<<
 *                 NodeReach_T.Nid = NidF
 *                 NodeReach_T.Dist = pathlength
 */
      try {
        __pyx_v_MappedPath_T2.push_back(__pyx_v_Eid);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 2765, __pyx_L1_error)
      }

      /* "graph.pyx":2766
 *                 MappedPath_T2 = MappedPath_T
 *                 MappedPath_T2.push_back(Eid)
 *                 NodeReach_T.Nid = NidF             # <<<<<<<<<<<<<<
 *                 NodeReach_T.Dist = pathlength
 *                 NodeReach_T.Eid = Eid
 */
      __pyx_v_NodeReach_T.Nid = __pyx_v_NidF;

      /* "graph.pyx":2767
 *                 MappedPath_T2.push_back(Eid)
 *                 NodeReach_T.Nid = NidF
 *                 NodeReach_T.Dist = pathlength             # <<<<<<<<<<<<<<
 *                 NodeReach_T.Eid = Eid
 * 
 */
      __pyx_v_NodeReach_T.Dist = __pyx_v_pathlength;

      /* "graph.pyx":2768
 *                 NodeReach_T.Nid = NidF
 *                 NodeReach_T.Dist = pathlength
 *                 NodeReach_T.Eid = Eid             # <<<<<<<<<<<<<<
 * 
 *                 if MappedPaths[NodeCheck.pathindex] == MappedPath_T:
 */
      __pyx_v_NodeReach_T.Eid = __pyx_v_Eid;

      /* "graph.pyx":2770
 *                 NodeReach_T.Eid = Eid
 * 
 *                 if MappedPaths[NodeCheck.pathindex] == MappedPath_T:             # <<<<<<<<<<<<<<
 *                     NodeReach_T.pathindex = NodeCheck.pathindex
 *                     MappedPaths[NodeCheck.pathindex] = MappedPath_T2
 */
      __pyx_t_15 = ((__pyx_v_MappedPaths[__pyx_v_NodeCheck.pathindex]) == __pyx_v_MappedPath_T);
      if (__pyx_t_15) {

        /* "graph.pyx":2771
 * 
 *                 if MappedPaths[NodeCheck.pathindex] == MappedPath_T:
 *                     NodeReach_T.pathindex = NodeCheck.pathindex             # <<<<<<<<<<<<<<
 *                     MappedPaths[NodeCheck.pathindex] = MappedPath_T2
 *                 else:
 */
        __pyx_t_24 = __pyx_v_NodeCheck.pathindex;
        __pyx_v_NodeReach_T.pathindex = __pyx_t_24;

        /* "graph.pyx":2772
 *                 if MappedPaths[NodeCheck.pathindex] == MappedPath_T:
 *                     NodeReach_T.pathindex = NodeCheck.pathindex
 *                     MappedPaths[NodeCheck.pathindex] = MappedPath_T2             # <<<<<<<<<<<<<<
 *                 else:
 *                     NodeReach_T.pathindex = <int>MappedPaths.size()
 */
        (__pyx_v_MappedPaths[__pyx_v_NodeCheck.pathindex]) = __pyx_v_MappedPath_T2;

        /* "graph.pyx":2770
 *                 NodeReach_T.Eid = Eid
 * 
 *                 if MappedPaths[NodeCheck.pathindex] == MappedPath_T:             # <<<<<<<<<<<<<<
 *                     NodeReach_T.pathindex = NodeCheck.pathindex
 *                     MappedPaths[NodeCheck.pathindex] = MappedPath_T2
 */
        goto __pyx_L25;
      }

      /* "graph.pyx":2774
 *                     MappedPaths[NodeCheck.pathindex] = MappedPath_T2
 *                 else:
 *                     NodeReach_T.pathindex = <int>MappedPaths.size()             # <<<<<<<<<<<<<<
 *                     MappedPaths.push_back(MappedPath_T2)
 *                 OpenNodes.push(NodeReach_T)
 */
      /*else*/ {
        __pyx_v_NodeReach_T.pathindex = ((int)__pyx_v_MappedPaths.size());

        /* "graph.pyx":2775
 *                 else:
 *                     NodeReach_T.pathindex = <int>MappedPaths.size()
 *                     MappedPaths.push_back(MappedPath_T2)             # <<<<<<<<<<<<<<
 *                 OpenNodes.push(NodeReach_T)
 * 
 */
        try {
          __pyx_v_MappedPaths.push_back(__pyx_v_MappedPath_T2);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 2775, __pyx_L1_error)
        }
      }
      __pyx_L25:;

      /* "graph.pyx":2776
 *                     NodeReach_T.pathindex = <int>MappedPaths.size()
 *                     MappedPaths.push_back(MappedPath_T2)
 *                 OpenNodes.push(NodeReach_T)             # <<<<<<<<<<<<<<
 * 
 *             if cycles > LimCycle:
 */
      ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_NodeReach_T); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2776, __pyx_L1_error)
      __pyx_L11_continue:;
    }
    __pyx_L12_break:;

    /* "graph.pyx":2778
 *                 OpenNodes.push(NodeReach_T)
 * 
 *             if cycles > LimCycle:             # <<<<<<<<<<<<<<
 *                 break
 *         # print(f'\t{EidO} to {EidD} - c{cycles} || p{pathN}')
 */
    __pyx_t_15 = (__pyx_v_cycles > __pyx_v_LimCycle);
    if (__pyx_t_15) {

      /* "graph.pyx":2779
 * 
 *             if cycles > LimCycle:
 *                 break             # <<<<<<<<<<<<<<
 *         # print(f'\t{EidO} to {EidD} - c{cycles} || p{pathN}')
 *         return tuple(FoundDistance), tuple(FoundPaths)
 */
      goto __pyx_L9_break;

      /* "graph.pyx":2778
 *                 OpenNodes.push(NodeReach_T)
 * 
 *             if cycles > LimCycle:             # <<<<<<<<<<<<<<
 *                 break
 *         # print(f'\t{EidO} to {EidD} - c{cycles} || p{pathN}')
 */
    }
  }
  __pyx_L9_break:;

  /* "graph.pyx":2781
 *                 break
 *         # print(f'\t{EidO} to {EidD} - c{cycles} || p{pathN}')
 *         return tuple(FoundDistance), tuple(FoundPaths)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_float(__pyx_v_FoundDistance); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PySequence_Tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(__pyx_v_FoundPaths); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_11 = __Pyx_PySequence_Tuple(__pyx_t_1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2)) __PYX_ERR(0, 2781, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_11)) __PYX_ERR(0, 2781, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_11 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "graph.pyx":2608
 *         return tuple(FoundDistance), tuple(FoundPaths)
 * 
 *     def PathFind_Multi_VirtuEntry(             # <<<<<<<<<<<<<<
 *             self,
 *             const int& EidO, tuple[float, float, float] PtO, tuple[float, float] DstO,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("graph.GraphCy.PathFind_Multi_VirtuEntry", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_OpenNodes);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "graph.pyx":2784
 * 
 * 
 *     def PathFind_Multi_MultiDest_VirtuEntry(             # <<<<<<<<<<<<<<
 *             self,
 *             const int& EidO, tuple[float, float, float] PtO, tuple[float, float] DstO, int& Oid,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5graph_7GraphCy_63PathFind_Multi_MultiDest_VirtuEntry(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5graph_7GraphCy_62PathFind_Multi_MultiDest_VirtuEntry, "\n        Find possible paths within\n\n        Parameters\n        ------------\n        NidO : int\n            starting node ID\n        NidD : int\n            destination node ID\n        DistMulLim : float, default 1.1\n            distance search limit multiplier for distance filter. i.e. if the minimum distance is 100m, it will propable nodes with propable paths up to 120m\n        LimDist : float, default 10,000.0\n            distance limit before giving up the pathfinding process\n        LimCycle : int, default 10,000\n            number of cycles of priority_queue before giving up the pathfinding process\n        DistMul : float, default 1.0\n            A* weighting multiplier for the remaining cartesian distance\n        EdgeCmin : float, default 0.9\n            minimum edge cost multiplier, important if there are costs smaller than 1.0\n        \n        Returns\n        -----------\n        set of alternative paths\n        tuple of sets of distance and edgeids (213.8, (1, 2, 3, 4))\n        \n        Notes\n        -----------\n        Modified alternative paths algorithm, with an operation cost near O(2K+?)\n        ");
static PyMethodDef __pyx_mdef_5graph_7GraphCy_63PathFind_Multi_MultiDest_VirtuEntry = {"PathFind_Multi_MultiDest_VirtuEntry", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_63PathFind_Multi_MultiDest_VirtuEntry, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5graph_7GraphCy_62PathFind_Multi_MultiDest_VirtuEntry};
static PyObject *__pyx_pw_5graph_7GraphCy_63PathFind_Multi_MultiDest_VirtuEntry(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_EidO;
  __pyx_ctuple_float__and_float__and_float __pyx_v_PtO;
  __pyx_ctuple_float__and_float __pyx_v_DstO;
  int __pyx_v_Oid;
  PyObject *__pyx_v_DestTup = 0;
  float __pyx_v_DistMulLim;
  float __pyx_v_LimDist;
  int __pyx_v_LimCycle;
  float __pyx_v_DistMul;
  int __pyx_v_PathLim;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("PathFind_Multi_MultiDest_VirtuEntry (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_EidO,&__pyx_n_s_PtO,&__pyx_n_s_DstO,&__pyx_n_s_Oid,&__pyx_n_s_DestTup,&__pyx_n_s_DistMulLim,&__pyx_n_s_LimDist,&__pyx_n_s_LimCycle,&__pyx_n_s_DistMul,&__pyx_n_s_PathLim,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case 10: values[9] = __Pyx_Arg_FASTCALL(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = __Pyx_Arg_FASTCALL(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = __Pyx_Arg_FASTCALL(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_EidO)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2784, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_PtO)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2784, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("PathFind_Multi_MultiDest_VirtuEntry", 0, 5, 10, 1); __PYX_ERR(0, 2784, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_DstO)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2784, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("PathFind_Multi_MultiDest_VirtuEntry", 0, 5, 10, 2); __PYX_ERR(0, 2784, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_Oid)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2784, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("PathFind_Multi_MultiDest_VirtuEntry", 0, 5, 10, 3); __PYX_ERR(0, 2784, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_DestTup)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[4]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2784, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("PathFind_Multi_MultiDest_VirtuEntry", 0, 5, 10, 4); __PYX_ERR(0, 2784, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_DistMulLim);
          if (value) { values[5] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2784, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_LimDist);
          if (value) { values[6] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2784, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_LimCycle);
          if (value) { values[7] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2784, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_DistMul);
          if (value) { values[8] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2784, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_PathLim);
          if (value) { values[9] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2784, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "PathFind_Multi_MultiDest_VirtuEntry") < 0)) __PYX_ERR(0, 2784, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case 10: values[9] = __Pyx_Arg_FASTCALL(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = __Pyx_Arg_FASTCALL(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = __Pyx_Arg_FASTCALL(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_EidO = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_EidO == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2786, __pyx_L3_error)
    __pyx_v_PtO = __pyx_convert__from_py___pyx_ctuple_float__and_float__and_float(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2786, __pyx_L3_error)
    __pyx_v_DstO = __pyx_convert__from_py___pyx_ctuple_float__and_float(values[2]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2786, __pyx_L3_error)
    __pyx_v_Oid = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_Oid == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2786, __pyx_L3_error)
    __pyx_v_DestTup = ((PyObject*)values[4]);
    if (values[5]) {
      __pyx_v_DistMulLim = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_DistMulLim == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2788, __pyx_L3_error)
    } else {
      __pyx_v_DistMulLim = ((float)1.1);
    }
    if (values[6]) {
      __pyx_v_LimDist = __pyx_PyFloat_AsFloat(values[6]); if (unlikely((__pyx_v_LimDist == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2789, __pyx_L3_error)
    } else {
      __pyx_v_LimDist = ((float)10000.0);
    }
    if (values[7]) {
      __pyx_v_LimCycle = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_LimCycle == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2790, __pyx_L3_error)
    } else {
      __pyx_v_LimCycle = ((int)0xF4240);
    }
    if (values[8]) {
      __pyx_v_DistMul = __pyx_PyFloat_AsFloat(values[8]); if (unlikely((__pyx_v_DistMul == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2791, __pyx_L3_error)
    } else {
      __pyx_v_DistMul = ((float)2.0);
    }
    if (values[9]) {
      __pyx_v_PathLim = __Pyx_PyInt_As_int(values[9]); if (unlikely((__pyx_v_PathLim == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2792, __pyx_L3_error)
    } else {
      __pyx_v_PathLim = ((int)0x186A0);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("PathFind_Multi_MultiDest_VirtuEntry", 0, 5, 10, __pyx_nargs); __PYX_ERR(0, 2784, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("graph.GraphCy.PathFind_Multi_MultiDest_VirtuEntry", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_DestTup), (&PyTuple_Type), 1, "DestTup", 1))) __PYX_ERR(0, 2787, __pyx_L1_error)
  __pyx_r = __pyx_pf_5graph_7GraphCy_62PathFind_Multi_MultiDest_VirtuEntry(((struct __pyx_obj_5graph_GraphCy *)__pyx_v_self), __pyx_v_EidO, __pyx_v_PtO, __pyx_v_DstO, __pyx_v_Oid, __pyx_v_DestTup, __pyx_v_DistMulLim, __pyx_v_LimDist, __pyx_v_LimCycle, __pyx_v_DistMul, __pyx_v_PathLim);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5graph_7GraphCy_62PathFind_Multi_MultiDest_VirtuEntry(struct __pyx_obj_5graph_GraphCy *__pyx_v_self, int __pyx_v_EidO, __pyx_ctuple_float__and_float__and_float __pyx_v_PtO, __pyx_ctuple_float__and_float __pyx_v_DstO, int __pyx_v_Oid, PyObject *__pyx_v_DestTup, float __pyx_v_DistMulLim, float __pyx_v_LimDist, int __pyx_v_LimCycle, float __pyx_v_DistMul, int __pyx_v_PathLim) {
  int __pyx_v_EidD;
  float __pyx_v_LimitDistance;
  float __pyx_v_PointO[3];
  float __pyx_v_PointD[3];
  float __pyx_v_DistO[2];
  float __pyx_v_DistD[2];
  float __pyx_v_BaseDist;
  float __pyx_v_MinimumDistance;
  struct __pyx_t_5graph_NodeReach *__pyx_v_nodeMapped;
  std::vector<std::vector<int> >  __pyx_v_MappedPaths;
  std::vector<std::vector<int> >  __pyx_v_FoundPaths;
  std::vector<float>  __pyx_v_FoundDistance;
  std::vector<float>  __pyx_v_FoundWeights;
  int __pyx_v_keepGoing;
  struct __pyx_t_5graph_NodeReach __pyx_v_NodeCheck;
  struct __pyx_obj_5graph_PriorityQueue_NR *__pyx_v_OpenNodes = 0;
  struct __pyx_t_5graph_NodeReach __pyx_v_startNode;
  struct __pyx_t_5graph_NodeReach __pyx_v_NodeReach_T;
  float __pyx_v_pathlength;
  struct __pyx_t_5graph_Edge __pyx_v_EdgeC;
  std::vector<int>  __pyx_v_MappedPath_T;
  std::vector<int>  __pyx_v_MappedPath_T2;
  int __pyx_v_cycles;
  int __pyx_v_i;
  int __pyx_v_pathN;
  int __pyx_v_tempC;
  PyObject *__pyx_v_dest = NULL;
  int __pyx_v_Eid;
  int __pyx_v_NidF;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float *__pyx_t_1;
  float __pyx_t_2;
  float __pyx_t_3;
  float __pyx_t_4;
  struct __pyx_t_5graph_NodeReach *__pyx_t_5;
  struct __pyx_opt_args_5graph_7GraphCy_C_NodeMap_VirtuEntry __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  int __pyx_t_23;
  struct __pyx_t_5graph_NodeReach __pyx_t_24;
  int __pyx_t_25;
  int __pyx_t_26;
  int __pyx_t_27;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PathFind_Multi_MultiDest_VirtuEntry", 1);

  /* "graph.pyx":2828
 *         cdef int EidD
 *         cdef float LimitDistance
 *         cdef float[3] PointO = (PtO[0], PtO[1], PtO[2])             # <<<<<<<<<<<<<<
 *         cdef float[3] PointD
 *         cdef float[2] DistO = (DstO[0], DstO[1])
 */
  __pyx_t_1 = __pyx_v_PointO;
  __pyx_t_2 = __pyx_v_PtO.f0;
  __pyx_t_3 = __pyx_v_PtO.f1;
  __pyx_t_4 = __pyx_v_PtO.f2;
  (__pyx_t_1[0]) = __pyx_t_2;
  (__pyx_t_1[1]) = __pyx_t_3;
  (__pyx_t_1[2]) = __pyx_t_4;

  /* "graph.pyx":2830
 *         cdef float[3] PointO = (PtO[0], PtO[1], PtO[2])
 *         cdef float[3] PointD
 *         cdef float[2] DistO = (DstO[0], DstO[1])             # <<<<<<<<<<<<<<
 *         cdef float[2] DistD
 *         cdef float BaseDist
 */
  __pyx_t_1 = __pyx_v_DistO;
  __pyx_t_4 = __pyx_v_DstO.f0;
  __pyx_t_3 = __pyx_v_DstO.f1;
  (__pyx_t_1[0]) = __pyx_t_4;
  (__pyx_t_1[1]) = __pyx_t_3;

  /* "graph.pyx":2834
 *         cdef float BaseDist
 *         cdef float MinimumDistance
 *         cdef NodeReach* nodeMapped = self.C_NodeMap_VirtuEntry(             # <<<<<<<<<<<<<<
 *                                                             EidO, PointO, DistO,
 *                                                             0, LimDist*DistMulLim, LimCycle*2)
 */
  __pyx_t_6.__pyx_n = 3;
  __pyx_t_6.ReverseEdge = 0;
  __pyx_t_6.LimDist = (__pyx_v_LimDist * __pyx_v_DistMulLim);
  __pyx_t_6.LimCycle = (__pyx_v_LimCycle * 2);
  __pyx_t_5 = ((struct __pyx_vtabstruct_5graph_GraphCy *)__pyx_v_self->__pyx_vtab)->C_NodeMap_VirtuEntry(__pyx_v_self, __pyx_v_EidO, __pyx_v_PointO, __pyx_v_DistO, &__pyx_t_6); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2834, __pyx_L1_error)
  __pyx_v_nodeMapped = __pyx_t_5;

  /* "graph.pyx":2846
 *         cdef bint keepGoing
 *         cdef NodeReach NodeCheck
 *         cdef PriorityQueue_NR OpenNodes = PriorityQueue_NR()             # <<<<<<<<<<<<<<
 *         cdef NodeReach startNode
 * 
 */
  __pyx_t_7 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5graph_PriorityQueue_NR)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_v_OpenNodes = ((struct __pyx_obj_5graph_PriorityQueue_NR *)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "graph.pyx":2857
 *         cdef int i
 *         cdef int pathN
 *         cdef int tempC = 0             # <<<<<<<<<<<<<<
 *         # cycles per destination
 *         for dest in DestTup:
 */
  __pyx_v_tempC = 0;

  /* "graph.pyx":2859
 *         cdef int tempC = 0
 *         # cycles per destination
 *         for dest in DestTup:             # <<<<<<<<<<<<<<
 *             tempC += 1
 *             if Oid == dest[4]:
 */
  if (unlikely(__pyx_v_DestTup == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 2859, __pyx_L1_error)
  }
  __pyx_t_7 = __pyx_v_DestTup; __Pyx_INCREF(__pyx_t_7);
  __pyx_t_8 = 0;
  for (;;) {
    {
      Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_7);
      #if !CYTHON_ASSUME_SAFE_MACROS
      if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 2859, __pyx_L1_error)
      #endif
      if (__pyx_t_8 >= __pyx_temp) break;
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_8); __Pyx_INCREF(__pyx_t_9); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 2859, __pyx_L1_error)
    #else
    __pyx_t_9 = __Pyx_PySequence_ITEM(__pyx_t_7, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2859, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_dest, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "graph.pyx":2860
 *         # cycles per destination
 *         for dest in DestTup:
 *             tempC += 1             # <<<<<<<<<<<<<<
 *             if Oid == dest[4]:
 *                 continue
 */
    __pyx_v_tempC = (__pyx_v_tempC + 1);

    /* "graph.pyx":2861
 *         for dest in DestTup:
 *             tempC += 1
 *             if Oid == dest[4]:             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
    __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_Oid); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2861, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_dest, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2861, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_11 = PyObject_RichCompare(__pyx_t_9, __pyx_t_10, Py_EQ); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2861, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_11); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 2861, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (__pyx_t_12) {

      /* "graph.pyx":2862
 *             tempC += 1
 *             if Oid == dest[4]:
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             MappedPaths.clear()
 */
      goto __pyx_L3_continue;

      /* "graph.pyx":2861
 *         for dest in DestTup:
 *             tempC += 1
 *             if Oid == dest[4]:             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
    }

    /* "graph.pyx":2864
 *                 continue
 * 
 *             MappedPaths.clear()             # <<<<<<<<<<<<<<
 *             OpenNodes.clear()
 *             MappedPath_T.clear()
 */
    __pyx_v_MappedPaths.clear();

    /* "graph.pyx":2865
 * 
 *             MappedPaths.clear()
 *             OpenNodes.clear()             # <<<<<<<<<<<<<<
 *             MappedPath_T.clear()
 *             MappedPath_T2.clear()
 */
    ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->clear(__pyx_v_OpenNodes); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2865, __pyx_L1_error)

    /* "graph.pyx":2866
 *             MappedPaths.clear()
 *             OpenNodes.clear()
 *             MappedPath_T.clear()             # <<<<<<<<<<<<<<
 *             MappedPath_T2.clear()
 *             keepGoing = True
 */
    __pyx_v_MappedPath_T.clear();

    /* "graph.pyx":2867
 *             OpenNodes.clear()
 *             MappedPath_T.clear()
 *             MappedPath_T2.clear()             # <<<<<<<<<<<<<<
 *             keepGoing = True
 *             pathN = 0
 */
    __pyx_v_MappedPath_T2.clear();

    /* "graph.pyx":2868
 *             MappedPath_T.clear()
 *             MappedPath_T2.clear()
 *             keepGoing = True             # <<<<<<<<<<<<<<
 *             pathN = 0
 * 
 */
    __pyx_v_keepGoing = 1;

    /* "graph.pyx":2869
 *             MappedPath_T2.clear()
 *             keepGoing = True
 *             pathN = 0             # <<<<<<<<<<<<<<
 * 
 *             EidD = dest[0]
 */
    __pyx_v_pathN = 0;

    /* "graph.pyx":2871
 *             pathN = 0
 * 
 *             EidD = dest[0]             # <<<<<<<<<<<<<<
 *             PointD = (dest[1][0], dest[1][1], dest[1][2])
 *             DistD = (dest[2][0], dest[2][1])
 */
    __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_dest, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2871, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_t_11); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2871, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_v_EidD = __pyx_t_13;

    /* "graph.pyx":2872
 * 
 *             EidD = dest[0]
 *             PointD = (dest[1][0], dest[1][1], dest[1][2])             # <<<<<<<<<<<<<<
 *             DistD = (dest[2][0], dest[2][1])
 *             BaseDist = dist3d_ar(PointO, PointD)
 */
    __pyx_t_1 = __pyx_v_PointD;
    __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_dest, 1, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2872, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_11, 0, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2872, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_t_10); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2872, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_dest, 1, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2872, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_11 = __Pyx_GetItemInt(__pyx_t_10, 1, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2872, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_11); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2872, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_dest, 1, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2872, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_11, 2, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2872, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_t_10); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2872, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    (__pyx_t_1[0]) = __pyx_t_3;
    (__pyx_t_1[1]) = __pyx_t_4;
    (__pyx_t_1[2]) = __pyx_t_2;

    /* "graph.pyx":2873
 *             EidD = dest[0]
 *             PointD = (dest[1][0], dest[1][1], dest[1][2])
 *             DistD = (dest[2][0], dest[2][1])             # <<<<<<<<<<<<<<
 *             BaseDist = dist3d_ar(PointO, PointD)
 *             if BaseDist > LimDist:
 */
    __pyx_t_1 = __pyx_v_DistD;
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_dest, 2, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2873, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_11 = __Pyx_GetItemInt(__pyx_t_10, 0, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2873, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_t_11); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2873, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_dest, 2, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2873, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_11, 1, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2873, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_10); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2873, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    (__pyx_t_1[0]) = __pyx_t_2;
    (__pyx_t_1[1]) = __pyx_t_4;

    /* "graph.pyx":2874
 *             PointD = (dest[1][0], dest[1][1], dest[1][2])
 *             DistD = (dest[2][0], dest[2][1])
 *             BaseDist = dist3d_ar(PointO, PointD)             # <<<<<<<<<<<<<<
 *             if BaseDist > LimDist:
 *                 continue
 */
    __pyx_t_4 = __pyx_f_5graph_dist3d_ar(__pyx_v_PointO, __pyx_v_PointD); if (unlikely(__pyx_t_4 == ((float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2874, __pyx_L1_error)
    __pyx_v_BaseDist = __pyx_t_4;

    /* "graph.pyx":2875
 *             DistD = (dest[2][0], dest[2][1])
 *             BaseDist = dist3d_ar(PointO, PointD)
 *             if BaseDist > LimDist:             # <<<<<<<<<<<<<<
 *                 continue
 *             cycles = 0
 */
    __pyx_t_12 = (__pyx_v_BaseDist > __pyx_v_LimDist);
    if (__pyx_t_12) {

      /* "graph.pyx":2876
 *             BaseDist = dist3d_ar(PointO, PointD)
 *             if BaseDist > LimDist:
 *                 continue             # <<<<<<<<<<<<<<
 *             cycles = 0
 *             MappedPath_T.push_back(EidD)
 */
      goto __pyx_L3_continue;

      /* "graph.pyx":2875
 *             DistD = (dest[2][0], dest[2][1])
 *             BaseDist = dist3d_ar(PointO, PointD)
 *             if BaseDist > LimDist:             # <<<<<<<<<<<<<<
 *                 continue
 *             cycles = 0
 */
    }

    /* "graph.pyx":2877
 *             if BaseDist > LimDist:
 *                 continue
 *             cycles = 0             # <<<<<<<<<<<<<<
 *             MappedPath_T.push_back(EidD)
 *             MappedPaths.push_back(MappedPath_T)
 */
    __pyx_v_cycles = 0;

    /* "graph.pyx":2878
 *                 continue
 *             cycles = 0
 *             MappedPath_T.push_back(EidD)             # <<<<<<<<<<<<<<
 *             MappedPaths.push_back(MappedPath_T)
 * 
 */
    try {
      __pyx_v_MappedPath_T.push_back(__pyx_v_EidD);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 2878, __pyx_L1_error)
    }

    /* "graph.pyx":2879
 *             cycles = 0
 *             MappedPath_T.push_back(EidD)
 *             MappedPaths.push_back(MappedPath_T)             # <<<<<<<<<<<<<<
 * 
 *             if EidD == EidO: # checks if same edge
 */
    try {
      __pyx_v_MappedPaths.push_back(__pyx_v_MappedPath_T);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 2879, __pyx_L1_error)
    }

    /* "graph.pyx":2881
 *             MappedPaths.push_back(MappedPath_T)
 * 
 *             if EidD == EidO: # checks if same edge             # <<<<<<<<<<<<<<
 *                 MinimumDistance = abs(DistD[0] - DistO[0])
 *                 FoundPaths.push_back(MappedPath_T)
 */
    __pyx_t_12 = (__pyx_v_EidD == __pyx_v_EidO);
    if (__pyx_t_12) {

      /* "graph.pyx":2882
 * 
 *             if EidD == EidO: # checks if same edge
 *                 MinimumDistance = abs(DistD[0] - DistO[0])             # <<<<<<<<<<<<<<
 *                 FoundPaths.push_back(MappedPath_T)
 *                 if MinimumDistance == 0.0:
 */
      __pyx_v_MinimumDistance = fabsf(((__pyx_v_DistD[0]) - (__pyx_v_DistO[0])));

      /* "graph.pyx":2883
 *             if EidD == EidO: # checks if same edge
 *                 MinimumDistance = abs(DistD[0] - DistO[0])
 *                 FoundPaths.push_back(MappedPath_T)             # <<<<<<<<<<<<<<
 *                 if MinimumDistance == 0.0:
 *                     MinimumDistance = <float>0.1
 */
      try {
        __pyx_v_FoundPaths.push_back(__pyx_v_MappedPath_T);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 2883, __pyx_L1_error)
      }

      /* "graph.pyx":2884
 *                 MinimumDistance = abs(DistD[0] - DistO[0])
 *                 FoundPaths.push_back(MappedPath_T)
 *                 if MinimumDistance == 0.0:             # <<<<<<<<<<<<<<
 *                     MinimumDistance = <float>0.1
 *                 # print(f'\t\tSameLine {MinimumDistance}')
 */
      __pyx_t_12 = (__pyx_v_MinimumDistance == 0.0);
      if (__pyx_t_12) {

        /* "graph.pyx":2885
 *                 FoundPaths.push_back(MappedPath_T)
 *                 if MinimumDistance == 0.0:
 *                     MinimumDistance = <float>0.1             # <<<<<<<<<<<<<<
 *                 # print(f'\t\tSameLine {MinimumDistance}')
 *                 FoundDistance.push_back(MinimumDistance)
 */
        __pyx_v_MinimumDistance = ((float)0.1);

        /* "graph.pyx":2884
 *                 MinimumDistance = abs(DistD[0] - DistO[0])
 *                 FoundPaths.push_back(MappedPath_T)
 *                 if MinimumDistance == 0.0:             # <<<<<<<<<<<<<<
 *                     MinimumDistance = <float>0.1
 *                 # print(f'\t\tSameLine {MinimumDistance}')
 */
      }

      /* "graph.pyx":2887
 *                     MinimumDistance = <float>0.1
 *                 # print(f'\t\tSameLine {MinimumDistance}')
 *                 FoundDistance.push_back(MinimumDistance)             # <<<<<<<<<<<<<<
 *                 FoundWeights.push_back(dest[3])
 *                 pathN += 1
 */
      try {
        __pyx_v_FoundDistance.push_back(__pyx_v_MinimumDistance);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 2887, __pyx_L1_error)
      }

      /* "graph.pyx":2888
 *                 # print(f'\t\tSameLine {MinimumDistance}')
 *                 FoundDistance.push_back(MinimumDistance)
 *                 FoundWeights.push_back(dest[3])             # <<<<<<<<<<<<<<
 *                 pathN += 1
 *             else:
 */
      __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_dest, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2888, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_10); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2888, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      try {
        __pyx_v_FoundWeights.push_back(__pyx_t_4);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 2888, __pyx_L1_error)
      }

      /* "graph.pyx":2889
 *                 FoundDistance.push_back(MinimumDistance)
 *                 FoundWeights.push_back(dest[3])
 *                 pathN += 1             # <<<<<<<<<<<<<<
 *             else:
 *                 MinimumDistance = self.PathDist_AStar_VirtuEntry(EidO, PtO, DstO,
 */
      __pyx_v_pathN = (__pyx_v_pathN + 1);

      /* "graph.pyx":2881
 *             MappedPaths.push_back(MappedPath_T)
 * 
 *             if EidD == EidO: # checks if same edge             # <<<<<<<<<<<<<<
 *                 MinimumDistance = abs(DistD[0] - DistO[0])
 *                 FoundPaths.push_back(MappedPath_T)
 */
      goto __pyx_L7;
    }

    /* "graph.pyx":2891
 *                 pathN += 1
 *             else:
 *                 MinimumDistance = self.PathDist_AStar_VirtuEntry(EidO, PtO, DstO,             # <<<<<<<<<<<<<<
 *                                                                 EidD, dest[1], dest[2],
 *                                                                 LimDist, LimCycle, DistMul)
 */
    /*else*/ {
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_PathDist_AStar_VirtuEntry); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2891, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_9 = __Pyx_PyInt_From_int(__pyx_v_EidO); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2891, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_14 = __pyx_convert__to_py___pyx_ctuple_float__and_float__and_float(__pyx_v_PtO); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2891, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_15 = __pyx_convert__to_py___pyx_ctuple_float__and_float(__pyx_v_DstO); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2891, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);

      /* "graph.pyx":2892
 *             else:
 *                 MinimumDistance = self.PathDist_AStar_VirtuEntry(EidO, PtO, DstO,
 *                                                                 EidD, dest[1], dest[2],             # <<<<<<<<<<<<<<
 *                                                                 LimDist, LimCycle, DistMul)
 *             # print(dest, MinimumDistance)
 */
      __pyx_t_16 = __Pyx_PyInt_From_int(__pyx_v_EidD); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 2892, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_17 = __Pyx_GetItemInt(__pyx_v_dest, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 2892, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __pyx_t_18 = __Pyx_GetItemInt(__pyx_v_dest, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 2892, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);

      /* "graph.pyx":2893
 *                 MinimumDistance = self.PathDist_AStar_VirtuEntry(EidO, PtO, DstO,
 *                                                                 EidD, dest[1], dest[2],
 *                                                                 LimDist, LimCycle, DistMul)             # <<<<<<<<<<<<<<
 *             # print(dest, MinimumDistance)
 *             if MinimumDistance == -1.0 or MinimumDistance > LimDist:
 */
      __pyx_t_19 = PyFloat_FromDouble(__pyx_v_LimDist); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 2893, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_19);
      __pyx_t_20 = __Pyx_PyInt_From_int(__pyx_v_LimCycle); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 2893, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_20);
      __pyx_t_21 = PyFloat_FromDouble(__pyx_v_DistMul); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 2893, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_21);
      __pyx_t_22 = NULL;
      __pyx_t_13 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_22 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_22)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_22);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
          __pyx_t_13 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[10] = {__pyx_t_22, __pyx_t_9, __pyx_t_14, __pyx_t_15, __pyx_t_16, __pyx_t_17, __pyx_t_18, __pyx_t_19, __pyx_t_20, __pyx_t_21};
        __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_13, 9+__pyx_t_13);
        __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
        __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
        __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
        __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
        if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2891, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }

      /* "graph.pyx":2891
 *                 pathN += 1
 *             else:
 *                 MinimumDistance = self.PathDist_AStar_VirtuEntry(EidO, PtO, DstO,             # <<<<<<<<<<<<<<
 *                                                                 EidD, dest[1], dest[2],
 *                                                                 LimDist, LimCycle, DistMul)
 */
      __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_10); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2891, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_v_MinimumDistance = __pyx_t_4;
    }
    __pyx_L7:;

    /* "graph.pyx":2895
 *                                                                 LimDist, LimCycle, DistMul)
 *             # print(dest, MinimumDistance)
 *             if MinimumDistance == -1.0 or MinimumDistance > LimDist:             # <<<<<<<<<<<<<<
 *                 continue
 *             LimitDistance = MinimumDistance * DistMulLim
 */
    __pyx_t_23 = (__pyx_v_MinimumDistance == -1.0);
    if (!__pyx_t_23) {
    } else {
      __pyx_t_12 = __pyx_t_23;
      goto __pyx_L10_bool_binop_done;
    }
    __pyx_t_23 = (__pyx_v_MinimumDistance > __pyx_v_LimDist);
    __pyx_t_12 = __pyx_t_23;
    __pyx_L10_bool_binop_done:;
    if (__pyx_t_12) {

      /* "graph.pyx":2896
 *             # print(dest, MinimumDistance)
 *             if MinimumDistance == -1.0 or MinimumDistance > LimDist:
 *                 continue             # <<<<<<<<<<<<<<
 *             LimitDistance = MinimumDistance * DistMulLim
 *             # for Origin EdgeOrigin
 */
      goto __pyx_L3_continue;

      /* "graph.pyx":2895
 *                                                                 LimDist, LimCycle, DistMul)
 *             # print(dest, MinimumDistance)
 *             if MinimumDistance == -1.0 or MinimumDistance > LimDist:             # <<<<<<<<<<<<<<
 *                 continue
 *             LimitDistance = MinimumDistance * DistMulLim
 */
    }

    /* "graph.pyx":2897
 *             if MinimumDistance == -1.0 or MinimumDistance > LimDist:
 *                 continue
 *             LimitDistance = MinimumDistance * DistMulLim             # <<<<<<<<<<<<<<
 *             # for Origin EdgeOrigin
 *             if nodeMapped[self.edges[EidD].NidO].Nid != -1:
 */
    __pyx_v_LimitDistance = (__pyx_v_MinimumDistance * __pyx_v_DistMulLim);

    /* "graph.pyx":2899
 *             LimitDistance = MinimumDistance * DistMulLim
 *             # for Origin EdgeOrigin
 *             if nodeMapped[self.edges[EidD].NidO].Nid != -1:             # <<<<<<<<<<<<<<
 *                 startNode.Nid = self.edges[EidD].NidO
 *                 startNode.Eid = EidD
 */
    __pyx_t_12 = ((__pyx_v_nodeMapped[(__pyx_v_self->edges[__pyx_v_EidD]).NidO]).Nid != -1L);
    if (__pyx_t_12) {

      /* "graph.pyx":2900
 *             # for Origin EdgeOrigin
 *             if nodeMapped[self.edges[EidD].NidO].Nid != -1:
 *                 startNode.Nid = self.edges[EidD].NidO             # <<<<<<<<<<<<<<
 *                 startNode.Eid = EidD
 *                 startNode.Dist = DistD[0]
 */
      __pyx_t_13 = (__pyx_v_self->edges[__pyx_v_EidD]).NidO;
      __pyx_v_startNode.Nid = __pyx_t_13;

      /* "graph.pyx":2901
 *             if nodeMapped[self.edges[EidD].NidO].Nid != -1:
 *                 startNode.Nid = self.edges[EidD].NidO
 *                 startNode.Eid = EidD             # <<<<<<<<<<<<<<
 *                 startNode.Dist = DistD[0]
 *                 startNode.NidO = -1
 */
      __pyx_v_startNode.Eid = __pyx_v_EidD;

      /* "graph.pyx":2902
 *                 startNode.Nid = self.edges[EidD].NidO
 *                 startNode.Eid = EidD
 *                 startNode.Dist = DistD[0]             # <<<<<<<<<<<<<<
 *                 startNode.NidO = -1
 *                 startNode.pathindex = 0
 */
      __pyx_v_startNode.Dist = (__pyx_v_DistD[0]);

      /* "graph.pyx":2903
 *                 startNode.Eid = EidD
 *                 startNode.Dist = DistD[0]
 *                 startNode.NidO = -1             # <<<<<<<<<<<<<<
 *                 startNode.pathindex = 0
 *                 startNode.Weight = DistD[0] + (nodeMapped[startNode.Nid].Dist - MinimumDistance) * DistMul
 */
      __pyx_v_startNode.NidO = -1;

      /* "graph.pyx":2904
 *                 startNode.Dist = DistD[0]
 *                 startNode.NidO = -1
 *                 startNode.pathindex = 0             # <<<<<<<<<<<<<<
 *                 startNode.Weight = DistD[0] + (nodeMapped[startNode.Nid].Dist - MinimumDistance) * DistMul
 *                 OpenNodes.push(startNode)
 */
      __pyx_v_startNode.pathindex = 0;

      /* "graph.pyx":2905
 *                 startNode.NidO = -1
 *                 startNode.pathindex = 0
 *                 startNode.Weight = DistD[0] + (nodeMapped[startNode.Nid].Dist - MinimumDistance) * DistMul             # <<<<<<<<<<<<<<
 *                 OpenNodes.push(startNode)
 *             # print(f'\tstartA {startNode.Dist} || {nodeMapped[startNode.Nid].Dist} || {LimitDistance}')
 */
      __pyx_v_startNode.Weight = ((__pyx_v_DistD[0]) + (((__pyx_v_nodeMapped[__pyx_v_startNode.Nid]).Dist - __pyx_v_MinimumDistance) * __pyx_v_DistMul));

      /* "graph.pyx":2906
 *                 startNode.pathindex = 0
 *                 startNode.Weight = DistD[0] + (nodeMapped[startNode.Nid].Dist - MinimumDistance) * DistMul
 *                 OpenNodes.push(startNode)             # <<<<<<<<<<<<<<
 *             # print(f'\tstartA {startNode.Dist} || {nodeMapped[startNode.Nid].Dist} || {LimitDistance}')
 *             # for destination edgeorigin
 */
      ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_startNode); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2906, __pyx_L1_error)

      /* "graph.pyx":2899
 *             LimitDistance = MinimumDistance * DistMulLim
 *             # for Origin EdgeOrigin
 *             if nodeMapped[self.edges[EidD].NidO].Nid != -1:             # <<<<<<<<<<<<<<
 *                 startNode.Nid = self.edges[EidD].NidO
 *                 startNode.Eid = EidD
 */
    }

    /* "graph.pyx":2909
 *             # print(f'\tstartA {startNode.Dist} || {nodeMapped[startNode.Nid].Dist} || {LimitDistance}')
 *             # for destination edgeorigin
 *             if nodeMapped[self.edges[EidD].NidD].Nid != -1:             # <<<<<<<<<<<<<<
 *                 startNode.Nid = self.edges[EidD].NidD
 *                 startNode.Eid = EidD
 */
    __pyx_t_12 = ((__pyx_v_nodeMapped[(__pyx_v_self->edges[__pyx_v_EidD]).NidD]).Nid != -1L);
    if (__pyx_t_12) {

      /* "graph.pyx":2910
 *             # for destination edgeorigin
 *             if nodeMapped[self.edges[EidD].NidD].Nid != -1:
 *                 startNode.Nid = self.edges[EidD].NidD             # <<<<<<<<<<<<<<
 *                 startNode.Eid = EidD
 *                 startNode.Dist = DistD[1]
 */
      __pyx_t_13 = (__pyx_v_self->edges[__pyx_v_EidD]).NidD;
      __pyx_v_startNode.Nid = __pyx_t_13;

      /* "graph.pyx":2911
 *             if nodeMapped[self.edges[EidD].NidD].Nid != -1:
 *                 startNode.Nid = self.edges[EidD].NidD
 *                 startNode.Eid = EidD             # <<<<<<<<<<<<<<
 *                 startNode.Dist = DistD[1]
 *                 startNode.NidO = -1
 */
      __pyx_v_startNode.Eid = __pyx_v_EidD;

      /* "graph.pyx":2912
 *                 startNode.Nid = self.edges[EidD].NidD
 *                 startNode.Eid = EidD
 *                 startNode.Dist = DistD[1]             # <<<<<<<<<<<<<<
 *                 startNode.NidO = -1
 *                 startNode.pathindex = 0
 */
      __pyx_v_startNode.Dist = (__pyx_v_DistD[1]);

      /* "graph.pyx":2913
 *                 startNode.Eid = EidD
 *                 startNode.Dist = DistD[1]
 *                 startNode.NidO = -1             # <<<<<<<<<<<<<<
 *                 startNode.pathindex = 0
 *                 startNode.Weight = DistD[1] + (nodeMapped[startNode.Nid].Dist - MinimumDistance) * DistMul
 */
      __pyx_v_startNode.NidO = -1;

      /* "graph.pyx":2914
 *                 startNode.Dist = DistD[1]
 *                 startNode.NidO = -1
 *                 startNode.pathindex = 0             # <<<<<<<<<<<<<<
 *                 startNode.Weight = DistD[1] + (nodeMapped[startNode.Nid].Dist - MinimumDistance) * DistMul
 *                 OpenNodes.push(startNode)
 */
      __pyx_v_startNode.pathindex = 0;

      /* "graph.pyx":2915
 *                 startNode.NidO = -1
 *                 startNode.pathindex = 0
 *                 startNode.Weight = DistD[1] + (nodeMapped[startNode.Nid].Dist - MinimumDistance) * DistMul             # <<<<<<<<<<<<<<
 *                 OpenNodes.push(startNode)
 *             # print(f'\tstartB {startNode.Dist} || {nodeMapped[startNode.Nid].Dist} || {LimitDistance}')
 */
      __pyx_v_startNode.Weight = ((__pyx_v_DistD[1]) + (((__pyx_v_nodeMapped[__pyx_v_startNode.Nid]).Dist - __pyx_v_MinimumDistance) * __pyx_v_DistMul));

      /* "graph.pyx":2916
 *                 startNode.pathindex = 0
 *                 startNode.Weight = DistD[1] + (nodeMapped[startNode.Nid].Dist - MinimumDistance) * DistMul
 *                 OpenNodes.push(startNode)             # <<<<<<<<<<<<<<
 *             # print(f'\tstartB {startNode.Dist} || {nodeMapped[startNode.Nid].Dist} || {LimitDistance}')
 *             # cdef float RemainDist
 */
      ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_startNode); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2916, __pyx_L1_error)

      /* "graph.pyx":2909
 *             # print(f'\tstartA {startNode.Dist} || {nodeMapped[startNode.Nid].Dist} || {LimitDistance}')
 *             # for destination edgeorigin
 *             if nodeMapped[self.edges[EidD].NidD].Nid != -1:             # <<<<<<<<<<<<<<
 *                 startNode.Nid = self.edges[EidD].NidD
 *                 startNode.Eid = EidD
 */
    }

    /* "graph.pyx":2919
 *             # print(f'\tstartB {startNode.Dist} || {nodeMapped[startNode.Nid].Dist} || {LimitDistance}')
 *             # cdef float RemainDist
 *             while keepGoing:             # <<<<<<<<<<<<<<
 *                 cycles += 1
 *                 if OpenNodes.empty():
 */
    while (1) {
      if (!__pyx_v_keepGoing) break;

      /* "graph.pyx":2920
 *             # cdef float RemainDist
 *             while keepGoing:
 *                 cycles += 1             # <<<<<<<<<<<<<<
 *                 if OpenNodes.empty():
 *                     break
 */
      __pyx_v_cycles = (__pyx_v_cycles + 1);

      /* "graph.pyx":2921
 *             while keepGoing:
 *                 cycles += 1
 *                 if OpenNodes.empty():             # <<<<<<<<<<<<<<
 *                     break
 *                 NodeCheck = OpenNodes.pop_top()
 */
      __pyx_t_12 = ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->empty(__pyx_v_OpenNodes); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2921, __pyx_L1_error)
      if (__pyx_t_12) {

        /* "graph.pyx":2922
 *                 cycles += 1
 *                 if OpenNodes.empty():
 *                     break             # <<<<<<<<<<<<<<
 *                 NodeCheck = OpenNodes.pop_top()
 *                 MappedPath_T = MappedPaths[NodeCheck.pathindex] # getting mapped path from nodecheck index
 */
        goto __pyx_L15_break;

        /* "graph.pyx":2921
 *             while keepGoing:
 *                 cycles += 1
 *                 if OpenNodes.empty():             # <<<<<<<<<<<<<<
 *                     break
 *                 NodeCheck = OpenNodes.pop_top()
 */
      }

      /* "graph.pyx":2923
 *                 if OpenNodes.empty():
 *                     break
 *                 NodeCheck = OpenNodes.pop_top()             # <<<<<<<<<<<<<<
 *                 MappedPath_T = MappedPaths[NodeCheck.pathindex] # getting mapped path from nodecheck index
 *                 # print(f'\tC - {cycles} || {NodeCheck}')
 */
      __pyx_t_24 = ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->pop_top(__pyx_v_OpenNodes); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2923, __pyx_L1_error)
      __pyx_v_NodeCheck = __pyx_t_24;

      /* "graph.pyx":2924
 *                     break
 *                 NodeCheck = OpenNodes.pop_top()
 *                 MappedPath_T = MappedPaths[NodeCheck.pathindex] # getting mapped path from nodecheck index             # <<<<<<<<<<<<<<
 *                 # print(f'\tC - {cycles} || {NodeCheck}')
 *                 for i in range(self.EidN):
 */
      __pyx_v_MappedPath_T = (__pyx_v_MappedPaths[__pyx_v_NodeCheck.pathindex]);

      /* "graph.pyx":2926
 *                 MappedPath_T = MappedPaths[NodeCheck.pathindex] # getting mapped path from nodecheck index
 *                 # print(f'\tC - {cycles} || {NodeCheck}')
 *                 for i in range(self.EidN):             # <<<<<<<<<<<<<<
 *                     Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                     if Eid == -1:
 */
      __pyx_t_13 = __pyx_v_self->EidN;
      __pyx_t_25 = __pyx_t_13;
      for (__pyx_t_26 = 0; __pyx_t_26 < __pyx_t_25; __pyx_t_26+=1) {
        __pyx_v_i = __pyx_t_26;

        /* "graph.pyx":2927
 *                 # print(f'\tC - {cycles} || {NodeCheck}')
 *                 for i in range(self.EidN):
 *                     Eid = self.nodes[NodeCheck.Nid].Eid[i]             # <<<<<<<<<<<<<<
 *                     if Eid == -1:
 *                         # print(f'\t\t{cycles} - Out Edge{Eid}')
 */
        __pyx_v_Eid = ((__pyx_v_self->nodes[__pyx_v_NodeCheck.Nid]).Eid[__pyx_v_i]);

        /* "graph.pyx":2928
 *                 for i in range(self.EidN):
 *                     Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                     if Eid == -1:             # <<<<<<<<<<<<<<
 *                         # print(f'\t\t{cycles} - Out Edge{Eid}')
 *                         break
 */
        __pyx_t_12 = (__pyx_v_Eid == -1L);
        if (__pyx_t_12) {

          /* "graph.pyx":2930
 *                     if Eid == -1:
 *                         # print(f'\t\t{cycles} - Out Edge{Eid}')
 *                         break             # <<<<<<<<<<<<<<
 *                     if Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 *                         # print(f'\t\t{cycles} - Out similar Edge{Eid}')
 */
          goto __pyx_L18_break;

          /* "graph.pyx":2928
 *                 for i in range(self.EidN):
 *                     Eid = self.nodes[NodeCheck.Nid].Eid[i]
 *                     if Eid == -1:             # <<<<<<<<<<<<<<
 *                         # print(f'\t\t{cycles} - Out Edge{Eid}')
 *                         break
 */
        }

        /* "graph.pyx":2931
 *                         # print(f'\t\t{cycles} - Out Edge{Eid}')
 *                         break
 *                     if Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:             # <<<<<<<<<<<<<<
 *                         # print(f'\t\t{cycles} - Out similar Edge{Eid}')
 *                         continue
 */
        __pyx_t_23 = (__pyx_v_Eid == __pyx_v_NodeCheck.Eid);
        if (!__pyx_t_23) {
        } else {
          __pyx_t_12 = __pyx_t_23;
          goto __pyx_L21_bool_binop_done;
        }
        __pyx_t_23 = ((__pyx_v_self->_edgesIds[__pyx_v_Eid]) == -1L);
        __pyx_t_12 = __pyx_t_23;
        __pyx_L21_bool_binop_done:;
        if (__pyx_t_12) {

          /* "graph.pyx":2933
 *                     if Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:
 *                         # print(f'\t\t{cycles} - Out similar Edge{Eid}')
 *                         continue             # <<<<<<<<<<<<<<
 *                     if Find_IntVector(MappedPaths[NodeCheck.pathindex], Eid): # if Eid already in mapped paths
 *                         continue
 */
          goto __pyx_L17_continue;

          /* "graph.pyx":2931
 *                         # print(f'\t\t{cycles} - Out Edge{Eid}')
 *                         break
 *                     if Eid == NodeCheck.Eid or self._edgesIds[Eid] == -1:             # <<<<<<<<<<<<<<
 *                         # print(f'\t\t{cycles} - Out similar Edge{Eid}')
 *                         continue
 */
        }

        /* "graph.pyx":2934
 *                         # print(f'\t\t{cycles} - Out similar Edge{Eid}')
 *                         continue
 *                     if Find_IntVector(MappedPaths[NodeCheck.pathindex], Eid): # if Eid already in mapped paths             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
        __pyx_t_12 = __pyx_f_5graph_Find_IntVector((__pyx_v_MappedPaths[__pyx_v_NodeCheck.pathindex]), __pyx_v_Eid); if (unlikely(__pyx_t_12 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2934, __pyx_L1_error)
        if (__pyx_t_12) {

          /* "graph.pyx":2935
 *                         continue
 *                     if Find_IntVector(MappedPaths[NodeCheck.pathindex], Eid): # if Eid already in mapped paths
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     if Eid == EidO:
 */
          goto __pyx_L17_continue;

          /* "graph.pyx":2934
 *                         # print(f'\t\t{cycles} - Out similar Edge{Eid}')
 *                         continue
 *                     if Find_IntVector(MappedPaths[NodeCheck.pathindex], Eid): # if Eid already in mapped paths             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
        }

        /* "graph.pyx":2937
 *                         continue
 * 
 *                     if Eid == EidO:             # <<<<<<<<<<<<<<
 *                         if NodeCheck.Nid == self.edges[EidO].NidO:
 *                             pathlength = NodeCheck.Dist + DistO[0]
 */
        __pyx_t_12 = (__pyx_v_Eid == __pyx_v_EidO);
        if (__pyx_t_12) {

          /* "graph.pyx":2938
 * 
 *                     if Eid == EidO:
 *                         if NodeCheck.Nid == self.edges[EidO].NidO:             # <<<<<<<<<<<<<<
 *                             pathlength = NodeCheck.Dist + DistO[0]
 *                         else:
 */
          __pyx_t_12 = (__pyx_v_NodeCheck.Nid == (__pyx_v_self->edges[__pyx_v_EidO]).NidO);
          if (__pyx_t_12) {

            /* "graph.pyx":2939
 *                     if Eid == EidO:
 *                         if NodeCheck.Nid == self.edges[EidO].NidO:
 *                             pathlength = NodeCheck.Dist + DistO[0]             # <<<<<<<<<<<<<<
 *                         else:
 *                             pathlength = NodeCheck.Dist + DistO[1]
 */
            __pyx_v_pathlength = (__pyx_v_NodeCheck.Dist + (__pyx_v_DistO[0]));

            /* "graph.pyx":2938
 * 
 *                     if Eid == EidO:
 *                         if NodeCheck.Nid == self.edges[EidO].NidO:             # <<<<<<<<<<<<<<
 *                             pathlength = NodeCheck.Dist + DistO[0]
 *                         else:
 */
            goto __pyx_L25;
          }

          /* "graph.pyx":2941
 *                             pathlength = NodeCheck.Dist + DistO[0]
 *                         else:
 *                             pathlength = NodeCheck.Dist + DistO[1]             # <<<<<<<<<<<<<<
 *                         if pathlength < LimitDistance:
 *                             FoundDistance.push_back(pathlength)
 */
          /*else*/ {
            __pyx_v_pathlength = (__pyx_v_NodeCheck.Dist + (__pyx_v_DistO[1]));
          }
          __pyx_L25:;

          /* "graph.pyx":2942
 *                         else:
 *                             pathlength = NodeCheck.Dist + DistO[1]
 *                         if pathlength < LimitDistance:             # <<<<<<<<<<<<<<
 *                             FoundDistance.push_back(pathlength)
 *                             MappedPaths[NodeCheck.pathindex].push_back(Eid)
 */
          __pyx_t_12 = (__pyx_v_pathlength < __pyx_v_LimitDistance);
          if (__pyx_t_12) {

            /* "graph.pyx":2943
 *                             pathlength = NodeCheck.Dist + DistO[1]
 *                         if pathlength < LimitDistance:
 *                             FoundDistance.push_back(pathlength)             # <<<<<<<<<<<<<<
 *                             MappedPaths[NodeCheck.pathindex].push_back(Eid)
 *                             FoundPaths.push_back(MappedPaths[NodeCheck.pathindex])
 */
            try {
              __pyx_v_FoundDistance.push_back(__pyx_v_pathlength);
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(0, 2943, __pyx_L1_error)
            }

            /* "graph.pyx":2944
 *                         if pathlength < LimitDistance:
 *                             FoundDistance.push_back(pathlength)
 *                             MappedPaths[NodeCheck.pathindex].push_back(Eid)             # <<<<<<<<<<<<<<
 *                             FoundPaths.push_back(MappedPaths[NodeCheck.pathindex])
 *                             FoundWeights.push_back(dest[3])
 */
            try {
              (__pyx_v_MappedPaths[__pyx_v_NodeCheck.pathindex]).push_back(__pyx_v_Eid);
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(0, 2944, __pyx_L1_error)
            }

            /* "graph.pyx":2945
 *                             FoundDistance.push_back(pathlength)
 *                             MappedPaths[NodeCheck.pathindex].push_back(Eid)
 *                             FoundPaths.push_back(MappedPaths[NodeCheck.pathindex])             # <<<<<<<<<<<<<<
 *                             FoundWeights.push_back(dest[3])
 *                             pathN += 1
 */
            try {
              __pyx_v_FoundPaths.push_back((__pyx_v_MappedPaths[__pyx_v_NodeCheck.pathindex]));
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(0, 2945, __pyx_L1_error)
            }

            /* "graph.pyx":2946
 *                             MappedPaths[NodeCheck.pathindex].push_back(Eid)
 *                             FoundPaths.push_back(MappedPaths[NodeCheck.pathindex])
 *                             FoundWeights.push_back(dest[3])             # <<<<<<<<<<<<<<
 *                             pathN += 1
 *                             if PathLim <= pathN:
 */
            __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_dest, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2946, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_10); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2946, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            try {
              __pyx_v_FoundWeights.push_back(__pyx_t_4);
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(0, 2946, __pyx_L1_error)
            }

            /* "graph.pyx":2947
 *                             FoundPaths.push_back(MappedPaths[NodeCheck.pathindex])
 *                             FoundWeights.push_back(dest[3])
 *                             pathN += 1             # <<<<<<<<<<<<<<
 *                             if PathLim <= pathN:
 *                                 keepGoing = False
 */
            __pyx_v_pathN = (__pyx_v_pathN + 1);

            /* "graph.pyx":2948
 *                             FoundWeights.push_back(dest[3])
 *                             pathN += 1
 *                             if PathLim <= pathN:             # <<<<<<<<<<<<<<
 *                                 keepGoing = False
 *                                 break
 */
            __pyx_t_12 = (__pyx_v_PathLim <= __pyx_v_pathN);
            if (__pyx_t_12) {

              /* "graph.pyx":2949
 *                             pathN += 1
 *                             if PathLim <= pathN:
 *                                 keepGoing = False             # <<<<<<<<<<<<<<
 *                                 break
 *                         continue
 */
              __pyx_v_keepGoing = 0;

              /* "graph.pyx":2950
 *                             if PathLim <= pathN:
 *                                 keepGoing = False
 *                                 break             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
              goto __pyx_L18_break;

              /* "graph.pyx":2948
 *                             FoundWeights.push_back(dest[3])
 *                             pathN += 1
 *                             if PathLim <= pathN:             # <<<<<<<<<<<<<<
 *                                 keepGoing = False
 *                                 break
 */
            }

            /* "graph.pyx":2942
 *                         else:
 *                             pathlength = NodeCheck.Dist + DistO[1]
 *                         if pathlength < LimitDistance:             # <<<<<<<<<<<<<<
 *                             FoundDistance.push_back(pathlength)
 *                             MappedPaths[NodeCheck.pathindex].push_back(Eid)
 */
          }

          /* "graph.pyx":2951
 *                                 keepGoing = False
 *                                 break
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     EdgeC = self.edges[Eid]
 */
          goto __pyx_L17_continue;

          /* "graph.pyx":2937
 *                         continue
 * 
 *                     if Eid == EidO:             # <<<<<<<<<<<<<<
 *                         if NodeCheck.Nid == self.edges[EidO].NidO:
 *                             pathlength = NodeCheck.Dist + DistO[0]
 */
        }

        /* "graph.pyx":2953
 *                         continue
 * 
 *                     EdgeC = self.edges[Eid]             # <<<<<<<<<<<<<<
 *                     if EdgeC.NidO == NodeCheck.Nid:
 *                         pathlength = EdgeC.lenR
 */
        __pyx_v_EdgeC = (__pyx_v_self->edges[__pyx_v_Eid]);

        /* "graph.pyx":2954
 * 
 *                     EdgeC = self.edges[Eid]
 *                     if EdgeC.NidO == NodeCheck.Nid:             # <<<<<<<<<<<<<<
 *                         pathlength = EdgeC.lenR
 *                         NidF = EdgeC.NidD
 */
        __pyx_t_12 = (__pyx_v_EdgeC.NidO == __pyx_v_NodeCheck.Nid);
        if (__pyx_t_12) {

          /* "graph.pyx":2955
 *                     EdgeC = self.edges[Eid]
 *                     if EdgeC.NidO == NodeCheck.Nid:
 *                         pathlength = EdgeC.lenR             # <<<<<<<<<<<<<<
 *                         NidF = EdgeC.NidD
 *                     else:
 */
          __pyx_t_4 = __pyx_v_EdgeC.lenR;
          __pyx_v_pathlength = __pyx_t_4;

          /* "graph.pyx":2956
 *                     if EdgeC.NidO == NodeCheck.Nid:
 *                         pathlength = EdgeC.lenR
 *                         NidF = EdgeC.NidD             # <<<<<<<<<<<<<<
 *                     else:
 *                         pathlength = EdgeC.len
 */
          __pyx_t_27 = __pyx_v_EdgeC.NidD;
          __pyx_v_NidF = __pyx_t_27;

          /* "graph.pyx":2954
 * 
 *                     EdgeC = self.edges[Eid]
 *                     if EdgeC.NidO == NodeCheck.Nid:             # <<<<<<<<<<<<<<
 *                         pathlength = EdgeC.lenR
 *                         NidF = EdgeC.NidD
 */
          goto __pyx_L28;
        }

        /* "graph.pyx":2958
 *                         NidF = EdgeC.NidD
 *                     else:
 *                         pathlength = EdgeC.len             # <<<<<<<<<<<<<<
 *                         NidF = EdgeC.NidO
 * 
 */
        /*else*/ {
          __pyx_t_4 = __pyx_v_EdgeC.len;
          __pyx_v_pathlength = __pyx_t_4;

          /* "graph.pyx":2959
 *                     else:
 *                         pathlength = EdgeC.len
 *                         NidF = EdgeC.NidO             # <<<<<<<<<<<<<<
 * 
 *                     pathlength += NodeCheck.Dist + self.nodes[NidF].c
 */
          __pyx_t_27 = __pyx_v_EdgeC.NidO;
          __pyx_v_NidF = __pyx_t_27;
        }
        __pyx_L28:;

        /* "graph.pyx":2961
 *                         NidF = EdgeC.NidO
 * 
 *                     pathlength += NodeCheck.Dist + self.nodes[NidF].c             # <<<<<<<<<<<<<<
 *                     if nodeMapped[NidF].Nid != -1:
 *                         if (pathlength + nodeMapped[NidF].Dist) > LimitDistance:
 */
        __pyx_v_pathlength = (__pyx_v_pathlength + (__pyx_v_NodeCheck.Dist + (__pyx_v_self->nodes[__pyx_v_NidF]).c));

        /* "graph.pyx":2962
 * 
 *                     pathlength += NodeCheck.Dist + self.nodes[NidF].c
 *                     if nodeMapped[NidF].Nid != -1:             # <<<<<<<<<<<<<<
 *                         if (pathlength + nodeMapped[NidF].Dist) > LimitDistance:
 *                             # print(f'\t\t{cycles} - Out{Eid} {pathlength} | {nodeMapped[NidF].Dist}')
 */
        __pyx_t_12 = ((__pyx_v_nodeMapped[__pyx_v_NidF]).Nid != -1L);
        if (__pyx_t_12) {

          /* "graph.pyx":2963
 *                     pathlength += NodeCheck.Dist + self.nodes[NidF].c
 *                     if nodeMapped[NidF].Nid != -1:
 *                         if (pathlength + nodeMapped[NidF].Dist) > LimitDistance:             # <<<<<<<<<<<<<<
 *                             # print(f'\t\t{cycles} - Out{Eid} {pathlength} | {nodeMapped[NidF].Dist}')
 *                             continue
 */
          __pyx_t_12 = ((__pyx_v_pathlength + (__pyx_v_nodeMapped[__pyx_v_NidF]).Dist) > __pyx_v_LimitDistance);
          if (__pyx_t_12) {

            /* "graph.pyx":2965
 *                         if (pathlength + nodeMapped[NidF].Dist) > LimitDistance:
 *                             # print(f'\t\t{cycles} - Out{Eid} {pathlength} | {nodeMapped[NidF].Dist}')
 *                             continue             # <<<<<<<<<<<<<<
 *                         else:
 *                             NodeReach_T.Weight = pathlength + (nodeMapped[NidF].Dist-MinimumDistance) * DistMul
 */
            goto __pyx_L17_continue;

            /* "graph.pyx":2963
 *                     pathlength += NodeCheck.Dist + self.nodes[NidF].c
 *                     if nodeMapped[NidF].Nid != -1:
 *                         if (pathlength + nodeMapped[NidF].Dist) > LimitDistance:             # <<<<<<<<<<<<<<
 *                             # print(f'\t\t{cycles} - Out{Eid} {pathlength} | {nodeMapped[NidF].Dist}')
 *                             continue
 */
          }

          /* "graph.pyx":2967
 *                             continue
 *                         else:
 *                             NodeReach_T.Weight = pathlength + (nodeMapped[NidF].Dist-MinimumDistance) * DistMul             # <<<<<<<<<<<<<<
 *                     else:
 *                         # print(f'\t\t{cycles} - Out  Nid-1 {NidF}')
 */
          /*else*/ {
            __pyx_v_NodeReach_T.Weight = (__pyx_v_pathlength + (((__pyx_v_nodeMapped[__pyx_v_NidF]).Dist - __pyx_v_MinimumDistance) * __pyx_v_DistMul));
          }

          /* "graph.pyx":2962
 * 
 *                     pathlength += NodeCheck.Dist + self.nodes[NidF].c
 *                     if nodeMapped[NidF].Nid != -1:             # <<<<<<<<<<<<<<
 *                         if (pathlength + nodeMapped[NidF].Dist) > LimitDistance:
 *                             # print(f'\t\t{cycles} - Out{Eid} {pathlength} | {nodeMapped[NidF].Dist}')
 */
          goto __pyx_L29;
        }

        /* "graph.pyx":2970
 *                     else:
 *                         # print(f'\t\t{cycles} - Out  Nid-1 {NidF}')
 *                         continue             # <<<<<<<<<<<<<<
 *                     MappedPath_T2 = MappedPath_T
 *                     MappedPath_T2.push_back(Eid)
 */
        /*else*/ {
          goto __pyx_L17_continue;
        }
        __pyx_L29:;

        /* "graph.pyx":2971
 *                         # print(f'\t\t{cycles} - Out  Nid-1 {NidF}')
 *                         continue
 *                     MappedPath_T2 = MappedPath_T             # <<<<<<<<<<<<<<
 *                     MappedPath_T2.push_back(Eid)
 *                     NodeReach_T.Nid = NidF
 */
        __pyx_v_MappedPath_T2 = __pyx_v_MappedPath_T;

        /* "graph.pyx":2972
 *                         continue
 *                     MappedPath_T2 = MappedPath_T
 *                     MappedPath_T2.push_back(Eid)             # <<<<<<<<<<<<<<
 *                     NodeReach_T.Nid = NidF
 *                     NodeReach_T.Dist = pathlength
 */
        try {
          __pyx_v_MappedPath_T2.push_back(__pyx_v_Eid);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 2972, __pyx_L1_error)
        }

        /* "graph.pyx":2973
 *                     MappedPath_T2 = MappedPath_T
 *                     MappedPath_T2.push_back(Eid)
 *                     NodeReach_T.Nid = NidF             # <<<<<<<<<<<<<<
 *                     NodeReach_T.Dist = pathlength
 *                     NodeReach_T.Eid = Eid
 */
        __pyx_v_NodeReach_T.Nid = __pyx_v_NidF;

        /* "graph.pyx":2974
 *                     MappedPath_T2.push_back(Eid)
 *                     NodeReach_T.Nid = NidF
 *                     NodeReach_T.Dist = pathlength             # <<<<<<<<<<<<<<
 *                     NodeReach_T.Eid = Eid
 * 
 */
        __pyx_v_NodeReach_T.Dist = __pyx_v_pathlength;

        /* "graph.pyx":2975
 *                     NodeReach_T.Nid = NidF
 *                     NodeReach_T.Dist = pathlength
 *                     NodeReach_T.Eid = Eid             # <<<<<<<<<<<<<<
 * 
 *                     if MappedPaths[NodeCheck.pathindex] == MappedPath_T:
 */
        __pyx_v_NodeReach_T.Eid = __pyx_v_Eid;

        /* "graph.pyx":2977
 *                     NodeReach_T.Eid = Eid
 * 
 *                     if MappedPaths[NodeCheck.pathindex] == MappedPath_T:             # <<<<<<<<<<<<<<
 *                         NodeReach_T.pathindex = NodeCheck.pathindex
 *                         MappedPaths[NodeCheck.pathindex] = MappedPath_T2
 */
        __pyx_t_12 = ((__pyx_v_MappedPaths[__pyx_v_NodeCheck.pathindex]) == __pyx_v_MappedPath_T);
        if (__pyx_t_12) {

          /* "graph.pyx":2978
 * 
 *                     if MappedPaths[NodeCheck.pathindex] == MappedPath_T:
 *                         NodeReach_T.pathindex = NodeCheck.pathindex             # <<<<<<<<<<<<<<
 *                         MappedPaths[NodeCheck.pathindex] = MappedPath_T2
 *                     else:
 */
          __pyx_t_27 = __pyx_v_NodeCheck.pathindex;
          __pyx_v_NodeReach_T.pathindex = __pyx_t_27;

          /* "graph.pyx":2979
 *                     if MappedPaths[NodeCheck.pathindex] == MappedPath_T:
 *                         NodeReach_T.pathindex = NodeCheck.pathindex
 *                         MappedPaths[NodeCheck.pathindex] = MappedPath_T2             # <<<<<<<<<<<<<<
 *                     else:
 *                         NodeReach_T.pathindex = <int>MappedPaths.size()
 */
          (__pyx_v_MappedPaths[__pyx_v_NodeCheck.pathindex]) = __pyx_v_MappedPath_T2;

          /* "graph.pyx":2977
 *                     NodeReach_T.Eid = Eid
 * 
 *                     if MappedPaths[NodeCheck.pathindex] == MappedPath_T:             # <<<<<<<<<<<<<<
 *                         NodeReach_T.pathindex = NodeCheck.pathindex
 *                         MappedPaths[NodeCheck.pathindex] = MappedPath_T2
 */
          goto __pyx_L31;
        }

        /* "graph.pyx":2981
 *                         MappedPaths[NodeCheck.pathindex] = MappedPath_T2
 *                     else:
 *                         NodeReach_T.pathindex = <int>MappedPaths.size()             # <<<<<<<<<<<<<<
 *                         MappedPaths.push_back(MappedPath_T2)
 *                     OpenNodes.push(NodeReach_T)
 */
        /*else*/ {
          __pyx_v_NodeReach_T.pathindex = ((int)__pyx_v_MappedPaths.size());

          /* "graph.pyx":2982
 *                     else:
 *                         NodeReach_T.pathindex = <int>MappedPaths.size()
 *                         MappedPaths.push_back(MappedPath_T2)             # <<<<<<<<<<<<<<
 *                     OpenNodes.push(NodeReach_T)
 * 
 */
          try {
            __pyx_v_MappedPaths.push_back(__pyx_v_MappedPath_T2);
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(0, 2982, __pyx_L1_error)
          }
        }
        __pyx_L31:;

        /* "graph.pyx":2983
 *                         NodeReach_T.pathindex = <int>MappedPaths.size()
 *                         MappedPaths.push_back(MappedPath_T2)
 *                     OpenNodes.push(NodeReach_T)             # <<<<<<<<<<<<<<
 * 
 *                 if cycles > LimCycle:
 */
        ((struct __pyx_vtabstruct_5graph_PriorityQueue_NR *)__pyx_v_OpenNodes->__pyx_vtab)->push(__pyx_v_OpenNodes, __pyx_v_NodeReach_T); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2983, __pyx_L1_error)
        __pyx_L17_continue:;
      }
      __pyx_L18_break:;

      /* "graph.pyx":2985
 *                     OpenNodes.push(NodeReach_T)
 * 
 *                 if cycles > LimCycle:             # <<<<<<<<<<<<<<
 *                     break
 *             # print(f'\t{EidO} to {EidD} - c{cycles} || p{pathN}')
 */
      __pyx_t_12 = (__pyx_v_cycles > __pyx_v_LimCycle);
      if (__pyx_t_12) {

        /* "graph.pyx":2986
 * 
 *                 if cycles > LimCycle:
 *                     break             # <<<<<<<<<<<<<<
 *             # print(f'\t{EidO} to {EidD} - c{cycles} || p{pathN}')
 *         free(nodeMapped)
 */
        goto __pyx_L15_break;

        /* "graph.pyx":2985
 *                     OpenNodes.push(NodeReach_T)
 * 
 *                 if cycles > LimCycle:             # <<<<<<<<<<<<<<
 *                     break
 *             # print(f'\t{EidO} to {EidD} - c{cycles} || p{pathN}')
 */
      }
    }
    __pyx_L15_break:;

    /* "graph.pyx":2859
 *         cdef int tempC = 0
 *         # cycles per destination
 *         for dest in DestTup:             # <<<<<<<<<<<<<<
 *             tempC += 1
 *             if Oid == dest[4]:
 */
    __pyx_L3_continue:;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "graph.pyx":2988
 *                     break
 *             # print(f'\t{EidO} to {EidD} - c{cycles} || p{pathN}')
 *         free(nodeMapped)             # <<<<<<<<<<<<<<
 *         return tuple(FoundDistance), tuple(FoundPaths), tuple(FoundWeights)
 */
  free(__pyx_v_nodeMapped);

  /* "graph.pyx":2989
 *             # print(f'\t{EidO} to {EidD} - c{cycles} || p{pathN}')
 *         free(nodeMapped)
 *         return tuple(FoundDistance), tuple(FoundPaths), tuple(FoundWeights)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_7 = __pyx_convert_vector_to_py_float(__pyx_v_FoundDistance); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_10 = __Pyx_PySequence_Tuple(__pyx_t_7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(__pyx_v_FoundPaths); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_11 = __Pyx_PySequence_Tuple(__pyx_t_7); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __pyx_convert_vector_to_py_float(__pyx_v_FoundWeights); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_21 = __Pyx_PySequence_Tuple(__pyx_t_7); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 2989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_10)) __PYX_ERR(0, 2989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_11)) __PYX_ERR(0, 2989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_21);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_21)) __PYX_ERR(0, 2989, __pyx_L1_error);
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_t_21 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "graph.pyx":2784
 * 
 * 
 *     def PathFind_Multi_MultiDest_VirtuEntry(             # <<<<<<<<<<<<<<
 *             self,
 *             const int& EidO, tuple[float, float, float] PtO, tuple[float, float] DstO, int& Oid,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_AddTraceback("graph.GraphCy.PathFind_Multi_MultiDest_VirtuEntry", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_OpenNodes);
  __Pyx_XDECREF(__pyx_v_dest);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_5graph_PriorityQueue_NR __pyx_vtable_5graph_PriorityQueue_NR;

static PyObject *__pyx_tp_new_5graph_PriorityQueue_NR(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5graph_PriorityQueue_NR *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_5graph_PriorityQueue_NR *)o);
  p->__pyx_vtab = __pyx_vtabptr_5graph_PriorityQueue_NR;
  new((void*)&(p->NodeQueue)) std::vector<struct __pyx_t_5graph_NodeReach> ();
  if (unlikely(__pyx_pw_5graph_16PriorityQueue_NR_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5graph_PriorityQueue_NR(PyObject *o) {
  struct __pyx_obj_5graph_PriorityQueue_NR *p = (struct __pyx_obj_5graph_PriorityQueue_NR *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5graph_PriorityQueue_NR) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  __Pyx_call_destructor(p->NodeQueue);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyMethodDef __pyx_methods_5graph_PriorityQueue_NR[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_16PriorityQueue_NR_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_16PriorityQueue_NR_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5graph_PriorityQueue_NR_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5graph_PriorityQueue_NR},
  {Py_tp_str, (void *)__pyx_pw_5graph_16PriorityQueue_NR_3__str__},
  {Py_tp_methods, (void *)__pyx_methods_5graph_PriorityQueue_NR},
  {Py_tp_new, (void *)__pyx_tp_new_5graph_PriorityQueue_NR},
  {0, 0},
};
static PyType_Spec __pyx_type_5graph_PriorityQueue_NR_spec = {
  "graph.PriorityQueue_NR",
  sizeof(struct __pyx_obj_5graph_PriorityQueue_NR),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_5graph_PriorityQueue_NR_slots,
};
#else

static PyTypeObject __pyx_type_5graph_PriorityQueue_NR = {
  PyVarObject_HEAD_INIT(0, 0)
  "graph.""PriorityQueue_NR", /*tp_name*/
  sizeof(struct __pyx_obj_5graph_PriorityQueue_NR), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5graph_PriorityQueue_NR, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_5graph_16PriorityQueue_NR_3__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5graph_PriorityQueue_NR, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5graph_PriorityQueue_NR, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_5graph_GraphCy __pyx_vtable_5graph_GraphCy;

static PyObject *__pyx_tp_new_5graph_GraphCy(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5graph_GraphCy *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_5graph_GraphCy *)o);
  p->__pyx_vtab = __pyx_vtabptr_5graph_GraphCy;
  if (unlikely(__pyx_pw_5graph_7GraphCy_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5graph_GraphCy(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5graph_GraphCy) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_5graph_7GraphCy_7__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}
static PyObject *__pyx_sq_item_5graph_GraphCy(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_specialmethod___pyx_pw_5graph_7GraphCy_3__repr__(PyObject *self, CYTHON_UNUSED PyObject *arg) {
  return __pyx_pw_5graph_7GraphCy_3__repr__(self);
}

static PyMethodDef __pyx_methods_5graph_GraphCy[] = {
  {"__repr__", (PyCFunction)__pyx_specialmethod___pyx_pw_5graph_7GraphCy_3__repr__, METH_NOARGS|METH_COEXIST, 0},
  {"__reduce_ex__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_9__reduce_ex__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"_reconstruct", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_11_reconstruct, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"sizeInfo", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_13sizeInfo, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"arraySizeInfo", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_15arraySizeInfo, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"reallocNodes", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_17reallocNodes, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"reallocEdges", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_19reallocEdges, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_NodeVisited", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_21get_NodeVisited, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"addEdge", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_23addEdge, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"addNode", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_25addNode, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"changeNode", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_27changeNode, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"addEdgefromNodes", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_29addEdgefromNodes, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"addNodes", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_31addNodes, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"fromGeopandas_Edges", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_33fromGeopandas_Edges, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"removeEdge", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_35removeEdge, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"removeEdges", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_37removeEdges, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"removeNode", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_39removeNode, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"PathLength", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_41PathLength, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"PathFind_Dijkstra", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_43PathFind_Dijkstra, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5graph_7GraphCy_42PathFind_Dijkstra},
  {"PathDist_Dijkstra", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_45PathDist_Dijkstra, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5graph_7GraphCy_44PathDist_Dijkstra},
  {"PathFind_AStar", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_47PathFind_AStar, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5graph_7GraphCy_46PathFind_AStar},
  {"PathFind_AStar_VirtuEntry", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_49PathFind_AStar_VirtuEntry, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5graph_7GraphCy_48PathFind_AStar_VirtuEntry},
  {"PathDist_AStar", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_51PathDist_AStar, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5graph_7GraphCy_50PathDist_AStar},
  {"PathDist_AStar_VirtuEntry", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_53PathDist_AStar_VirtuEntry, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5graph_7GraphCy_52PathDist_AStar_VirtuEntry},
  {"PathDistComp_AStar_VirtuEntry", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_55PathDistComp_AStar_VirtuEntry, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5graph_7GraphCy_54PathDistComp_AStar_VirtuEntry},
  {"PathReach", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_57PathReach, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5graph_7GraphCy_56PathReach},
  {"PathFind_Multi", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_59PathFind_Multi, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5graph_7GraphCy_58PathFind_Multi},
  {"PathFind_Multi_VirtuEntry", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_61PathFind_Multi_VirtuEntry, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5graph_7GraphCy_60PathFind_Multi_VirtuEntry},
  {"PathFind_Multi_MultiDest_VirtuEntry", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5graph_7GraphCy_63PathFind_Multi_MultiDest_VirtuEntry, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5graph_7GraphCy_62PathFind_Multi_MultiDest_VirtuEntry},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5graph_GraphCy_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5graph_GraphCy},
  {Py_tp_repr, (void *)__pyx_pw_5graph_7GraphCy_3__repr__},
  {Py_sq_item, (void *)__pyx_sq_item_5graph_GraphCy},
  {Py_mp_subscript, (void *)__pyx_pw_5graph_7GraphCy_5__getitem__},
  {Py_tp_methods, (void *)__pyx_methods_5graph_GraphCy},
  {Py_tp_new, (void *)__pyx_tp_new_5graph_GraphCy},
  {0, 0},
};
static PyType_Spec __pyx_type_5graph_GraphCy_spec = {
  "graph.GraphCy",
  sizeof(struct __pyx_obj_5graph_GraphCy),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_5graph_GraphCy_slots,
};
#else

static PySequenceMethods __pyx_tp_as_sequence_GraphCy = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_5graph_GraphCy, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_GraphCy = {
  0, /*mp_length*/
  __pyx_pw_5graph_7GraphCy_5__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_5graph_GraphCy = {
  PyVarObject_HEAD_INIT(0, 0)
  "graph.""GraphCy", /*tp_name*/
  sizeof(struct __pyx_obj_5graph_GraphCy), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5graph_GraphCy, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_5graph_7GraphCy_3__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_GraphCy, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_GraphCy, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5graph_GraphCy, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5graph_GraphCy, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple *__pyx_freelist_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple[8];
static int __pyx_freecount_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple = 0;

static PyObject *__pyx_tp_new_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_COMPILING_IN_CPYTHON
  if (likely((int)(__pyx_freecount_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple)))) {
    o = (PyObject*)__pyx_freelist_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple[--__pyx_freecount_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple];
    memset(o, 0, sizeof(struct __pyx_obj_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple));
    (void) PyObject_INIT(o, t);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  if (((int)(__pyx_freecount_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple)))) {
    __pyx_freelist_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple[__pyx_freecount_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple++] = ((struct __pyx_obj_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple},
  {Py_tp_new, (void *)__pyx_tp_new_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple},
  {0, 0},
};
static PyType_Spec __pyx_type_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple_spec = {
  "graph.__pyx_scope_struct____pyx_f_5graph_Int_array_tuple",
  sizeof(struct __pyx_obj_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple_slots,
};
#else

static PyTypeObject __pyx_type_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple = {
  PyVarObject_HEAD_INIT(0, 0)
  "graph.""__pyx_scope_struct____pyx_f_5graph_Int_array_tuple", /*tp_name*/
  sizeof(struct __pyx_obj_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_5graph___pyx_scope_struct_1_genexpr *__pyx_freelist_5graph___pyx_scope_struct_1_genexpr[8];
static int __pyx_freecount_5graph___pyx_scope_struct_1_genexpr = 0;

static PyObject *__pyx_tp_new_5graph___pyx_scope_struct_1_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_COMPILING_IN_CPYTHON
  if (likely((int)(__pyx_freecount_5graph___pyx_scope_struct_1_genexpr > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_5graph___pyx_scope_struct_1_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5graph___pyx_scope_struct_1_genexpr[--__pyx_freecount_5graph___pyx_scope_struct_1_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5graph___pyx_scope_struct_1_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_5graph___pyx_scope_struct_1_genexpr(PyObject *o) {
  struct __pyx_obj_5graph___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_5graph___pyx_scope_struct_1_genexpr *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5graph___pyx_scope_struct_1_genexpr) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (((int)(__pyx_freecount_5graph___pyx_scope_struct_1_genexpr < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5graph___pyx_scope_struct_1_genexpr)))) {
    __pyx_freelist_5graph___pyx_scope_struct_1_genexpr[__pyx_freecount_5graph___pyx_scope_struct_1_genexpr++] = ((struct __pyx_obj_5graph___pyx_scope_struct_1_genexpr *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_5graph___pyx_scope_struct_1_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5graph___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_5graph___pyx_scope_struct_1_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5graph___pyx_scope_struct_1_genexpr_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5graph___pyx_scope_struct_1_genexpr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_5graph___pyx_scope_struct_1_genexpr},
  {Py_tp_new, (void *)__pyx_tp_new_5graph___pyx_scope_struct_1_genexpr},
  {0, 0},
};
static PyType_Spec __pyx_type_5graph___pyx_scope_struct_1_genexpr_spec = {
  "graph.__pyx_scope_struct_1_genexpr",
  sizeof(struct __pyx_obj_5graph___pyx_scope_struct_1_genexpr),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_5graph___pyx_scope_struct_1_genexpr_slots,
};
#else

static PyTypeObject __pyx_type_5graph___pyx_scope_struct_1_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "graph.""__pyx_scope_struct_1_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5graph___pyx_scope_struct_1_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5graph___pyx_scope_struct_1_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5graph___pyx_scope_struct_1_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5graph___pyx_scope_struct_1_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple *__pyx_freelist_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple[8];
static int __pyx_freecount_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple = 0;

static PyObject *__pyx_tp_new_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_COMPILING_IN_CPYTHON
  if (likely((int)(__pyx_freecount_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple)))) {
    o = (PyObject*)__pyx_freelist_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple[--__pyx_freecount_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple];
    memset(o, 0, sizeof(struct __pyx_obj_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple));
    (void) PyObject_INIT(o, t);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  if (((int)(__pyx_freecount_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple)))) {
    __pyx_freelist_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple[__pyx_freecount_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple++] = ((struct __pyx_obj_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple},
  {Py_tp_new, (void *)__pyx_tp_new_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple},
  {0, 0},
};
static PyType_Spec __pyx_type_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple_spec = {
  "graph.__pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple",
  sizeof(struct __pyx_obj_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple_slots,
};
#else

static PyTypeObject __pyx_type_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple = {
  PyVarObject_HEAD_INIT(0, 0)
  "graph.""__pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple", /*tp_name*/
  sizeof(struct __pyx_obj_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_5graph___pyx_scope_struct_3_genexpr *__pyx_freelist_5graph___pyx_scope_struct_3_genexpr[8];
static int __pyx_freecount_5graph___pyx_scope_struct_3_genexpr = 0;

static PyObject *__pyx_tp_new_5graph___pyx_scope_struct_3_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_COMPILING_IN_CPYTHON
  if (likely((int)(__pyx_freecount_5graph___pyx_scope_struct_3_genexpr > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_5graph___pyx_scope_struct_3_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5graph___pyx_scope_struct_3_genexpr[--__pyx_freecount_5graph___pyx_scope_struct_3_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5graph___pyx_scope_struct_3_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_5graph___pyx_scope_struct_3_genexpr(PyObject *o) {
  struct __pyx_obj_5graph___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_5graph___pyx_scope_struct_3_genexpr *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5graph___pyx_scope_struct_3_genexpr) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (((int)(__pyx_freecount_5graph___pyx_scope_struct_3_genexpr < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5graph___pyx_scope_struct_3_genexpr)))) {
    __pyx_freelist_5graph___pyx_scope_struct_3_genexpr[__pyx_freecount_5graph___pyx_scope_struct_3_genexpr++] = ((struct __pyx_obj_5graph___pyx_scope_struct_3_genexpr *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_5graph___pyx_scope_struct_3_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5graph___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_5graph___pyx_scope_struct_3_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5graph___pyx_scope_struct_3_genexpr_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5graph___pyx_scope_struct_3_genexpr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_5graph___pyx_scope_struct_3_genexpr},
  {Py_tp_new, (void *)__pyx_tp_new_5graph___pyx_scope_struct_3_genexpr},
  {0, 0},
};
static PyType_Spec __pyx_type_5graph___pyx_scope_struct_3_genexpr_spec = {
  "graph.__pyx_scope_struct_3_genexpr",
  sizeof(struct __pyx_obj_5graph___pyx_scope_struct_3_genexpr),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_5graph___pyx_scope_struct_3_genexpr_slots,
};
#else

static PyTypeObject __pyx_type_5graph___pyx_scope_struct_3_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "graph.""__pyx_scope_struct_3_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5graph___pyx_scope_struct_3_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5graph___pyx_scope_struct_3_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5graph___pyx_scope_struct_3_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5graph___pyx_scope_struct_3_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_5graph___pyx_scope_struct_4___reduce_ex__ *__pyx_freelist_5graph___pyx_scope_struct_4___reduce_ex__[8];
static int __pyx_freecount_5graph___pyx_scope_struct_4___reduce_ex__ = 0;

static PyObject *__pyx_tp_new_5graph___pyx_scope_struct_4___reduce_ex__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_COMPILING_IN_CPYTHON
  if (likely((int)(__pyx_freecount_5graph___pyx_scope_struct_4___reduce_ex__ > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_5graph___pyx_scope_struct_4___reduce_ex__)))) {
    o = (PyObject*)__pyx_freelist_5graph___pyx_scope_struct_4___reduce_ex__[--__pyx_freecount_5graph___pyx_scope_struct_4___reduce_ex__];
    memset(o, 0, sizeof(struct __pyx_obj_5graph___pyx_scope_struct_4___reduce_ex__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_5graph___pyx_scope_struct_4___reduce_ex__(PyObject *o) {
  struct __pyx_obj_5graph___pyx_scope_struct_4___reduce_ex__ *p = (struct __pyx_obj_5graph___pyx_scope_struct_4___reduce_ex__ *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5graph___pyx_scope_struct_4___reduce_ex__) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (((int)(__pyx_freecount_5graph___pyx_scope_struct_4___reduce_ex__ < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5graph___pyx_scope_struct_4___reduce_ex__)))) {
    __pyx_freelist_5graph___pyx_scope_struct_4___reduce_ex__[__pyx_freecount_5graph___pyx_scope_struct_4___reduce_ex__++] = ((struct __pyx_obj_5graph___pyx_scope_struct_4___reduce_ex__ *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_5graph___pyx_scope_struct_4___reduce_ex__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5graph___pyx_scope_struct_4___reduce_ex__ *p = (struct __pyx_obj_5graph___pyx_scope_struct_4___reduce_ex__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5graph___pyx_scope_struct_4___reduce_ex__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5graph___pyx_scope_struct_4___reduce_ex__ *p = (struct __pyx_obj_5graph___pyx_scope_struct_4___reduce_ex__ *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_5graph_GraphCy *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5graph___pyx_scope_struct_4___reduce_ex___slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5graph___pyx_scope_struct_4___reduce_ex__},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_5graph___pyx_scope_struct_4___reduce_ex__},
  {Py_tp_clear, (void *)__pyx_tp_clear_5graph___pyx_scope_struct_4___reduce_ex__},
  {Py_tp_new, (void *)__pyx_tp_new_5graph___pyx_scope_struct_4___reduce_ex__},
  {0, 0},
};
static PyType_Spec __pyx_type_5graph___pyx_scope_struct_4___reduce_ex___spec = {
  "graph.__pyx_scope_struct_4___reduce_ex__",
  sizeof(struct __pyx_obj_5graph___pyx_scope_struct_4___reduce_ex__),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_5graph___pyx_scope_struct_4___reduce_ex___slots,
};
#else

static PyTypeObject __pyx_type_5graph___pyx_scope_struct_4___reduce_ex__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "graph.""__pyx_scope_struct_4___reduce_ex__", /*tp_name*/
  sizeof(struct __pyx_obj_5graph___pyx_scope_struct_4___reduce_ex__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5graph___pyx_scope_struct_4___reduce_ex__, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5graph___pyx_scope_struct_4___reduce_ex__, /*tp_traverse*/
  __pyx_tp_clear_5graph___pyx_scope_struct_4___reduce_ex__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5graph___pyx_scope_struct_4___reduce_ex__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_5graph___pyx_scope_struct_5_genexpr *__pyx_freelist_5graph___pyx_scope_struct_5_genexpr[8];
static int __pyx_freecount_5graph___pyx_scope_struct_5_genexpr = 0;

static PyObject *__pyx_tp_new_5graph___pyx_scope_struct_5_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_COMPILING_IN_CPYTHON
  if (likely((int)(__pyx_freecount_5graph___pyx_scope_struct_5_genexpr > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_5graph___pyx_scope_struct_5_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5graph___pyx_scope_struct_5_genexpr[--__pyx_freecount_5graph___pyx_scope_struct_5_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5graph___pyx_scope_struct_5_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_5graph___pyx_scope_struct_5_genexpr(PyObject *o) {
  struct __pyx_obj_5graph___pyx_scope_struct_5_genexpr *p = (struct __pyx_obj_5graph___pyx_scope_struct_5_genexpr *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5graph___pyx_scope_struct_5_genexpr) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (((int)(__pyx_freecount_5graph___pyx_scope_struct_5_genexpr < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5graph___pyx_scope_struct_5_genexpr)))) {
    __pyx_freelist_5graph___pyx_scope_struct_5_genexpr[__pyx_freecount_5graph___pyx_scope_struct_5_genexpr++] = ((struct __pyx_obj_5graph___pyx_scope_struct_5_genexpr *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_5graph___pyx_scope_struct_5_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5graph___pyx_scope_struct_5_genexpr *p = (struct __pyx_obj_5graph___pyx_scope_struct_5_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5graph___pyx_scope_struct_5_genexpr_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5graph___pyx_scope_struct_5_genexpr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_5graph___pyx_scope_struct_5_genexpr},
  {Py_tp_new, (void *)__pyx_tp_new_5graph___pyx_scope_struct_5_genexpr},
  {0, 0},
};
static PyType_Spec __pyx_type_5graph___pyx_scope_struct_5_genexpr_spec = {
  "graph.__pyx_scope_struct_5_genexpr",
  sizeof(struct __pyx_obj_5graph___pyx_scope_struct_5_genexpr),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_5graph___pyx_scope_struct_5_genexpr_slots,
};
#else

static PyTypeObject __pyx_type_5graph___pyx_scope_struct_5_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "graph.""__pyx_scope_struct_5_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5graph___pyx_scope_struct_5_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5graph___pyx_scope_struct_5_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5graph___pyx_scope_struct_5_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5graph___pyx_scope_struct_5_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_5graph___pyx_scope_struct_6_genexpr *__pyx_freelist_5graph___pyx_scope_struct_6_genexpr[8];
static int __pyx_freecount_5graph___pyx_scope_struct_6_genexpr = 0;

static PyObject *__pyx_tp_new_5graph___pyx_scope_struct_6_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_COMPILING_IN_CPYTHON
  if (likely((int)(__pyx_freecount_5graph___pyx_scope_struct_6_genexpr > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_5graph___pyx_scope_struct_6_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5graph___pyx_scope_struct_6_genexpr[--__pyx_freecount_5graph___pyx_scope_struct_6_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5graph___pyx_scope_struct_6_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_5graph___pyx_scope_struct_6_genexpr(PyObject *o) {
  struct __pyx_obj_5graph___pyx_scope_struct_6_genexpr *p = (struct __pyx_obj_5graph___pyx_scope_struct_6_genexpr *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5graph___pyx_scope_struct_6_genexpr) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (((int)(__pyx_freecount_5graph___pyx_scope_struct_6_genexpr < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5graph___pyx_scope_struct_6_genexpr)))) {
    __pyx_freelist_5graph___pyx_scope_struct_6_genexpr[__pyx_freecount_5graph___pyx_scope_struct_6_genexpr++] = ((struct __pyx_obj_5graph___pyx_scope_struct_6_genexpr *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_5graph___pyx_scope_struct_6_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5graph___pyx_scope_struct_6_genexpr *p = (struct __pyx_obj_5graph___pyx_scope_struct_6_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5graph___pyx_scope_struct_6_genexpr_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5graph___pyx_scope_struct_6_genexpr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_5graph___pyx_scope_struct_6_genexpr},
  {Py_tp_new, (void *)__pyx_tp_new_5graph___pyx_scope_struct_6_genexpr},
  {0, 0},
};
static PyType_Spec __pyx_type_5graph___pyx_scope_struct_6_genexpr_spec = {
  "graph.__pyx_scope_struct_6_genexpr",
  sizeof(struct __pyx_obj_5graph___pyx_scope_struct_6_genexpr),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_5graph___pyx_scope_struct_6_genexpr_slots,
};
#else

static PyTypeObject __pyx_type_5graph___pyx_scope_struct_6_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "graph.""__pyx_scope_struct_6_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5graph___pyx_scope_struct_6_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5graph___pyx_scope_struct_6_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5graph___pyx_scope_struct_6_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5graph___pyx_scope_struct_6_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_5graph___pyx_scope_struct_7_get_NodeVisited *__pyx_freelist_5graph___pyx_scope_struct_7_get_NodeVisited[8];
static int __pyx_freecount_5graph___pyx_scope_struct_7_get_NodeVisited = 0;

static PyObject *__pyx_tp_new_5graph___pyx_scope_struct_7_get_NodeVisited(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_COMPILING_IN_CPYTHON
  if (likely((int)(__pyx_freecount_5graph___pyx_scope_struct_7_get_NodeVisited > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_5graph___pyx_scope_struct_7_get_NodeVisited)))) {
    o = (PyObject*)__pyx_freelist_5graph___pyx_scope_struct_7_get_NodeVisited[--__pyx_freecount_5graph___pyx_scope_struct_7_get_NodeVisited];
    memset(o, 0, sizeof(struct __pyx_obj_5graph___pyx_scope_struct_7_get_NodeVisited));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_5graph___pyx_scope_struct_7_get_NodeVisited(PyObject *o) {
  struct __pyx_obj_5graph___pyx_scope_struct_7_get_NodeVisited *p = (struct __pyx_obj_5graph___pyx_scope_struct_7_get_NodeVisited *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5graph___pyx_scope_struct_7_get_NodeVisited) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (((int)(__pyx_freecount_5graph___pyx_scope_struct_7_get_NodeVisited < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5graph___pyx_scope_struct_7_get_NodeVisited)))) {
    __pyx_freelist_5graph___pyx_scope_struct_7_get_NodeVisited[__pyx_freecount_5graph___pyx_scope_struct_7_get_NodeVisited++] = ((struct __pyx_obj_5graph___pyx_scope_struct_7_get_NodeVisited *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_5graph___pyx_scope_struct_7_get_NodeVisited(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5graph___pyx_scope_struct_7_get_NodeVisited *p = (struct __pyx_obj_5graph___pyx_scope_struct_7_get_NodeVisited *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5graph___pyx_scope_struct_7_get_NodeVisited(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5graph___pyx_scope_struct_7_get_NodeVisited *p = (struct __pyx_obj_5graph___pyx_scope_struct_7_get_NodeVisited *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_5graph_GraphCy *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5graph___pyx_scope_struct_7_get_NodeVisited_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5graph___pyx_scope_struct_7_get_NodeVisited},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_5graph___pyx_scope_struct_7_get_NodeVisited},
  {Py_tp_clear, (void *)__pyx_tp_clear_5graph___pyx_scope_struct_7_get_NodeVisited},
  {Py_tp_new, (void *)__pyx_tp_new_5graph___pyx_scope_struct_7_get_NodeVisited},
  {0, 0},
};
static PyType_Spec __pyx_type_5graph___pyx_scope_struct_7_get_NodeVisited_spec = {
  "graph.__pyx_scope_struct_7_get_NodeVisited",
  sizeof(struct __pyx_obj_5graph___pyx_scope_struct_7_get_NodeVisited),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_5graph___pyx_scope_struct_7_get_NodeVisited_slots,
};
#else

static PyTypeObject __pyx_type_5graph___pyx_scope_struct_7_get_NodeVisited = {
  PyVarObject_HEAD_INIT(0, 0)
  "graph.""__pyx_scope_struct_7_get_NodeVisited", /*tp_name*/
  sizeof(struct __pyx_obj_5graph___pyx_scope_struct_7_get_NodeVisited), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5graph___pyx_scope_struct_7_get_NodeVisited, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5graph___pyx_scope_struct_7_get_NodeVisited, /*tp_traverse*/
  __pyx_tp_clear_5graph___pyx_scope_struct_7_get_NodeVisited, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5graph___pyx_scope_struct_7_get_NodeVisited, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_5graph___pyx_scope_struct_8_genexpr *__pyx_freelist_5graph___pyx_scope_struct_8_genexpr[8];
static int __pyx_freecount_5graph___pyx_scope_struct_8_genexpr = 0;

static PyObject *__pyx_tp_new_5graph___pyx_scope_struct_8_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_COMPILING_IN_CPYTHON
  if (likely((int)(__pyx_freecount_5graph___pyx_scope_struct_8_genexpr > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_5graph___pyx_scope_struct_8_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5graph___pyx_scope_struct_8_genexpr[--__pyx_freecount_5graph___pyx_scope_struct_8_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5graph___pyx_scope_struct_8_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_5graph___pyx_scope_struct_8_genexpr(PyObject *o) {
  struct __pyx_obj_5graph___pyx_scope_struct_8_genexpr *p = (struct __pyx_obj_5graph___pyx_scope_struct_8_genexpr *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5graph___pyx_scope_struct_8_genexpr) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (((int)(__pyx_freecount_5graph___pyx_scope_struct_8_genexpr < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5graph___pyx_scope_struct_8_genexpr)))) {
    __pyx_freelist_5graph___pyx_scope_struct_8_genexpr[__pyx_freecount_5graph___pyx_scope_struct_8_genexpr++] = ((struct __pyx_obj_5graph___pyx_scope_struct_8_genexpr *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_5graph___pyx_scope_struct_8_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5graph___pyx_scope_struct_8_genexpr *p = (struct __pyx_obj_5graph___pyx_scope_struct_8_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5graph___pyx_scope_struct_8_genexpr_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5graph___pyx_scope_struct_8_genexpr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_5graph___pyx_scope_struct_8_genexpr},
  {Py_tp_new, (void *)__pyx_tp_new_5graph___pyx_scope_struct_8_genexpr},
  {0, 0},
};
static PyType_Spec __pyx_type_5graph___pyx_scope_struct_8_genexpr_spec = {
  "graph.__pyx_scope_struct_8_genexpr",
  sizeof(struct __pyx_obj_5graph___pyx_scope_struct_8_genexpr),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_5graph___pyx_scope_struct_8_genexpr_slots,
};
#else

static PyTypeObject __pyx_type_5graph___pyx_scope_struct_8_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "graph.""__pyx_scope_struct_8_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5graph___pyx_scope_struct_8_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5graph___pyx_scope_struct_8_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5graph___pyx_scope_struct_8_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5graph___pyx_scope_struct_8_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_5graph___pyx_scope_struct_9_PathReach *__pyx_freelist_5graph___pyx_scope_struct_9_PathReach[8];
static int __pyx_freecount_5graph___pyx_scope_struct_9_PathReach = 0;

static PyObject *__pyx_tp_new_5graph___pyx_scope_struct_9_PathReach(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5graph___pyx_scope_struct_9_PathReach *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_COMPILING_IN_CPYTHON
  if (likely((int)(__pyx_freecount_5graph___pyx_scope_struct_9_PathReach > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_5graph___pyx_scope_struct_9_PathReach)))) {
    o = (PyObject*)__pyx_freelist_5graph___pyx_scope_struct_9_PathReach[--__pyx_freecount_5graph___pyx_scope_struct_9_PathReach];
    memset(o, 0, sizeof(struct __pyx_obj_5graph___pyx_scope_struct_9_PathReach));
    (void) PyObject_INIT(o, t);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  p = ((struct __pyx_obj_5graph___pyx_scope_struct_9_PathReach *)o);
  new((void*)&(p->__pyx_v_EdgesReach)) std::vector<std::pair<int,float> > ();
  return o;
}

static void __pyx_tp_dealloc_5graph___pyx_scope_struct_9_PathReach(PyObject *o) {
  struct __pyx_obj_5graph___pyx_scope_struct_9_PathReach *p = (struct __pyx_obj_5graph___pyx_scope_struct_9_PathReach *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5graph___pyx_scope_struct_9_PathReach) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  __Pyx_call_destructor(p->__pyx_v_EdgesReach);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (((int)(__pyx_freecount_5graph___pyx_scope_struct_9_PathReach < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5graph___pyx_scope_struct_9_PathReach)))) {
    __pyx_freelist_5graph___pyx_scope_struct_9_PathReach[__pyx_freecount_5graph___pyx_scope_struct_9_PathReach++] = ((struct __pyx_obj_5graph___pyx_scope_struct_9_PathReach *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5graph___pyx_scope_struct_9_PathReach_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5graph___pyx_scope_struct_9_PathReach},
  {Py_tp_new, (void *)__pyx_tp_new_5graph___pyx_scope_struct_9_PathReach},
  {0, 0},
};
static PyType_Spec __pyx_type_5graph___pyx_scope_struct_9_PathReach_spec = {
  "graph.__pyx_scope_struct_9_PathReach",
  sizeof(struct __pyx_obj_5graph___pyx_scope_struct_9_PathReach),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_5graph___pyx_scope_struct_9_PathReach_slots,
};
#else

static PyTypeObject __pyx_type_5graph___pyx_scope_struct_9_PathReach = {
  PyVarObject_HEAD_INIT(0, 0)
  "graph.""__pyx_scope_struct_9_PathReach", /*tp_name*/
  sizeof(struct __pyx_obj_5graph___pyx_scope_struct_9_PathReach), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5graph___pyx_scope_struct_9_PathReach, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5graph___pyx_scope_struct_9_PathReach, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_5graph___pyx_scope_struct_10_genexpr *__pyx_freelist_5graph___pyx_scope_struct_10_genexpr[8];
static int __pyx_freecount_5graph___pyx_scope_struct_10_genexpr = 0;

static PyObject *__pyx_tp_new_5graph___pyx_scope_struct_10_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_COMPILING_IN_CPYTHON
  if (likely((int)(__pyx_freecount_5graph___pyx_scope_struct_10_genexpr > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_5graph___pyx_scope_struct_10_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5graph___pyx_scope_struct_10_genexpr[--__pyx_freecount_5graph___pyx_scope_struct_10_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5graph___pyx_scope_struct_10_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_5graph___pyx_scope_struct_10_genexpr(PyObject *o) {
  struct __pyx_obj_5graph___pyx_scope_struct_10_genexpr *p = (struct __pyx_obj_5graph___pyx_scope_struct_10_genexpr *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5graph___pyx_scope_struct_10_genexpr) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (((int)(__pyx_freecount_5graph___pyx_scope_struct_10_genexpr < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5graph___pyx_scope_struct_10_genexpr)))) {
    __pyx_freelist_5graph___pyx_scope_struct_10_genexpr[__pyx_freecount_5graph___pyx_scope_struct_10_genexpr++] = ((struct __pyx_obj_5graph___pyx_scope_struct_10_genexpr *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_5graph___pyx_scope_struct_10_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5graph___pyx_scope_struct_10_genexpr *p = (struct __pyx_obj_5graph___pyx_scope_struct_10_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5graph___pyx_scope_struct_10_genexpr_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5graph___pyx_scope_struct_10_genexpr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_5graph___pyx_scope_struct_10_genexpr},
  {Py_tp_new, (void *)__pyx_tp_new_5graph___pyx_scope_struct_10_genexpr},
  {0, 0},
};
static PyType_Spec __pyx_type_5graph___pyx_scope_struct_10_genexpr_spec = {
  "graph.__pyx_scope_struct_10_genexpr",
  sizeof(struct __pyx_obj_5graph___pyx_scope_struct_10_genexpr),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_5graph___pyx_scope_struct_10_genexpr_slots,
};
#else

static PyTypeObject __pyx_type_5graph___pyx_scope_struct_10_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "graph.""__pyx_scope_struct_10_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5graph___pyx_scope_struct_10_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5graph___pyx_scope_struct_10_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5graph___pyx_scope_struct_10_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5graph___pyx_scope_struct_10_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_5graph___pyx_scope_struct_11_genexpr *__pyx_freelist_5graph___pyx_scope_struct_11_genexpr[8];
static int __pyx_freecount_5graph___pyx_scope_struct_11_genexpr = 0;

static PyObject *__pyx_tp_new_5graph___pyx_scope_struct_11_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5graph___pyx_scope_struct_11_genexpr *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_COMPILING_IN_CPYTHON
  if (likely((int)(__pyx_freecount_5graph___pyx_scope_struct_11_genexpr > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_5graph___pyx_scope_struct_11_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5graph___pyx_scope_struct_11_genexpr[--__pyx_freecount_5graph___pyx_scope_struct_11_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5graph___pyx_scope_struct_11_genexpr));
    (void) PyObject_INIT(o, t);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  p = ((struct __pyx_obj_5graph___pyx_scope_struct_11_genexpr *)o);
  new((void*)&(p->__pyx_genexpr_arg_0)) std::vector<std::pair<int,float> > ();
  new((void*)&(p->__pyx_v_v)) std::pair<int,float> ();
  new((void*)&(p->__pyx_t_0)) std::vector<std::pair<int,float> > ::iterator();
  return o;
}

static void __pyx_tp_dealloc_5graph___pyx_scope_struct_11_genexpr(PyObject *o) {
  struct __pyx_obj_5graph___pyx_scope_struct_11_genexpr *p = (struct __pyx_obj_5graph___pyx_scope_struct_11_genexpr *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5graph___pyx_scope_struct_11_genexpr) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  __Pyx_call_destructor(p->__pyx_genexpr_arg_0);
  __Pyx_call_destructor(p->__pyx_v_v);
  __Pyx_call_destructor(p->__pyx_t_0);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (((int)(__pyx_freecount_5graph___pyx_scope_struct_11_genexpr < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5graph___pyx_scope_struct_11_genexpr)))) {
    __pyx_freelist_5graph___pyx_scope_struct_11_genexpr[__pyx_freecount_5graph___pyx_scope_struct_11_genexpr++] = ((struct __pyx_obj_5graph___pyx_scope_struct_11_genexpr *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5graph___pyx_scope_struct_11_genexpr_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5graph___pyx_scope_struct_11_genexpr},
  {Py_tp_new, (void *)__pyx_tp_new_5graph___pyx_scope_struct_11_genexpr},
  {0, 0},
};
static PyType_Spec __pyx_type_5graph___pyx_scope_struct_11_genexpr_spec = {
  "graph.__pyx_scope_struct_11_genexpr",
  sizeof(struct __pyx_obj_5graph___pyx_scope_struct_11_genexpr),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_5graph___pyx_scope_struct_11_genexpr_slots,
};
#else

static PyTypeObject __pyx_type_5graph___pyx_scope_struct_11_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "graph.""__pyx_scope_struct_11_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5graph___pyx_scope_struct_11_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5graph___pyx_scope_struct_11_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5graph___pyx_scope_struct_11_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static int __Pyx_CreateStringTabAndInitStrings(void) {
  __Pyx_StringTabEntry __pyx_string_tab[] = {
    {&__pyx_n_s_A_LnW, __pyx_k_A_LnW, sizeof(__pyx_k_A_LnW), 0, 0, 1, 1},
    {&__pyx_n_s_A_Lnlength, __pyx_k_A_Lnlength, sizeof(__pyx_k_A_Lnlength), 0, 0, 1, 1},
    {&__pyx_n_s_A_LnlengthR, __pyx_k_A_LnlengthR, sizeof(__pyx_k_A_LnlengthR), 0, 0, 1, 1},
    {&__pyx_n_s_A_PtedC, __pyx_k_A_PtedC, sizeof(__pyx_k_A_PtedC), 0, 0, 1, 1},
    {&__pyx_n_s_A_PtedW, __pyx_k_A_PtedW, sizeof(__pyx_k_A_PtedW), 0, 0, 1, 1},
    {&__pyx_n_s_A_PtstC, __pyx_k_A_PtstC, sizeof(__pyx_k_A_PtstC), 0, 0, 1, 1},
    {&__pyx_n_s_A_PtstW, __pyx_k_A_PtstW, sizeof(__pyx_k_A_PtstW), 0, 0, 1, 1},
    {&__pyx_kp_s_Atribute_for_line_length_not_fou, __pyx_k_Atribute_for_line_length_not_fou, sizeof(__pyx_k_Atribute_for_line_length_not_fou), 0, 0, 1, 0},
    {&__pyx_kp_s_Atribute_for_line_length_reverse, __pyx_k_Atribute_for_line_length_reverse, sizeof(__pyx_k_Atribute_for_line_length_reverse), 0, 0, 1, 0},
    {&__pyx_kp_s_Attribute_for_line_weight_not_fo, __pyx_k_Attribute_for_line_weight_not_fo, sizeof(__pyx_k_Attribute_for_line_weight_not_fo), 0, 0, 1, 0},
    {&__pyx_n_s_BaseDist, __pyx_k_BaseDist, sizeof(__pyx_k_BaseDist), 0, 0, 1, 1},
    {&__pyx_n_s_DestTup, __pyx_k_DestTup, sizeof(__pyx_k_DestTup), 0, 0, 1, 1},
    {&__pyx_n_s_DistD, __pyx_k_DistD, sizeof(__pyx_k_DistD), 0, 0, 1, 1},
    {&__pyx_n_s_DistMul, __pyx_k_DistMul, sizeof(__pyx_k_DistMul), 0, 0, 1, 1},
    {&__pyx_n_s_DistMulLim, __pyx_k_DistMulLim, sizeof(__pyx_k_DistMulLim), 0, 0, 1, 1},
    {&__pyx_n_s_DistO, __pyx_k_DistO, sizeof(__pyx_k_DistO), 0, 0, 1, 1},
    {&__pyx_n_s_DstD, __pyx_k_DstD, sizeof(__pyx_k_DstD), 0, 0, 1, 1},
    {&__pyx_n_s_DstO, __pyx_k_DstO, sizeof(__pyx_k_DstO), 0, 0, 1, 1},
    {&__pyx_n_s_EdgeC, __pyx_k_EdgeC, sizeof(__pyx_k_EdgeC), 0, 0, 1, 1},
    {&__pyx_n_s_EdgeCmin, __pyx_k_EdgeCmin, sizeof(__pyx_k_EdgeCmin), 0, 0, 1, 1},
    {&__pyx_kp_s_Edge_point_end_cost_attribute_no, __pyx_k_Edge_point_end_cost_attribute_no, sizeof(__pyx_k_Edge_point_end_cost_attribute_no), 0, 0, 1, 0},
    {&__pyx_kp_s_Edge_point_end_weight_attribute, __pyx_k_Edge_point_end_weight_attribute, sizeof(__pyx_k_Edge_point_end_weight_attribute), 0, 0, 1, 0},
    {&__pyx_kp_s_Edge_point_start_cost_attribute, __pyx_k_Edge_point_start_cost_attribute, sizeof(__pyx_k_Edge_point_start_cost_attribute), 0, 0, 1, 0},
    {&__pyx_kp_s_Edge_point_start_weight_attribut, __pyx_k_Edge_point_start_weight_attribut, sizeof(__pyx_k_Edge_point_start_weight_attribut), 0, 0, 1, 0},
    {&__pyx_kp_u_Edges, __pyx_k_Edges, sizeof(__pyx_k_Edges), 0, 1, 0, 0},
    {&__pyx_n_s_EdgesFringe, __pyx_k_EdgesFringe, sizeof(__pyx_k_EdgesFringe), 0, 0, 1, 1},
    {&__pyx_n_s_EdgesReach, __pyx_k_EdgesReach, sizeof(__pyx_k_EdgesReach), 0, 0, 1, 1},
    {&__pyx_n_s_EdgesReachSize, __pyx_k_EdgesReachSize, sizeof(__pyx_k_EdgesReachSize), 0, 0, 1, 1},
    {&__pyx_n_s_EdgesReach_EidVec, __pyx_k_EdgesReach_EidVec, sizeof(__pyx_k_EdgesReach_EidVec), 0, 0, 1, 1},
    {&__pyx_n_s_Eid, __pyx_k_Eid, sizeof(__pyx_k_Eid), 0, 0, 1, 1},
    {&__pyx_n_s_EidD, __pyx_k_EidD, sizeof(__pyx_k_EidD), 0, 0, 1, 1},
    {&__pyx_n_s_EidN, __pyx_k_EidN, sizeof(__pyx_k_EidN), 0, 0, 1, 1},
    {&__pyx_n_s_EidO, __pyx_k_EidO, sizeof(__pyx_k_EidO), 0, 0, 1, 1},
    {&__pyx_n_s_Eididx, __pyx_k_Eididx, sizeof(__pyx_k_Eididx), 0, 0, 1, 1},
    {&__pyx_n_s_Float_array_tuple_locals_genexpr, __pyx_k_Float_array_tuple_locals_genexpr, sizeof(__pyx_k_Float_array_tuple_locals_genexpr), 0, 0, 1, 1},
    {&__pyx_n_s_ForceDst, __pyx_k_ForceDst, sizeof(__pyx_k_ForceDst), 0, 0, 1, 1},
    {&__pyx_n_s_ForceOri, __pyx_k_ForceOri, sizeof(__pyx_k_ForceOri), 0, 0, 1, 1},
    {&__pyx_n_s_FoundDistance, __pyx_k_FoundDistance, sizeof(__pyx_k_FoundDistance), 0, 0, 1, 1},
    {&__pyx_n_s_FoundPaths, __pyx_k_FoundPaths, sizeof(__pyx_k_FoundPaths), 0, 0, 1, 1},
    {&__pyx_n_s_FoundWeights, __pyx_k_FoundWeights, sizeof(__pyx_k_FoundWeights), 0, 0, 1, 1},
    {&__pyx_n_s_GraphCy, __pyx_k_GraphCy, sizeof(__pyx_k_GraphCy), 0, 0, 1, 1},
    {&__pyx_n_s_GraphCy_PathDistComp_AStar_Virtu, __pyx_k_GraphCy_PathDistComp_AStar_Virtu, sizeof(__pyx_k_GraphCy_PathDistComp_AStar_Virtu), 0, 0, 1, 1},
    {&__pyx_n_s_GraphCy_PathDist_AStar, __pyx_k_GraphCy_PathDist_AStar, sizeof(__pyx_k_GraphCy_PathDist_AStar), 0, 0, 1, 1},
    {&__pyx_n_s_GraphCy_PathDist_AStar_VirtuEntr, __pyx_k_GraphCy_PathDist_AStar_VirtuEntr, sizeof(__pyx_k_GraphCy_PathDist_AStar_VirtuEntr), 0, 0, 1, 1},
    {&__pyx_n_s_GraphCy_PathDist_Dijkstra, __pyx_k_GraphCy_PathDist_Dijkstra, sizeof(__pyx_k_GraphCy_PathDist_Dijkstra), 0, 0, 1, 1},
    {&__pyx_n_s_GraphCy_PathFind_AStar, __pyx_k_GraphCy_PathFind_AStar, sizeof(__pyx_k_GraphCy_PathFind_AStar), 0, 0, 1, 1},
    {&__pyx_n_s_GraphCy_PathFind_AStar_VirtuEntr, __pyx_k_GraphCy_PathFind_AStar_VirtuEntr, sizeof(__pyx_k_GraphCy_PathFind_AStar_VirtuEntr), 0, 0, 1, 1},
    {&__pyx_n_s_GraphCy_PathFind_Dijkstra, __pyx_k_GraphCy_PathFind_Dijkstra, sizeof(__pyx_k_GraphCy_PathFind_Dijkstra), 0, 0, 1, 1},
    {&__pyx_n_s_GraphCy_PathFind_Multi, __pyx_k_GraphCy_PathFind_Multi, sizeof(__pyx_k_GraphCy_PathFind_Multi), 0, 0, 1, 1},
    {&__pyx_n_s_GraphCy_PathFind_Multi_MultiDest, __pyx_k_GraphCy_PathFind_Multi_MultiDest, sizeof(__pyx_k_GraphCy_PathFind_Multi_MultiDest), 0, 0, 1, 1},
    {&__pyx_n_s_GraphCy_PathFind_Multi_VirtuEntr, __pyx_k_GraphCy_PathFind_Multi_VirtuEntr, sizeof(__pyx_k_GraphCy_PathFind_Multi_VirtuEntr), 0, 0, 1, 1},
    {&__pyx_n_s_GraphCy_PathLength, __pyx_k_GraphCy_PathLength, sizeof(__pyx_k_GraphCy_PathLength), 0, 0, 1, 1},
    {&__pyx_n_s_GraphCy_PathReach, __pyx_k_GraphCy_PathReach, sizeof(__pyx_k_GraphCy_PathReach), 0, 0, 1, 1},
    {&__pyx_n_s_GraphCy___reduce_ex, __pyx_k_GraphCy___reduce_ex, sizeof(__pyx_k_GraphCy___reduce_ex), 0, 0, 1, 1},
    {&__pyx_n_s_GraphCy__reconstruct, __pyx_k_GraphCy__reconstruct, sizeof(__pyx_k_GraphCy__reconstruct), 0, 0, 1, 1},
    {&__pyx_n_s_GraphCy_addEdge, __pyx_k_GraphCy_addEdge, sizeof(__pyx_k_GraphCy_addEdge), 0, 0, 1, 1},
    {&__pyx_n_s_GraphCy_addEdgefromNodes, __pyx_k_GraphCy_addEdgefromNodes, sizeof(__pyx_k_GraphCy_addEdgefromNodes), 0, 0, 1, 1},
    {&__pyx_n_s_GraphCy_addNode, __pyx_k_GraphCy_addNode, sizeof(__pyx_k_GraphCy_addNode), 0, 0, 1, 1},
    {&__pyx_n_s_GraphCy_addNodes, __pyx_k_GraphCy_addNodes, sizeof(__pyx_k_GraphCy_addNodes), 0, 0, 1, 1},
    {&__pyx_n_s_GraphCy_arraySizeInfo, __pyx_k_GraphCy_arraySizeInfo, sizeof(__pyx_k_GraphCy_arraySizeInfo), 0, 0, 1, 1},
    {&__pyx_n_s_GraphCy_changeNode, __pyx_k_GraphCy_changeNode, sizeof(__pyx_k_GraphCy_changeNode), 0, 0, 1, 1},
    {&__pyx_n_s_GraphCy_fromGeopandas_Edges, __pyx_k_GraphCy_fromGeopandas_Edges, sizeof(__pyx_k_GraphCy_fromGeopandas_Edges), 0, 0, 1, 1},
    {&__pyx_n_s_GraphCy_get_NodeVisited, __pyx_k_GraphCy_get_NodeVisited, sizeof(__pyx_k_GraphCy_get_NodeVisited), 0, 0, 1, 1},
    {&__pyx_kp_u_GraphCy_object_of, __pyx_k_GraphCy_object_of, sizeof(__pyx_k_GraphCy_object_of), 0, 1, 0, 0},
    {&__pyx_n_s_GraphCy_reallocEdges, __pyx_k_GraphCy_reallocEdges, sizeof(__pyx_k_GraphCy_reallocEdges), 0, 0, 1, 1},
    {&__pyx_n_s_GraphCy_reallocNodes, __pyx_k_GraphCy_reallocNodes, sizeof(__pyx_k_GraphCy_reallocNodes), 0, 0, 1, 1},
    {&__pyx_n_s_GraphCy_removeEdge, __pyx_k_GraphCy_removeEdge, sizeof(__pyx_k_GraphCy_removeEdge), 0, 0, 1, 1},
    {&__pyx_n_s_GraphCy_removeEdges, __pyx_k_GraphCy_removeEdges, sizeof(__pyx_k_GraphCy_removeEdges), 0, 0, 1, 1},
    {&__pyx_n_s_GraphCy_removeNode, __pyx_k_GraphCy_removeNode, sizeof(__pyx_k_GraphCy_removeNode), 0, 0, 1, 1},
    {&__pyx_n_s_GraphCy_sizeInfo, __pyx_k_GraphCy_sizeInfo, sizeof(__pyx_k_GraphCy_sizeInfo), 0, 0, 1, 1},
    {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
    {&__pyx_kp_s_Index_out_of_range, __pyx_k_Index_out_of_range, sizeof(__pyx_k_Index_out_of_range), 0, 0, 1, 0},
    {&__pyx_n_s_Int_array_tuple_locals_genexpr, __pyx_k_Int_array_tuple_locals_genexpr, sizeof(__pyx_k_Int_array_tuple_locals_genexpr), 0, 0, 1, 1},
    {&__pyx_n_s_LimCycle, __pyx_k_LimCycle, sizeof(__pyx_k_LimCycle), 0, 0, 1, 1},
    {&__pyx_n_s_LimDist, __pyx_k_LimDist, sizeof(__pyx_k_LimDist), 0, 0, 1, 1},
    {&__pyx_n_s_LimitDistance, __pyx_k_LimitDistance, sizeof(__pyx_k_LimitDistance), 0, 0, 1, 1},
    {&__pyx_n_s_List, __pyx_k_List, sizeof(__pyx_k_List), 0, 0, 1, 1},
    {&__pyx_n_s_LnW, __pyx_k_LnW, sizeof(__pyx_k_LnW), 0, 0, 1, 1},
    {&__pyx_n_s_Lnlength, __pyx_k_Lnlength, sizeof(__pyx_k_Lnlength), 0, 0, 1, 1},
    {&__pyx_n_s_LnlengthR, __pyx_k_LnlengthR, sizeof(__pyx_k_LnlengthR), 0, 0, 1, 1},
    {&__pyx_n_s_MappedPath_T, __pyx_k_MappedPath_T, sizeof(__pyx_k_MappedPath_T), 0, 0, 1, 1},
    {&__pyx_n_s_MappedPath_T2, __pyx_k_MappedPath_T2, sizeof(__pyx_k_MappedPath_T2), 0, 0, 1, 1},
    {&__pyx_n_s_MappedPaths, __pyx_k_MappedPaths, sizeof(__pyx_k_MappedPaths), 0, 0, 1, 1},
    {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
    {&__pyx_n_s_MinimumDistance, __pyx_k_MinimumDistance, sizeof(__pyx_k_MinimumDistance), 0, 0, 1, 1},
    {&__pyx_n_s_Nedges, __pyx_k_Nedges, sizeof(__pyx_k_Nedges), 0, 0, 1, 1},
    {&__pyx_n_s_NidD, __pyx_k_NidD, sizeof(__pyx_k_NidD), 0, 0, 1, 1},
    {&__pyx_n_s_NidF, __pyx_k_NidF, sizeof(__pyx_k_NidF), 0, 0, 1, 1},
    {&__pyx_n_s_NidO, __pyx_k_NidO, sizeof(__pyx_k_NidO), 0, 0, 1, 1},
    {&__pyx_n_s_Nnodes, __pyx_k_Nnodes, sizeof(__pyx_k_Nnodes), 0, 0, 1, 1},
    {&__pyx_n_s_NodeCheck, __pyx_k_NodeCheck, sizeof(__pyx_k_NodeCheck), 0, 0, 1, 1},
    {&__pyx_n_s_NodeReach_T, __pyx_k_NodeReach_T, sizeof(__pyx_k_NodeReach_T), 0, 0, 1, 1},
    {&__pyx_n_s_NodeTarget, __pyx_k_NodeTarget, sizeof(__pyx_k_NodeTarget), 0, 0, 1, 1},
    {&__pyx_kp_u_Nodes, __pyx_k_Nodes, sizeof(__pyx_k_Nodes), 0, 1, 0, 0},
    {&__pyx_n_s_None, __pyx_k_None, sizeof(__pyx_k_None), 0, 0, 1, 1},
    {&__pyx_n_s_Oid, __pyx_k_Oid, sizeof(__pyx_k_Oid), 0, 0, 1, 1},
    {&__pyx_n_s_OpenNodes, __pyx_k_OpenNodes, sizeof(__pyx_k_OpenNodes), 0, 0, 1, 1},
    {&__pyx_n_s_OverflowError, __pyx_k_OverflowError, sizeof(__pyx_k_OverflowError), 0, 0, 1, 1},
    {&__pyx_n_s_PathDistComp_AStar_VirtuEntry, __pyx_k_PathDistComp_AStar_VirtuEntry, sizeof(__pyx_k_PathDistComp_AStar_VirtuEntry), 0, 0, 1, 1},
    {&__pyx_n_s_PathDist_AStar, __pyx_k_PathDist_AStar, sizeof(__pyx_k_PathDist_AStar), 0, 0, 1, 1},
    {&__pyx_n_s_PathDist_AStar_VirtuEntry, __pyx_k_PathDist_AStar_VirtuEntry, sizeof(__pyx_k_PathDist_AStar_VirtuEntry), 0, 0, 1, 1},
    {&__pyx_n_s_PathDist_Dijkstra, __pyx_k_PathDist_Dijkstra, sizeof(__pyx_k_PathDist_Dijkstra), 0, 0, 1, 1},
    {&__pyx_n_s_PathFind_AStar, __pyx_k_PathFind_AStar, sizeof(__pyx_k_PathFind_AStar), 0, 0, 1, 1},
    {&__pyx_n_s_PathFind_AStar_VirtuEntry, __pyx_k_PathFind_AStar_VirtuEntry, sizeof(__pyx_k_PathFind_AStar_VirtuEntry), 0, 0, 1, 1},
    {&__pyx_n_s_PathFind_Dijkstra, __pyx_k_PathFind_Dijkstra, sizeof(__pyx_k_PathFind_Dijkstra), 0, 0, 1, 1},
    {&__pyx_n_s_PathFind_Multi, __pyx_k_PathFind_Multi, sizeof(__pyx_k_PathFind_Multi), 0, 0, 1, 1},
    {&__pyx_n_s_PathFind_Multi_MultiDest_VirtuEn, __pyx_k_PathFind_Multi_MultiDest_VirtuEn, sizeof(__pyx_k_PathFind_Multi_MultiDest_VirtuEn), 0, 0, 1, 1},
    {&__pyx_n_s_PathFind_Multi_VirtuEntry, __pyx_k_PathFind_Multi_VirtuEntry, sizeof(__pyx_k_PathFind_Multi_VirtuEntry), 0, 0, 1, 1},
    {&__pyx_n_s_PathLength, __pyx_k_PathLength, sizeof(__pyx_k_PathLength), 0, 0, 1, 1},
    {&__pyx_n_s_PathLim, __pyx_k_PathLim, sizeof(__pyx_k_PathLim), 0, 0, 1, 1},
    {&__pyx_n_s_PathReach, __pyx_k_PathReach, sizeof(__pyx_k_PathReach), 0, 0, 1, 1},
    {&__pyx_n_s_PathReach_locals_genexpr, __pyx_k_PathReach_locals_genexpr, sizeof(__pyx_k_PathReach_locals_genexpr), 0, 0, 1, 1},
    {&__pyx_n_s_PointD, __pyx_k_PointD, sizeof(__pyx_k_PointD), 0, 0, 1, 1},
    {&__pyx_n_s_PointO, __pyx_k_PointO, sizeof(__pyx_k_PointO), 0, 0, 1, 1},
    {&__pyx_n_s_PriorityQueue_NR, __pyx_k_PriorityQueue_NR, sizeof(__pyx_k_PriorityQueue_NR), 0, 0, 1, 1},
    {&__pyx_n_s_PriorityQueue_NR___reduce_cython, __pyx_k_PriorityQueue_NR___reduce_cython, sizeof(__pyx_k_PriorityQueue_NR___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_PriorityQueue_NR___setstate_cyth, __pyx_k_PriorityQueue_NR___setstate_cyth, sizeof(__pyx_k_PriorityQueue_NR___setstate_cyth), 0, 0, 1, 1},
    {&__pyx_kp_u_PriorityQueue_Size, __pyx_k_PriorityQueue_Size, sizeof(__pyx_k_PriorityQueue_Size), 0, 1, 0, 0},
    {&__pyx_n_s_PtD, __pyx_k_PtD, sizeof(__pyx_k_PtD), 0, 0, 1, 1},
    {&__pyx_n_s_PtO, __pyx_k_PtO, sizeof(__pyx_k_PtO), 0, 0, 1, 1},
    {&__pyx_n_s_PtedC, __pyx_k_PtedC, sizeof(__pyx_k_PtedC), 0, 0, 1, 1},
    {&__pyx_n_s_PtedW, __pyx_k_PtedW, sizeof(__pyx_k_PtedW), 0, 0, 1, 1},
    {&__pyx_n_s_PtstC, __pyx_k_PtstC, sizeof(__pyx_k_PtstC), 0, 0, 1, 1},
    {&__pyx_n_s_PtstW, __pyx_k_PtstW, sizeof(__pyx_k_PtstW), 0, 0, 1, 1},
    {&__pyx_n_s_RemainDist, __pyx_k_RemainDist, sizeof(__pyx_k_RemainDist), 0, 0, 1, 1},
    {&__pyx_n_s_State_3d, __pyx_k_State_3d, sizeof(__pyx_k_State_3d), 0, 0, 1, 1},
    {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
    {&__pyx_kp_s_Warning_resizing_nodes_array_sma, __pyx_k_Warning_resizing_nodes_array_sma, sizeof(__pyx_k_Warning_resizing_nodes_array_sma), 0, 0, 1, 0},
    {&__pyx_n_s__22, __pyx_k__22, sizeof(__pyx_k__22), 0, 0, 1, 1},
    {&__pyx_kp_u__23, __pyx_k__23, sizeof(__pyx_k__23), 0, 1, 0, 0},
    {&__pyx_kp_u__5, __pyx_k__5, sizeof(__pyx_k__5), 0, 1, 0, 0},
    {&__pyx_n_s__92, __pyx_k__92, sizeof(__pyx_k__92), 0, 0, 1, 1},
    {&__pyx_n_s_addEdge, __pyx_k_addEdge, sizeof(__pyx_k_addEdge), 0, 0, 1, 1},
    {&__pyx_n_s_addEdgefromNodes, __pyx_k_addEdgefromNodes, sizeof(__pyx_k_addEdgefromNodes), 0, 0, 1, 1},
    {&__pyx_n_s_addNode, __pyx_k_addNode, sizeof(__pyx_k_addNode), 0, 0, 1, 1},
    {&__pyx_n_s_addNodes, __pyx_k_addNodes, sizeof(__pyx_k_addNodes), 0, 0, 1, 1},
    {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
    {&__pyx_n_s_arraySizeInfo, __pyx_k_arraySizeInfo, sizeof(__pyx_k_arraySizeInfo), 0, 0, 1, 1},
    {&__pyx_n_s_asyncio_coroutines, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
    {&__pyx_n_s_changeNode, __pyx_k_changeNode, sizeof(__pyx_k_changeNode), 0, 0, 1, 1},
    {&__pyx_n_s_ckEd, __pyx_k_ckEd, sizeof(__pyx_k_ckEd), 0, 0, 1, 1},
    {&__pyx_n_s_ckSt, __pyx_k_ckSt, sizeof(__pyx_k_ckSt), 0, 0, 1, 1},
    {&__pyx_n_s_class_getitem, __pyx_k_class_getitem, sizeof(__pyx_k_class_getitem), 0, 0, 1, 1},
    {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
    {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
    {&__pyx_n_s_columns, __pyx_k_columns, sizeof(__pyx_k_columns), 0, 0, 1, 1},
    {&__pyx_n_s_coord, __pyx_k_coord, sizeof(__pyx_k_coord), 0, 0, 1, 1},
    {&__pyx_n_s_coords, __pyx_k_coords, sizeof(__pyx_k_coords), 0, 0, 1, 1},
    {&__pyx_n_s_cycles, __pyx_k_cycles, sizeof(__pyx_k_cycles), 0, 0, 1, 1},
    {&__pyx_n_s_dest, __pyx_k_dest, sizeof(__pyx_k_dest), 0, 0, 1, 1},
    {&__pyx_n_s_dfKeys, __pyx_k_dfKeys, sizeof(__pyx_k_dfKeys), 0, 0, 1, 1},
    {&__pyx_n_s_dfNetwork, __pyx_k_dfNetwork, sizeof(__pyx_k_dfNetwork), 0, 0, 1, 1},
    {&__pyx_n_s_dfSize, __pyx_k_dfSize, sizeof(__pyx_k_dfSize), 0, 0, 1, 1},
    {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
    {&__pyx_kp_u_disable, __pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0, 0},
    {&__pyx_n_s_dist3d_Py, __pyx_k_dist3d_Py, sizeof(__pyx_k_dist3d_Py), 0, 0, 1, 1},
    {&__pyx_n_s_edgeVector, __pyx_k_edgeVector, sizeof(__pyx_k_edgeVector), 0, 0, 1, 1},
    {&__pyx_n_s_edgeidCnt, __pyx_k_edgeidCnt, sizeof(__pyx_k_edgeidCnt), 0, 0, 1, 1},
    {&__pyx_n_s_edgeids, __pyx_k_edgeids, sizeof(__pyx_k_edgeids), 0, 0, 1, 1},
    {&__pyx_n_s_edges, __pyx_k_edges, sizeof(__pyx_k_edges), 0, 0, 1, 1},
    {&__pyx_n_s_edgesize, __pyx_k_edgesize, sizeof(__pyx_k_edgesize), 0, 0, 1, 1},
    {&__pyx_n_s_elook, __pyx_k_elook, sizeof(__pyx_k_elook), 0, 0, 1, 1},
    {&__pyx_kp_u_enable, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0, 0},
    {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
    {&__pyx_n_s_float, __pyx_k_float, sizeof(__pyx_k_float), 0, 0, 1, 1},
    {&__pyx_n_s_flook, __pyx_k_flook, sizeof(__pyx_k_flook), 0, 0, 1, 1},
    {&__pyx_n_s_fromGeopandas_Edges, __pyx_k_fromGeopandas_Edges, sizeof(__pyx_k_fromGeopandas_Edges), 0, 0, 1, 1},
    {&__pyx_kp_u_gc, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0, 0},
    {&__pyx_n_s_gcy, __pyx_k_gcy, sizeof(__pyx_k_gcy), 0, 0, 1, 1},
    {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
    {&__pyx_n_s_geometry, __pyx_k_geometry, sizeof(__pyx_k_geometry), 0, 0, 1, 1},
    {&__pyx_n_s_geopandas, __pyx_k_geopandas, sizeof(__pyx_k_geopandas), 0, 0, 1, 1},
    {&__pyx_n_s_get_NodeVisited, __pyx_k_get_NodeVisited, sizeof(__pyx_k_get_NodeVisited), 0, 0, 1, 1},
    {&__pyx_n_s_get_NodeVisited_locals_genexpr, __pyx_k_get_NodeVisited_locals_genexpr, sizeof(__pyx_k_get_NodeVisited_locals_genexpr), 0, 0, 1, 1},
    {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
    {&__pyx_n_s_gpd, __pyx_k_gpd, sizeof(__pyx_k_gpd), 0, 0, 1, 1},
    {&__pyx_kp_s_gpd_GeoDataFrame, __pyx_k_gpd_GeoDataFrame, sizeof(__pyx_k_gpd_GeoDataFrame), 0, 0, 1, 0},
    {&__pyx_n_s_graph, __pyx_k_graph, sizeof(__pyx_k_graph), 0, 0, 1, 1},
    {&__pyx_kp_s_graph_pyx, __pyx_k_graph_pyx, sizeof(__pyx_k_graph_pyx), 0, 0, 1, 0},
    {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
    {&__pyx_n_s_idEd, __pyx_k_idEd, sizeof(__pyx_k_idEd), 0, 0, 1, 1},
    {&__pyx_n_s_idSt, __pyx_k_idSt, sizeof(__pyx_k_idSt), 0, 0, 1, 1},
    {&__pyx_n_s_ids, __pyx_k_ids, sizeof(__pyx_k_ids), 0, 0, 1, 1},
    {&__pyx_n_s_idx, __pyx_k_idx, sizeof(__pyx_k_idx), 0, 0, 1, 1},
    {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
    {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
    {&__pyx_n_s_initializing, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
    {&__pyx_n_s_int, __pyx_k_int, sizeof(__pyx_k_int), 0, 0, 1, 1},
    {&__pyx_kp_s_int_None, __pyx_k_int_None, sizeof(__pyx_k_int_None), 0, 0, 1, 0},
    {&__pyx_n_s_is_coroutine, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
    {&__pyx_kp_u_isenabled, __pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0, 0},
    {&__pyx_n_s_iterrows, __pyx_k_iterrows, sizeof(__pyx_k_iterrows), 0, 0, 1, 1},
    {&__pyx_n_s_keepGoing, __pyx_k_keepGoing, sizeof(__pyx_k_keepGoing), 0, 0, 1, 1},
    {&__pyx_n_s_len, __pyx_k_len, sizeof(__pyx_k_len), 0, 0, 1, 1},
    {&__pyx_n_s_lenE, __pyx_k_lenE, sizeof(__pyx_k_lenE), 0, 0, 1, 1},
    {&__pyx_n_s_length, __pyx_k_length, sizeof(__pyx_k_length), 0, 0, 1, 1},
    {&__pyx_n_s_lnEd, __pyx_k_lnEd, sizeof(__pyx_k_lnEd), 0, 0, 1, 1},
    {&__pyx_n_s_lnSt, __pyx_k_lnSt, sizeof(__pyx_k_lnSt), 0, 0, 1, 1},
    {&__pyx_n_s_lninfo, __pyx_k_lninfo, sizeof(__pyx_k_lninfo), 0, 0, 1, 1},
    {&__pyx_n_s_m, __pyx_k_m, sizeof(__pyx_k_m), 0, 0, 1, 1},
    {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
    {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
    {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
    {&__pyx_n_s_nlook, __pyx_k_nlook, sizeof(__pyx_k_nlook), 0, 0, 1, 1},
    {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
    {&__pyx_n_s_nodeMapped, __pyx_k_nodeMapped, sizeof(__pyx_k_nodeMapped), 0, 0, 1, 1},
    {&__pyx_n_s_nodeids, __pyx_k_nodeids, sizeof(__pyx_k_nodeids), 0, 0, 1, 1},
    {&__pyx_n_s_nodes, __pyx_k_nodes, sizeof(__pyx_k_nodes), 0, 0, 1, 1},
    {&__pyx_n_s_nodesize, __pyx_k_nodesize, sizeof(__pyx_k_nodesize), 0, 0, 1, 1},
    {&__pyx_n_s_numbers, __pyx_k_numbers, sizeof(__pyx_k_numbers), 0, 0, 1, 1},
    {&__pyx_n_s_outtup, __pyx_k_outtup, sizeof(__pyx_k_outtup), 0, 0, 1, 1},
    {&__pyx_n_s_p1, __pyx_k_p1, sizeof(__pyx_k_p1), 0, 0, 1, 1},
    {&__pyx_n_s_p2, __pyx_k_p2, sizeof(__pyx_k_p2), 0, 0, 1, 1},
    {&__pyx_n_s_pathN, __pyx_k_pathN, sizeof(__pyx_k_pathN), 0, 0, 1, 1},
    {&__pyx_n_s_pathlength, __pyx_k_pathlength, sizeof(__pyx_k_pathlength), 0, 0, 1, 1},
    {&__pyx_n_s_pointCoords, __pyx_k_pointCoords, sizeof(__pyx_k_pointCoords), 0, 0, 1, 1},
    {&__pyx_n_s_pointidCnt, __pyx_k_pointidCnt, sizeof(__pyx_k_pointidCnt), 0, 0, 1, 1},
    {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
    {&__pyx_n_s_protocol, __pyx_k_protocol, sizeof(__pyx_k_protocol), 0, 0, 1, 1},
    {&__pyx_n_s_pt, __pyx_k_pt, sizeof(__pyx_k_pt), 0, 0, 1, 1},
    {&__pyx_n_s_ptDcoord, __pyx_k_ptDcoord, sizeof(__pyx_k_ptDcoord), 0, 0, 1, 1},
    {&__pyx_n_s_ptDid, __pyx_k_ptDid, sizeof(__pyx_k_ptDid), 0, 0, 1, 1},
    {&__pyx_n_s_ptDinfo, __pyx_k_ptDinfo, sizeof(__pyx_k_ptDinfo), 0, 0, 1, 1},
    {&__pyx_n_s_ptOcoord, __pyx_k_ptOcoord, sizeof(__pyx_k_ptOcoord), 0, 0, 1, 1},
    {&__pyx_n_s_ptOid, __pyx_k_ptOid, sizeof(__pyx_k_ptOid), 0, 0, 1, 1},
    {&__pyx_n_s_ptOinfo, __pyx_k_ptOinfo, sizeof(__pyx_k_ptOinfo), 0, 0, 1, 1},
    {&__pyx_n_s_pth, __pyx_k_pth, sizeof(__pyx_k_pth), 0, 0, 1, 1},
    {&__pyx_n_s_ptinfo, __pyx_k_ptinfo, sizeof(__pyx_k_ptinfo), 0, 0, 1, 1},
    {&__pyx_n_s_ptsinfo, __pyx_k_ptsinfo, sizeof(__pyx_k_ptsinfo), 0, 0, 1, 1},
    {&__pyx_n_s_pySmallestMissing, __pyx_k_pySmallestMissing, sizeof(__pyx_k_pySmallestMissing), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
    {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
    {&__pyx_n_s_reallocEdges, __pyx_k_reallocEdges, sizeof(__pyx_k_reallocEdges), 0, 0, 1, 1},
    {&__pyx_n_s_reallocNodes, __pyx_k_reallocNodes, sizeof(__pyx_k_reallocNodes), 0, 0, 1, 1},
    {&__pyx_n_s_reconstruct, __pyx_k_reconstruct, sizeof(__pyx_k_reconstruct), 0, 0, 1, 1},
    {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_ex___locals_genexpr, __pyx_k_reduce_ex___locals_genexpr, sizeof(__pyx_k_reduce_ex___locals_genexpr), 0, 0, 1, 1},
    {&__pyx_n_s_regEdges, __pyx_k_regEdges, sizeof(__pyx_k_regEdges), 0, 0, 1, 1},
    {&__pyx_n_s_regNodes, __pyx_k_regNodes, sizeof(__pyx_k_regNodes), 0, 0, 1, 1},
    {&__pyx_n_s_remainingDist, __pyx_k_remainingDist, sizeof(__pyx_k_remainingDist), 0, 0, 1, 1},
    {&__pyx_n_s_removeEdge, __pyx_k_removeEdge, sizeof(__pyx_k_removeEdge), 0, 0, 1, 1},
    {&__pyx_n_s_removeEdges, __pyx_k_removeEdges, sizeof(__pyx_k_removeEdges), 0, 0, 1, 1},
    {&__pyx_n_s_removeNode, __pyx_k_removeNode, sizeof(__pyx_k_removeNode), 0, 0, 1, 1},
    {&__pyx_n_s_return, __pyx_k_return, sizeof(__pyx_k_return), 0, 0, 1, 1},
    {&__pyx_n_s_row, __pyx_k_row, sizeof(__pyx_k_row), 0, 0, 1, 1},
    {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
    {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
    {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
    {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
    {&__pyx_n_s_sizeInfo, __pyx_k_sizeInfo, sizeof(__pyx_k_sizeInfo), 0, 0, 1, 1},
    {&__pyx_n_s_spec, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
    {&__pyx_n_s_startNode, __pyx_k_startNode, sizeof(__pyx_k_startNode), 0, 0, 1, 1},
    {&__pyx_n_s_staticmethod, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
    {&__pyx_kp_s_str_None, __pyx_k_str_None, sizeof(__pyx_k_str_None), 0, 0, 1, 0},
    {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
    {&__pyx_n_s_tempC, __pyx_k_tempC, sizeof(__pyx_k_tempC), 0, 0, 1, 1},
    {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
    {&__pyx_n_s_threeD, __pyx_k_threeD, sizeof(__pyx_k_threeD), 0, 0, 1, 1},
    {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
    {&__pyx_n_s_tuple, __pyx_k_tuple, sizeof(__pyx_k_tuple), 0, 0, 1, 1},
    {&__pyx_kp_s_tuple_float_float, __pyx_k_tuple_float_float, sizeof(__pyx_k_tuple_float_float), 0, 0, 1, 0},
    {&__pyx_kp_s_tuple_float_tuple_int, __pyx_k_tuple_float_tuple_int, sizeof(__pyx_k_tuple_float_tuple_int), 0, 0, 1, 0},
    {&__pyx_kp_s_tuple_int_int, __pyx_k_tuple_int_int, sizeof(__pyx_k_tuple_int_int), 0, 0, 1, 0},
    {&__pyx_kp_s_tuple_tuple_float_tuple_int_None, __pyx_k_tuple_tuple_float_tuple_int_None, sizeof(__pyx_k_tuple_tuple_float_tuple_int_None), 0, 0, 1, 0},
    {&__pyx_kp_s_tuple_tuple_int_float, __pyx_k_tuple_tuple_int_float, sizeof(__pyx_k_tuple_tuple_int_float), 0, 0, 1, 0},
    {&__pyx_n_s_typing, __pyx_k_typing, sizeof(__pyx_k_typing), 0, 0, 1, 1},
    {&__pyx_n_s_v, __pyx_k_v, sizeof(__pyx_k_v), 0, 0, 1, 1},
    {0, 0, 0, 0, 0, 0, 0}
  };
  return __Pyx_InitStrings(__pyx_string_tab);
}
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_staticmethod = __Pyx_GetBuiltinName(__pyx_n_s_staticmethod); if (!__pyx_builtin_staticmethod) __PYX_ERR(0, 490, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 48, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(0, 238, __pyx_L1_error)
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(0, 582, __pyx_L1_error)
  __pyx_builtin_OverflowError = __Pyx_GetBuiltinName(__pyx_n_s_OverflowError); if (!__pyx_builtin_OverflowError) __PYX_ERR(1, 83, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(1, 86, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(1, 68, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "graph.pyx":238
 * cdef inline vector[int] Pop_IntVectorVector(vector[vector[int]]& vec, const int index):
 *     if index >= vec.size():
 *         raise IndexError("Index out of range")             # <<<<<<<<<<<<<<
 *     cdef vector[int] item = vec[index]
 *     vec.erase(vec.begin() + index)
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_Index_out_of_range); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "graph.pyx":582
 *         else:
 *             if size < regNodes:
 *                 print('Warning, resizing nodes array smaller than ammount of nodes')             # <<<<<<<<<<<<<<
 *             self.C_reallocNodes(size)
 * 
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_Warning_resizing_nodes_array_sma); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "graph.pyx":766
 *                     ptOcoord = pt[1]
 *                 else:
 *                     ptOcoord = pt[1] + (0.0,)             # <<<<<<<<<<<<<<
 *                 self.C_addNode(
 *                     idx = pt[0],
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_float_0_0); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 766, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "graph.pyx":802
 *         if A_Lnlength != None:
 *             if A_Lnlength not in dfKeys:
 *                 print('Atribute for line length not found, using geometric weight')             # <<<<<<<<<<<<<<
 *                 Lnlength = tuple(dfNetwork.geometry.length)
 *             else:
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_Atribute_for_line_length_not_fou); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "graph.pyx":810
 *         if A_LnlengthR != None:
 *             if A_LnlengthR not in dfKeys:
 *                 print('Atribute for line length reverse not found, using same length as lnlength')             # <<<<<<<<<<<<<<
 *                 LnlengthR = Lnlength
 *             else:
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_Atribute_for_line_length_reverse); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 810, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "graph.pyx":818
 *         if A_LnW != None:
 *             if A_LnW not in dfKeys:
 *                 print('Attribute for line weight not found, defaulting to 1.0')             # <<<<<<<<<<<<<<
 *                 LnW = (1.0,)*dfSize
 *             else:
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_Attribute_for_line_weight_not_fo); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 818, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "graph.pyx":819
 *             if A_LnW not in dfKeys:
 *                 print('Attribute for line weight not found, defaulting to 1.0')
 *                 LnW = (1.0,)*dfSize             # <<<<<<<<<<<<<<
 *             else:
 *                 LnW = tuple(dfNetwork[A_LnW])
 */
  __pyx_tuple__11 = PyTuple_New(1); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 819, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_tuple__11, 0, __pyx_float_1_0)) __PYX_ERR(0, 819, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "graph.pyx":826
 *         if A_PtstW != None:
 *             if A_PtstW not in dfKeys:
 *                 print('Edge point start weight attribute not found, defaulting to 1.0')             # <<<<<<<<<<<<<<
 *                 PtstW = (1.0,)*dfSize
 *             else:
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_Edge_point_start_weight_attribut); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 826, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "graph.pyx":834
 *         if A_PtstC != None:
 *             if A_PtstC not in dfKeys:
 *                 print('Edge point start cost attribute not found, defaulting to 0.0')             # <<<<<<<<<<<<<<
 *                 PtstC = (0.0,)*dfSize
 *             else:
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_Edge_point_start_cost_attribute); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "graph.pyx":842
 *         if A_PtedW != None:
 *             if A_PtedW not in dfKeys:
 *                 print('Edge point end weight attribute not found, defaulting to 1.0')             # <<<<<<<<<<<<<<
 *                 PtedW = (1.0,)*dfSize
 *             else:
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_Edge_point_end_weight_attribute); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "graph.pyx":850
 *         if A_PtedC != None:
 *             if A_PtedC not in dfKeys:
 *                 print('Edge point end cost attribute not found, defaulting to 0.0')             # <<<<<<<<<<<<<<
 *                 PtedC = (0.0,)*dfSize
 *             else:
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_Edge_point_end_cost_attribute_no); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "graph.pyx":1041
 * 
 *         if not keepGoing:
 *             return (-1.0,(-1,))             # <<<<<<<<<<<<<<
 *         else:
 *             # if found path, retracing steps
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_int_neg_1); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 1041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);
  __pyx_tuple__17 = PyTuple_Pack(2, __pyx_float_neg_1_0, __pyx_tuple__16); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 1041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "graph.pyx":1723
 *         # checking edges exists
 *         if self._edgesIds[EidO] == -1 or self._edgesIds[EidD] == -1:
 *             return (None, None)             # <<<<<<<<<<<<<<
 *         cdef float[3] PointD = (PtD[0], PtD[1], PtD[2])
 *         cdef float[3] PointO = (PtO[0], PtO[1], PtO[2])
 */
  __pyx_tuple__18 = PyTuple_Pack(2, Py_None, Py_None); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 1723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "graph.pyx":1728
 *         cdef float BaseDist = dist3d_ar(PointO, PointD)
 *         if BaseDist*0.9 > LimDist:
 *             return (-1.0, -1.0)             # <<<<<<<<<<<<<<
 * 
 *         if EidD == EidO:
 */
  __pyx_tuple__19 = PyTuple_Pack(2, __pyx_float_neg_1_0, __pyx_float_neg_1_0); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 1728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__24, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_tuple__26 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__26, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "graph.pyx":310
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cpdef float dist3d_Py(tuple[float, float, float]& p1, tuple[float, float, float]& p2):             # <<<<<<<<<<<<<<
 *     """
 *     Node distance on 3d
 */
  __pyx_tuple__28 = PyTuple_Pack(2, __pyx_n_s_p1, __pyx_n_s_p2); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_graph_pyx, __pyx_n_s_dist3d_Py, 310, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) __PYX_ERR(0, 310, __pyx_L1_error)

  /* "graph.pyx":346
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cpdef int pySmallestMissing(list[int] numbers):             # <<<<<<<<<<<<<<
 *     """
 *     Finds the smallest non-negative integer not contained in the list.
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_n_s_numbers); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);
  __pyx_codeobj__31 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__30, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_graph_pyx, __pyx_n_s_pySmallestMissing, 346, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__31)) __PYX_ERR(0, 346, __pyx_L1_error)

  /* "graph.pyx":472
 *         free(self.nodeVisited)
 * 
 *     def __reduce_ex__(self, protocol):             # <<<<<<<<<<<<<<
 *         cdef int n
 *         cdef tuple nodes = tuple((Node_tuple(self.nodes[n]) for n in range(self.Nnodes)))
 */
  __pyx_tuple__32 = PyTuple_Pack(10, __pyx_n_s_self, __pyx_n_s_protocol, __pyx_n_s_n, __pyx_n_s_nodes, __pyx_n_s_edges, __pyx_n_s_nodeids, __pyx_n_s_edgeids, __pyx_n_s_genexpr, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);
  __pyx_codeobj__33 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__32, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_graph_pyx, __pyx_n_s_reduce_ex, 472, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__33)) __PYX_ERR(0, 472, __pyx_L1_error)

  /* "graph.pyx":490
 *         return
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def _reconstruct(nodes, edges, nodeids, edgeids, Nnodes, Nedges, EidN):
 *         cdef GraphCy gcy = GraphCy(Nnodes, Nedges, EidN)
 */
  __pyx_tuple__34 = PyTuple_Pack(8, __pyx_n_s_nodes, __pyx_n_s_edges, __pyx_n_s_nodeids, __pyx_n_s_edgeids, __pyx_n_s_Nnodes, __pyx_n_s_Nedges, __pyx_n_s_EidN, __pyx_n_s_gcy); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);
  __pyx_codeobj__35 = (PyObject*)__Pyx_PyCode_New(7, 0, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_graph_pyx, __pyx_n_s_reconstruct, 490, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__35)) __PYX_ERR(0, 490, __pyx_L1_error)

  /* "graph.pyx":496
 *         return gcy
 * 
 *     def sizeInfo(self) -> tuple[int, int]:             # <<<<<<<<<<<<<<
 *         cdef int regNodes
 *         cdef int regEdges
 */
  __pyx_tuple__36 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_regNodes, __pyx_n_s_regEdges, __pyx_n_s_n); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__36, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_graph_pyx, __pyx_n_s_sizeInfo, 496, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(0, 496, __pyx_L1_error)

  /* "graph.pyx":508
 *         return regNodes, regEdges
 * 
 *     def arraySizeInfo(self) -> tuple[int, int]:             # <<<<<<<<<<<<<<
 *         return (self.Nnodes, self.Nedges)
 * 
 */
  __pyx_codeobj__38 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__24, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_graph_pyx, __pyx_n_s_arraySizeInfo, 508, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__38)) __PYX_ERR(0, 508, __pyx_L1_error)

  /* "graph.pyx":576
 *             self._edgesIds[n] = oldEdgeIds[n]
 * 
 *     def reallocNodes(self, size:int|None=None):             # <<<<<<<<<<<<<<
 *         cdef int regNodes = self.sizeInfo()[0]
 *         if size == None:
 */
  __pyx_tuple__39 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_size, __pyx_n_s_regNodes); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(0, 576, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);
  __pyx_codeobj__40 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__39, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_graph_pyx, __pyx_n_s_reallocNodes, 576, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__40)) __PYX_ERR(0, 576, __pyx_L1_error)
  __pyx_tuple__41 = PyTuple_Pack(1, Py_None); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(0, 576, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "graph.pyx":585
 *             self.C_reallocNodes(size)
 * 
 *     def reallocEdges(self, size:int|None=None):             # <<<<<<<<<<<<<<
 *         cdef int regEdges = self.sizeInfo()[1]
 *         if size == None:
 */
  __pyx_tuple__42 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_size, __pyx_n_s_regEdges); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_graph_pyx, __pyx_n_s_reallocEdges, 585, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) __PYX_ERR(0, 585, __pyx_L1_error)

  /* "graph.pyx":601
 * 
 * 
 *     def get_NodeVisited(self):             # <<<<<<<<<<<<<<
 *         outtup = tuple((self.nodeVisited[n].Nid for n in range(self.Nnodes)))
 *         return outtup
 */
  __pyx_tuple__44 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_outtup, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(0, 601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);
  __pyx_codeobj__45 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__44, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_graph_pyx, __pyx_n_s_get_NodeVisited, 601, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__45)) __PYX_ERR(0, 601, __pyx_L1_error)

  /* "graph.pyx":677
 *         self._edgesIds[idx] = idx
 * 
 *     def addEdge(self, ptOinfo:tuple, ptDinfo:tuple, lninfo:tuple) -> None:             # <<<<<<<<<<<<<<
 *         # input of endpoints and line
 *         # input tuple information structure:
 */
  __pyx_tuple__46 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_ptOinfo, __pyx_n_s_ptDinfo, __pyx_n_s_lninfo, __pyx_n_s_ptOcoord, __pyx_n_s_ptDcoord); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(0, 677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);
  __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_graph_pyx, __pyx_n_s_addEdge, 677, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(0, 677, __pyx_L1_error)

  /* "graph.pyx":714
 *             w = lninfo[3])
 * 
 *     def addNode(self, ptinfo:tuple) -> None:             # <<<<<<<<<<<<<<
 *         cdef float[3] ptOcoord
 *         if self._nodesIds[ptinfo[0]] == -1:
 */
  __pyx_tuple__48 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_ptinfo, __pyx_n_s_ptOcoord, __pyx_n_s_coord); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);
  __pyx_codeobj__49 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_graph_pyx, __pyx_n_s_addNode, 714, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__49)) __PYX_ERR(0, 714, __pyx_L1_error)

  /* "graph.pyx":730
 *                 c   = ptinfo[3])
 * 
 *     def changeNode(self, ptinfo:tuple) -> None:             # <<<<<<<<<<<<<<
 *         cdef float[3] ptOcoord
 *         coord = ptinfo[1]
 */
  __pyx_codeobj__50 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_graph_pyx, __pyx_n_s_changeNode, 730, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__50)) __PYX_ERR(0, 730, __pyx_L1_error)

  /* "graph.pyx":745
 *             c   = ptinfo[3])
 * 
 *     def addEdgefromNodes(self, ptOid:int, ptDid:int, lninfo:tuple) -> None:             # <<<<<<<<<<<<<<
 *         # making sure the connecting nodes already exist
 *         if self._nodesIds[ptOid] != -1 and self._nodesIds[ptDid] != -1:
 */
  __pyx_tuple__51 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_ptOid, __pyx_n_s_ptDid, __pyx_n_s_lninfo); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(0, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);
  __pyx_codeobj__52 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__51, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_graph_pyx, __pyx_n_s_addEdgefromNodes, 745, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__52)) __PYX_ERR(0, 745, __pyx_L1_error)

  /* "graph.pyx":756
 *                 w = lninfo[3])
 * 
 *     def addNodes(self, ptsinfo:tuple) -> None:             # <<<<<<<<<<<<<<
 *         cdef float[3] ptOcoord
 *         cdef bint threeD = True
 */
  __pyx_tuple__53 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_ptsinfo, __pyx_n_s_ptOcoord, __pyx_n_s_threeD, __pyx_n_s_pt); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(0, 756, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);
  __pyx_codeobj__54 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__53, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_graph_pyx, __pyx_n_s_addNodes, 756, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__54)) __PYX_ERR(0, 756, __pyx_L1_error)

  /* "graph.pyx":775
 *                     c   = pt[3])
 * 
 *     def fromGeopandas_Edges(self, dfNetwork:gpd.GeoDataFrame,             # <<<<<<<<<<<<<<
 *         A_Lnlength:str|None = None,
 *         A_LnlengthR:str|None = None,
 */
  __pyx_tuple__55 = PyTuple_Pack(30, __pyx_n_s_self, __pyx_n_s_dfNetwork, __pyx_n_s_A_Lnlength, __pyx_n_s_A_LnlengthR, __pyx_n_s_A_LnW, __pyx_n_s_A_PtstW, __pyx_n_s_A_PtstC, __pyx_n_s_A_PtedW, __pyx_n_s_A_PtedC, __pyx_n_s_index, __pyx_n_s_lnSt, __pyx_n_s_lnEd, __pyx_n_s_pointCoords, __pyx_n_s_pointidCnt, __pyx_n_s_edgeidCnt, __pyx_n_s_idSt, __pyx_n_s_idEd, __pyx_n_s_State_3d, __pyx_n_s_ckSt, __pyx_n_s_dfSize, __pyx_n_s_dfKeys, __pyx_n_s_Lnlength, __pyx_n_s_LnlengthR, __pyx_n_s_LnW, __pyx_n_s_PtstW, __pyx_n_s_PtstC, __pyx_n_s_PtedW, __pyx_n_s_PtedC, __pyx_n_s_row, __pyx_n_s_ckEd); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(0, 775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);
  __pyx_codeobj__56 = (PyObject*)__Pyx_PyCode_New(9, 0, 0, 30, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_graph_pyx, __pyx_n_s_fromGeopandas_Edges, 775, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__56)) __PYX_ERR(0, 775, __pyx_L1_error)
  __pyx_tuple__57 = PyTuple_Pack(7, Py_None, Py_None, Py_None, Py_None, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(0, 775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);

  /* "graph.pyx":892
 *         # print(f'Add edges from geopandas successfull, added {pointidCnt:,} nodes, and {edgeidCnt:,} edges')
 * 
 *     def removeEdge(self, idx:int) -> None:             # <<<<<<<<<<<<<<
 *         self.C_removeEdge(idx)
 * 
 */
  __pyx_tuple__58 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_idx); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(0, 892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);
  __pyx_codeobj__59 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_graph_pyx, __pyx_n_s_removeEdge, 892, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__59)) __PYX_ERR(0, 892, __pyx_L1_error)

  /* "graph.pyx":895
 *         self.C_removeEdge(idx)
 * 
 *     def removeEdges(self, ids:tuple) -> None:             # <<<<<<<<<<<<<<
 *         cdef int n
 *         for n in ids:
 */
  __pyx_tuple__60 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_ids, __pyx_n_s_n); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(0, 895, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);
  __pyx_codeobj__61 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__60, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_graph_pyx, __pyx_n_s_removeEdges, 895, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__61)) __PYX_ERR(0, 895, __pyx_L1_error)

  /* "graph.pyx":900
 *             self.C_removeEdge(n)
 * 
 *     def removeNode(self, idx:int) -> None:             # <<<<<<<<<<<<<<
 *         self.C_removeNode(idx)
 * 
 */
  __pyx_codeobj__62 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_graph_pyx, __pyx_n_s_removeNode, 900, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__62)) __PYX_ERR(0, 900, __pyx_L1_error)

  /* "graph.pyx":903
 *         self.C_removeNode(idx)
 * 
 *     def PathLength(self, edges:tuple) -> float:             # <<<<<<<<<<<<<<
 *         cdef float length = 0.0
 *         cdef int n
 */
  __pyx_tuple__63 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_edges, __pyx_n_s_length, __pyx_n_s_n, __pyx_n_s_elook, __pyx_n_s_flook); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(0, 903, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);
  __pyx_codeobj__64 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__63, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_graph_pyx, __pyx_n_s_PathLength, 903, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__64)) __PYX_ERR(0, 903, __pyx_L1_error)

  /* "graph.pyx":929
 *         return length
 * 
 *     def PathFind_Dijkstra(self, int NidO, int NidD, float LimDist = 10_000.0, int LimCycle = 10_000) -> tuple[float, tuple[int]]:             # <<<<<<<<<<<<<<
 *         """
 *         Find smallest distance and edges traversed between two nodes in the graph.
 */
  __pyx_tuple__65 = PyTuple_Pack(19, __pyx_n_s_self, __pyx_n_s_NidO, __pyx_n_s_NidD, __pyx_n_s_LimDist, __pyx_n_s_LimCycle, __pyx_n_s_BaseDist, __pyx_n_s_cycles, __pyx_n_s_keepGoing, __pyx_n_s_OpenNodes, __pyx_n_s_startNode, __pyx_n_s_NodeReach_T, __pyx_n_s_NidF, __pyx_n_s_len, __pyx_n_s_EdgeC, __pyx_n_s_NodeCheck, __pyx_n_s_pth, __pyx_n_s_nlook, __pyx_n_s_i, __pyx_n_s_Eid); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(0, 929, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);
  __pyx_codeobj__66 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 19, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__65, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_graph_pyx, __pyx_n_s_PathFind_Dijkstra, 929, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__66)) __PYX_ERR(0, 929, __pyx_L1_error)
  __pyx_tuple__67 = PyTuple_Pack(2, __pyx_float_10000_0, __pyx_int_10000); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(0, 929, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);

  /* "graph.pyx":1051
 *             return (NodeCheck.Dist, tuple(pth))
 * 
 *     def PathDist_Dijkstra(self, int NidO, int NidD, float LimDist = 10_000.0, int LimCycle = 10_000) -> float:             # <<<<<<<<<<<<<<
 *         """
 *         Find smallest distance between two nodes in the graph.
 */
  __pyx_tuple__68 = PyTuple_Pack(17, __pyx_n_s_self, __pyx_n_s_NidO, __pyx_n_s_NidD, __pyx_n_s_LimDist, __pyx_n_s_LimCycle, __pyx_n_s_BaseDist, __pyx_n_s_cycles, __pyx_n_s_keepGoing, __pyx_n_s_OpenNodes, __pyx_n_s_startNode, __pyx_n_s_NodeReach_T, __pyx_n_s_NidF, __pyx_n_s_len, __pyx_n_s_EdgeC, __pyx_n_s_NodeCheck, __pyx_n_s_i, __pyx_n_s_Eid); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(0, 1051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);
  __pyx_codeobj__69 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 17, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__68, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_graph_pyx, __pyx_n_s_PathDist_Dijkstra, 1051, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__69)) __PYX_ERR(0, 1051, __pyx_L1_error)

  /* "graph.pyx":1157
 *         return -1.0
 * 
 *     def PathFind_AStar(self, int NidO, int NidD, float LimDist = 10_000.0, int LimCycle = 10_000, float DistMul = 2.0) -> tuple[float, tuple[int]]:             # <<<<<<<<<<<<<<
 *         """
 *         Find smallest distance and edges traversed between two nodes in the graph. Using Astar principle from 3d location information.
 */
  __pyx_tuple__70 = PyTuple_Pack(21, __pyx_n_s_self, __pyx_n_s_NidO, __pyx_n_s_NidD, __pyx_n_s_LimDist, __pyx_n_s_LimCycle, __pyx_n_s_DistMul, __pyx_n_s_BaseDist, __pyx_n_s_cycles, __pyx_n_s_keepGoing, __pyx_n_s_OpenNodes, __pyx_n_s_startNode, __pyx_n_s_NodeReach_T, __pyx_n_s_NidF, __pyx_n_s_len, __pyx_n_s_EdgeC, __pyx_n_s_NodeCheck, __pyx_n_s_NodeTarget, __pyx_n_s_pth, __pyx_n_s_nlook, __pyx_n_s_i, __pyx_n_s_Eid); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(0, 1157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(6, 0, 0, 21, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__70, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_graph_pyx, __pyx_n_s_PathFind_AStar, 1157, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) __PYX_ERR(0, 1157, __pyx_L1_error)
  __pyx_tuple__72 = PyTuple_Pack(3, __pyx_float_10000_0, __pyx_int_10000, __pyx_float_2_0); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(0, 1157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);

  /* "graph.pyx":1285
 *             return (NodeCheck.Dist, tuple(pth))
 * 
 *     def PathFind_AStar_VirtuEntry(self,             # <<<<<<<<<<<<<<
 *             const int& EidO, tuple[float, float, float] PtO, const tuple[float, float] DstO,
 *             const int& EidD, tuple[float, float, float] PtD, const tuple[float, float] DstD,
 */
  __pyx_tuple__73 = PyTuple_Pack(26, __pyx_n_s_self, __pyx_n_s_EidO, __pyx_n_s_PtO, __pyx_n_s_DstO, __pyx_n_s_EidD, __pyx_n_s_PtD, __pyx_n_s_DstD, __pyx_n_s_LimDist, __pyx_n_s_LimCycle, __pyx_n_s_DistMul, __pyx_n_s_PointD, __pyx_n_s_PointO, __pyx_n_s_BaseDist, __pyx_n_s_cycles, __pyx_n_s_keepGoing, __pyx_n_s_OpenNodes, __pyx_n_s_startNode, __pyx_n_s_NodeReach_T, __pyx_n_s_NidF, __pyx_n_s_len, __pyx_n_s_EdgeC, __pyx_n_s_NodeCheck, __pyx_n_s_pth, __pyx_n_s_nlook, __pyx_n_s_i, __pyx_n_s_Eid); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(0, 1285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);
  __pyx_codeobj__74 = (PyObject*)__Pyx_PyCode_New(10, 0, 0, 26, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__73, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_graph_pyx, __pyx_n_s_PathFind_AStar_VirtuEntry, 1285, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__74)) __PYX_ERR(0, 1285, __pyx_L1_error)

  /* "graph.pyx":1440
 *             return (NodeCheck.Dist, tuple(pth))
 * 
 *     def PathDist_AStar(self, int NidO, int NidD, float LimDist = 10_000.0, int LimCycle = 10_000, float DistMul = 2.0) -> float:             # <<<<<<<<<<<<<<
 *         """
 *         Find smallest distance between two nodes in the graph. Using Astar principle from 3d location information.
 */
  __pyx_tuple__75 = PyTuple_Pack(19, __pyx_n_s_self, __pyx_n_s_NidO, __pyx_n_s_NidD, __pyx_n_s_LimDist, __pyx_n_s_LimCycle, __pyx_n_s_DistMul, __pyx_n_s_BaseDist, __pyx_n_s_cycles, __pyx_n_s_keepGoing, __pyx_n_s_OpenNodes, __pyx_n_s_startNode, __pyx_n_s_NodeReach_T, __pyx_n_s_NidF, __pyx_n_s_len, __pyx_n_s_EdgeC, __pyx_n_s_NodeCheck, __pyx_n_s_NodeTarget, __pyx_n_s_i, __pyx_n_s_Eid); if (unlikely(!__pyx_tuple__75)) __PYX_ERR(0, 1440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);
  __pyx_codeobj__76 = (PyObject*)__Pyx_PyCode_New(6, 0, 0, 19, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__75, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_graph_pyx, __pyx_n_s_PathDist_AStar, 1440, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__76)) __PYX_ERR(0, 1440, __pyx_L1_error)

  /* "graph.pyx":1551
 *         return -1.0
 * 
 *     def PathDist_AStar_VirtuEntry(self,             # <<<<<<<<<<<<<<
 *             const int& EidO, tuple[float, float, float] PtO, const tuple[float, float] DstO,
 *             const int& EidD, tuple[float, float, float] PtD, const tuple[float, float] DstD,
 */
  __pyx_tuple__77 = PyTuple_Pack(24, __pyx_n_s_self, __pyx_n_s_EidO, __pyx_n_s_PtO, __pyx_n_s_DstO, __pyx_n_s_EidD, __pyx_n_s_PtD, __pyx_n_s_DstD, __pyx_n_s_LimDist, __pyx_n_s_LimCycle, __pyx_n_s_DistMul, __pyx_n_s_PointD, __pyx_n_s_PointO, __pyx_n_s_BaseDist, __pyx_n_s_cycles, __pyx_n_s_keepGoing, __pyx_n_s_OpenNodes, __pyx_n_s_startNode, __pyx_n_s_NodeReach_T, __pyx_n_s_NidF, __pyx_n_s_len, __pyx_n_s_EdgeC, __pyx_n_s_NodeCheck, __pyx_n_s_i, __pyx_n_s_Eid); if (unlikely(!__pyx_tuple__77)) __PYX_ERR(0, 1551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);
  __pyx_codeobj__78 = (PyObject*)__Pyx_PyCode_New(10, 0, 0, 24, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__77, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_graph_pyx, __pyx_n_s_PathDist_AStar_VirtuEntry, 1551, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__78)) __PYX_ERR(0, 1551, __pyx_L1_error)

  /* "graph.pyx":1687
 *         return -1.0
 * 
 *     def PathDistComp_AStar_VirtuEntry(self,             # <<<<<<<<<<<<<<
 *             const int& EidO, tuple[float, float, float] PtO, const tuple[float, float] DstO,
 *             const int& EidD, tuple[float, float, float] PtD, const tuple[float, float] DstD,
 */
  __pyx_codeobj__79 = (PyObject*)__Pyx_PyCode_New(10, 0, 0, 24, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__77, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_graph_pyx, __pyx_n_s_PathDistComp_AStar_VirtuEntry, 1687, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__79)) __PYX_ERR(0, 1687, __pyx_L1_error)

  /* "graph.pyx":1823
 *         return (-1.0, -1.0)
 * 
 *     def PathReach(self, int NidO, float LimDist = 1_000.0, int LimCycle = 10_000) -> tuple[tuple[int, float]]:             # <<<<<<<<<<<<<<
 *         """
 *         Finds Edges within reach
 */
  __pyx_tuple__80 = PyTuple_Pack(29, __pyx_n_s_self, __pyx_n_s_NidO, __pyx_n_s_LimDist, __pyx_n_s_LimCycle, __pyx_n_s_cycles, __pyx_n_s_keepGoing, __pyx_n_s_OpenNodes, __pyx_n_s_startNode, __pyx_n_s_NodeReach_T, __pyx_n_s_NidF, __pyx_n_s_len, __pyx_n_s_EdgeC, __pyx_n_s_NodeCheck, __pyx_n_s_i, __pyx_n_s_m, __pyx_n_s_EdgesFringe, __pyx_n_s_EdgesReach, __pyx_n_s_v, __pyx_n_s_edgeVector, __pyx_n_s_remainingDist, __pyx_n_s_Eididx, __pyx_n_s_EdgesReach_EidVec, __pyx_n_s_Eid, __pyx_n_s_lenE, __pyx_n_s_EdgesReachSize, __pyx_n_s_outtup, __pyx_n_s_genexpr, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__80)) __PYX_ERR(0, 1823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);
  __pyx_codeobj__81 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 29, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__80, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_graph_pyx, __pyx_n_s_PathReach, 1823, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__81)) __PYX_ERR(0, 1823, __pyx_L1_error)
  __pyx_tuple__82 = PyTuple_Pack(2, __pyx_float_1000_0, __pyx_int_10000); if (unlikely(!__pyx_tuple__82)) __PYX_ERR(0, 1823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);

  /* "graph.pyx":2452
 *         return nodeMapped
 * 
 *     def PathFind_Multi(             # <<<<<<<<<<<<<<
 *             self,
 *             const int& NidO, const int& NidD,
 */
  __pyx_tuple__83 = PyTuple_Pack(32, __pyx_n_s_self, __pyx_n_s_NidO, __pyx_n_s_NidD, __pyx_n_s_DistMulLim, __pyx_n_s_LimDist, __pyx_n_s_LimCycle, __pyx_n_s_DistMul, __pyx_n_s_EdgeCmin, __pyx_n_s_ForceOri, __pyx_n_s_ForceDst, __pyx_n_s_PathLim, __pyx_n_s_BaseDist, __pyx_n_s_MinimumDistance, __pyx_n_s_LimitDistance, __pyx_n_s_MappedPaths, __pyx_n_s_FoundPaths, __pyx_n_s_FoundDistance, __pyx_n_s_keepGoing, __pyx_n_s_NodeCheck, __pyx_n_s_OpenNodes, __pyx_n_s_startNode, __pyx_n_s_NodeTarget, __pyx_n_s_NodeReach_T, __pyx_n_s_pathlength, __pyx_n_s_EdgeC, __pyx_n_s_MappedPath_T, __pyx_n_s_MappedPath_T2, __pyx_n_s_cycles, __pyx_n_s_i, __pyx_n_s_RemainDist, __pyx_n_s_Eid, __pyx_n_s_NidF); if (unlikely(!__pyx_tuple__83)) __PYX_ERR(0, 2452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__83);
  __Pyx_GIVEREF(__pyx_tuple__83);
  __pyx_codeobj__84 = (PyObject*)__Pyx_PyCode_New(11, 0, 0, 32, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__83, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_graph_pyx, __pyx_n_s_PathFind_Multi, 2452, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__84)) __PYX_ERR(0, 2452, __pyx_L1_error)
  __pyx_tuple__85 = PyTuple_Pack(8, __pyx_float_1_1, __pyx_float_10000_0, __pyx_int_1000000000, __pyx_float_2_0, __pyx_float_0_9, __pyx_int_neg_1, __pyx_int_neg_1, __pyx_int_10000000); if (unlikely(!__pyx_tuple__85)) __PYX_ERR(0, 2452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__85);
  __Pyx_GIVEREF(__pyx_tuple__85);

  /* "graph.pyx":2608
 *         return tuple(FoundDistance), tuple(FoundPaths)
 * 
 *     def PathFind_Multi_VirtuEntry(             # <<<<<<<<<<<<<<
 *             self,
 *             const int& EidO, tuple[float, float, float] PtO, tuple[float, float] DstO,
 */
  __pyx_tuple__86 = PyTuple_Pack(37, __pyx_n_s_self, __pyx_n_s_EidO, __pyx_n_s_PtO, __pyx_n_s_DstO, __pyx_n_s_EidD, __pyx_n_s_PtD, __pyx_n_s_DstD, __pyx_n_s_DistMulLim, __pyx_n_s_LimDist, __pyx_n_s_LimCycle, __pyx_n_s_DistMul, __pyx_n_s_EdgeCmin, __pyx_n_s_PathLim, __pyx_n_s_MinimumDistance, __pyx_n_s_LimitDistance, __pyx_n_s_PointO, __pyx_n_s_PointD, __pyx_n_s_DistO, __pyx_n_s_DistD, __pyx_n_s_BaseDist, __pyx_n_s_MappedPaths, __pyx_n_s_FoundPaths, __pyx_n_s_FoundDistance, __pyx_n_s_keepGoing, __pyx_n_s_NodeCheck, __pyx_n_s_OpenNodes, __pyx_n_s_startNode, __pyx_n_s_NodeReach_T, __pyx_n_s_pathlength, __pyx_n_s_EdgeC, __pyx_n_s_MappedPath_T, __pyx_n_s_MappedPath_T2, __pyx_n_s_cycles, __pyx_n_s_i, __pyx_n_s_pathN, __pyx_n_s_Eid, __pyx_n_s_NidF); if (unlikely(!__pyx_tuple__86)) __PYX_ERR(0, 2608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__86);
  __Pyx_GIVEREF(__pyx_tuple__86);
  __pyx_codeobj__87 = (PyObject*)__Pyx_PyCode_New(13, 0, 0, 37, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__86, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_graph_pyx, __pyx_n_s_PathFind_Multi_VirtuEntry, 2608, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__87)) __PYX_ERR(0, 2608, __pyx_L1_error)
  __pyx_tuple__88 = PyTuple_Pack(6, __pyx_float_1_1, __pyx_float_10000_0, __pyx_int_1000000000, __pyx_float_1_0, __pyx_float_0_9, __pyx_int_100000); if (unlikely(!__pyx_tuple__88)) __PYX_ERR(0, 2608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__88);
  __Pyx_GIVEREF(__pyx_tuple__88);

  /* "graph.pyx":2784
 * 
 * 
 *     def PathFind_Multi_MultiDest_VirtuEntry(             # <<<<<<<<<<<<<<
 *             self,
 *             const int& EidO, tuple[float, float, float] PtO, tuple[float, float] DstO, int& Oid,
 */
  __pyx_tuple__89 = PyTuple_Pack(40, __pyx_n_s_self, __pyx_n_s_EidO, __pyx_n_s_PtO, __pyx_n_s_DstO, __pyx_n_s_Oid, __pyx_n_s_DestTup, __pyx_n_s_DistMulLim, __pyx_n_s_LimDist, __pyx_n_s_LimCycle, __pyx_n_s_DistMul, __pyx_n_s_PathLim, __pyx_n_s_EidD, __pyx_n_s_LimitDistance, __pyx_n_s_PointO, __pyx_n_s_PointD, __pyx_n_s_DistO, __pyx_n_s_DistD, __pyx_n_s_BaseDist, __pyx_n_s_MinimumDistance, __pyx_n_s_nodeMapped, __pyx_n_s_MappedPaths, __pyx_n_s_FoundPaths, __pyx_n_s_FoundDistance, __pyx_n_s_FoundWeights, __pyx_n_s_keepGoing, __pyx_n_s_NodeCheck, __pyx_n_s_OpenNodes, __pyx_n_s_startNode, __pyx_n_s_NodeReach_T, __pyx_n_s_pathlength, __pyx_n_s_EdgeC, __pyx_n_s_MappedPath_T, __pyx_n_s_MappedPath_T2, __pyx_n_s_cycles, __pyx_n_s_i, __pyx_n_s_pathN, __pyx_n_s_tempC, __pyx_n_s_dest, __pyx_n_s_Eid, __pyx_n_s_NidF); if (unlikely(!__pyx_tuple__89)) __PYX_ERR(0, 2784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__89);
  __Pyx_GIVEREF(__pyx_tuple__89);
  __pyx_codeobj__90 = (PyObject*)__Pyx_PyCode_New(11, 0, 0, 40, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__89, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_graph_pyx, __pyx_n_s_PathFind_Multi_MultiDest_VirtuEn, 2784, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__90)) __PYX_ERR(0, 2784, __pyx_L1_error)
  __pyx_tuple__91 = PyTuple_Pack(5, __pyx_float_1_1, __pyx_float_10000_0, __pyx_int_1000000, __pyx_float_2_0, __pyx_int_100000); if (unlikely(!__pyx_tuple__91)) __PYX_ERR(0, 2784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__91);
  __Pyx_GIVEREF(__pyx_tuple__91);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitConstants(void) {
  if (__Pyx_CreateStringTabAndInitStrings() < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_9 = PyFloat_FromDouble(0.9); if (unlikely(!__pyx_float_0_9)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1_0 = PyFloat_FromDouble(1.0); if (unlikely(!__pyx_float_1_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1_1 = PyFloat_FromDouble(1.1); if (unlikely(!__pyx_float_1_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_2_0 = PyFloat_FromDouble(2.0); if (unlikely(!__pyx_float_2_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1000_0 = PyFloat_FromDouble(1000.0); if (unlikely(!__pyx_float_1000_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_10000_0 = PyFloat_FromDouble(10000.0); if (unlikely(!__pyx_float_10000_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_1_0 = PyFloat_FromDouble(-1.0); if (unlikely(!__pyx_float_neg_1_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_10 = PyInt_FromLong(10); if (unlikely(!__pyx_int_10)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_100 = PyInt_FromLong(100); if (unlikely(!__pyx_int_100)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_10000 = PyInt_FromLong(10000L); if (unlikely(!__pyx_int_10000)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_100000 = PyInt_FromLong(100000L); if (unlikely(!__pyx_int_100000)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1000000 = PyInt_FromLong(1000000L); if (unlikely(!__pyx_int_1000000)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_10000000 = PyInt_FromLong(10000000L); if (unlikely(!__pyx_int_10000000)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1000000000 = PyInt_FromLong(1000000000L); if (unlikely(!__pyx_int_1000000000)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  return 0;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_5graph_PriorityQueue_NR = &__pyx_vtable_5graph_PriorityQueue_NR;
  __pyx_vtable_5graph_PriorityQueue_NR.push = (void (*)(struct __pyx_obj_5graph_PriorityQueue_NR *, struct __pyx_t_5graph_NodeReach const &))__pyx_f_5graph_16PriorityQueue_NR_push;
  __pyx_vtable_5graph_PriorityQueue_NR.top = (struct __pyx_t_5graph_NodeReach (*)(struct __pyx_obj_5graph_PriorityQueue_NR *))__pyx_f_5graph_16PriorityQueue_NR_top;
  __pyx_vtable_5graph_PriorityQueue_NR.bot = (struct __pyx_t_5graph_NodeReach (*)(struct __pyx_obj_5graph_PriorityQueue_NR *))__pyx_f_5graph_16PriorityQueue_NR_bot;
  __pyx_vtable_5graph_PriorityQueue_NR.pop_top = (struct __pyx_t_5graph_NodeReach (*)(struct __pyx_obj_5graph_PriorityQueue_NR *))__pyx_f_5graph_16PriorityQueue_NR_pop_top;
  __pyx_vtable_5graph_PriorityQueue_NR.pop_bot = (struct __pyx_t_5graph_NodeReach (*)(struct __pyx_obj_5graph_PriorityQueue_NR *))__pyx_f_5graph_16PriorityQueue_NR_pop_bot;
  __pyx_vtable_5graph_PriorityQueue_NR.empty = (int (*)(struct __pyx_obj_5graph_PriorityQueue_NR *))__pyx_f_5graph_16PriorityQueue_NR_empty;
  __pyx_vtable_5graph_PriorityQueue_NR.size = (size_t (*)(struct __pyx_obj_5graph_PriorityQueue_NR *))__pyx_f_5graph_16PriorityQueue_NR_size;
  __pyx_vtable_5graph_PriorityQueue_NR.clear = (void (*)(struct __pyx_obj_5graph_PriorityQueue_NR *))__pyx_f_5graph_16PriorityQueue_NR_clear;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5graph_PriorityQueue_NR = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5graph_PriorityQueue_NR_spec, NULL); if (unlikely(!__pyx_ptype_5graph_PriorityQueue_NR)) __PYX_ERR(0, 156, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5graph_PriorityQueue_NR_spec, __pyx_ptype_5graph_PriorityQueue_NR) < 0) __PYX_ERR(0, 156, __pyx_L1_error)
  #else
  __pyx_ptype_5graph_PriorityQueue_NR = &__pyx_type_5graph_PriorityQueue_NR;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5graph_PriorityQueue_NR) < 0) __PYX_ERR(0, 156, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5graph_PriorityQueue_NR->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5graph_PriorityQueue_NR->tp_dictoffset && __pyx_ptype_5graph_PriorityQueue_NR->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5graph_PriorityQueue_NR->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_5graph_PriorityQueue_NR, __pyx_vtabptr_5graph_PriorityQueue_NR) < 0) __PYX_ERR(0, 156, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_5graph_PriorityQueue_NR) < 0) __PYX_ERR(0, 156, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PriorityQueue_NR, (PyObject *) __pyx_ptype_5graph_PriorityQueue_NR) < 0) __PYX_ERR(0, 156, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_5graph_PriorityQueue_NR) < 0) __PYX_ERR(0, 156, __pyx_L1_error)
  #endif
  __pyx_vtabptr_5graph_GraphCy = &__pyx_vtable_5graph_GraphCy;
  __pyx_vtable_5graph_GraphCy.reinstateGraph = (void (*)(struct __pyx_obj_5graph_GraphCy *, PyObject *, PyObject *, PyObject *, PyObject *))__pyx_f_5graph_7GraphCy_reinstateGraph;
  __pyx_vtable_5graph_GraphCy.C_reallocNodes = (PyObject *(*)(struct __pyx_obj_5graph_GraphCy *, int &))__pyx_f_5graph_7GraphCy_C_reallocNodes;
  __pyx_vtable_5graph_GraphCy.C_reallocEdges = (void (*)(struct __pyx_obj_5graph_GraphCy *, int &))__pyx_f_5graph_7GraphCy_C_reallocEdges;
  __pyx_vtable_5graph_GraphCy.C_Reset_NodeVisited = (void (*)(struct __pyx_obj_5graph_GraphCy *, struct __pyx_opt_args_5graph_7GraphCy_C_Reset_NodeVisited *__pyx_optional_args))__pyx_f_5graph_7GraphCy_C_Reset_NodeVisited;
  __pyx_vtable_5graph_GraphCy.C_addNode = (void (*)(struct __pyx_obj_5graph_GraphCy *, int &, float &, float &, struct __pyx_opt_args_5graph_7GraphCy_C_addNode *__pyx_optional_args))__pyx_f_5graph_7GraphCy_C_addNode;
  __pyx_vtable_5graph_GraphCy.C_removeEdge = (void (*)(struct __pyx_obj_5graph_GraphCy *, int &))__pyx_f_5graph_7GraphCy_C_removeEdge;
  __pyx_vtable_5graph_GraphCy.C_removeNode = (void (*)(struct __pyx_obj_5graph_GraphCy *, int &))__pyx_f_5graph_7GraphCy_C_removeNode;
  __pyx_vtable_5graph_GraphCy.C_addEdge = (void (*)(struct __pyx_obj_5graph_GraphCy *, int &, int &, int &, float &, float &, float &))__pyx_f_5graph_7GraphCy_C_addEdge;
  __pyx_vtable_5graph_GraphCy.C_NodeMap_AStar = (void (*)(struct __pyx_obj_5graph_GraphCy *, int const &, int const &, struct __pyx_opt_args_5graph_7GraphCy_C_NodeMap_AStar *__pyx_optional_args))__pyx_f_5graph_7GraphCy_C_NodeMap_AStar;
  __pyx_vtable_5graph_GraphCy.C_NodeMap_AStar_VirtuEntry = (void (*)(struct __pyx_obj_5graph_GraphCy *, int const &, float *, float *, int const &, float *, float *, struct __pyx_opt_args_5graph_7GraphCy_C_NodeMap_AStar_VirtuEntry *__pyx_optional_args))__pyx_f_5graph_7GraphCy_C_NodeMap_AStar_VirtuEntry;
  __pyx_vtable_5graph_GraphCy.C_NodeMap_VirtuEntry = (struct __pyx_t_5graph_NodeReach *(*)(struct __pyx_obj_5graph_GraphCy *, int const &, float *, float *, struct __pyx_opt_args_5graph_7GraphCy_C_NodeMap_VirtuEntry *__pyx_optional_args))__pyx_f_5graph_7GraphCy_C_NodeMap_VirtuEntry;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5graph_GraphCy = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5graph_GraphCy_spec, NULL); if (unlikely(!__pyx_ptype_5graph_GraphCy)) __PYX_ERR(0, 411, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5graph_GraphCy_spec, __pyx_ptype_5graph_GraphCy) < 0) __PYX_ERR(0, 411, __pyx_L1_error)
  #else
  __pyx_ptype_5graph_GraphCy = &__pyx_type_5graph_GraphCy;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5graph_GraphCy) < 0) __PYX_ERR(0, 411, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5graph_GraphCy->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5graph_GraphCy->tp_dictoffset && __pyx_ptype_5graph_GraphCy->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5graph_GraphCy->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_5graph_GraphCy, __pyx_vtabptr_5graph_GraphCy) < 0) __PYX_ERR(0, 411, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_5graph_GraphCy) < 0) __PYX_ERR(0, 411, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GraphCy, (PyObject *) __pyx_ptype_5graph_GraphCy) < 0) __PYX_ERR(0, 411, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple_spec, NULL); if (unlikely(!__pyx_ptype_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple)) __PYX_ERR(0, 54, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple_spec, __pyx_ptype_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple) < 0) __PYX_ERR(0, 54, __pyx_L1_error)
  #else
  __pyx_ptype_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple = &__pyx_type_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple) < 0) __PYX_ERR(0, 54, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple->tp_dictoffset && __pyx_ptype_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5graph___pyx_scope_struct____pyx_f_5graph_Int_array_tuple->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5graph___pyx_scope_struct_1_genexpr = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5graph___pyx_scope_struct_1_genexpr_spec, NULL); if (unlikely(!__pyx_ptype_5graph___pyx_scope_struct_1_genexpr)) __PYX_ERR(0, 56, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5graph___pyx_scope_struct_1_genexpr_spec, __pyx_ptype_5graph___pyx_scope_struct_1_genexpr) < 0) __PYX_ERR(0, 56, __pyx_L1_error)
  #else
  __pyx_ptype_5graph___pyx_scope_struct_1_genexpr = &__pyx_type_5graph___pyx_scope_struct_1_genexpr;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5graph___pyx_scope_struct_1_genexpr) < 0) __PYX_ERR(0, 56, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5graph___pyx_scope_struct_1_genexpr->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5graph___pyx_scope_struct_1_genexpr->tp_dictoffset && __pyx_ptype_5graph___pyx_scope_struct_1_genexpr->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5graph___pyx_scope_struct_1_genexpr->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple_spec, NULL); if (unlikely(!__pyx_ptype_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple)) __PYX_ERR(0, 72, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple_spec, __pyx_ptype_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple) < 0) __PYX_ERR(0, 72, __pyx_L1_error)
  #else
  __pyx_ptype_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple = &__pyx_type_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple) < 0) __PYX_ERR(0, 72, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple->tp_dictoffset && __pyx_ptype_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5graph___pyx_scope_struct_2___pyx_f_5graph_Float_array_tuple->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5graph___pyx_scope_struct_3_genexpr = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5graph___pyx_scope_struct_3_genexpr_spec, NULL); if (unlikely(!__pyx_ptype_5graph___pyx_scope_struct_3_genexpr)) __PYX_ERR(0, 74, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5graph___pyx_scope_struct_3_genexpr_spec, __pyx_ptype_5graph___pyx_scope_struct_3_genexpr) < 0) __PYX_ERR(0, 74, __pyx_L1_error)
  #else
  __pyx_ptype_5graph___pyx_scope_struct_3_genexpr = &__pyx_type_5graph___pyx_scope_struct_3_genexpr;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5graph___pyx_scope_struct_3_genexpr) < 0) __PYX_ERR(0, 74, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5graph___pyx_scope_struct_3_genexpr->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5graph___pyx_scope_struct_3_genexpr->tp_dictoffset && __pyx_ptype_5graph___pyx_scope_struct_3_genexpr->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5graph___pyx_scope_struct_3_genexpr->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5graph___pyx_scope_struct_4___reduce_ex__ = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5graph___pyx_scope_struct_4___reduce_ex___spec, NULL); if (unlikely(!__pyx_ptype_5graph___pyx_scope_struct_4___reduce_ex__)) __PYX_ERR(0, 472, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5graph___pyx_scope_struct_4___reduce_ex___spec, __pyx_ptype_5graph___pyx_scope_struct_4___reduce_ex__) < 0) __PYX_ERR(0, 472, __pyx_L1_error)
  #else
  __pyx_ptype_5graph___pyx_scope_struct_4___reduce_ex__ = &__pyx_type_5graph___pyx_scope_struct_4___reduce_ex__;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5graph___pyx_scope_struct_4___reduce_ex__) < 0) __PYX_ERR(0, 472, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5graph___pyx_scope_struct_4___reduce_ex__->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5graph___pyx_scope_struct_4___reduce_ex__->tp_dictoffset && __pyx_ptype_5graph___pyx_scope_struct_4___reduce_ex__->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5graph___pyx_scope_struct_4___reduce_ex__->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5graph___pyx_scope_struct_5_genexpr = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5graph___pyx_scope_struct_5_genexpr_spec, NULL); if (unlikely(!__pyx_ptype_5graph___pyx_scope_struct_5_genexpr)) __PYX_ERR(0, 474, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5graph___pyx_scope_struct_5_genexpr_spec, __pyx_ptype_5graph___pyx_scope_struct_5_genexpr) < 0) __PYX_ERR(0, 474, __pyx_L1_error)
  #else
  __pyx_ptype_5graph___pyx_scope_struct_5_genexpr = &__pyx_type_5graph___pyx_scope_struct_5_genexpr;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5graph___pyx_scope_struct_5_genexpr) < 0) __PYX_ERR(0, 474, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5graph___pyx_scope_struct_5_genexpr->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5graph___pyx_scope_struct_5_genexpr->tp_dictoffset && __pyx_ptype_5graph___pyx_scope_struct_5_genexpr->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5graph___pyx_scope_struct_5_genexpr->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5graph___pyx_scope_struct_6_genexpr = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5graph___pyx_scope_struct_6_genexpr_spec, NULL); if (unlikely(!__pyx_ptype_5graph___pyx_scope_struct_6_genexpr)) __PYX_ERR(0, 475, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5graph___pyx_scope_struct_6_genexpr_spec, __pyx_ptype_5graph___pyx_scope_struct_6_genexpr) < 0) __PYX_ERR(0, 475, __pyx_L1_error)
  #else
  __pyx_ptype_5graph___pyx_scope_struct_6_genexpr = &__pyx_type_5graph___pyx_scope_struct_6_genexpr;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5graph___pyx_scope_struct_6_genexpr) < 0) __PYX_ERR(0, 475, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5graph___pyx_scope_struct_6_genexpr->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5graph___pyx_scope_struct_6_genexpr->tp_dictoffset && __pyx_ptype_5graph___pyx_scope_struct_6_genexpr->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5graph___pyx_scope_struct_6_genexpr->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5graph___pyx_scope_struct_7_get_NodeVisited = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5graph___pyx_scope_struct_7_get_NodeVisited_spec, NULL); if (unlikely(!__pyx_ptype_5graph___pyx_scope_struct_7_get_NodeVisited)) __PYX_ERR(0, 601, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5graph___pyx_scope_struct_7_get_NodeVisited_spec, __pyx_ptype_5graph___pyx_scope_struct_7_get_NodeVisited) < 0) __PYX_ERR(0, 601, __pyx_L1_error)
  #else
  __pyx_ptype_5graph___pyx_scope_struct_7_get_NodeVisited = &__pyx_type_5graph___pyx_scope_struct_7_get_NodeVisited;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5graph___pyx_scope_struct_7_get_NodeVisited) < 0) __PYX_ERR(0, 601, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5graph___pyx_scope_struct_7_get_NodeVisited->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5graph___pyx_scope_struct_7_get_NodeVisited->tp_dictoffset && __pyx_ptype_5graph___pyx_scope_struct_7_get_NodeVisited->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5graph___pyx_scope_struct_7_get_NodeVisited->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5graph___pyx_scope_struct_8_genexpr = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5graph___pyx_scope_struct_8_genexpr_spec, NULL); if (unlikely(!__pyx_ptype_5graph___pyx_scope_struct_8_genexpr)) __PYX_ERR(0, 602, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5graph___pyx_scope_struct_8_genexpr_spec, __pyx_ptype_5graph___pyx_scope_struct_8_genexpr) < 0) __PYX_ERR(0, 602, __pyx_L1_error)
  #else
  __pyx_ptype_5graph___pyx_scope_struct_8_genexpr = &__pyx_type_5graph___pyx_scope_struct_8_genexpr;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5graph___pyx_scope_struct_8_genexpr) < 0) __PYX_ERR(0, 602, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5graph___pyx_scope_struct_8_genexpr->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5graph___pyx_scope_struct_8_genexpr->tp_dictoffset && __pyx_ptype_5graph___pyx_scope_struct_8_genexpr->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5graph___pyx_scope_struct_8_genexpr->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5graph___pyx_scope_struct_9_PathReach = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5graph___pyx_scope_struct_9_PathReach_spec, NULL); if (unlikely(!__pyx_ptype_5graph___pyx_scope_struct_9_PathReach)) __PYX_ERR(0, 1823, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5graph___pyx_scope_struct_9_PathReach_spec, __pyx_ptype_5graph___pyx_scope_struct_9_PathReach) < 0) __PYX_ERR(0, 1823, __pyx_L1_error)
  #else
  __pyx_ptype_5graph___pyx_scope_struct_9_PathReach = &__pyx_type_5graph___pyx_scope_struct_9_PathReach;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5graph___pyx_scope_struct_9_PathReach) < 0) __PYX_ERR(0, 1823, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5graph___pyx_scope_struct_9_PathReach->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5graph___pyx_scope_struct_9_PathReach->tp_dictoffset && __pyx_ptype_5graph___pyx_scope_struct_9_PathReach->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5graph___pyx_scope_struct_9_PathReach->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5graph___pyx_scope_struct_10_genexpr = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5graph___pyx_scope_struct_10_genexpr_spec, NULL); if (unlikely(!__pyx_ptype_5graph___pyx_scope_struct_10_genexpr)) __PYX_ERR(0, 2024, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5graph___pyx_scope_struct_10_genexpr_spec, __pyx_ptype_5graph___pyx_scope_struct_10_genexpr) < 0) __PYX_ERR(0, 2024, __pyx_L1_error)
  #else
  __pyx_ptype_5graph___pyx_scope_struct_10_genexpr = &__pyx_type_5graph___pyx_scope_struct_10_genexpr;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5graph___pyx_scope_struct_10_genexpr) < 0) __PYX_ERR(0, 2024, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5graph___pyx_scope_struct_10_genexpr->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5graph___pyx_scope_struct_10_genexpr->tp_dictoffset && __pyx_ptype_5graph___pyx_scope_struct_10_genexpr->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5graph___pyx_scope_struct_10_genexpr->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_5graph___pyx_scope_struct_11_genexpr = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_5graph___pyx_scope_struct_11_genexpr_spec, NULL); if (unlikely(!__pyx_ptype_5graph___pyx_scope_struct_11_genexpr)) __PYX_ERR(0, 2028, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_5graph___pyx_scope_struct_11_genexpr_spec, __pyx_ptype_5graph___pyx_scope_struct_11_genexpr) < 0) __PYX_ERR(0, 2028, __pyx_L1_error)
  #else
  __pyx_ptype_5graph___pyx_scope_struct_11_genexpr = &__pyx_type_5graph___pyx_scope_struct_11_genexpr;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_5graph___pyx_scope_struct_11_genexpr) < 0) __PYX_ERR(0, 2028, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_5graph___pyx_scope_struct_11_genexpr->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_5graph___pyx_scope_struct_11_genexpr->tp_dictoffset && __pyx_ptype_5graph___pyx_scope_struct_11_genexpr->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_5graph___pyx_scope_struct_11_genexpr->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_graph(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_graph},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "graph",
      0, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initgraph(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initgraph(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_graph(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_graph(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_graph(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  int stringtab_initialized = 0;
  #if CYTHON_USE_MODULE_STATE
  int pystate_addmodule_run = 0;
  #endif
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'graph' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("graph", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #elif CYTHON_USE_MODULE_STATE
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  {
    int add_module_result = PyState_AddModule(__pyx_t_1, &__pyx_moduledef);
    __pyx_t_1 = 0; /* transfer ownership from __pyx_t_1 to "graph" pseudovariable */
    if (unlikely((add_module_result < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    pystate_addmodule_run = 1;
  }
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #endif
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = __Pyx_PyImport_AddModuleRef(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = __Pyx_PyImport_AddModuleRef((const char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_graph(void)", 0);
  if (__Pyx_check_binary_version(__PYX_LIMITED_VERSION_HEX, __Pyx_get_runtime_version(), CYTHON_COMPILING_IN_LIMITED_API) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_graph) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "graph")) {
      if (unlikely((PyDict_SetItemString(modules, "graph", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely((__Pyx_modinit_type_init_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "graph.pyx":14
 * from libcpp.string cimport string
 * from libc.math cimport sqrt
 * import geopandas as gpd             # <<<<<<<<<<<<<<
 * from libc.stdlib cimport malloc, realloc, free
 * from typing import List
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_geopandas, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_gpd, __pyx_t_2) < 0) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "graph.pyx":16
 * import geopandas as gpd
 * from libc.stdlib cimport malloc, realloc, free
 * from typing import List             # <<<<<<<<<<<<<<
 * from libc.stdint cimport int32_t, uint32_t
 * from libc.string cimport memset
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_List);
  __Pyx_GIVEREF(__pyx_n_s_List);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_List)) __PYX_ERR(0, 16, __pyx_L1_error);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_typing, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_List); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_List, __pyx_t_2) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_5graph_16PriorityQueue_NR_5__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PriorityQueue_NR___reduce_cython, NULL, __pyx_n_s_graph, __pyx_d, ((PyObject *)__pyx_codeobj__25)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_5graph_16PriorityQueue_NR_7__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PriorityQueue_NR___setstate_cyth, NULL, __pyx_n_s_graph, __pyx_d, ((PyObject *)__pyx_codeobj__27)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "graph.pyx":310
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cpdef float dist3d_Py(tuple[float, float, float]& p1, tuple[float, float, float]& p2):             # <<<<<<<<<<<<<<
 *     """
 *     Node distance on 3d
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_5graph_1dist3d_Py, 0, __pyx_n_s_dist3d_Py, NULL, __pyx_n_s_graph, __pyx_d, ((PyObject *)__pyx_codeobj__29)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_dist3d_Py, __pyx_t_3) < 0) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "graph.pyx":346
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cpdef int pySmallestMissing(list[int] numbers):             # <<<<<<<<<<<<<<
 *     """
 *     Finds the smallest non-negative integer not contained in the list.
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_5graph_3pySmallestMissing, 0, __pyx_n_s_pySmallestMissing, NULL, __pyx_n_s_graph, __pyx_d, ((PyObject *)__pyx_codeobj__31)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pySmallestMissing, __pyx_t_3) < 0) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "graph.pyx":423
 *     cdef NodeReach* nodeVisited
 * 
 *     def __cinit__(self, nodesize:int = 100, edgesize:int = 100, EidN:int = 10):             # <<<<<<<<<<<<<<
 *         self.Nnodes = nodesize
 *         self.nodes = <Node*>malloc(nodesize * sizeof(Node))
 */
  if (!(likely(__Pyx_Py3Int_CheckExact(__pyx_int_100)) || __Pyx_RaiseUnexpectedTypeError("int", __pyx_int_100))) __PYX_ERR(0, 423, __pyx_L1_error)
  __Pyx_INCREF(__pyx_int_100);
  __pyx_k__2 = ((PyObject*)__pyx_int_100);
  __Pyx_GIVEREF(__pyx_int_100);
  if (!(likely(__Pyx_Py3Int_CheckExact(__pyx_int_100)) || __Pyx_RaiseUnexpectedTypeError("int", __pyx_int_100))) __PYX_ERR(0, 423, __pyx_L1_error)
  __Pyx_INCREF(__pyx_int_100);
  __pyx_k__3 = ((PyObject*)__pyx_int_100);
  __Pyx_GIVEREF(__pyx_int_100);
  if (!(likely(__Pyx_Py3Int_CheckExact(__pyx_int_10)) || __Pyx_RaiseUnexpectedTypeError("int", __pyx_int_10))) __PYX_ERR(0, 423, __pyx_L1_error)
  __Pyx_INCREF(__pyx_int_10);
  __pyx_k__4 = ((PyObject*)__pyx_int_10);
  __Pyx_GIVEREF(__pyx_int_10);

  /* "graph.pyx":472
 *         free(self.nodeVisited)
 * 
 *     def __reduce_ex__(self, protocol):             # <<<<<<<<<<<<<<
 *         cdef int n
 *         cdef tuple nodes = tuple((Node_tuple(self.nodes[n]) for n in range(self.Nnodes)))
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_5graph_7GraphCy_9__reduce_ex__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GraphCy___reduce_ex, NULL, __pyx_n_s_graph, __pyx_d, ((PyObject *)__pyx_codeobj__33)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5graph_GraphCy, __pyx_n_s_reduce_ex, __pyx_t_3) < 0) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_5graph_GraphCy);

  /* "graph.pyx":490
 *         return
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def _reconstruct(nodes, edges, nodeids, edgeids, Nnodes, Nedges, EidN):
 *         cdef GraphCy gcy = GraphCy(Nnodes, Nedges, EidN)
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_5graph_7GraphCy_11_reconstruct, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GraphCy__reconstruct, NULL, __pyx_n_s_graph, __pyx_d, ((PyObject *)__pyx_codeobj__35)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5graph_GraphCy, __pyx_n_s_reconstruct, __pyx_t_3) < 0) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_5graph_GraphCy);
  __Pyx_GetNameInClass(__pyx_t_3, (PyObject *)__pyx_ptype_5graph_GraphCy, __pyx_n_s_reconstruct); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5graph_GraphCy, __pyx_n_s_reconstruct, __pyx_t_2) < 0) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5graph_GraphCy);

  /* "graph.pyx":496
 *         return gcy
 * 
 *     def sizeInfo(self) -> tuple[int, int]:             # <<<<<<<<<<<<<<
 *         cdef int regNodes
 *         cdef int regEdges
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_return, __pyx_kp_s_tuple_int_int) < 0) __PYX_ERR(0, 496, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_5graph_7GraphCy_13sizeInfo, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GraphCy_sizeInfo, NULL, __pyx_n_s_graph, __pyx_d, ((PyObject *)__pyx_codeobj__37)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_3, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5graph_GraphCy, __pyx_n_s_sizeInfo, __pyx_t_3) < 0) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_5graph_GraphCy);

  /* "graph.pyx":508
 *         return regNodes, regEdges
 * 
 *     def arraySizeInfo(self) -> tuple[int, int]:             # <<<<<<<<<<<<<<
 *         return (self.Nnodes, self.Nedges)
 * 
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_return, __pyx_kp_s_tuple_int_int) < 0) __PYX_ERR(0, 508, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5graph_7GraphCy_15arraySizeInfo, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GraphCy_arraySizeInfo, NULL, __pyx_n_s_graph, __pyx_d, ((PyObject *)__pyx_codeobj__38)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5graph_GraphCy, __pyx_n_s_arraySizeInfo, __pyx_t_2) < 0) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5graph_GraphCy);

  /* "graph.pyx":576
 *             self._edgesIds[n] = oldEdgeIds[n]
 * 
 *     def reallocNodes(self, size:int|None=None):             # <<<<<<<<<<<<<<
 *         cdef int regNodes = self.sizeInfo()[0]
 *         if size == None:
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 576, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_size, __pyx_kp_s_int_None) < 0) __PYX_ERR(0, 576, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_5graph_7GraphCy_17reallocNodes, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GraphCy_reallocNodes, NULL, __pyx_n_s_graph, __pyx_d, ((PyObject *)__pyx_codeobj__40)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 576, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__41);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_3, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5graph_GraphCy, __pyx_n_s_reallocNodes, __pyx_t_3) < 0) __PYX_ERR(0, 576, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_5graph_GraphCy);

  /* "graph.pyx":585
 *             self.C_reallocNodes(size)
 * 
 *     def reallocEdges(self, size:int|None=None):             # <<<<<<<<<<<<<<
 *         cdef int regEdges = self.sizeInfo()[1]
 *         if size == None:
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_size, __pyx_kp_s_int_None) < 0) __PYX_ERR(0, 585, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5graph_7GraphCy_19reallocEdges, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GraphCy_reallocEdges, NULL, __pyx_n_s_graph, __pyx_d, ((PyObject *)__pyx_codeobj__43)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__41);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5graph_GraphCy, __pyx_n_s_reallocEdges, __pyx_t_2) < 0) __PYX_ERR(0, 585, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5graph_GraphCy);

  /* "graph.pyx":601
 * 
 * 
 *     def get_NodeVisited(self):             # <<<<<<<<<<<<<<
 *         outtup = tuple((self.nodeVisited[n].Nid for n in range(self.Nnodes)))
 *         return outtup
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5graph_7GraphCy_21get_NodeVisited, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GraphCy_get_NodeVisited, NULL, __pyx_n_s_graph, __pyx_d, ((PyObject *)__pyx_codeobj__45)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5graph_GraphCy, __pyx_n_s_get_NodeVisited, __pyx_t_2) < 0) __PYX_ERR(0, 601, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5graph_GraphCy);

  /* "graph.pyx":677
 *         self._edgesIds[idx] = idx
 * 
 *     def addEdge(self, ptOinfo:tuple, ptDinfo:tuple, lninfo:tuple) -> None:             # <<<<<<<<<<<<<<
 *         # input of endpoints and line
 *         # input tuple information structure:
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_ptOinfo, __pyx_n_s_tuple) < 0) __PYX_ERR(0, 677, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_ptDinfo, __pyx_n_s_tuple) < 0) __PYX_ERR(0, 677, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_lninfo, __pyx_n_s_tuple) < 0) __PYX_ERR(0, 677, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_return, __pyx_n_s_None) < 0) __PYX_ERR(0, 677, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_5graph_7GraphCy_23addEdge, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GraphCy_addEdge, NULL, __pyx_n_s_graph, __pyx_d, ((PyObject *)__pyx_codeobj__47)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_3, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5graph_GraphCy, __pyx_n_s_addEdge, __pyx_t_3) < 0) __PYX_ERR(0, 677, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_5graph_GraphCy);

  /* "graph.pyx":714
 *             w = lninfo[3])
 * 
 *     def addNode(self, ptinfo:tuple) -> None:             # <<<<<<<<<<<<<<
 *         cdef float[3] ptOcoord
 *         if self._nodesIds[ptinfo[0]] == -1:
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_ptinfo, __pyx_n_s_tuple) < 0) __PYX_ERR(0, 714, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_return, __pyx_n_s_None) < 0) __PYX_ERR(0, 714, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5graph_7GraphCy_25addNode, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GraphCy_addNode, NULL, __pyx_n_s_graph, __pyx_d, ((PyObject *)__pyx_codeobj__49)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5graph_GraphCy, __pyx_n_s_addNode, __pyx_t_2) < 0) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5graph_GraphCy);

  /* "graph.pyx":730
 *                 c   = ptinfo[3])
 * 
 *     def changeNode(self, ptinfo:tuple) -> None:             # <<<<<<<<<<<<<<
 *         cdef float[3] ptOcoord
 *         coord = ptinfo[1]
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 730, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_ptinfo, __pyx_n_s_tuple) < 0) __PYX_ERR(0, 730, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_return, __pyx_n_s_None) < 0) __PYX_ERR(0, 730, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_5graph_7GraphCy_27changeNode, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GraphCy_changeNode, NULL, __pyx_n_s_graph, __pyx_d, ((PyObject *)__pyx_codeobj__50)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 730, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_3, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5graph_GraphCy, __pyx_n_s_changeNode, __pyx_t_3) < 0) __PYX_ERR(0, 730, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_5graph_GraphCy);

  /* "graph.pyx":745
 *             c   = ptinfo[3])
 * 
 *     def addEdgefromNodes(self, ptOid:int, ptDid:int, lninfo:tuple) -> None:             # <<<<<<<<<<<<<<
 *         # making sure the connecting nodes already exist
 *         if self._nodesIds[ptOid] != -1 and self._nodesIds[ptDid] != -1:
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_ptOid, __pyx_n_s_int) < 0) __PYX_ERR(0, 745, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_ptDid, __pyx_n_s_int) < 0) __PYX_ERR(0, 745, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_lninfo, __pyx_n_s_tuple) < 0) __PYX_ERR(0, 745, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_return, __pyx_n_s_None) < 0) __PYX_ERR(0, 745, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5graph_7GraphCy_29addEdgefromNodes, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GraphCy_addEdgefromNodes, NULL, __pyx_n_s_graph, __pyx_d, ((PyObject *)__pyx_codeobj__52)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5graph_GraphCy, __pyx_n_s_addEdgefromNodes, __pyx_t_2) < 0) __PYX_ERR(0, 745, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5graph_GraphCy);

  /* "graph.pyx":756
 *                 w = lninfo[3])
 * 
 *     def addNodes(self, ptsinfo:tuple) -> None:             # <<<<<<<<<<<<<<
 *         cdef float[3] ptOcoord
 *         cdef bint threeD = True
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 756, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_ptsinfo, __pyx_n_s_tuple) < 0) __PYX_ERR(0, 756, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_return, __pyx_n_s_None) < 0) __PYX_ERR(0, 756, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_5graph_7GraphCy_31addNodes, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GraphCy_addNodes, NULL, __pyx_n_s_graph, __pyx_d, ((PyObject *)__pyx_codeobj__54)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 756, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_3, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5graph_GraphCy, __pyx_n_s_addNodes, __pyx_t_3) < 0) __PYX_ERR(0, 756, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_5graph_GraphCy);

  /* "graph.pyx":775
 *                     c   = pt[3])
 * 
 *     def fromGeopandas_Edges(self, dfNetwork:gpd.GeoDataFrame,             # <<<<<<<<<<<<<<
 *         A_Lnlength:str|None = None,
 *         A_LnlengthR:str|None = None,
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dfNetwork, __pyx_kp_s_gpd_GeoDataFrame) < 0) __PYX_ERR(0, 775, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_A_Lnlength, __pyx_kp_s_str_None) < 0) __PYX_ERR(0, 775, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_A_LnlengthR, __pyx_kp_s_str_None) < 0) __PYX_ERR(0, 775, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_A_LnW, __pyx_kp_s_str_None) < 0) __PYX_ERR(0, 775, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_A_PtstW, __pyx_kp_s_str_None) < 0) __PYX_ERR(0, 775, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_A_PtstC, __pyx_kp_s_str_None) < 0) __PYX_ERR(0, 775, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_A_PtedW, __pyx_kp_s_str_None) < 0) __PYX_ERR(0, 775, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_A_PtedC, __pyx_kp_s_str_None) < 0) __PYX_ERR(0, 775, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_return, __pyx_n_s_None) < 0) __PYX_ERR(0, 775, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5graph_7GraphCy_33fromGeopandas_Edges, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GraphCy_fromGeopandas_Edges, NULL, __pyx_n_s_graph, __pyx_d, ((PyObject *)__pyx_codeobj__56)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__57);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5graph_GraphCy, __pyx_n_s_fromGeopandas_Edges, __pyx_t_2) < 0) __PYX_ERR(0, 775, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5graph_GraphCy);

  /* "graph.pyx":892
 *         # print(f'Add edges from geopandas successfull, added {pointidCnt:,} nodes, and {edgeidCnt:,} edges')
 * 
 *     def removeEdge(self, idx:int) -> None:             # <<<<<<<<<<<<<<
 *         self.C_removeEdge(idx)
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_idx, __pyx_n_s_int) < 0) __PYX_ERR(0, 892, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_return, __pyx_n_s_None) < 0) __PYX_ERR(0, 892, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_5graph_7GraphCy_35removeEdge, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GraphCy_removeEdge, NULL, __pyx_n_s_graph, __pyx_d, ((PyObject *)__pyx_codeobj__59)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_3, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5graph_GraphCy, __pyx_n_s_removeEdge, __pyx_t_3) < 0) __PYX_ERR(0, 892, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_5graph_GraphCy);

  /* "graph.pyx":895
 *         self.C_removeEdge(idx)
 * 
 *     def removeEdges(self, ids:tuple) -> None:             # <<<<<<<<<<<<<<
 *         cdef int n
 *         for n in ids:
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 895, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_ids, __pyx_n_s_tuple) < 0) __PYX_ERR(0, 895, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_return, __pyx_n_s_None) < 0) __PYX_ERR(0, 895, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5graph_7GraphCy_37removeEdges, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GraphCy_removeEdges, NULL, __pyx_n_s_graph, __pyx_d, ((PyObject *)__pyx_codeobj__61)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 895, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5graph_GraphCy, __pyx_n_s_removeEdges, __pyx_t_2) < 0) __PYX_ERR(0, 895, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5graph_GraphCy);

  /* "graph.pyx":900
 *             self.C_removeEdge(n)
 * 
 *     def removeNode(self, idx:int) -> None:             # <<<<<<<<<<<<<<
 *         self.C_removeNode(idx)
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 900, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_idx, __pyx_n_s_int) < 0) __PYX_ERR(0, 900, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_return, __pyx_n_s_None) < 0) __PYX_ERR(0, 900, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_5graph_7GraphCy_39removeNode, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GraphCy_removeNode, NULL, __pyx_n_s_graph, __pyx_d, ((PyObject *)__pyx_codeobj__62)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 900, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_3, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5graph_GraphCy, __pyx_n_s_removeNode, __pyx_t_3) < 0) __PYX_ERR(0, 900, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_5graph_GraphCy);

  /* "graph.pyx":903
 *         self.C_removeNode(idx)
 * 
 *     def PathLength(self, edges:tuple) -> float:             # <<<<<<<<<<<<<<
 *         cdef float length = 0.0
 *         cdef int n
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 903, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_edges, __pyx_n_s_tuple) < 0) __PYX_ERR(0, 903, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_return, __pyx_n_s_float) < 0) __PYX_ERR(0, 903, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5graph_7GraphCy_41PathLength, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GraphCy_PathLength, NULL, __pyx_n_s_graph, __pyx_d, ((PyObject *)__pyx_codeobj__64)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 903, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5graph_GraphCy, __pyx_n_s_PathLength, __pyx_t_2) < 0) __PYX_ERR(0, 903, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5graph_GraphCy);

  /* "graph.pyx":929
 *         return length
 * 
 *     def PathFind_Dijkstra(self, int NidO, int NidD, float LimDist = 10_000.0, int LimCycle = 10_000) -> tuple[float, tuple[int]]:             # <<<<<<<<<<<<<<
 *         """
 *         Find smallest distance and edges traversed between two nodes in the graph.
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 929, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_return, __pyx_kp_s_tuple_float_tuple_int) < 0) __PYX_ERR(0, 929, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_5graph_7GraphCy_43PathFind_Dijkstra, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GraphCy_PathFind_Dijkstra, NULL, __pyx_n_s_graph, __pyx_d, ((PyObject *)__pyx_codeobj__66)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 929, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__67);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_3, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5graph_GraphCy, __pyx_n_s_PathFind_Dijkstra, __pyx_t_3) < 0) __PYX_ERR(0, 929, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_5graph_GraphCy);

  /* "graph.pyx":1051
 *             return (NodeCheck.Dist, tuple(pth))
 * 
 *     def PathDist_Dijkstra(self, int NidO, int NidD, float LimDist = 10_000.0, int LimCycle = 10_000) -> float:             # <<<<<<<<<<<<<<
 *         """
 *         Find smallest distance between two nodes in the graph.
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_return, __pyx_n_s_float) < 0) __PYX_ERR(0, 1051, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5graph_7GraphCy_45PathDist_Dijkstra, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GraphCy_PathDist_Dijkstra, NULL, __pyx_n_s_graph, __pyx_d, ((PyObject *)__pyx_codeobj__69)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__67);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5graph_GraphCy, __pyx_n_s_PathDist_Dijkstra, __pyx_t_2) < 0) __PYX_ERR(0, 1051, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5graph_GraphCy);

  /* "graph.pyx":1157
 *         return -1.0
 * 
 *     def PathFind_AStar(self, int NidO, int NidD, float LimDist = 10_000.0, int LimCycle = 10_000, float DistMul = 2.0) -> tuple[float, tuple[int]]:             # <<<<<<<<<<<<<<
 *         """
 *         Find smallest distance and edges traversed between two nodes in the graph. Using Astar principle from 3d location information.
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_return, __pyx_kp_s_tuple_float_tuple_int) < 0) __PYX_ERR(0, 1157, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_5graph_7GraphCy_47PathFind_AStar, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GraphCy_PathFind_AStar, NULL, __pyx_n_s_graph, __pyx_d, ((PyObject *)__pyx_codeobj__71)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__72);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_3, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5graph_GraphCy, __pyx_n_s_PathFind_AStar, __pyx_t_3) < 0) __PYX_ERR(0, 1157, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_5graph_GraphCy);

  /* "graph.pyx":1285
 *             return (NodeCheck.Dist, tuple(pth))
 * 
 *     def PathFind_AStar_VirtuEntry(self,             # <<<<<<<<<<<<<<
 *             const int& EidO, tuple[float, float, float] PtO, const tuple[float, float] DstO,
 *             const int& EidD, tuple[float, float, float] PtD, const tuple[float, float] DstD,
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_return, __pyx_kp_s_tuple_float_tuple_int) < 0) __PYX_ERR(0, 1285, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5graph_7GraphCy_49PathFind_AStar_VirtuEntry, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GraphCy_PathFind_AStar_VirtuEntr, NULL, __pyx_n_s_graph, __pyx_d, ((PyObject *)__pyx_codeobj__74)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__72);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5graph_GraphCy, __pyx_n_s_PathFind_AStar_VirtuEntry, __pyx_t_2) < 0) __PYX_ERR(0, 1285, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5graph_GraphCy);

  /* "graph.pyx":1440
 *             return (NodeCheck.Dist, tuple(pth))
 * 
 *     def PathDist_AStar(self, int NidO, int NidD, float LimDist = 10_000.0, int LimCycle = 10_000, float DistMul = 2.0) -> float:             # <<<<<<<<<<<<<<
 *         """
 *         Find smallest distance between two nodes in the graph. Using Astar principle from 3d location information.
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_return, __pyx_n_s_float) < 0) __PYX_ERR(0, 1440, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_5graph_7GraphCy_51PathDist_AStar, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GraphCy_PathDist_AStar, NULL, __pyx_n_s_graph, __pyx_d, ((PyObject *)__pyx_codeobj__76)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__72);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_3, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5graph_GraphCy, __pyx_n_s_PathDist_AStar, __pyx_t_3) < 0) __PYX_ERR(0, 1440, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_5graph_GraphCy);

  /* "graph.pyx":1551
 *         return -1.0
 * 
 *     def PathDist_AStar_VirtuEntry(self,             # <<<<<<<<<<<<<<
 *             const int& EidO, tuple[float, float, float] PtO, const tuple[float, float] DstO,
 *             const int& EidD, tuple[float, float, float] PtD, const tuple[float, float] DstD,
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_return, __pyx_n_s_float) < 0) __PYX_ERR(0, 1551, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5graph_7GraphCy_53PathDist_AStar_VirtuEntry, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GraphCy_PathDist_AStar_VirtuEntr, NULL, __pyx_n_s_graph, __pyx_d, ((PyObject *)__pyx_codeobj__78)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__72);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5graph_GraphCy, __pyx_n_s_PathDist_AStar_VirtuEntry, __pyx_t_2) < 0) __PYX_ERR(0, 1551, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5graph_GraphCy);

  /* "graph.pyx":1687
 *         return -1.0
 * 
 *     def PathDistComp_AStar_VirtuEntry(self,             # <<<<<<<<<<<<<<
 *             const int& EidO, tuple[float, float, float] PtO, const tuple[float, float] DstO,
 *             const int& EidD, tuple[float, float, float] PtD, const tuple[float, float] DstD,
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1687, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_return, __pyx_kp_s_tuple_float_float) < 0) __PYX_ERR(0, 1687, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_5graph_7GraphCy_55PathDistComp_AStar_VirtuEntry, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GraphCy_PathDistComp_AStar_Virtu, NULL, __pyx_n_s_graph, __pyx_d, ((PyObject *)__pyx_codeobj__79)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1687, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__72);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_3, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5graph_GraphCy, __pyx_n_s_PathDistComp_AStar_VirtuEntry, __pyx_t_3) < 0) __PYX_ERR(0, 1687, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_5graph_GraphCy);

  /* "graph.pyx":1823
 *         return (-1.0, -1.0)
 * 
 *     def PathReach(self, int NidO, float LimDist = 1_000.0, int LimCycle = 10_000) -> tuple[tuple[int, float]]:             # <<<<<<<<<<<<<<
 *         """
 *         Finds Edges within reach
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_return, __pyx_kp_s_tuple_tuple_int_float) < 0) __PYX_ERR(0, 1823, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5graph_7GraphCy_57PathReach, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GraphCy_PathReach, NULL, __pyx_n_s_graph, __pyx_d, ((PyObject *)__pyx_codeobj__81)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__82);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5graph_GraphCy, __pyx_n_s_PathReach, __pyx_t_2) < 0) __PYX_ERR(0, 1823, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5graph_GraphCy);

  /* "graph.pyx":2035
 *                 self,
 *                 const int& NidO, const int& NidD,
 *                 float DistMin = -1.0,             # <<<<<<<<<<<<<<
 *                 float DistMulLim = 1.2,
 *                 bint ReverseEdge = 0,
 */
  __pyx_k__20 = (-1.0);

  /* "graph.pyx":2175
 *                 const int& EidO, const float[3]& PtO, const float[2]& DstO,
 *                 const int& EidD, const float[3]& PtD, const float[2]& DstD,
 *                 float DistMin = -1.0,             # <<<<<<<<<<<<<<
 *                 float DistMulLim = 1.2,
 *                 bint ReverseEdge = 0,
 */
  __pyx_k__21 = (-1.0);

  /* "graph.pyx":2452
 *         return nodeMapped
 * 
 *     def PathFind_Multi(             # <<<<<<<<<<<<<<
 *             self,
 *             const int& NidO, const int& NidD,
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_return, __pyx_kp_s_tuple_tuple_float_tuple_int_None) < 0) __PYX_ERR(0, 2452, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_5graph_7GraphCy_59PathFind_Multi, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GraphCy_PathFind_Multi, NULL, __pyx_n_s_graph, __pyx_d, ((PyObject *)__pyx_codeobj__84)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__85);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_3, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5graph_GraphCy, __pyx_n_s_PathFind_Multi, __pyx_t_3) < 0) __PYX_ERR(0, 2452, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_5graph_GraphCy);

  /* "graph.pyx":2608
 *         return tuple(FoundDistance), tuple(FoundPaths)
 * 
 *     def PathFind_Multi_VirtuEntry(             # <<<<<<<<<<<<<<
 *             self,
 *             const int& EidO, tuple[float, float, float] PtO, tuple[float, float] DstO,
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_return, __pyx_kp_s_tuple_tuple_float_tuple_int_None) < 0) __PYX_ERR(0, 2608, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5graph_7GraphCy_61PathFind_Multi_VirtuEntry, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GraphCy_PathFind_Multi_VirtuEntr, NULL, __pyx_n_s_graph, __pyx_d, ((PyObject *)__pyx_codeobj__87)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__88);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5graph_GraphCy, __pyx_n_s_PathFind_Multi_VirtuEntry, __pyx_t_2) < 0) __PYX_ERR(0, 2608, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_5graph_GraphCy);

  /* "graph.pyx":2784
 * 
 * 
 *     def PathFind_Multi_MultiDest_VirtuEntry(             # <<<<<<<<<<<<<<
 *             self,
 *             const int& EidO, tuple[float, float, float] PtO, tuple[float, float] DstO, int& Oid,
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_return, __pyx_kp_s_tuple_tuple_float_tuple_int_None) < 0) __PYX_ERR(0, 2784, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_5graph_7GraphCy_63PathFind_Multi_MultiDest_VirtuEntry, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GraphCy_PathFind_Multi_MultiDest, NULL, __pyx_n_s_graph, __pyx_d, ((PyObject *)__pyx_codeobj__90)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__91);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_3, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_5graph_GraphCy, __pyx_n_s_PathFind_Multi_MultiDest_VirtuEn, __pyx_t_3) < 0) __PYX_ERR(0, 2784, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_5graph_GraphCy);

  /* "graph.pyx":1
 * # distutils: language = c++             # <<<<<<<<<<<<<<
 * 
 * ### SGACy (Spatial Graph Algorithm Cython)
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    if (__pyx_d && stringtab_initialized) {
      __Pyx_AddTraceback("init graph", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_USE_MODULE_STATE
    Py_CLEAR(__pyx_m);
    #else
    Py_DECREF(__pyx_m);
    if (pystate_addmodule_run) {
      PyObject *tp, *value, *tb;
      PyErr_Fetch(&tp, &value, &tb);
      PyState_RemoveModule(&__pyx_moduledef);
      PyErr_Restore(tp, value, tb);
    }
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init graph");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#ifdef _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    int result;
    PyObject *exc_type;
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *current_exception = tstate->current_exception;
    if (unlikely(!current_exception)) return 0;
    exc_type = (PyObject*) Py_TYPE(current_exception);
    if (exc_type == err) return 1;
#else
    exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
#endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(exc_type);
    #endif
    if (unlikely(PyTuple_Check(err))) {
        result = __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    } else {
        result = __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
    }
    #if CYTHON_AVOID_BORROWED_REFS
    Py_DECREF(exc_type);
    #endif
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *tmp_value;
    assert(type == NULL || (value != NULL && type == (PyObject*) Py_TYPE(value)));
    if (value) {
        #if CYTHON_COMPILING_IN_CPYTHON
        if (unlikely(((PyBaseExceptionObject*) value)->traceback != tb))
        #endif
            PyException_SetTraceback(value, tb);
    }
    tmp_value = tstate->current_exception;
    tstate->current_exception = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
#else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject* exc_value;
    exc_value = tstate->current_exception;
    tstate->current_exception = 0;
    *value = exc_value;
    *type = NULL;
    *tb = NULL;
    if (exc_value) {
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        #if CYTHON_COMPILING_IN_CPYTHON
        *tb = ((PyBaseExceptionObject*) exc_value)->traceback;
        Py_XINCREF(*tb);
        #else
        *tb = PyException_GetTraceback(exc_value);
        #endif
    }
#else
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#endif
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
    (void) PyObject_GetOptionalAttr(obj, attr_name, &result);
    return result;
#else
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
#endif
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_value == NULL || exc_info->exc_value == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    PyObject *exc_value = exc_info->exc_value;
    if (exc_value == NULL || exc_value == Py_None) {
        *value = NULL;
        *type = NULL;
        *tb = NULL;
    } else {
        *value = exc_value;
        Py_INCREF(*value);
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        *tb = PyException_GetTraceback(exc_value);
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #endif
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    PyObject *tmp_value = exc_info->exc_value;
    exc_info->exc_value = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
  #else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
  #endif
}
#endif

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type = NULL, *local_value, *local_tb = NULL;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if PY_VERSION_HEX >= 0x030C00A6
    local_value = tstate->current_exception;
    tstate->current_exception = 0;
    if (likely(local_value)) {
        local_type = (PyObject*) Py_TYPE(local_value);
        Py_INCREF(local_type);
        local_tb = PyException_GetTraceback(local_value);
    }
  #else
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
  #endif
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE && PY_VERSION_HEX >= 0x030C00A6
    if (unlikely(tstate->current_exception))
#elif CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
      #if PY_VERSION_HEX >= 0x030B00a4
        tmp_value = exc_info->exc_value;
        exc_info->exc_value = local_value;
        tmp_type = NULL;
        tmp_tb = NULL;
        Py_XDECREF(local_type);
        Py_XDECREF(local_tb);
      #else
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
      #endif
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* pep479 */
static void __Pyx_Generator_Replace_StopIteration(int in_async_gen) {
    PyObject *exc, *val, *tb, *cur_exc;
    __Pyx_PyThreadState_declare
    #ifdef __Pyx_StopAsyncIteration_USED
    int is_async_stopiteration = 0;
    #endif
    CYTHON_MAYBE_UNUSED_VAR(in_async_gen);
    cur_exc = PyErr_Occurred();
    if (likely(!__Pyx_PyErr_GivenExceptionMatches(cur_exc, PyExc_StopIteration))) {
        #ifdef __Pyx_StopAsyncIteration_USED
        if (in_async_gen && unlikely(__Pyx_PyErr_GivenExceptionMatches(cur_exc, __Pyx_PyExc_StopAsyncIteration))) {
            is_async_stopiteration = 1;
        } else
        #endif
            return;
    }
    __Pyx_PyThreadState_assign
    __Pyx_GetException(&exc, &val, &tb);
    Py_XDECREF(exc);
    Py_XDECREF(val);
    Py_XDECREF(tb);
    PyErr_SetString(PyExc_RuntimeError,
        #ifdef __Pyx_StopAsyncIteration_USED
        is_async_stopiteration ? "async generator raised StopAsyncIteration" :
        in_async_gen ? "async generator raised StopIteration" :
        #endif
        "generator raised StopIteration");
}

/* RaiseUnexpectedTypeError */
static int
__Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj)
{
    __Pyx_TypeName obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError, "Expected %s, got " __Pyx_FMT_TYPENAME,
                 expected, obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* TupleAndListFromArray */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        Py_INCREF(__pyx_empty_tuple);
        return __pyx_empty_tuple;
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = PyTuple_GET_SIZE(kwnames);
    for (i = 0; i < n; i++)
    {
        if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;
            return kwvalues[i];
        }
    }
    return NULL;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues) {
    Py_ssize_t i, nkwargs = PyTuple_GET_SIZE(kwnames);
    PyObject *dict;
    dict = PyDict_New();
    if (unlikely(!dict))
        return NULL;
    for (i=0; i<nkwargs; i++) {
        PyObject *key = PyTuple_GET_ITEM(kwnames, i);
        if (unlikely(PyDict_SetItem(dict, key, kwvalues[i]) < 0))
            goto bad;
    }
    return dict;
bad:
    Py_DECREF(dict);
    return NULL;
}
#endif
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kw,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kw, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kw))) {
        Py_ssize_t kwsize;
#if CYTHON_ASSUME_SAFE_MACROS
        kwsize = PyTuple_GET_SIZE(kw);
#else
        kwsize = PyTuple_Size(kw);
        if (kwsize < 0) return 0;
#endif
        if (unlikely(kwsize == 0))
            return 1;
        if (!kw_allowed) {
#if CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kw, 0);
#else
            key = PyTuple_GetItem(kw, pos);
            if (!key) return 0;
#endif
            goto invalid_keyword;
        }
#if PY_VERSION_HEX < 0x03090000
        for (pos = 0; pos < kwsize; pos++) {
#if CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kw, pos);
#else
            key = PyTuple_GetItem(kw, pos);
            if (!key) return 0;
#endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
        }
#endif
        return 1;
    }
    while (PyDict_Next(kw, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if (!kw_allowed && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    __Pyx_PyThreadState_declare
    CYTHON_UNUSED_VAR(cause);
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
      #if PY_VERSION_HEX >= 0x030C00A6
        PyException_SetTraceback(value, tb);
      #elif CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));
    while (1) {
        Py_XDECREF(key); key = NULL;
        Py_XDECREF(value); value = NULL;
        if (kwds_is_tuple) {
            Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(kwds);
#else
            size = PyTuple_Size(kwds);
            if (size < 0) goto bad;
#endif
            if (pos >= size) break;
#if CYTHON_AVOID_BORROWED_REFS
            key = __Pyx_PySequence_ITEM(kwds, pos);
            if (!key) goto bad;
#elif CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kwds, pos);
#else
            key = PyTuple_GetItem(kwds, pos);
            if (!key) goto bad;
#endif
            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(key);
#endif
        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(value);
            Py_DECREF(key);
#endif
            key = NULL;
            value = NULL;
            continue;
        }
#if !CYTHON_AVOID_BORROWED_REFS
        Py_INCREF(key);
#endif
        Py_INCREF(value);
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    Py_XDECREF(key);
    Py_XDECREF(value);
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    Py_XDECREF(key);
    Py_XDECREF(value);
    return -1;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* ErrOccurredWithGIL */
static CYTHON_INLINE int __Pyx_ErrOccurredWithGIL(void) {
  int err;
  #ifdef WITH_THREAD
  PyGILState_STATE _save = PyGILState_Ensure();
  #endif
  err = !!PyErr_Occurred();
  #ifdef WITH_THREAD
  PyGILState_Release(_save);
  #endif
  return err;
}

/* pyfrozenset_new */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it) {
    if (it) {
        PyObject* result;
#if CYTHON_COMPILING_IN_PYPY
        PyObject* args;
        args = PyTuple_Pack(1, it);
        if (unlikely(!args))
            return NULL;
        result = PyObject_Call((PyObject*)&PyFrozenSet_Type, args, NULL);
        Py_DECREF(args);
        return result;
#else
        if (PyFrozenSet_CheckExact(it)) {
            Py_INCREF(it);
            return it;
        }
        result = PyFrozenSet_New(it);
        if (unlikely(!result))
            return NULL;
        if ((PY_VERSION_HEX >= 0x031000A1) || likely(PySet_GET_SIZE(result)))
            return result;
        Py_DECREF(result);
#endif
    }
#if CYTHON_USE_TYPE_SLOTS
    return PyFrozenSet_Type.tp_new(&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#else
    return PyObject_Call((PyObject*)&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#endif
}

/* PySetContains */
static int __Pyx_PySet_ContainsUnhashable(PyObject *set, PyObject *key) {
    int result = -1;
    if (PySet_Check(key) && PyErr_ExceptionMatches(PyExc_TypeError)) {
        PyObject *tmpkey;
        PyErr_Clear();
        tmpkey = __Pyx_PyFrozenSet_New(key);
        if (tmpkey != NULL) {
            result = PySet_Contains(set, tmpkey);
            Py_DECREF(tmpkey);
        }
    }
    return result;
}
static CYTHON_INLINE int __Pyx_PySet_ContainsTF(PyObject* key, PyObject* set, int eq) {
    int result = PySet_Contains(set, key);
    if (unlikely(result < 0)) {
        result = __Pyx_PySet_ContainsUnhashable(set, key);
    }
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    __Pyx_TypeName type_name;
    __Pyx_TypeName obj_type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    type_name = __Pyx_PyType_GetName(type);
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected " __Pyx_FMT_TYPENAME
        ", got " __Pyx_FMT_TYPENAME ")", name, type_name, obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object"))) {
        return NULL;
    }
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object"))) {
        return NULL;
    }
    #endif
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = __Pyx_CyOrPyCFunction_GET_FUNCTION(func);
    self = __Pyx_CyOrPyCFunction_GET_SELF(func);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
#if PY_VERSION_HEX < 0x03090000 || CYTHON_COMPILING_IN_LIMITED_API
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result = 0;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        if (__Pyx_PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]) < 0) goto bad;
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
  bad:
    Py_DECREF(argstuple);
    return result;
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_NOARGS))
            return __Pyx_PyObject_CallMethO(func, NULL);
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_O))
            return __Pyx_PyObject_CallMethO(func, args[0]);
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    #if PY_VERSION_HEX >= 0x030700A1
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    if (kwargs == NULL) {
        #if CYTHON_VECTORCALL
        #if PY_VERSION_HEX < 0x03090000
        vectorcallfunc f = _PyVectorcall_Function(func);
        #else
        vectorcallfunc f = PyVectorcall_Function(func);
        #endif
        if (f) {
            return f(func, args, (size_t)nargs, NULL);
        }
        #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
        if (__Pyx_CyFunction_CheckExact(func)) {
            __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
            if (f) return f(func, args, (size_t)nargs, NULL);
        }
        #endif
    }
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_empty_tuple, kwargs);
    }
    #if PY_VERSION_HEX >= 0x03090000 && !CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_VectorcallDict(func, args, (size_t)nargs, kwargs);
    #else
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
    #endif
}

/* PyObjectCallOneArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectFormat */
#if CYTHON_USE_UNICODE_WRITER
static PyObject* __Pyx_PyObject_Format(PyObject* obj, PyObject* format_spec) {
    int ret;
    _PyUnicodeWriter writer;
    if (likely(PyFloat_CheckExact(obj))) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x03040000
        _PyUnicodeWriter_Init(&writer, 0);
#else
        _PyUnicodeWriter_Init(&writer);
#endif
        ret = _PyFloat_FormatAdvancedWriter(
            &writer,
            obj,
            format_spec, 0, PyUnicode_GET_LENGTH(format_spec));
    } else if (likely(PyLong_CheckExact(obj))) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x03040000
        _PyUnicodeWriter_Init(&writer, 0);
#else
        _PyUnicodeWriter_Init(&writer);
#endif
        ret = _PyLong_FormatAdvancedWriter(
            &writer,
            obj,
            format_spec, 0, PyUnicode_GET_LENGTH(format_spec));
    } else {
        return PyObject_Format(obj, format_spec);
    }
    if (unlikely(ret == -1)) {
        _PyUnicodeWriter_Dealloc(&writer);
        return NULL;
    }
    return _PyUnicodeWriter_Finish(&writer);
}
#endif

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind, kind_shift;
    Py_ssize_t i, char_pos;
    void *result_udata;
    CYTHON_MAYBE_UNUSED_VAR(max_char);
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    kind_shift = (result_ukind == PyUnicode_4BYTE_KIND) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    kind_shift = (result_ukind == 4) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    assert(kind_shift == 2 || kind_shift == 1 || kind_shift == 0);
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely((PY_SSIZE_T_MAX >> kind_shift) - ulength < char_pos))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + (char_pos << kind_shift), udata, (size_t) (ulength << kind_shift));
        } else {
            #if PY_VERSION_HEX >= 0x030d0000
            if (unlikely(PyUnicode_CopyCharacters(result_uval, char_pos, uval, 0, ulength) < 0)) goto bad;
            #elif CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    CYTHON_UNUSED_VAR(max_char);
    CYTHON_UNUSED_VAR(result_ulength);
    CYTHON_UNUSED_VAR(value_count);
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* RaiseClosureNameError */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (unlikely(!j)) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_subscript) {
            PyObject *r, *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return NULL;
            r = mm->mp_subscript(o, key);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return sm->sq_item(o, i);
        }
    }
#else
    if (is_list || !PyMapping_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject *index) {
    PyObject *runerr = NULL;
    Py_ssize_t key_value;
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        __Pyx_TypeName index_type_name = __Pyx_PyType_GetName(Py_TYPE(index));
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError,
            "cannot fit '" __Pyx_FMT_TYPENAME "' into an index-sized integer", index_type_name);
        __Pyx_DECREF_TypeName(index_type_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem_Slow(PyObject *obj, PyObject *key) {
    __Pyx_TypeName obj_type_name;
    if (likely(PyType_Check(obj))) {
        PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(obj, __pyx_n_s_class_getitem);
        if (!meth) {
            PyErr_Clear();
        } else {
            PyObject *result = __Pyx_PyObject_CallOneArg(meth, key);
            Py_DECREF(meth);
            return result;
        }
    }
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object is not subscriptable", obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key) {
    PyTypeObject *tp = Py_TYPE(obj);
    PyMappingMethods *mm = tp->tp_as_mapping;
    PySequenceMethods *sm = tp->tp_as_sequence;
    if (likely(mm && mm->mp_subscript)) {
        return mm->mp_subscript(obj, key);
    }
    if (likely(sm && sm->sq_item)) {
        return __Pyx_PyObject_GetIndex(obj, key);
    }
    return __Pyx_PyObject_GetItem_Slow(obj, key);
}
#endif

/* PySequenceMultiply */
static PyObject* __Pyx_PySequence_Multiply_Generic(PyObject *seq, Py_ssize_t mul) {
    PyObject *result, *pymul = PyInt_FromSsize_t(mul);
    if (unlikely(!pymul))
        return NULL;
    result = PyNumber_Multiply(seq, pymul);
    Py_DECREF(pymul);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PySequence_Multiply(PyObject *seq, Py_ssize_t mul) {
#if CYTHON_USE_TYPE_SLOTS
    PyTypeObject *type = Py_TYPE(seq);
    if (likely(type->tp_as_sequence && type->tp_as_sequence->sq_repeat)) {
        return type->tp_as_sequence->sq_repeat(seq, mul);
    } else
#endif
    {
        return __Pyx_PySequence_Multiply_Generic(seq, mul);
    }
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
    PyObject* exc_type;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    exc_type = __Pyx_PyErr_CurrentExceptionType();
    if (unlikely(exc_type)) {
        if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))
            return -1;
        __Pyx_PyErr_Clear();
        return 0;
    }
    return 0;
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    }
    return __Pyx_IterFinish();
}

/* PyObjectCallNoArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
    PyObject *arg[2] = {NULL, NULL};
    return __Pyx_PyObject_FastCall(func, arg + 1, 0 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* FixUpExtensionType */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type) {
#if PY_VERSION_HEX > 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    CYTHON_UNUSED_VAR(spec);
    CYTHON_UNUSED_VAR(type);
#else
    const PyType_Slot *slot = spec->slots;
    while (slot && slot->slot && slot->slot != Py_tp_members)
        slot++;
    if (slot && slot->slot == Py_tp_members) {
        int changed = 0;
#if !(PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON)
        const
#endif
            PyMemberDef *memb = (PyMemberDef*) slot->pfunc;
        while (memb && memb->name) {
            if (memb->name[0] == '_' && memb->name[1] == '_') {
#if PY_VERSION_HEX < 0x030900b1
                if (strcmp(memb->name, "__weaklistoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_weaklistoffset = memb->offset;
                    changed = 1;
                }
                else if (strcmp(memb->name, "__dictoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_dictoffset = memb->offset;
                    changed = 1;
                }
#if CYTHON_METH_FASTCALL
                else if (strcmp(memb->name, "__vectorcalloffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
#if PY_VERSION_HEX >= 0x030800b4
                    type->tp_vectorcall_offset = memb->offset;
#else
                    type->tp_print = (printfunc) memb->offset;
#endif
                    changed = 1;
                }
#endif
#else
                if ((0));
#endif
#if PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON
                else if (strcmp(memb->name, "__module__") == 0) {
                    PyObject *descr;
                    assert(memb->type == T_OBJECT);
                    assert(memb->flags == 0 || memb->flags == READONLY);
                    descr = PyDescr_NewMember(type, memb);
                    if (unlikely(!descr))
                        return -1;
                    if (unlikely(PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr) < 0)) {
                        Py_DECREF(descr);
                        return -1;
                    }
                    Py_DECREF(descr);
                    changed = 1;
                }
#endif
            }
            memb++;
        }
        if (changed)
            PyType_Modified(type);
    }
#endif
    return 0;
}
#endif

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    __Pyx_TypeName type_name;
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if defined(Py_TPFLAGS_METHOD_DESCRIPTOR) && Py_TPFLAGS_METHOD_DESCRIPTOR
        if (__Pyx_PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_METHOD_DESCRIPTOR))
#elif PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (likely(descr != NULL)) {
        *method = descr;
        return 0;
    }
    type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* ValidateBasesTuple */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases) {
    Py_ssize_t i, n;
#if CYTHON_ASSUME_SAFE_MACROS
    n = PyTuple_GET_SIZE(bases);
#else
    n = PyTuple_Size(bases);
    if (n < 0) return -1;
#endif
    for (i = 1; i < n; i++)
    {
#if CYTHON_AVOID_BORROWED_REFS
        PyObject *b0 = PySequence_GetItem(bases, i);
        if (!b0) return -1;
#elif CYTHON_ASSUME_SAFE_MACROS
        PyObject *b0 = PyTuple_GET_ITEM(bases, i);
#else
        PyObject *b0 = PyTuple_GetItem(bases, i);
        if (!b0) return -1;
#endif
        PyTypeObject *b;
#if PY_MAJOR_VERSION < 3
        if (PyClass_Check(b0))
        {
            PyErr_Format(PyExc_TypeError, "base class '%.200s' is an old-style class",
                         PyString_AS_STRING(((PyClassObject*)b0)->cl_name));
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
#endif
        b = (PyTypeObject*) b0;
        if (!__Pyx_PyType_HasFeature(b, Py_TPFLAGS_HEAPTYPE))
        {
            __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
            PyErr_Format(PyExc_TypeError,
                "base class '" __Pyx_FMT_TYPENAME "' is not a heap type", b_name);
            __Pyx_DECREF_TypeName(b_name);
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
        if (dictoffset == 0)
        {
            Py_ssize_t b_dictoffset = 0;
#if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
            b_dictoffset = b->tp_dictoffset;
#else
            PyObject *py_b_dictoffset = PyObject_GetAttrString((PyObject*)b, "__dictoffset__");
            if (!py_b_dictoffset) goto dictoffset_return;
            b_dictoffset = PyLong_AsSsize_t(py_b_dictoffset);
            Py_DECREF(py_b_dictoffset);
            if (b_dictoffset == -1 && PyErr_Occurred()) goto dictoffset_return;
#endif
            if (b_dictoffset) {
                {
                    __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
                    PyErr_Format(PyExc_TypeError,
                        "extension type '%.200s' has no __dict__ slot, "
                        "but base type '" __Pyx_FMT_TYPENAME "' has: "
                        "either add 'cdef dict __dict__' to the extension type "
                        "or add '__slots__ = [...]' to the base type",
                        type_name, b_name);
                    __Pyx_DECREF_TypeName(b_name);
                }
#if !(CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY)
              dictoffset_return:
#endif
#if CYTHON_AVOID_BORROWED_REFS
                Py_DECREF(b0);
#endif
                return -1;
            }
        }
#if CYTHON_AVOID_BORROWED_REFS
        Py_DECREF(b0);
#endif
    }
    return 0;
}
#endif

/* PyType_Ready */
static int __Pyx_PyType_Ready(PyTypeObject *t) {
#if CYTHON_USE_TYPE_SPECS || !(CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API) || defined(PYSTON_MAJOR_VERSION)
    (void)__Pyx_PyObject_CallMethod0;
#if CYTHON_USE_TYPE_SPECS
    (void)__Pyx_validate_bases_tuple;
#endif
    return PyType_Ready(t);
#else
    int r;
    PyObject *bases = __Pyx_PyType_GetSlot(t, tp_bases, PyObject*);
    if (bases && unlikely(__Pyx_validate_bases_tuple(t->tp_name, t->tp_dictoffset, bases) == -1))
        return -1;
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
    {
        int gc_was_enabled;
    #if PY_VERSION_HEX >= 0x030A00b1
        gc_was_enabled = PyGC_Disable();
        (void)__Pyx_PyObject_CallMethod0;
    #else
        PyObject *ret, *py_status;
        PyObject *gc = NULL;
        #if PY_VERSION_HEX >= 0x030700a1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM+0 >= 0x07030400)
        gc = PyImport_GetModule(__pyx_kp_u_gc);
        #endif
        if (unlikely(!gc)) gc = PyImport_Import(__pyx_kp_u_gc);
        if (unlikely(!gc)) return -1;
        py_status = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_isenabled);
        if (unlikely(!py_status)) {
            Py_DECREF(gc);
            return -1;
        }
        gc_was_enabled = __Pyx_PyObject_IsTrue(py_status);
        Py_DECREF(py_status);
        if (gc_was_enabled > 0) {
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_disable);
            if (unlikely(!ret)) {
                Py_DECREF(gc);
                return -1;
            }
            Py_DECREF(ret);
        } else if (unlikely(gc_was_enabled == -1)) {
            Py_DECREF(gc);
            return -1;
        }
    #endif
        t->tp_flags |= Py_TPFLAGS_HEAPTYPE;
#if PY_VERSION_HEX >= 0x030A0000
        t->tp_flags |= Py_TPFLAGS_IMMUTABLETYPE;
#endif
#else
        (void)__Pyx_PyObject_CallMethod0;
#endif
    r = PyType_Ready(t);
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
        t->tp_flags &= ~Py_TPFLAGS_HEAPTYPE;
    #if PY_VERSION_HEX >= 0x030A00b1
        if (gc_was_enabled)
            PyGC_Enable();
    #else
        if (gc_was_enabled) {
            PyObject *tp, *v, *tb;
            PyErr_Fetch(&tp, &v, &tb);
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_enable);
            if (likely(ret || r == -1)) {
                Py_XDECREF(ret);
                PyErr_Restore(tp, v, tb);
            } else {
                Py_XDECREF(tp);
                Py_XDECREF(v);
                Py_XDECREF(tb);
                r = -1;
            }
        }
        Py_DECREF(gc);
    #endif
    }
#endif
    return r;
#endif
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    __Pyx_TypeName type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, attr_name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(attr_name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyTypeObject *type, void *vtable) {
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
    if (unlikely(!ob))
        goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(PyObject_SetAttr((PyObject *) type, __pyx_n_s_pyx_vtable, ob) < 0))
#else
    if (unlikely(PyDict_SetItem(type->tp_dict, __pyx_n_s_pyx_vtable, ob) < 0))
#endif
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* GetVTable */
static void* __Pyx_GetVtable(PyTypeObject *type) {
    void* ptr;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *ob = PyObject_GetAttr((PyObject *)type, __pyx_n_s_pyx_vtable);
#else
    PyObject *ob = PyObject_GetItem(type->tp_dict, __pyx_n_s_pyx_vtable);
#endif
    if (!ob)
        goto bad;
    ptr = PyCapsule_GetPointer(ob, 0);
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* MergeVTables */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_MergeVtables(PyTypeObject *type) {
    int i;
    void** base_vtables;
    __Pyx_TypeName tp_base_name;
    __Pyx_TypeName base_name;
    void* unknown = (void*)-1;
    PyObject* bases = type->tp_bases;
    int base_depth = 0;
    {
        PyTypeObject* base = type->tp_base;
        while (base) {
            base_depth += 1;
            base = base->tp_base;
        }
    }
    base_vtables = (void**) malloc(sizeof(void*) * (size_t)(base_depth + 1));
    base_vtables[0] = unknown;
    for (i = 1; i < PyTuple_GET_SIZE(bases); i++) {
        void* base_vtable = __Pyx_GetVtable(((PyTypeObject*)PyTuple_GET_ITEM(bases, i)));
        if (base_vtable != NULL) {
            int j;
            PyTypeObject* base = type->tp_base;
            for (j = 0; j < base_depth; j++) {
                if (base_vtables[j] == unknown) {
                    base_vtables[j] = __Pyx_GetVtable(base);
                    base_vtables[j + 1] = unknown;
                }
                if (base_vtables[j] == base_vtable) {
                    break;
                } else if (base_vtables[j] == NULL) {
                    goto bad;
                }
                base = base->tp_base;
            }
        }
    }
    PyErr_Clear();
    free(base_vtables);
    return 0;
bad:
    tp_base_name = __Pyx_PyType_GetName(type->tp_base);
    base_name = __Pyx_PyType_GetName((PyTypeObject*)PyTuple_GET_ITEM(bases, i));
    PyErr_Format(PyExc_TypeError,
        "multiple bases have vtable conflict: '" __Pyx_FMT_TYPENAME "' and '" __Pyx_FMT_TYPENAME "'", tp_base_name, base_name);
    __Pyx_DECREF_TypeName(tp_base_name);
    __Pyx_DECREF_TypeName(base_name);
    free(base_vtables);
    return -1;
}
#endif

/* SetupReduce */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStrNoError(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred()) {
        __Pyx_TypeName type_obj_name =
            __Pyx_PyType_GetName((PyTypeObject*)type_obj);
        PyErr_Format(PyExc_RuntimeError,
            "Unable to initialize pickling for " __Pyx_FMT_TYPENAME, type_obj_name);
        __Pyx_DECREF_TypeName(type_obj_name);
    }
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (unlikely(!py_import))
        goto bad;
    if (!from_list) {
        empty_list = PyList_New(0);
        if (unlikely(!empty_list))
            goto bad;
        from_list = empty_list;
    }
    #endif
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.') != NULL) {
                module = PyImport_ImportModuleLevelObject(
                    name, __pyx_d, empty_dict, from_list, 1);
                if (unlikely(!module)) {
                    if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (unlikely(!py_level))
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, __pyx_d, empty_dict, from_list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_d, empty_dict, from_list, level);
            #endif
        }
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    return module;
}

/* ImportDottedModule */
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {
    PyObject *partial_name = NULL, *slice = NULL, *sep = NULL;
    if (unlikely(PyErr_Occurred())) {
        PyErr_Clear();
    }
    if (likely(PyTuple_GET_SIZE(parts_tuple) == count)) {
        partial_name = name;
    } else {
        slice = PySequence_GetSlice(parts_tuple, 0, count);
        if (unlikely(!slice))
            goto bad;
        sep = PyUnicode_FromStringAndSize(".", 1);
        if (unlikely(!sep))
            goto bad;
        partial_name = PyUnicode_Join(sep, slice);
    }
    PyErr_Format(
#if PY_MAJOR_VERSION < 3
        PyExc_ImportError,
        "No module named '%s'", PyString_AS_STRING(partial_name));
#else
#if PY_VERSION_HEX >= 0x030600B1
        PyExc_ModuleNotFoundError,
#else
        PyExc_ImportError,
#endif
        "No module named '%U'", partial_name);
#endif
bad:
    Py_XDECREF(sep);
    Py_XDECREF(slice);
    Py_XDECREF(partial_name);
    return NULL;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {
    PyObject *imported_module;
#if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
    PyObject *modules = PyImport_GetModuleDict();
    if (unlikely(!modules))
        return NULL;
    imported_module = __Pyx_PyDict_GetItemStr(modules, name);
    Py_XINCREF(imported_module);
#else
    imported_module = PyImport_GetModule(name);
#endif
    return imported_module;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple) {
    Py_ssize_t i, nparts;
    nparts = PyTuple_GET_SIZE(parts_tuple);
    for (i=1; i < nparts && module; i++) {
        PyObject *part, *submodule;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        part = PyTuple_GET_ITEM(parts_tuple, i);
#else
        part = PySequence_ITEM(parts_tuple, i);
#endif
        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF(part);
#endif
        Py_DECREF(module);
        module = submodule;
    }
    if (unlikely(!module)) {
        return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);
    }
    return module;
}
#endif
static PyObject *__Pyx__ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if PY_MAJOR_VERSION < 3
    PyObject *module, *from_list, *star = __pyx_n_s__22;
    CYTHON_UNUSED_VAR(parts_tuple);
    from_list = PyList_New(1);
    if (unlikely(!from_list))
        return NULL;
    Py_INCREF(star);
    PyList_SET_ITEM(from_list, 0, star);
    module = __Pyx_Import(name, from_list, 0);
    Py_DECREF(from_list);
    return module;
#else
    PyObject *imported_module;
    PyObject *module = __Pyx_Import(name, NULL, 0);
    if (!parts_tuple || unlikely(!module))
        return module;
    imported_module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(imported_module)) {
        Py_DECREF(module);
        return imported_module;
    }
    PyErr_Clear();
    return __Pyx_ImportDottedModule_WalkParts(module, name, parts_tuple);
#endif
}
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030400B1
    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(module)) {
        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_n_s_spec);
        if (likely(spec)) {
            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_n_s_initializing);
            if (likely(!unsafe || !__Pyx_PyObject_IsTrue(unsafe))) {
                Py_DECREF(spec);
                spec = NULL;
            }
            Py_XDECREF(unsafe);
        }
        if (likely(!spec)) {
            PyErr_Clear();
            return module;
        }
        Py_DECREF(spec);
        Py_DECREF(module);
    } else if (PyErr_Occurred()) {
        PyErr_Clear();
    }
#endif
    return __Pyx__ImportDottedModule(name, parts_tuple);
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        const char* module_name_str = 0;
        PyObject* module_name = 0;
        PyObject* module_dot = 0;
        PyObject* full_name = 0;
        PyErr_Clear();
        module_name_str = PyModule_GetName(module);
        if (unlikely(!module_name_str)) { goto modbad; }
        module_name = PyUnicode_FromString(module_name_str);
        if (unlikely(!module_name)) { goto modbad; }
        module_dot = PyUnicode_Concat(module_name, __pyx_kp_u__23);
        if (unlikely(!module_dot)) { goto modbad; }
        full_name = PyUnicode_Concat(module_dot, name);
        if (unlikely(!full_name)) { goto modbad; }
        #if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
        {
            PyObject *modules = PyImport_GetModuleDict();
            if (unlikely(!modules))
                goto modbad;
            value = PyObject_GetItem(modules, full_name);
        }
        #else
        value = PyImport_GetModule(full_name);
        #endif
      modbad:
        Py_XDECREF(full_name);
        Py_XDECREF(module_dot);
        Py_XDECREF(module_name);
    }
    if (unlikely(!value)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* FetchSharedCythonModule */
static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    return __Pyx_PyImport_AddModuleRef((char*) __PYX_ABI_MODULE_NAME);
}

/* FetchCommonType */
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t basicsize,
                               Py_ssize_t expected_basicsize) {
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* abi_module;
    const char* object_name;
    PyTypeObject *cached_type = NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    object_name = strrchr(type->tp_name, '.');
    object_name = object_name ? object_name+1 : type->tp_name;
    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        if (__Pyx_VerifyCachedType(
              (PyObject *)cached_type,
              object_name,
              cached_type->tp_basicsize,
              type->tp_basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, (PyObject *)type) < 0)
        goto bad;
    Py_INCREF(type);
    cached_type = type;
done:
    Py_DECREF(abi_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#else
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module, *cached_type = NULL;
    const char* object_name = strrchr(spec->name, '.');
    object_name = object_name ? object_name+1 : spec->name;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
        PyObject *py_basicsize;
        py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
        if (unlikely(!py_basicsize)) goto bad;
        basicsize = PyLong_AsSsize_t(py_basicsize);
        Py_DECREF(py_basicsize);
        py_basicsize = 0;
        if (unlikely(basicsize == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
#else
        basicsize = likely(PyType_Check(cached_type)) ? ((PyTypeObject*) cached_type)->tp_basicsize : -1;
#endif
        if (__Pyx_VerifyCachedType(
              cached_type,
              object_name,
              basicsize,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    CYTHON_UNUSED_VAR(module);
    cached_type = __Pyx_PyType_FromModuleAndSpec(abi_module, spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (unlikely(__Pyx_fix_up_extension_type_from_spec(spec, (PyTypeObject *) cached_type) < 0)) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, cached_type) < 0) goto bad;
done:
    Py_DECREF(abi_module);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#endif

/* PyVectorcallFastCallDict */
#if CYTHON_METH_FASTCALL
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &= Py_TYPE(key)->tp_flags;
        Py_INCREF(key);
        Py_INCREF(value);
        PyTuple_SET_ITEM(kwnames, i, key);
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    if (likely(kw == NULL) || PyDict_GET_SIZE(kw) == 0) {
        return vc(func, args, nargs, NULL);
    }
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    if (__Pyx_CyFunction_Check(func)) {
        return PyCFunction_GetFunction(((__pyx_CyFunctionObject*)func)->func) == (PyCFunction) cfunc;
    } else if (PyCFunction_Check(func)) {
        return PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
    }
    return 0;
}
#else
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    return __Pyx_CyOrPyCFunction_Check(func) && __Pyx_CyOrPyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
}
#endif
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj) {
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    __Pyx_Py_XDECREF_SET(
        __Pyx_CyFunction_GetClassObj(f),
            ((classobj) ? __Pyx_NewRef(classobj) : NULL));
#else
    __Pyx_Py_XDECREF_SET(
        ((PyCMethodObject *) (f))->mm_class,
        (PyTypeObject*)((classobj) ? __Pyx_NewRef(classobj) : NULL));
#endif
}
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure)
{
    CYTHON_UNUSED_VAR(closure);
    if (unlikely(op->func_doc == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_doc = PyObject_GetAttrString(op->func, "__doc__");
        if (unlikely(!op->func_doc)) return NULL;
#else
        if (((PyCFunctionObject*)op)->m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
#endif
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_name == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_name = PyObject_GetAttrString(op->func, "__name__");
#elif PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = __Pyx_PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = __Pyx_PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__defaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_tuple;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__kwdefaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_kwdict;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->func_annotations;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    int is_coroutine;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
#if PY_VERSION_HEX >= 0x03050000
    if (is_coroutine) {
        PyObject *module, *fromlist, *marker = __pyx_n_s_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
#if CYTHON_ASSUME_SAFE_MACROS
        PyList_SET_ITEM(fromlist, 0, marker);
#else
        if (unlikely(PyList_SetItem(fromlist, 0, marker) < 0)) {
            Py_DECREF(marker);
            Py_DECREF(fromlist);
            return NULL;
        }
#endif
        module = PyImport_ImportModuleLevelObject(__pyx_n_s_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        op->func_is_coroutine = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(op->func_is_coroutine)) {
            return __Pyx_NewRef(op->func_is_coroutine);
        }
ignore:
        PyErr_Clear();
    }
#endif
    op->func_is_coroutine = __Pyx_PyBool_FromLong(is_coroutine);
    return __Pyx_NewRef(op->func_is_coroutine);
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *
__Pyx_CyFunction_get_module(__pyx_CyFunctionObject *op, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_GetAttrString(op->func, "__module__");
}
static int
__Pyx_CyFunction_set_module(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_SetAttrString(op->func, "__module__", value);
}
#endif
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {(char *) "_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
#if CYTHON_COMPILING_IN_LIMITED_API
    {"__module__", (getter)__Pyx_CyFunction_get_module, (setter)__Pyx_CyFunction_set_module, 0, 0},
#endif
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), 0, 0},
#endif
#if CYTHON_USE_TYPE_SPECS
    {(char *) "__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if CYTHON_METH_FASTCALL
#if CYTHON_BACKPORT_VECTORCALL
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_vectorcall), READONLY, 0},
#else
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(PyCFunctionObject, vectorcall), READONLY, 0},
#endif
#endif
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    CYTHON_UNUSED_VAR(args);
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(((PyCFunctionObject*)m)->m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) (((PyCFunctionObject*)cyfunc)->m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
#if !CYTHON_COMPILING_IN_LIMITED_API
    PyCFunctionObject *cf = (PyCFunctionObject*) op;
#endif
    if (unlikely(op == NULL))
        return NULL;
#if CYTHON_COMPILING_IN_LIMITED_API
    op->func = PyCFunction_NewEx(ml, (PyObject*)op, module);
    if (unlikely(!op->func)) return NULL;
#endif
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
#if !CYTHON_COMPILING_IN_LIMITED_API
    cf->m_ml = ml;
    cf->m_self = (PyObject *) op;
#endif
    Py_XINCREF(closure);
    op->func_closure = closure;
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_XINCREF(module);
    cf->m_module = module;
#endif
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    op->func_classobj = NULL;
#else
    ((PyCMethodObject*)op)->mm_class = NULL;
#endif
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS | METH_METHOD)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_METHOD | METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_CLEAR(m->func);
#else
    Py_CLEAR(((PyCFunctionObject*)m)->m_module);
#endif
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
#if PY_VERSION_HEX < 0x030900B1
    Py_CLEAR(__Pyx_CyFunction_GetClassObj(m));
#else
    {
        PyObject *cls = (PyObject*) ((PyCMethodObject *) (m))->mm_class;
        ((PyCMethodObject *) (m))->mm_class = NULL;
        Py_XDECREF(cls);
    }
#endif
#endif
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    __Pyx_PyHeapTypeObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(m->func);
#else
    Py_VISIT(((PyCFunctionObject*)m)->m_module);
#endif
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(__Pyx_CyFunction_GetClassObj(m));
#endif
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *f = ((__pyx_CyFunctionObject*)func)->func;
    PyObject *py_name = NULL;
    PyCFunction meth;
    int flags;
    meth = PyCFunction_GetFunction(f);
    if (unlikely(!meth)) return NULL;
    flags = PyCFunction_GetFlags(f);
    if (unlikely(flags < 0)) return NULL;
#else
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    int flags = f->m_ml->ml_flags;
#endif
    Py_ssize_t size;
    switch (flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 0))
                return (*meth)(self, NULL);
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = __Pyx_PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
#if CYTHON_COMPILING_IN_LIMITED_API
    py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
    if (!py_name) return NULL;
    PyErr_Format(PyExc_TypeError, "%.200S() takes no keyword arguments",
                 py_name);
    Py_DECREF(py_name);
#else
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
#endif
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *self, *result;
#if CYTHON_COMPILING_IN_LIMITED_API
    self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)func)->func);
    if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
    self = ((PyCFunctionObject*)func)->m_self;
#endif
    result = __Pyx_CyFunction_CallMethod(func, self, arg, kw);
    return result;
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
#if CYTHON_ASSUME_SAFE_MACROS
        argc = PyTuple_GET_SIZE(args);
#else
        argc = PyTuple_Size(args);
        if (unlikely(!argc) < 0) return NULL;
#endif
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
#if PY_MAJOR_VERSION > 2
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
#else
            PyErr_SetString(PyExc_TypeError,
                            "unbound method needs an argument");
#endif
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            PyErr_Format(PyExc_TypeError, "%.200s() needs an argument",
                         ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(PyTuple_GET_SIZE(kwnames))) {
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes no keyword arguments", ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCFunctionFastWithKeywords)(void(*)(void))def->ml_meth)(self, args, nargs, kwnames);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
    PyTypeObject *cls = (PyTypeObject *) __Pyx_CyFunction_GetClassObj(cyfunc);
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCMethod)(void(*)(void))def->ml_meth)(self, cls, args, (size_t)nargs, kwnames);
}
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if (defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL)
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    __pyx_CyFunctionType_slots
};
#else
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
#if !CYTHON_METH_FASTCALL
    0,
#elif CYTHON_BACKPORT_VECTORCALL
    (printfunc)offsetof(__pyx_CyFunctionObject, func_vectorcall),
#else
    offsetof(PyCFunctionObject, vectorcall),
#endif
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_PyMethod_New,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if __PYX_NEED_TP_PRINT_SLOT
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
#endif
static int __pyx_CyFunction_init(PyObject *module) {
#if CYTHON_USE_TYPE_SPECS
    __pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_CyFunctionType_spec, NULL);
#else
    CYTHON_UNUSED_VAR(module);
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
#endif
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && PY_VERSION_HEX < 0x030d0000
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#elif CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* GetNameInClass */
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    PyObject *dict;
    assert(PyType_Check(nmspace));
#if CYTHON_USE_TYPE_SLOTS
    dict = ((PyTypeObject*)nmspace)->tp_dict;
    Py_XINCREF(dict);
#else
    dict = PyObject_GetAttr(nmspace, __pyx_n_s_dict);
#endif
    if (likely(dict)) {
        result = PyObject_GetItem(dict, name);
        Py_DECREF(dict);
        if (result) {
            return result;
        }
    }
    PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    CYTHON_MAYBE_UNUSED_VAR(tstate);
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyCode_Replace_For_AddTraceback(PyObject *code, PyObject *scratch_dict,
                                                       PyObject *firstlineno, PyObject *name) {
    PyObject *replace = NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_firstlineno", firstlineno))) return NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_name", name))) return NULL;
    replace = PyObject_GetAttrString(code, "replace");
    if (likely(replace)) {
        PyObject *result;
        result = PyObject_Call(replace, __pyx_empty_tuple, scratch_dict);
        Py_DECREF(replace);
        return result;
    }
    PyErr_Clear();
    #if __PYX_LIMITED_VERSION_HEX < 0x030780000
    {
        PyObject *compiled = NULL, *result = NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "code", code))) return NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "type", (PyObject*)(&PyType_Type)))) return NULL;
        compiled = Py_CompileString(
            "out = type(code)(\n"
            "  code.co_argcount, code.co_kwonlyargcount, code.co_nlocals, code.co_stacksize,\n"
            "  code.co_flags, code.co_code, code.co_consts, code.co_names,\n"
            "  code.co_varnames, code.co_filename, co_name, co_firstlineno,\n"
            "  code.co_lnotab)\n", "<dummy>", Py_file_input);
        if (!compiled) return NULL;
        result = PyEval_EvalCode(compiled, scratch_dict, scratch_dict);
        Py_DECREF(compiled);
        if (!result) PyErr_Print();
        Py_DECREF(result);
        result = PyDict_GetItemString(scratch_dict, "out");
        if (result) Py_INCREF(result);
        return result;
    }
    #else
    return NULL;
    #endif
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyObject *code_object = NULL, *py_py_line = NULL, *py_funcname = NULL, *dict = NULL;
    PyObject *replace = NULL, *getframe = NULL, *frame = NULL;
    PyObject *exc_type, *exc_value, *exc_traceback;
    int success = 0;
    if (c_line) {
        (void) __pyx_cfilenm;
        (void) __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    PyErr_Fetch(&exc_type, &exc_value, &exc_traceback);
    code_object = Py_CompileString("_getframe()", filename, Py_eval_input);
    if (unlikely(!code_object)) goto bad;
    py_py_line = PyLong_FromLong(py_line);
    if (unlikely(!py_py_line)) goto bad;
    py_funcname = PyUnicode_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    dict = PyDict_New();
    if (unlikely(!dict)) goto bad;
    {
        PyObject *old_code_object = code_object;
        code_object = __Pyx_PyCode_Replace_For_AddTraceback(code_object, dict, py_py_line, py_funcname);
        Py_DECREF(old_code_object);
    }
    if (unlikely(!code_object)) goto bad;
    getframe = PySys_GetObject("_getframe");
    if (unlikely(!getframe)) goto bad;
    if (unlikely(PyDict_SetItemString(dict, "_getframe", getframe))) goto bad;
    frame = PyEval_EvalCode(code_object, dict, dict);
    if (unlikely(!frame) || frame == Py_None) goto bad;
    success = 1;
  bad:
    PyErr_Restore(exc_type, exc_value, exc_traceback);
    Py_XDECREF(code_object);
    Py_XDECREF(py_py_line);
    Py_XDECREF(py_funcname);
    Py_XDECREF(dict);
    Py_XDECREF(replace);
    if (success) {
        PyTraceBack_Here(
            (struct _frame*)frame);
    }
    Py_XDECREF(frame);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* FromPyCTupleUtility */
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
static void __Pyx_tuple___pyx_convert__from_py___pyx_ctuple_float__and_float__and_float(PyObject * o, __pyx_ctuple_float__and_float__and_float *result) {
        result->f0 = __pyx_PyFloat_AsFloat(PyTuple_GET_ITEM(o, 0));
        if ((result->f0 == (float)-1) && PyErr_Occurred()) goto bad;
        result->f1 = __pyx_PyFloat_AsFloat(PyTuple_GET_ITEM(o, 1));
        if ((result->f1 == (float)-1) && PyErr_Occurred()) goto bad;
        result->f2 = __pyx_PyFloat_AsFloat(PyTuple_GET_ITEM(o, 2));
        if ((result->f2 == (float)-1) && PyErr_Occurred()) goto bad;
    return;
bad:
    return;
}
static void __Pyx_list___pyx_convert__from_py___pyx_ctuple_float__and_float__and_float(PyObject * o, __pyx_ctuple_float__and_float__and_float *result) {
        result->f0 = __pyx_PyFloat_AsFloat(PyList_GET_ITEM(o, 0));
        if ((result->f0 == (float)-1) && PyErr_Occurred()) goto bad;
        result->f1 = __pyx_PyFloat_AsFloat(PyList_GET_ITEM(o, 1));
        if ((result->f1 == (float)-1) && PyErr_Occurred()) goto bad;
        result->f2 = __pyx_PyFloat_AsFloat(PyList_GET_ITEM(o, 2));
        if ((result->f2 == (float)-1) && PyErr_Occurred()) goto bad;
    return;
bad:
    return;
}
#endif
static void __Pyx_seq___pyx_convert__from_py___pyx_ctuple_float__and_float__and_float(PyObject * o, __pyx_ctuple_float__and_float__and_float *result) {
    if (unlikely(!PySequence_Check(o))) {
        __Pyx_TypeName o_type_name = __Pyx_PyType_GetName(Py_TYPE(o));
        PyErr_Format(PyExc_TypeError,
                     "Expected a sequence of size %zd, got " __Pyx_FMT_TYPENAME, (Py_ssize_t) 3, o_type_name);
        __Pyx_DECREF_TypeName(o_type_name);
        goto bad;
    } else if (unlikely(PySequence_Length(o) != 3)) {
        PyErr_Format(PyExc_TypeError,
                     "Expected a sequence of size %zd, got size %zd", (Py_ssize_t) 3, PySequence_Length(o));
        goto bad;
    }
    {
        PyObject *item;
        item = PySequence_ITEM(o, 0);  if (unlikely(!item)) goto bad;
        result->f0 = __pyx_PyFloat_AsFloat(item);
        Py_DECREF(item);
        if ((result->f0 == (float)-1) && PyErr_Occurred()) goto bad;
        item = PySequence_ITEM(o, 1);  if (unlikely(!item)) goto bad;
        result->f1 = __pyx_PyFloat_AsFloat(item);
        Py_DECREF(item);
        if ((result->f1 == (float)-1) && PyErr_Occurred()) goto bad;
        item = PySequence_ITEM(o, 2);  if (unlikely(!item)) goto bad;
        result->f2 = __pyx_PyFloat_AsFloat(item);
        Py_DECREF(item);
        if ((result->f2 == (float)-1) && PyErr_Occurred()) goto bad;
    }
    return;
bad:
    return;
}
static CYTHON_INLINE __pyx_ctuple_float__and_float__and_float __pyx_convert__from_py___pyx_ctuple_float__and_float__and_float(PyObject * o) {
    __pyx_ctuple_float__and_float__and_float result;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_Check(o) && PyTuple_GET_SIZE(o) == 3)) {
        __Pyx_tuple___pyx_convert__from_py___pyx_ctuple_float__and_float__and_float(o, &result);
    } else if (likely(PyList_Check(o) && PyList_GET_SIZE(o) == 3)) {
        __Pyx_list___pyx_convert__from_py___pyx_ctuple_float__and_float__and_float(o, &result);
    } else
    #endif
    {
        __Pyx_seq___pyx_convert__from_py___pyx_ctuple_float__and_float__and_float(o, &result);
    }
    return result;
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* FromPyCTupleUtility */
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
static void __Pyx_tuple___pyx_convert__from_py___pyx_ctuple_float__and_float(PyObject * o, __pyx_ctuple_float__and_float *result) {
        result->f0 = __pyx_PyFloat_AsFloat(PyTuple_GET_ITEM(o, 0));
        if ((result->f0 == (float)-1) && PyErr_Occurred()) goto bad;
        result->f1 = __pyx_PyFloat_AsFloat(PyTuple_GET_ITEM(o, 1));
        if ((result->f1 == (float)-1) && PyErr_Occurred()) goto bad;
    return;
bad:
    return;
}
static void __Pyx_list___pyx_convert__from_py___pyx_ctuple_float__and_float(PyObject * o, __pyx_ctuple_float__and_float *result) {
        result->f0 = __pyx_PyFloat_AsFloat(PyList_GET_ITEM(o, 0));
        if ((result->f0 == (float)-1) && PyErr_Occurred()) goto bad;
        result->f1 = __pyx_PyFloat_AsFloat(PyList_GET_ITEM(o, 1));
        if ((result->f1 == (float)-1) && PyErr_Occurred()) goto bad;
    return;
bad:
    return;
}
#endif
static void __Pyx_seq___pyx_convert__from_py___pyx_ctuple_float__and_float(PyObject * o, __pyx_ctuple_float__and_float *result) {
    if (unlikely(!PySequence_Check(o))) {
        __Pyx_TypeName o_type_name = __Pyx_PyType_GetName(Py_TYPE(o));
        PyErr_Format(PyExc_TypeError,
                     "Expected a sequence of size %zd, got " __Pyx_FMT_TYPENAME, (Py_ssize_t) 2, o_type_name);
        __Pyx_DECREF_TypeName(o_type_name);
        goto bad;
    } else if (unlikely(PySequence_Length(o) != 2)) {
        PyErr_Format(PyExc_TypeError,
                     "Expected a sequence of size %zd, got size %zd", (Py_ssize_t) 2, PySequence_Length(o));
        goto bad;
    }
    {
        PyObject *item;
        item = PySequence_ITEM(o, 0);  if (unlikely(!item)) goto bad;
        result->f0 = __pyx_PyFloat_AsFloat(item);
        Py_DECREF(item);
        if ((result->f0 == (float)-1) && PyErr_Occurred()) goto bad;
        item = PySequence_ITEM(o, 1);  if (unlikely(!item)) goto bad;
        result->f1 = __pyx_PyFloat_AsFloat(item);
        Py_DECREF(item);
        if ((result->f1 == (float)-1) && PyErr_Occurred()) goto bad;
    }
    return;
bad:
    return;
}
static CYTHON_INLINE __pyx_ctuple_float__and_float __pyx_convert__from_py___pyx_ctuple_float__and_float(PyObject * o) {
    __pyx_ctuple_float__and_float result;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_Check(o) && PyTuple_GET_SIZE(o) == 2)) {
        __Pyx_tuple___pyx_convert__from_py___pyx_ctuple_float__and_float(o, &result);
    } else if (likely(PyList_Check(o) && PyList_GET_SIZE(o) == 2)) {
        __Pyx_list___pyx_convert__from_py___pyx_ctuple_float__and_float(o, &result);
    } else
    #endif
    {
        __Pyx_seq___pyx_convert__from_py___pyx_ctuple_float__and_float(o, &result);
    }
    return result;
}

/* ToPyCTupleUtility */
static PyObject* __pyx_convert__to_py___pyx_ctuple_float__and_float__and_float(__pyx_ctuple_float__and_float__and_float value) {
    PyObject* item = NULL;
    PyObject* result = PyTuple_New(3);
    if (!result) goto bad;
        item = PyFloat_FromDouble(value.f0);
        if (!item) goto bad;
        PyTuple_SET_ITEM(result, 0, item);
        item = PyFloat_FromDouble(value.f1);
        if (!item) goto bad;
        PyTuple_SET_ITEM(result, 1, item);
        item = PyFloat_FromDouble(value.f2);
        if (!item) goto bad;
        PyTuple_SET_ITEM(result, 2, item);
    return result;
bad:
    Py_XDECREF(item);
    Py_XDECREF(result);
    return NULL;
}

/* ToPyCTupleUtility */
static PyObject* __pyx_convert__to_py___pyx_ctuple_float__and_float(__pyx_ctuple_float__and_float value) {
    PyObject* item = NULL;
    PyObject* result = PyTuple_New(2);
    if (!result) goto bad;
        item = PyFloat_FromDouble(value.f0);
        if (!item) goto bad;
        PyTuple_SET_ITEM(result, 0, item);
        item = PyFloat_FromDouble(value.f1);
        if (!item) goto bad;
        PyTuple_SET_ITEM(result, 1, item);
    return result;
bad:
    Py_XDECREF(item);
    Py_XDECREF(result);
    return NULL;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                                return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                                return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                                return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(int) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                                return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                                return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                                return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(int) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (int) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (int) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (int) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (int) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (int) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(int) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((int) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(int) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((int) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((int) 1) << (sizeof(int) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(int));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(long));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(size_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) >= 2 * PyLong_SHIFT)) {
                                return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) >= 3 * PyLong_SHIFT)) {
                                return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) >= 4 * PyLong_SHIFT)) {
                                return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(size_t) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(size_t) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(size_t) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (size_t) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (size_t) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (size_t) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (size_t) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (size_t) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(size_t) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((size_t) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(size_t) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((size_t) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((size_t) 1) << (sizeof(size_t) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* FormatTypeName */
#if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XDECREF(name);
        name = __Pyx_NewRef(__pyx_n_s__92);
    }
    return name;
}
#endif

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                                return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                                return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                                return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(long) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                                return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                                return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                                return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(long) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (long) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (long) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (long) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (long) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (long) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(long) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((long) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(long) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((long) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((long) 1) << (sizeof(long) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_value = exc_info->exc_value;
    exc_info->exc_value = *value;
    if (tmp_value == NULL || tmp_value == Py_None) {
        Py_XDECREF(tmp_value);
        tmp_value = NULL;
        tmp_type = NULL;
        tmp_tb = NULL;
    } else {
        tmp_type = (PyObject*) Py_TYPE(tmp_value);
        Py_INCREF(tmp_type);
        #if CYTHON_COMPILING_IN_CPYTHON
        tmp_tb = ((PyBaseExceptionObject*) tmp_value)->traceback;
        Py_XINCREF(tmp_tb);
        #else
        tmp_tb = PyException_GetTraceback(tmp_value);
        #endif
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
  #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
  #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyObjectCall2Args */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args[3] = {NULL, arg1, arg2};
    return __Pyx_PyObject_FastCall(function, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectCallMethod1 */
#if !(CYTHON_VECTORCALL && __PYX_LIMITED_VERSION_HEX >= 0x030C00A2)
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
#endif
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
#if CYTHON_VECTORCALL && __PYX_LIMITED_VERSION_HEX >= 0x030C00A2
    PyObject *args[2] = {obj, arg};
    (void) __Pyx_PyObject_GetMethod;
    (void) __Pyx_PyObject_CallOneArg;
    (void) __Pyx_PyObject_Call2Args;
    return PyObject_VectorcallMethod(method_name, args, 2 | PY_VECTORCALL_ARGUMENTS_OFFSET, NULL);
#else
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
#endif
}

/* CoroutineBase */
#include <frameobject.h>
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    CYTHON_UNUSED_VAR(__pyx_tstate);
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (likely(__Pyx_IS_TYPE(ev, (PyTypeObject*)PyExc_StopIteration))) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
#if PY_VERSION_HEX >= 0x030B00a4
    Py_CLEAR(exc_state->exc_value);
#else
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
#endif
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(__pyx_CoroutineObject *gen) {
    const char *msg;
    CYTHON_MAYBE_UNUSED_VAR(gen);
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(PyObject *gen) {
    const char *msg;
    CYTHON_MAYBE_UNUSED_VAR(gen);
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(PyObject *gen, PyObject *value, int closing) {
    CYTHON_MAYBE_UNUSED_VAR(gen);
    CYTHON_MAYBE_UNUSED_VAR(closing);
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_value) {
        #if CYTHON_COMPILING_IN_PYPY
        #else
        PyObject *exc_tb;
        #if PY_VERSION_HEX >= 0x030B00a4 && !CYTHON_COMPILING_IN_CPYTHON
        exc_tb = PyException_GetTraceback(exc_state->exc_value);
        #elif PY_VERSION_HEX >= 0x030B00a4
        exc_tb = ((PyBaseExceptionObject*) exc_state->exc_value)->traceback;
        #else
        exc_tb = exc_state->exc_traceback;
        #endif
        if (exc_tb) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
            PyFrameObject *f = tb->tb_frame;
            assert(f->f_back == NULL);
            #if PY_VERSION_HEX >= 0x030B00A1
            f->f_back = PyThreadState_GetFrame(tstate);
            #else
            Py_XINCREF(tstate->frame);
            f->f_back = tstate->frame;
            #endif
            #if PY_VERSION_HEX >= 0x030B00a4 && !CYTHON_COMPILING_IN_CPYTHON
            Py_DECREF(exc_tb);
            #endif
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body(self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
#if CYTHON_COMPILING_IN_PYPY
    CYTHON_UNUSED_VAR(exc_state);
#else
    PyObject *exc_tb;
    #if PY_VERSION_HEX >= 0x030B00a4
    if (!exc_state->exc_value) return;
    exc_tb = PyException_GetTraceback(exc_state->exc_value);
    #else
    exc_tb = exc_state->exc_traceback;
    #endif
    if (likely(exc_tb)) {
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
        #if PY_VERSION_HEX >= 0x030B00a4
        Py_DECREF(exc_tb);
        #endif
    }
#endif
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(PyObject* gen, PyObject *retval) {
    CYTHON_MAYBE_UNUSED_VAR(gen);
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
static CYTHON_INLINE
PyObject *__Pyx_PyGen_Send(PyGenObject *gen, PyObject *arg) {
#if PY_VERSION_HEX <= 0x030A00A1
    return _PyGen_Send(gen, arg);
#else
    PyObject *result;
    if (PyIter_Send((PyObject*)gen, arg ? arg : Py_None, &result) == PYGEN_RETURN) {
        if (PyAsyncGen_CheckExact(gen)) {
            assert(result == Py_None);
            PyErr_SetNone(PyExc_StopAsyncIteration);
        }
        else if (result == Py_None) {
            PyErr_SetNone(PyExc_StopIteration);
        }
        else {
#if PY_VERSION_HEX < 0x030d00A1
            _PyGen_SetStopIterationValue(result);
#else
            if (!PyTuple_Check(result) && !PyExceptionInstance_Check(result)) {
                PyErr_SetObject(PyExc_StopIteration, result);
            } else {
                PyObject *exc = __Pyx_PyObject_CallOneArg(PyExc_StopIteration, result);
                if (likely(exc != NULL)) {
                    PyErr_SetObject(PyExc_StopIteration, exc);
                    Py_DECREF(exc);
                }
            }
#endif
        }
        Py_DECREF(result);
        result = NULL;
    }
    return result;
#endif
}
#endif
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = __Pyx_PyObject_GetIterNextFunc(yf)(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStrNoError(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (unlikely(PyErr_Occurred())) {
                PyErr_WriteUnraisable(yf);
            }
        } else {
            retval = __Pyx_PyObject_CallNoArg(meth);
            Py_DECREF(meth);
            if (unlikely(!retval))
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = __Pyx_PyObject_GetIterNextFunc(yf)(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, PyObject *arg) {
    CYTHON_UNUSED_VAR(arg);
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (unlikely(PyErr_Occurred())) {
                    gen->is_running = 0;
                    return NULL;
                }
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = __Pyx_PyObject_Call(meth, args, NULL);
            } else {
                PyObject *cargs[4] = {NULL, typ, val, tb};
                ret = __Pyx_PyObject_FastCall(meth, cargs+1, 3 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (unlikely(!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb)))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
#if PY_VERSION_HEX >= 0x030B00a4
    Py_VISIT(exc_state->exc_value);
#else
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
#endif
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_frame);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (unlikely(PyObject_CallFinalizerFromDealloc(self)))
#else
        Py_TYPE(gen)->tp_del(self);
        if (unlikely(Py_REFCNT(self) > 0))
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    __Pyx_PyHeapTypeObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    __Pyx_SET_REFCNT(self, 1);
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(Py_REFCNT(self) > 0);
    if (likely(--self->ob_refcnt == 0)) {
        return;
    }
    {
        Py_ssize_t refcnt = Py_REFCNT(self);
        _Py_NewReference(self);
        __Pyx_SET_REFCNT(self, refcnt);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(Py_TYPE(self)) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, void *context)
{
    PyObject *name = self->gi_name;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(self->gi_name, value);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, void *context)
{
    PyObject *name = self->gi_qualname;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(self->gi_qualname, value);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_frame(__pyx_CoroutineObject *self, void *context)
{
    PyObject *frame = self->gi_frame;
    CYTHON_UNUSED_VAR(context);
    if (!frame) {
        if (unlikely(!self->gi_code)) {
            Py_RETURN_NONE;
        }
        frame = (PyObject *) PyFrame_New(
            PyThreadState_Get(),            /*PyThreadState *tstate,*/
            (PyCodeObject*) self->gi_code,  /*PyCodeObject *code,*/
            __pyx_d,                 /*PyObject *globals,*/
            0                               /*PyObject *locals*/
        );
        if (unlikely(!frame))
            return NULL;
        self->gi_frame = frame;
    }
    Py_INCREF(frame);
    return frame;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    #if PY_VERSION_HEX >= 0x030B00a4
    gen->gi_exc_state.exc_value = NULL;
    #else
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
    #endif
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    gen->gi_frame = NULL;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
#ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (unlikely(!module)) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_modulename), 0, 0},
#if CYTHON_USE_TYPE_SPECS
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CoroutineObject, gi_weakreflist), READONLY, 0},
#endif
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {(char *) "gi_frame", (getter)__Pyx_Coroutine_get_frame, NULL,
     (char*) PyDoc_STR("Frame of the generator"), 0},
    {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_GeneratorType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_Coroutine_dealloc},
    {Py_tp_traverse, (void *)__Pyx_Coroutine_traverse},
    {Py_tp_iter, (void *)PyObject_SelfIter},
    {Py_tp_iternext, (void *)__Pyx_Generator_Next},
    {Py_tp_methods, (void *)__pyx_Generator_methods},
    {Py_tp_members, (void *)__pyx_Generator_memberlist},
    {Py_tp_getset, (void *)__pyx_Generator_getsets},
    {Py_tp_getattro, (void *) __Pyx_PyObject_GenericGetAttrNoDict},
#if CYTHON_USE_TP_FINALIZE
    {Py_tp_finalize, (void *)__Pyx_Coroutine_del},
#endif
    {0, 0},
};
static PyType_Spec __pyx_GeneratorType_spec = {
    __PYX_TYPE_MODULE_PREFIX "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    __pyx_GeneratorType_slots
};
#else
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if __PYX_NEED_TP_PRINT_SLOT
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
#endif
static int __pyx_Generator_init(PyObject *module) {
#if CYTHON_USE_TYPE_SPECS
    __pyx_GeneratorType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_GeneratorType_spec, NULL);
#else
    CYTHON_UNUSED_VAR(module);
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
#endif
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
static unsigned long __Pyx_get_runtime_version(void) {
#if __PYX_LIMITED_VERSION_HEX >= 0x030B00A4
    return Py_Version & ~0xFFUL;
#else
    const char* rt_version = Py_GetVersion();
    unsigned long version = 0;
    unsigned long factor = 0x01000000UL;
    unsigned int digit = 0;
    int i = 0;
    while (factor) {
        while ('0' <= rt_version[i] && rt_version[i] <= '9') {
            digit = digit * 10 + (unsigned int) (rt_version[i] - '0');
            ++i;
        }
        version += factor * digit;
        if (rt_version[i] != '.')
            break;
        digit = 0;
        factor >>= 8;
        ++i;
    }
    return version;
#endif
}
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer) {
    const unsigned long MAJOR_MINOR = 0xFFFF0000UL;
    if ((rt_version & MAJOR_MINOR) == (ct_version & MAJOR_MINOR))
        return 0;
    if (likely(allow_newer && (rt_version & MAJOR_MINOR) > (ct_version & MAJOR_MINOR)))
        return 1;
    {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compile time Python version %d.%d "
                      "of module '%.100s' "
                      "%s "
                      "runtime version %d.%d",
                       (int) (ct_version >> 24), (int) ((ct_version >> 16) & 0xFF),
                       __Pyx_MODULE_NAME,
                       (allow_newer) ? "was newer than" : "does not match",
                       (int) (rt_version >> 24), (int) ((rt_version >> 16) & 0xFF)
       );
        return PyErr_WarnEx(NULL, message, 1);
    }
}

/* InitStrings */
#if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}

#include <string.h>
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s) {
    size_t len = strlen(s);
    if (unlikely(len > (size_t) PY_SSIZE_T_MAX)) {
        PyErr_SetString(PyExc_OverflowError, "byte string is too long");
        return -1;
    }
    return (Py_ssize_t) len;
}
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return __Pyx_PyUnicode_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return PyByteArray_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(__Pyx_PyLong_IsCompact(b))) {
        return __Pyx_PyLong_CompactValue(b);
    } else {
      const digit* digits = __Pyx_PyLong_Digits(b);
      const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(b);
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: utility_code_pragmas_end ### */
#ifdef _MSC_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
